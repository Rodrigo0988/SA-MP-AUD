#pragma option -d2
/*

	Gamemode Base : SRP2
	Scripter Base : Adri1
	Programador Actual : DRIGOFK
	Note: Cambio y Modificación de Sistemas nativos nuevos agregos, sistemas y funciones
	Desarrollo Completo:
	Colaborador: -*/
	
//NOTA IMPORTANTE.
/*Dejare comentado la conexión de la base de datos del foro ya que cuando quise usar esta gm le conecte un foro,
pero se que como algunos no usaran uno de momento se lo voy a dejar comentado, por que si algun día quieren poner un foro
ahí les quedara la conexión solo de quitarle lo comentado y adaptarlo con su foro, la conexión fue añadida por mi "Luis" No me roben el credito de esa conexión.
Ya que no la encontraran en otra gm, fue añadido por mi y nadie mas.*/

#include <a_samp>


//MODIFICAR SEGÚN SLOTS DEL SERVIDOR
#undef MAX_PLAYERS
#define MAX_PLAYERS 150
#define DISTANCIA_RECOGIDA 3.0

#include <crashdetect>
#include <YSI-Includes\YSI\y_inline>
#include <YSI-Includes\YSI\y_va>
#include <YSI-Includes\YSI\y_stringhash>
#include <YSI-Includes\YSI\y_timers>
#include <YSI-Includes\YSI\y_vehicledata>
#include <a_mysql>
#include <a_mysql_yinline>
#include <streamer>
#include <sscanf2>
#include <Pawn.CMD>
#include <Pawn.Regex>
#include <Pawn.RakNet>
#include <mobile>
#include <interpolate_weather>
#include <mapandreas>
#define PP_SYNTAX_FOR_LIST
#include <PawnPlus>
#include <discord-connector>
//==================================   CONFIGURACIÓN   ==================================//
/*#define HOST_FORO "193.243.190.152"
#define USER_FORO "macc_smf"
#define SELE_FORO "macc_smf"
#define PASS_FORO "0!99c!zgNaMcwJl^"*/
/*#define HOST_FORO "localhost"
#define USER_FORO "root"
#define SELE_FORO "foro"
#define PASS_FORO ""*/

//DISCORD
static DCC_Channel:dc_channel[6];

/*
STAFF CHANNEL = 0
LOG CHANNEL = 1
NOTICE CREW CHANNEL = 2
SAPD CHANNEL = 3
ANTICHEAT CHANNEL = 4
INFORME JAILS = 5
*/

static DCC_Guild:guildName;
static DCC_Role:adminRole;

#define SERVER_VERSION		"1.0"
#define VERSION_DATE		"01/02/2025"

/* Config */
#define SERVER_NAME			"Knox City"
#define SERVER_SHORT_NAME	"Knox City"
#define SERVER_GAMEMODE		"Knox City RolePlay "SERVER_VERSION""
#define SERVER_LANGUAGE		"Español - Spanish"
#define SERVER_WEBSITE		"link-discord"
#define SERVER_COIN			"Coins"

#define TIEMPO_CONQUISTA	420
#define TIEMPO_BANDA_PROX_CONQUISTA 480
#define TIEMPO_TERRI_PROX_CONQUISTA 1500
#define JUGADORES_TERRI_LIBRE 1
#define JUGADORES_TERRI_CONQUISTADO 5

#define forEx(%0,%1) for(new %1=0;%1<%0;%1++)

#define FERRIS_WHEEL_WAIT_TIME 3000
#define FERRIS_WHEEL_SPEED 0.005
#define MAX_BAD_LOGIN_ATTEMPS 3	// maximos intentos de contraseñas erroneas
#define REP_MULTIPLIER 		3	//12 rep * nivel para subir, si es nivel 1 necesita 12 rep para subir a nivel 2
#define TIME_FOR_REP 		1500000 // 25 minutos para obtener reputacion
#define REP_FOR_PAYDAY 		2	// payday cada 2 reputaciones
#define CMD_LOGGIN 			1 // log de comandos

#define PRIMARY_COLOR 		"11E6E9"
#define SILVER_COLOR 		"d1d1d1"
#define CORRECT_COLOR		"2BA30A"//"00CC00"
#define RED_COLOR 			"FA0505"//"FF3F00"
#define GREEN_COLOR 		"96FF00"
#define DOLAR_COLOR 		"00CC00"
#define BLUE_COLOR 			"005DFF"
#define WHATSAPP_COLOR		"25d366"
#define TWITTER_COLOR		"009CFF"
#define SPOTIFY_COLOR		"1DB954"
#define MENSAJE_COLOR		"FCE679"
#define LIMA_COLOR			"00FF00"

/* LIMITES JUGADOR */
// Normal User
#define MAX_NU_VEHICLES		2
#define MAX_NU_PROPERTIES   1
#define MAX_NU_WORKS		1
#define MAX_NU_TOYS		 	3
#define MAX_NU_VOBJECTS	 	6
#define MAX_NU_PROPERTY_OBJECTS 25
#define MAX_NU_KITS_MECANICO 	2

// VIP1
#define MAX_SU_VEHICLES		3
#define MAX_SU_PROPERTIES	2
#define MAX_SU_WORKS		2
#define MAX_SU_TOYS			5
#define MAX_SU_VOBJECTS		10
#define MAX_SU_PROPERTY_OBJECTS 60
#define MAX_SU_KITS_MECANICO 3

// VIP2
#define MAX_SU2_VEHICLES	6
#define MAX_SU2_WORKS		3
#define MAX_SU2_PROPERTIES	3
#define MAX_SU2_TOYS		7
#define MAX_SU2_VOBJECTS	16
#define MAX_SU2_PROPERTY_OBJECTS 120
#define MAX_SU2_KITS_MECANICO 4

//SECURE LOGIN
#define SECURE_LOGIN_TIME 180000 //3 min en logear o kick
#define     Conecction          handle_db

//MACROS
#define		segundos(%0) 		(1000 * %0)
//Foro
//new MySQL:db_foro;
//new MySQL:handle_db;
////Chat de Voz.
//new SV_GSTREAM:gstream = SV_NULL;
//new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };
//////////////////////////////////////////////////////////
// (Player Textdraws velocimetro)
//new PlayerText:textPlayerVelocimetro1[4][MAX_PLAYERS];

new /* Valores por defecto si no se puede cargar de ECO.txt */
	Float:MULTIPLIER_PROPERITES =	1.00,
	Float:MULTIPLIER_VEHICLES 	=	1.00,
	Float:MULTIPLIER_TOYS		=	1.00,
	Float:MULTIPLIER_SKINS		=	1.00,
	Float:MULTIPLIER_WEAPONS	=	1.00,
	SU_SD_PRICE					=	10,
	SU_SD_PRICE2				=	20,
	SU_WORK_EXTRA_PAY			=	300,
	CHANGE_NAME_SD_PRICE		=	10;

// Buffer format MySQL Querys

new QUERY_BUFFER[4096];

new
	bool:server_loaded,
	MySQL:mysql_db,

	Float:New_User_Pos[4] = {1773.307250, -1896.441040, 13.551166, 270.0},
	Areas_Mecanico[1],
	Lumberjack_Area,
	Harvest_Area,
	Jail_Areas[4],
	ComandoEstado = 1,
	TiempoReinicio = -1;

//====EMPRESA====
new QueryIDEmpresa = 0;
new QueryIDEmpleado[MAX_PLAYERS];

// Función para cargar empresa
stock CargarEmpresa()
{
    new query[128];
    format(query, sizeof(query), "SELECT materiales, productos, jefe_id FROM empresa WHERE id = %d", EmpresaID);
    QueryIDEmpresa = a_mysql_query(mysql_db, query);
}

// Función para cargar empleado
stock CargarEmpleado(playerid)
{
    new query[128];
    format(query, sizeof(query), "SELECT empresa_id, rango FROM empresa_empleados WHERE player_id = %d", g_PlayerSQLID[playerid]);
    QueryIDEmpleado[playerid] = a_mysql_query(mysql_db, query);
}

// Callback único que recibe todas las respuestas de consultas
public OnAMySQLReceive(queryid, numfields, numrows, bool:success)
{
    if(!success) return 0;

    if(queryid == QueryIDEmpresa && numrows > 0)
    {
        EmpresaMateriales = a_mysql_get_field_int(queryid, 0, 0);
        EmpresaProductos = a_mysql_get_field_int(queryid, 0, 1);
        // puedes guardar jefe_id si quieres: a_mysql_get_field_int(queryid, 0, 2);
    }

    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(queryid == QueryIDEmpleado[i])
        {
            if(numrows > 0)
            {
                g_PlayerEmpresa[i] = a_mysql_get_field_int(queryid, 0, 0);
                g_PlayerRango[i] = a_mysql_get_field_int(queryid, 0, 1);
            }
            else
            {
                g_PlayerEmpresa[i] = 0;
                g_PlayerRango[i] = 0;
            }
            break;
        }
    }
    return 1;
}

// Guardar empresa
stock GuardarEmpresa()
{
    new query[256];
    format(query, sizeof(query), "UPDATE empresa SET materiales = %d, productos = %d WHERE id = %d",
        EmpresaMateriales, EmpresaProductos, EmpresaID);
    a_mysql_query(mysql_db, query);
}
/////////////////

new 
	ruedas_VIP_Component[] = {
		1074, 
		1075, 
		1076, 
		1077, 
		1078, 
		1079, 
		1080, 
		1081, 
		1082, 
		1083, 
		1084, 
		1085, 
		1096, 
		1097, 
		1098
	},
	nitro_VIP_Component[] = {
		0,
		1008,
		1009,
		1010
	};

new ListAcentos[][] =
{
	{"Sin acento"},
	{"Aleman"},
	{"Argentino"},
	{"Boliviano"},
	{"Britanico"},
	{"Canadiense"},
	{"Chileno"},
	{"Chino"},
	{"Colombiano"},
	{"Coreano"},
	{"Cubano"},
	{"Dominicano"},
	{"Escocés"},
	{"Español"},
	{"Estadounidense"},
	{"Francés"},
	{"Hondureño"},
	{"Irlandés"},
	{"Israelí"},
	{"Italiano"},
	{"Japones"},
	{"Mexicano"},
	{"Peruano"},
	{"Ruso"},
	{"Uruguayo"},
	{"Venezolano"},
	{"Filipino"},
	{"Griego"},
	{"Noruego"},
	{"Portugués"},
	{"Polaco"},
	{"Turco"}
};

//===Anuncios Radios===
#define MAX_ANNOUNCEMENTS 5
new const g_Announcements[MAX_ANNOUNCEMENTS][212] =
{
    "{5AC994}[KNOX.FM] {FFFFFF}Escucha Radio {E00000}|Heavy Metal.FM - KCR| {FFFFFF}para disfrutar la mejor música ¡¡¡OH YEAH!!!",
    "{5AC994}[KNOX.FM] {FFFFFF}Próximamente {E0A943}|Knox Deportes.FM| {FFFFFF}Noticias sobre los deportes más populares.",
    "{5AC994}[KNOX.FM] {FFFFFF}Sintoniza Radio {E00000}|Regueton.FM - KCR| {FFFFFF}para mover ese ¡body!.",
    "{5AC994}[KNOX.FM] {FFFFFF}Sin un trabajo estable? Bueno ya no más!!! Muy pronto llegará una empresa dedicada a la fabricación de objetos electrónicos más famosas a Knox.",
    "{5AC994}[KNOX.FM] {ffffff}Ya sabía que en KnoxSF se esta construyendo un estadio de FUTBOL?! Así es, de FUTBOL y junto a eso dos equipos locales. Entrena y come bien si deseas ser parte de uno de esos equipos."
};
//======================

//===SECCION--EMISORAS===
enum enum_ListEmisoras
{
	emisora_NAME[24],
	emisora_URL[460],
}

new ListEmisoras[][enum_ListEmisoras] =
{
	{"", ""},
	{"Regueton.FM - KCR", "https://reggaeton-fm.stream.laut.fm/reggaeton-fm"},
	{"LS-HipHop.FM - KCR", "http://108.61.30.179:4010"},
	{"Heavy Metal.FM - KCR", "https://radiorock.stream.laut.fm/radiorock?ref=radiode&t302=2022-01-16_23-09-00&uuid=3545d99d-0cd2-43bd-bc0b-49b13057de34"},
	{"SF-HipHop.FM - KCR", "https://stream.bigfm.de/ushiphop/mp3-128/radiode/"},
	{"Pop Techno.FM - KCR ", "https://frequence3.net-radio.fr/frequence3urban-128.mp3"},
	{"TrapLS.FM - KCR", "https://live.powerhitz.com/hot108?esPlayer&cb=793631.mp3"},
	{"TrapLV.FM - KCR", "https://stream.zeno.fm/t07tywqg60puv?cto-uid=7a86b761-9aab-49b2-85a3-c11fce0f267b-660a2044-4252&an-uid=3056505058013940681&dot-uid=0bda220400cb8d6628ec8526&triton-uid=cookie%3Acae57e08-6388-4248-91eb-d6b5fe4d80d6&amb-uid=4522288746411636021&dbm-uid=CAESEFCd4fAZkCiWiwb84y6s5j8&dyn-uid=437352328580249149&ttd-uid=095dbc15-94d8-4aea-8efe-34ac6e964ccc&adtonosListenerId=01JAGWKY4QH4WF6A6SHANASAT1&aw_0_req_lsid=0714c91993e1f9476eec0729462a420e"}
};
//=========================

//===ALERTAS-AUTOMATICAS===
new AleaAutoMsn[][] =
{
	{"»{FFFFFF}¡Hey! ¿Todavía no estás en nuestro grupo de {5865F2}discord{FFFFFF}? Usa {5865F2}/discord {FFFFFF}para recibir la invitación."},
	{"»{FFFFFF}¿Algun bug?, repórtalo vía {5865F2}discord{FFFFFF}."},
	{"»{FFFFFF}¿Quieres ver nuestras actualizaciones?, usa {A0DE73}/novedades"},
	{"»{FFFFFF}¡Recuerda que tenemos un sistema de Cleos! {A0DE73}/panel"},
	{"»{FFFFFF}¡Prueba el sistema de {A0DE73}/estado{FFFFFF}!"},
	{"»{FFFFFF}¡Escucha alguna de las nuevas emisoras! {A0DE73}/emisoras{FFFFFF}"}
};
//==========================

new NombreServidor[][] =
{
	{"hostname « [ES]  "SERVER_NAME" | ¡Sistema Unicos! »"},
	{"hostname « [ES]  "SERVER_NAME" | Sistema de Tuning »"},
	{"hostname « [ES]  "SERVER_NAME" | Hazte con la city »"},
	{"hostname « [ES]  "SERVER_NAME" | Rol en español »"},
	{"hostname « [ES]  "SERVER_NAME" | Facciones Libres (temporal) »"},
	{"hostname « [ES]  "SERVER_NAME" | Job Trailero »"},
	{"hostname « [ES]  "SERVER_NAME" | Sistema de recoger a jugadores (beta)»"},
	{"hostname « [ES]  "SERVER_NAME" | Sistema TV's (beta) »"},
	{"hostname « [ES]  "SERVER_NAME" | Sistema Camara de seguridad (beta) »"},
	{"hostname « [ES]  "SERVER_NAME" | Sistema de muebles para casas »"},
	{"hostname « [ES]  "SERVER_NAME" | ¡Pandillas/Conquista!"}
};

//====Puntos-de-AutoEscuela====
new Float:Driving_School_Points[][] =
{
	{1756.8947, -1691.8781, 13.3459},
	{1753.5110, -1605.2365, 13.2564},
	{1822.8568, -1613.3789, 13.2577},
	{1852.1459, -1466.5184, 13.2731},
	{1986.6862, -1465.7550, 13.2655},
	{2114.9607, -1465.6411, 23.7026},
	{2117.2952, -1386.5930, 23.7031},
	{2210.2625, -1387.8507, 23.7001},
	{2209.9346, -1518.2937, 23.7030},
	{2199.2976, -1625.7675, 15.6628},
	{2178.8601, -1749.8230, 13.2499},
	{2090.2754, -1751.3428, 13.2796},
	{2079.2188, -1811.4154, 13.2574},
	{2078.5146, -1930.0409, 13.2246},
	{1965.4397, -1930.3696, 13.2578},
	{1824.3627, -1925.9543, 13.2574},
	{1819.4944, -1829.3333, 13.2890},
	{1692.2286, -1812.1992, 13.2656},
	{1691.9550, -1735.9572, 13.2641},
	{1690.1235, -1665.6385, 13.2577},
	{1691.6803, -1594.8293, 13.2562},
	{1748.0944, -1605.4038, 13.2580},
	{1745.0964, -1691.1561, 13.3381},
	{1800.4082, -1692.4607, 13.3964}
};
//==============================

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

/* Colores */
#define COLOR_PRINCIPAL	0xFF00CFFF
#define COLOR_POLICE	0x3399FFFF
#define COLOR_DOLAR	 	0x85BB65FF
#define	COLOR_WHITE	 	0xFFFFFF00
#define COLOR_HABLAR1 	0xE6E6E6E6
#define COLOR_HABLAR2 	0xC8C8C8C8
#define COLOR_HABLAR3 	0xAAAAAAAA
#define COLOR_HABLAR4 	0x8C8C8C8C
#define COLOR_HABLAR5 	0x6E6E6E6E
#define PLAYER_COLOR	0xFFFFFF00
#define SPECIAL_ACTION_PISSING 68



main()
{
	print("--- > "SERVER_NAME" < --- ");

	dc_channel[0] = DCC_FindChannelById("807382576175120394");
	dc_channel[1] = DCC_FindChannelById("940702627925225472");
	dc_channel[2] = DCC_FindChannelById("792164058862059530");
	dc_channel[3] = DCC_FindChannelById("882026484926128229");
	dc_channel[4] = DCC_FindChannelById("949535473586569237");
	dc_channel[5] = DCC_FindChannelById("834598538478092339");

	guildName = DCC_FindGuildById("764890103705239553");
	adminRole = DCC_FindRoleById("764893531415380039");
}

/* Variables */
new TimerLuces[MAX_VEHICLES], TimerLuces2[MAX_VEHICLES];
new InfoTextShowing[MAX_PLAYERS];

new Float:gFerrisCageOffsets[10][3]={{0.0699,0.0600,-11.7500},{-6.9100,-0.0899,-9.5000},{11.1600,0.0000,-3.6300},{-11.1600,-0.0399,3.6499},{-6.9100,-0.0899,9.4799},{0.0699,0.0600,11.7500},{6.9599,0.0100,-9.5000},{-11.1600,-0.0399,-3.6300},{11.1600,0.0000,3.6499},{7.0399,-0.0200,9.3600}},
	FerrisWheelObjects[12],
	Float:FerrisWheelAngle=0.0,
	FerrisWheelAlternate=0;

/*new
	INTRO_3[3],
	INTRO_2[6],
	INTRO_1[4];*/

#define NEARS_PLAYERS_DISTANCE 4.0
enum
{
	NEAR_PLAYERS_INV_GENERAL,
	NEAR_PLAYERS_POCKET_GIVE,
	NEAR_PLAYERS_POCKET_SELL,
	NEAR_PLAYERS_WEAPON_GIVE,
	NEAR_PLAYERS_WEAPON_SELL
};
forward OnNearPlayerSelected(playerid, to_player, id);
forward OnPriceSelected(playerid, price, id);
forward OnAmountSelected(playerid, amount, id);
forward OnPlayerEnterInterior(playerid, index);
forward OnPlayerExitInterior(playerid, index);

enum _:E_DroppedWeapons
{
	dw_WEAPONID,
	dw_AMMO,
	dw_OBJECTID,
	Text3D:dw_LABELID,
	dw_WORLD,
	dw_INTERIOR,
	Float:dw_X,
	Float:dw_Y,
	Float:dw_Z
};
new List:DroppedWeapons;

enum
{
	CHEAT_WEAPON,
	CHEAT_AMMO,
	CHEAT_CAR_MOD,
	CHEAT_VEHICLE_SPEED_HACK,
	CHEAT_POS,
	CHEAT_TEXT_SPAMMER,
	CHEAT_COMMAND_SPAMMER,
	CHEAT_DEATH_SPAMMER,
	CHEAT_STATE_SPAMMER,
	CHEAT_VEHICLE_ENTER_SPAMMER,
	CHEAT_JETPACK,
	CHEAT_PLAYER_SPEED,
	CHEAT_PLAYER_HEALTH,
	CHEAT_PLAYER_ARMOUR,
	CHEAT_VEHICLE_HEALTH,
	CHEAT_PLAYER_VEHICLE_WORK, //Entra a un vehiculo que no es de su trabajo
	CHEAT_PLAYER_VEHICLE_DOORS,
	CHEAT_VEHICLE_NOFUEL,
	CHEAT_SPECTATE,
	CHEAT_UNDETECTED_WEAPON,
	CHEAT_DRIVE_BY,
	CHEAT_UNOCCUPIED_VEHICLE_TP,
	CHEAT_HIGH_POS,
	CHEAT_CAR_JACKING,
	CHEAT_FAKE_TRAILER_SYNC,
	CHEAT_DESTROY_VEHICLE,
	CHEAT_CBUG,
	CHEAT_AFKPOS
}

new Float:TEST_SPEED_PLAYER = 60.0;

enum e_ac_Info
{
	ac_Name[24],
	bool:ac_Enabled,
	bool:ac_Kick, // 1 = kickea, 0 = avisa a admins
	ac_Detections, //enviar aviso cuando llege a este num en los seg de abajo
	ac_Interval,
}
new ac_Info[][e_ac_Info] = /* Valores por defecto si no se carga de AC.txt */
{
	//Cheats
	{"armas",					true, false,	1, 0},//0
	{"municion",				true, false,	1, 0},//1
	{"mod car",					true, true,		1, 0},//2
	{"vehicle speed",			true, true,		1, 0},//3
	{"pos",						true, false,	3, 10},//4
	{"text spammer",			true, true,		10, 5},//5
	{"command spammer",			true, true,		5, 5},//6
	{"death spammer",			true, false,	1, 0},//7
	{"state change spammer",	true, false,	1, 0},//8
	{"vehicle enter spammer",	true, false,	1, 0},//9
	{"jetpack",					true, true,		1, 0},//10
	{"player speed",			true, true,		1, 0},//11
	{"player health",			true, true,		1, 0},//12
	{"player armour",			true, true,		1, 0},//13
	{"vehicle health",			true, true,		1, 0},//14
	{"pwork != vwork",			true, true,		1, 0},//15
	{"enter closed vehicle",	true, false,	1, 0},//16
	{"vehicle nofuel cs",		true, false,	50, 10},//17
	{"player spectate",			true, false,	1, 0},//18
	{"pweapon != sweapon",		true, false,	1, 0},//19
	{"drive by",				true, false,	1, 0},//20
	{"unoccupied veh tp",		true, true,		1, 0},//21
	{"high pos",				true, true,		1, 0},//22
	{"car jacking",				true, true,		1, 0},//23
	{"fake trailer sync",		true, true,		1, 0},//24
	{"destroy vehicle",			true, false,	1, 0},//25
	{"cbug",					true, false,	1, 0},//26
	{"afk pos",					true, true,		1, 0}//27
};

/*enum enum_Foro
{
	Users
};
new Foro_Info[enum_Foro];*/

enum e_PLAYER_AC_INFO
{
	p_ac_info_DETECTIONS,
	p_ac_info_LAST_DETECTION,
	p_ac_info_IMMUNITY, //gettime + seconds
}
new PLAYER_AC_INFO[MAX_PLAYERS][sizeof(ac_Info)][e_PLAYER_AC_INFO];

enum
{
	TYPE_LEGAL,
	TYPE_ILLEGAL,
}

enum
{
	DIALOG_REGISTER,
	DIALOG_REGISTER_EMAIL,
	DIALOG_LOGIN,
	DIALOG_INFO,
	DIALOG_CLOTHES,
	DIALOG_FOOD_PIZZA,
	DIALOG_FOOD_CLUCKIN,
	DIALOG_FOOD_BURGER,
	DIALOG_PLAYER_TOYS,
	DIALOG_PLAYER_TOY_MENU,
	DIALOG_PLAYER_TOY_EDIT_NAME,
	DIALOG_PLAYER_TOY_CONFIRMDELETE,
	DIALOG_PLAYER_TOY_EDIT_BONE,
	DIALOG_PLAYER_TOY_SELECT_BONE,
	DIALOG_PLAYER_TOY_COLOR_1,
	DIALOG_PLAYER_TOY_COLOR_2,
	DIALOG_PLAYER_TOY_DELETE_ALL,
	DIALOG_BANK,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_TRANSFER,
	DIALOG_BANK_TRANSFER_SEND,
	DIALOG_BANK_TRANSACTIONS,
	DIALOG_CREATE_BANK_ACCOUNT,
	DIALOG_247_LIST,
	DIALOG_FARMACIA,
	DIALOG_PLAYER_POCKET,
	DIALOG_PLAYER_POCKET_OPTIONS,
	DIALOG_PLAYER_POCKET_DELETE_ALL,
	DIALOG_PHONE,
	DIALOG_PHONE_BOOK,
	DIALOG_PHONE_BOOK_ADD_NUMBER,
	DIALOG_PHONE_BOOK_ADD_NAME,
	DIALOG_PHONE_BOOK_OPTIONS,
	DIALOG_PHONE_BOOK_CHANGE_NAME,
	DIALOG_PHONE_BOOK_CONFIRM_DELET,
	DIALOG_PHONE_BOOK_DELETE_ALL,
	DIALOG_PHONE_CALL_NUMBER,
	DIALOG_PHONE_SMS_NUMBER,
	DIALOG_PHONE_SMS_MESSAGE,
	DIALOG_PHONE_BOOK_SEND_MESSAGE,
	DIALOG_PHONE_SENT_MESSAGES,
	DIALOG_PHONE_RECEIVED_MESSAGES,
	DIALOG_CONFIRM_BUY_PROPERTY,
	DIALOG_PLAYER_GPS,
	DIALOG_PLAYER_GPS_PLAYER,
	DIALOG_PLAYER_GPS_PLAYER_ADD,
	DIALOG_PLAYER_GPS_PLAYER_OPTION,
	DIALOG_PLAYER_GPS_CHANGE_NAME,
	DIALOG_PLAYER_GPS_CONFIRM_DELET,
	DIALOG_PLAYER_GPS_SITES,
	DIALOG_PLAYER_GPS_WORKS,
	DIALOG_PLAYER_GPS_DELETE_ALL,
	DIALOG_PLAYER_GPS_SITE_0,
	DIALOG_PLAYER_GPS_SITE_1,
	DIALOG_PLAYER_GPS_SITE_2,
	DIALOG_PLAYER_GPS_SITE_3,
	DIALOG_PLAYER_GPS_SITE_4,
	DIALOG_PLAYER_GPS_SITE_5,
	DIALOG_PLAYER_GPS_SITE_6,
	DIALOG_PLAYER_GPS_SITE_7,
	DIALOG_PLAYER_GPS_SITE_8,
	DIALOG_PLAYER_GPS_PROPERTIES,
	DIALOG_PLAYER_GPS_VEHICLES,
	DIALOG_PROPERTY_OPTIONS,
	DIALOG_PROPERTY_NAME,
	DIALOG_PROPERTY_BANK_SELL,
	DIALOG_PLAYER_MP3,
	DIALOG_BUY_VEHICLE,
	DIALOG_NOTARY,
	DIALOG_NOTARY_SELECT_PROPERTY,
	DIALOG_PROPERTY_SELL_PRICE,
	DIALOG_PROPERTY_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_PROPERTY,
	DIALOG_NOTARY_SELECT_VEHICLE,
	DIALOG_VEHICLE_BANK_SELL,
	DIALOG_VEHICLE_SELL_PRICE,
	DIALOG_VEHICLE_SELL_TO_PLAYER,
	DIALOG_SELL_CONFIRM_VEHICLE,
	DIALOG_SELECT_TRUCK_TYPE,
	DIALOG_TUNING_MENU_PART,
	DIALOG_TUNING_MENU_COMPONENT,
	DIALOG_MECANICO_MENU,
	DIALOG_MECANICO_REPAIR_PRICE,
	DIALOG_MECANICO_COLOR_PRICE,
	DIALOG_MECANICO_TUNING_PRICE,
	DIALOG_MECANICO_PAINTJOB_PRICE,
	DIALOG_MECANICO_REM_COM_PRICE,
	DIALOG_MECANICO_ACCEPT,
	DIALOG_MECANICO_SELECT_COL_SLOT,
	DIALOG_MECANICO_SELECT_COLOR,
	DIALOG_MECANICO_REMOVE_COMPONEN,
	DIALOG_TUNING_PAINTJOB,
	DIALOG_SEED_LIST,
	DIALOG_SEED_BUY,
	DIALOG_PLANT_PLANTS,
	DIALOG_BLACK_MARKET,
	DIALOG_BLACK_MARKET_WEAPONS,
	DIALOG_BLACK_MARKET_SELECT_WEA,
	DIALOG_BLACK_MARKET_AMMO,
	DIALOG_PLAYER_WEAPONS,
	DIALOG_PLAYER_WEAPONS_OPTIONS,
	DIALOG_PLAYER_WEAPONS_DELETE_A,
	DIALOG_PLAYER_WEAPONS_DELETE,
	DIALOG_ANIMS,
	DIALOG_TRICKS_FOOD,
	DIALOG_TRICKS_MEDICINE,
	DIALOG_TRICKS_CANNABIS,
	DIALOG_TRICKS_CRACK,
	DIALOG_TRICKS_SU,
	DIALOG_TRICKS_WEAPON,
	DIALOG_VEHICLE_BOOT,
	DIALOG_VEHICLE_BOOT_DELETE_ALL,
	DIALOG_VEHICLE_BOOT_OPTIONS,
	DIALOG_VEHICLE_BOOT_DELETE,
	DIALOG_SELECT_WORK_SKIN,
	DIALOG_WORK_RADIOS,
	DIALOG_PLAYERS_WORK_LIST,
	DIALOG_WORK_RANK_MODIFY,
	DIALOG_WORK_WEAPON_SHOP,
	DIALOG_WORK_SELECT_WEAPON,
	DIALOG_WORK_AMMO,
	DIALOG_WORK_ARMOUR,
	DIALOG_WORK_WEAPONS,
	DIALOG_HELP,
	DIALOG_HELP_GENERAL,
	DIALOG_HELP_INFO,
	DIALOG_HELP_CHARACTER,
	DIALOG_HELP_PROPERTIES,
	DIALOG_HELP_REPORT,
	DIALOG_HELP_VEHICLES,
	DIALOG_HELP_WORKS,
	DIALOG_HELP_CREWS,
	DIALOG_HELP_VIPS,
	DIALOG_HELP_SU,
	DIALOG_HELP_SU2,
	DIALOG_ADMIN_LIST,
	DIALOG_ADMIN_MODIFY,
	DIALOG_CHANGE_PASSWORD,
	DIALOG_CHANGE_PASSWORD_PASS,
	DIALOG_ANTI_CHEAT,
	DIALOG_ANTI_CHEAT_MODIFY,
	DIALOG_ANTI_CHEAT_MODIFY_DETECT,
	DIALOG_SHOP_ARTICLE_MODIFY,
	DIALOG_SHOP_ARTICLE_REMOVE,
	DIALOG_SHOP_ADD,
	DIALOG_SHOP_ADD_TEXT,
	DIALOG_SHOP_ADD_PRICE,
	DIALOG_CRANE_SELECT_VEHICLE,
	DIALOG_CREATE_CREW,
	DIALOG_CREATE_CREW_NAME,
	DIALOG_CREATE_CREW_COLOR,
	DIALOG_CREATE_CREW_CONFIRM,
	DIALOG_CREW_MENU,
	DIALOG_CREW_MEMBER_LIST,
	DIALOG_CREW_CHANGE_NAME,
	DIALOG_CREW_MEMBER_LIST_DELETE,
	DIALOG_CREW_CAST_MEMBER_CONFIRM,
	DIALOG_CREW_INVITE_RANK,
	DIALOG_CREW_INVITE_ACCEPT,
	DIALOG_CREW_RANKS,
	DIALOG_CREW_RANK_MODIFY,
	DIALOG_CREW_RANK_MODIFY_NAME,
	DIALOG_CREW_RANK_MODIFY_PERMISS,
	DIALOG_CREW_RANK_DELETE,
	DIALOG_CREW_RANK_DELETE_CONFIRM,
	DIALOG_CREW_RANK_CREATE,
	DIALOG_CREW_MODIFY_COLOR,
	DIALOG_CREW_DELETE,
	DIALOG_CREW_LEAVE,
	DIALOG_CREW_MODIFY_MEMBERS,
	DIALOG_CREW_MODIFY_MEMBER,
	DIALOG_CREW_PROPERTY_CONFIRM,
	DIALOG_CREW_LEAVE_TERRITORY,
	DIALOG_CREW_LEAVE_PROPERTY,
	DIALOG_POLICE_PENALTY,
	DIALOG_SERVER_ECO,
	DIALOG_SERVER_ECO_MODIFY,
	DIALOG_SU_BUY,
	DIALOG_SU_BUY2,
	DIALOG_SU,
	DIALOG_SU2,
	DIALOG_VIPS,
	DIALOG_VOBJECT_MENU,
	DIALOG_VOBJECT_OBJECTS,
	DIALOG_VOBJECT_OBJECT,
	DIALOG_VOBJECT_OBJECT_CNAME,
	DIALOG_VOBJECT_OBJECT_COLORS,
	DIALOG_VOBJECT_OBJECT_COLOR,
	DIALOG_VOBJECT_OBJECT_COLOR_HEX,
	DIALOG_VOBJECT_OBJECT_CDELETE,
	DIALOG_VOBJECT_DELETE_ALL,
	DIALOG_VOBJECT_TEXT_MENU,
	DIALOG_VOBJECT_TEXT_TEXT,
	DIALOG_VOBJECT_TEXT_FONT,
	DIALOG_VOBJECT_TEXT_FONT_SIZE,
	DIALOG_VOBJECT_TEXT_FONT_COLOR,
	DIALOG_VOBJECT_COUNTRY,
	DIALOG_PLAYER_CONFIG,
	DIALOG_WORKS_TELEPORTS,
	DIALOG_POLICE_BYC,
	DIALOG_POLICE_BYC_LAST_ALL,
	DIALOG_POLICE_BYC_NAME_FIND,
	DIALOG_POLICE_DELETE_BYC,
	DIALOG_POLICE_BYC_LAST_PLAYER,
	DIALOG_CHANGE_NAME,
	DIALOG_CHANGE_NAME_NAME,
	DIALOG_CHANGE_EMAIL,
	DIALOG_CHANGE_EMAIL_EMAIL,
	DIALOG_PROPERTY_CLOSET,
	DIALOG_PROPERTY_CLOSET_DLT_ALL,
	DIALOG_PROPERTY_CLOSET_OPTIONS,
	DIALOG_PROPERTY_CLOSET_DELETE,
	DIALOG_INV_ACTIONS,
	DIALOG_NEARS_PLAYERS,
	DIALOG_NEARS_PLAYERS_PRICE,
	DIALOG_NEARS_PLAYERS_AMOUNT,
	DIALOG_HOTDOG,
	DIALOG_FSHOP_SELECT_PROPERTY,
	DIALOG_PROPERTY_OBJECTS_MENU,
	DIALOG_POBJECTS_DELETE_ALL,
	DIALOG_POBJECT_EDIT,
	DIALOG_POBJECT_TEXTURE_INDEX,
	DIALOG_POBJECT_TEXTURE,
	DIALOG_PLANE_OPTIONS,
	DIALOG_PLANE_SELECT_COLOR,
	DIALOG_BOAT_OPTIONS,
	DIALOG_BOAT_SELECT_COLOR,
	DIALOG_GRAFFITI_OPTIONS,
	DIALOG_GRAFFITI_EDIT,
	DIALOG_GRAFFITI_TEXT_OPTIONS,
	DIALOG_GRAFFITI_ETEXT_TEXT,
	DIALOG_GRAFFITI_ETEXT_FONT,
	DIALOG_GRAFFITI_ETEXT_SIZE,
	DIALOG_GRAFFITI_ETEXT_COLOR,
	DIALOG_BANDAS,
	DIALOG_CLEOS,
	DIALOG_ACENTOS,
	DIALOG_PLAYER_COLOR,
	DIALOG_SMS,
	DIALOG_TWITTER,
	DIALOG_BBVA,
	DIALOG_PLAYER_RENUNCIO
}

enum
{
	ROLEPLAY_STATE_NORMAL,
	ROLEPLAY_STATE_HOSPITAL,
	ROLEPLAY_STATE_INTERIOR,
	ROLEPLAY_STATE_INTERIOR1,
	ROLEPLAY_STATE_OWN_PROPERTY,
	ROLEPLAY_STATE_GUEST_PROPERTY,
	ROLEPLAY_STATE_ARRESTED,
	ROLEPLAY_STATE_JAIL,
	ROLEPLAY_STATE_CRACK,
}

enum
{
	GAME_STATE_NONE,
	GAME_STATE_CONNECTED,
	//GAME_STATE_OCCUPIED,
	GAME_STATE_DEAD, // Pantalla de la muerte solo (wasted)
	GAME_STATE_NORMAL,
}

#define MAX_TIMERS_PER_PLAYER 20

/*Timers
	0 = Kick
	1 = Añadir reputacion
	2 = un/freeze player
	3 = recuperar vida
	4 = restart hambre sed
	5 = esperando llamada
	6 = esperar arrancar veh
	7 = cargando camion
	8 = reciclando
	9 = talando
	10 = plantando
	11 = gps mapa
	12 = esposar
	13 = jail time
	14 = health down
	15 = msg td
	16 = anti cbug
	17 = secuestro
	18 = damage
	19 = slap*/



/* TUNING SYSTEM */
#define TOTAL_TUNING_PARTS	14
#define MAX_TUNING_PARTS_COMPONENTS	20
enum PLAYER_TUNING_MENU_Info
{
	tuning_menu_NAME[24], // o part
	tuning_menu_ID,
	tuning_menu_PIECES,
}
new PLAYER_TUNING_MENU[MAX_PLAYERS][MAX_TUNING_PARTS_COMPONENTS][PLAYER_TUNING_MENU_Info];

/* GLOBAL_VEHICLES */
#define MAX_VEHICLE_COMPONENTS	14
#define MIN_VEHICLE_HEALTH		350.0
forward Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
forward Float:GetVehicleSpeed(vehicleid);
forward Float:GetVehicleAirSpeed(vehicleid);
forward Float:frandom(Float:max, Float:min, dp);
forward Float:CompressRotation(Float:rotation);

new VEHICLE_COLORS[256] = //SA-MP Wiki
{
	// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	// SA-MP extended colours (0.3x)
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

new Float:HARVEST_CHECKPOINTS[][] =
{
	{-328.332305, -1546.391357, 16.15409},
	{-250.803207, -1553.425415, 4.534295},
	{-224.260910, -1485.022827, 8.041003},
	{-308.437896, -1476.776977, 11.40934},
	{-283.487731, -1553.320068, 7.445997},
	{-258.756164, -1426.692993, 9.493670},
	{-178.887649, -1406.682250, 3.996473},
	{-177.676818, -1322.970581, 6.885325},
	{-305.899322, -1318.196533, 10.12089},
	{-325.471008, -1412.821777, 15.12606},
	{-191.962982, -1384.020019, 6.075732},
	{-214.637603, -1321.270507, 10.79362},
	{-263.975738, -1375.987426, 11.41642},
	{-308.705474, -1424.302001, 15.52844},
	{-287.710388, -1497.158325, 8.503927},
	{-387.908111, -1532.118774, 23.47214}
};

new Float:FUMIGATOR_CHECKPOINTS[][] =
{
	{-1308.387573, -2168.723632, 22.671110},
	{-1307.323974, -2024.588623, 43.277305},
	{-1377.214965, -1801.599121, 65.306808},
	{-1567.830932, -1792.607299, 75.021827},
	{-1827.273315, -1838.340209, 91.367256},
	{-2028.804809, -1925.853393, 96.918655},
	{-2059.277832, -2109.719482, 68.355422},
	{-2022.684570, -2289.475097, 61.323108},
	{-1947.646972, -2468.936279, 48.919281},
	{-1651.936279, -2738.057373, 72.155830},
	{-1482.577392, -2778.567871, 71.213356},
	{-1339.633544, -2822.785400, 68.011917},
	{-1154.241455, -2703.070068, 42.500530},
	{-1259.402343, -2415.022216, 30.288431},
	{-1296.651489, -2098.415283, 24.366895}
};

enum
{
	VEHICLE_TYPE_NONE,
	VEHICLE_TYPE_TEST,
	VEHICLE_TYPE_SELL,
	VEHICLE_TYPE_PERSONAL,
	VEHICLE_TYPE_WORK,
	VEHICLE_TYPE_DRIVING_SCHOOL,
}

enum
{
	VEHICLE_STATE_NORMAL,
	VEHICLE_STATE_DAMAGED,
}

enum Global_Vehicles_Info
{
	bool:gb_vehicle_VALID,
	bool:gb_vehicle_OCCUPIED,
	gb_vehicle_TYPE,
	gb_vehicle_MODELID,
	gb_vehicle_NUMBER_PLATE[32],
	Float:gb_vehicle_POS[3],
	Float:gb_vehicle_SPAWN_X,
	Float:gb_vehicle_SPAWN_Y,
	Float:gb_vehicle_SPAWN_Z,
	Float:gb_vehicle_SPAWN_ANGLE,
	Float:gb_vehicle_HEALTH,
	gb_vehicle_DAMAGE_PANELS,
	gb_vehicle_DAMAGE_DOORS,
	gb_vehicle_DAMAGE_LIGHTS,
	gb_vehicle_DAMAGE_TIRES,
	gb_vehicle_COLOR_1,
	gb_vehicle_COLOR_2,
	gb_vehicle_PAINTJOB,
	Float:gb_vehicle_GAS,
	Float:gb_vehicle_MAX_GAS,
	gb_vehicle_COMPONENTS[MAX_VEHICLE_COMPONENTS],
	gb_vehicle_STATE,
	gb_vehicle_INTERIOR,
	gb_vehicle_WORLD,
	gb_vehicle_PARAMS_ENGINE,
	gb_vehicle_PARAMS_LIGHTS,
	gb_vehicle_PARAMS_ALARM,
	gb_vehicle_PARAMS_DOORS,
	gb_vehicle_PARAMS_BONNET,
	gb_vehicle_PARAMS_BOOT,
	gb_vehicle_PARAMS_OBJECTIVE,
	gb_vehicle_DRIVER,
	gb_vehicle_LAST_DRIVER,
	gb_vehicle_LAST_CLOSED_TIME,
	gb_vehicle_LAST_REPAIR_TIME,
	gb_vehicle_ESTROBOS,
	gb_vehicle_EMISORA_ID,

	bool:gb_vehicle_SPAWNED,
	gb_vehicle_TP_IMMUNITY,
	gb_vehicle_VIP,

	gb_vehicle_RUEDAS,
	gb_vehicle_NITRO,
	gb_vehicle_SUSPENSION,

	gb_vehicle_ATTACHED_TO,
	Text3D:gb_vehicle_LABEL,
	gb_vehicle_LANDING_GEAR_STATUS
}
new GLOBAL_VEHICLES[MAX_VEHICLES][Global_Vehicles_Info];

enum Player_Vehicles_Info
{
	bool:player_vehicle_VALID,
	player_vehicle_ID,
	player_vehicle_OWNER_ID,
	bool:player_vehicle_ACCESSIBLE,
	player_vehicle_CLAMP
};
new PLAYER_VEHICLES[MAX_VEHICLES][Player_Vehicles_Info];

#define MAX_VEHICLE_OBJECTS_INDEXS	5
enum
{
	VOBJECT_TYPE_OBJECT,
	VOBJECT_TYPE_TEXT,
	VOBJECT_TYPE_COUNTRY_FLAG,
	VOBJECT_TYPE_COUNTRY_PANEL,
}
enum e_VEHICLE_OBJECTS
{
	bool:vobject_VALID,
	vobject_TYPE,
	vobject_NAME[32],
	vobject_ID,
	vobject_OBJECT_ID,
	vobject_MODELID,
	Float:vobject_OFFSET[3],
	Float:vobject_ROT[3],
	vobject_ATTACHED,
	vobject_COLORS[MAX_VEHICLE_OBJECTS_INDEXS],

	vobject_text_TEXT[32],
	vobject_text_FONT[24],
	vobject_text_FONT_SIZE,
	vobject_text_BOLD,
	vobject_text_FONT_COLOR,
}
new VEHICLE_OBJECTS[MAX_VEHICLES][MAX_SU2_VOBJECTS][e_VEHICLE_OBJECTS];

new male_medic_skins[] = {274, 275, 276};

enum
{
	WORK_TYPE_NONE,
	WORK_TYPE_NORMAL,
	WORK_TYPE_FAMILY,
}
enum _:E_WORKS
{
	WORK_NONE = 0,
	WORK_TAXI = 1,
	WORK_TRUCK = 2,
	WORK_MECANICO = 3,
	WORK_HARVESTER = 4,
	WORK_FUMIGATOR = 5,
	WORK_TRASH = 6,
	WORK_LUMBERJACK = 7,
	WORK_FARMER = 8,
	WORK_POLICE = 9,
	WORK_PIZZA = 10,
	WORK_MEDIC = 11,
	WORK_WAREHOUSE = 12,
	WORK_DELIVERYMAN = 13,
	WORK_TRAILERO = 14,
	WORK_FBI = 15
};
enum work_info_info
{
	work_info_TYPE, 		//Normal = Trabajo	   FAMILY = Facción
	work_info_LEVEL,		//Nivel requerido para poder trabajar
	work_info_NAME[24],	 //Nombre trabajo
	bool:work_info_NEED_DUTY, 	//si este trabajo es normal y tiene vehiculos indica si es necesario que el jugador este de servicio para subirse
	work_info_EXTRA_PAY,		//dejar en 0 para no paga extra.......Paga extra de 'work_info_EXTRA_PAY' cada 'work_info_EXTRA_PAY_EXP' con un límite de 'work_info_EXTRA_PAY_LIMIT'
	work_info_EXTRA_PAY_EXP,
	work_info_EXTRA_PAY_LIMIT,	// dejar en 0 para sin limites

	//sistema de mejores empleados
	work_info_TOP_MAX_PRIZE,
	work_info_TOP_PRIZE_DECREASE,
	work_info_TOP_MIN_PRIZE,
	work_info_TOP1_COINS_PRIZE
}
new work_info[][work_info_info] =
{
	{WORK_TYPE_NONE, 0, "ninguno",					false, 0, 0, 0,			0, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Taxista",				false, 0, 0, 0,			0, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Camionero",				false, 0, 50, 1300,		15000, 10000, 3000, 1},
	{WORK_TYPE_FAMILY, 6, "Knox Garage's",		true, 5000, 1, 0,		20000, 3000, 1000, 0},
	{WORK_TYPE_NORMAL, 1, "Cosechador",				false, 20, 30, 800,		20000, 3000, 1000, 0},
	{WORK_TYPE_NORMAL, 4, "Fumigador",				false, 20, 30, 800,		20000, 3000, 1000, 0},
	{WORK_TYPE_NORMAL, 2, "Basurero", 				true, 60, 50, 2000,		20000, 3000, 1000, 0},
	{WORK_TYPE_NORMAL, 1, "Leñador",				false, 10, 100, 100,	20000, 3000, 1000, 0},
	{WORK_TYPE_NORMAL, 5, "Agricultor",				false, 0, 0, 0,			10000, 4000, 3000, 0},
	{WORK_TYPE_FAMILY, 10, "Policía",				true, 4500, 1, 0,		0, 0, 0, 0},
	{WORK_TYPE_NORMAL, 1, "Pizzero",				true, 60, 20, 800,		0, 0, 0, 0},
	{WORK_TYPE_NORMAL, 5, "Médico",					true, 60, 50, 2000,		0, 0, 0, 0},
	{WORK_TYPE_NORMAL, 2, "Almacén",				false, 10, 100, 100,	10000, 4000, 3000, 0},
	{WORK_TYPE_NORMAL, 6, "Repartidor",				false, 0, 50, 1300,		10000, 4000, 3000, 0},
	{WORK_TYPE_NORMAL, 6, "Trailero",  				false, 500, 50, 5500,   15000, 10000, 3000, 1},
	{WORK_TYPE_FAMILY, 15, "Knox Forces", 					true, 4500, 1, 0, 		0, 0, 0, 0}
};

forward OnPlayerObtainWork(playerid, work);
enum enum_PLAYER_WORKS
{
	pwork_SET,
	pwork_LEVEL
};
new PLAYER_WORKS[MAX_PLAYERS][sizeof(work_info)][enum_PLAYER_WORKS];

enum enum_StartWorkingCoords
{
	Float:start_pos_X,
	Float:start_pos_Y,
	Float:start_pos_Z,
	start_pos_interiorid
}
//===EMPEZAR SERVICIO===
new StartWorkingCoords[][enum_StartWorkingCoords] =
{
	{253.280288, 76.219017, 1003.640625, 6}, //LSPD
	{266.547180, 119.652816, 1004.617187, 10},//SFPD
	{217.816406, 187.667922, 1003.031250, 3},//LVPD
	{1764.8385, -1427.4897, 13.4868, 0},	 //Mecánico
	{2248.5769, 561.8127, 7.8287, 0}//Knox Forces
};

enum enum_WeaponShopWorkCoords
{
	Float:shop_pos_X,
	Float:shop_pos_Y,
	Float:shop_pos_Z,
	shop_pos_interiorid
}
//ARMERIA
new WeaponShopWorkCoords[][enum_WeaponShopWorkCoords] =
{
	{219.244018, 69.982215, 1005.039062, 6},
	{262.945587, 109.785270, 1004.617187, 10},
	{222.683914, 186.956054, 1003.031250, 3},
	{2254.0227, 547.9293, 7.8287, 0}
};

new Float:MedicalBuyKitsCoords[][3] =
{
	{-2031.387207, -115.191055, 1035.171875},
	{2306.0339, 595.9412, 7.8679}
};

/* Sistema objetos tuning */

enum e_Tuning_Shop_Objects
{
	tuning_object_MODELID,
	tuning_object_NAME[24],
	tuning_object_PRICE,
}
new Tuning_Shop_Objects[][e_Tuning_Shop_Objects] =
{
	{1247, "bribe", 3000},
	{1254, "killfrenzy", 3000},
	{1000, "spl_b_mar_m", 3000},
	{1001, "spl_b_bab_m", 3000},
	{1002, "spl_b_bar_m", 3000},
	{1003, "spl_b_mab_m", 3000},
	{1004, "bnt_b_sc_m", 9000},
	{1005, "bnt_b_sc_l", 3000},
	{1007, "wg_l_b_ssk", 2000},
	{1018, "exh_b_ts", 3500},
	{1019, "exh_b_t", 3500},
	{1021, "exh_b_m", 3500},
	{1024, "lgt_b_sspt", 2000},
	{1029, "exh_c_s", 3000},
	{1043, "exh_lr_br2", 3500},
	{1044, "exh_lr_br1", 3000},
	{1047, "wg_l_a_f", 2500},
	{1048, "wg_l_c_f", 2500},
	{1049, "spl_a_f_r", 3000},
	{1050, "spl_c_f_r", 3000},
	{1056, "wg_l_a_st", 2500},
	{1090, "wg_l_a_u", 2500},
	{19078, "TheParrot1", 8000},
	{19917, "CutsceneEngine1", 10500},
	{19893, "LaptopSAMP1", 6000},
	{2768, "CJ_CB_BURG", 1000},
	{19838, "CoffeeCup1", 1000},
	{11736, "MedicCase1", 3000},
	{1247, "bribe", 8000},
	{19147, "PinSpotLight5", 5000},
	{19148, "PinSpotLight6", 5000},
	{19149, "PinSpotLight7", 5000},
	{19151, "PinSpotLight9", 5000},
	{19153, "PinSpotLight11", 5000},
	{19580, "Pizza1", 1000},
	{2690, "CJ_FIRE_EXT", 5000},
	{19308, "taxi01", 3000},
	{1550, "CJ_MONEY_BAG", 4000},
	{19306, "kmb_goflag2", 5000},
	{19307, "kmb_goflag3", 5000},
	{18647, "RedNeonTube1", 6000},
	{18648, "BlueNeonTube1", 6000},
	{18649, "GreenNeonTube1", 6000},
	{18650, "YellowNeonTube1", 6000},
	{18651, "PinkNeonTube1", 6000},
	{18652, "WhiteNeonTube1", 6000},
	{18749, "SAMPLogoSmall", 5000},
	{19054, "XmasBox1", 3000},
	{19133, "ArrowType4", 5000},
	{19471, "forsale02", 3000},
	{19878, "Skateboard1", 2000},
	{19314, "bullhorns01", 5000},
	{2404, "CJ_SURF_BOARD", 3000},
	{2405, "CJ_SURF_BOARD2", 3000},
	{2406, "CJ_SURF_BOARD3", 3000},
	{19317, "bassguitar01", 2000},
	{19318, "flyingv01", 2000},
	{2232, "MED_SPEAKER_4", 3000},
	{1840, "speaker_2", 2000},
	{2229, "SWANK_SPEAKER", 4000},
	{1025, "wheel_or1", 2500},
	{1073, "wheel_sr6", 2500},
	{1074, "wheel_sr3", 2500},
	{1075, "wheel_sr2", 2500},
	{1076, "wheel_lr4", 2500},
	{1077, "wheel_lr1", 2500},
	{1078, "wheel_lr3", 2500},
	{1079, "wheel_sr1", 2500},
	{1080, "wheel_sr5", 2500},
	{1081, "wheel_sr4", 2500},
	{1082, "wheel_gn1", 2500},
	{1083, "wheel_lr2", 2500},
	{1084, "wheel_lr5", 2500},
	{1085, "wheel_gn2", 2500},
	{1096, "wheel_gn3", 2500},
	{1097, "wheel_gn4", 2500},
	{1098, "wheel_gn5", 2500},
	{19894, "laptop", 4500},
	{19873, "toiletpaperroll1", 200},
	{19874, "soapbar1", 200},
	{19624, "case1", 600},
	{19621, "obj1", 1500},
	{19620, "Sirena PD", 10500}
};

//ZONAS
enum
{
	AREA_TYPE_NONE,
	AREA_TYPE_GANGZONE,
	AREA_TYPE_MECANICO,
	AREA_TYPE_AIRPORT,
	AREA_TYPE_AIRVEH_FUEL,
	AREA_TYPE_WATERVEH_STATION,
	AREA_TYPE_ZONA_SEGURA
};

enum enum_SAFE_ZONES
{
	safe_zone_AREA_ID,
	Float:safe_zone_MIN_X,
	Float:safe_zone_MIN_Y,
	Float:safe_zone_MAX_X,
	Float:safe_zone_MAX_Y,
	safe_zone_INTERIOR,
	safe_zone_WORLD,

	safe_zone_AREA,
}
new SAFE_ZONES[][enum_SAFE_ZONES] =
{
	{INVALID_STREAMER_ID, -594.19,	-1648.55,-187.699,	-1276.599, 0, 0},
	{INVALID_STREAMER_ID, -613.953796, -209.777252, -381.961181, -6.355076, 0, 0},
	{INVALID_STREAMER_ID, 1990.0, -1450.5, 2059.0, -1345.5, 0, 0},
	{INVALID_STREAMER_ID, 2059.0, -1450.5, 2105.0, -1391.5, 0, 0},
	{INVALID_STREAMER_ID, 1424.0, -1724.5, 1585.0, -1596.5, 0, 0},
	{INVALID_STREAMER_ID, 1395.0, -1820.5, 1585.0, -1724.5, 0, 0},
	{INVALID_STREAMER_ID, 1354.0, -2369.5, 1848.0, -2201.5, 0, 0},
	{INVALID_STREAMER_ID, -1704.0, 648.5, -1565.0, 726.5, 0, 0},
	{INVALID_STREAMER_ID, -2744.0, 571.5, -2533.0, 702.5, 0, 0},
	{INVALID_STREAMER_ID, -624.0, -565.0, -466.0, -468.0, 0, 0},
	{INVALID_STREAMER_ID, 2234.0, 2416.5, 2362.0, 2509.5, 0, 0},
	{INVALID_STREAMER_ID, 1572.0, 1715.5, 1642.0, 1869.5, 0, 0},
	{INVALID_STREAMER_ID, 1689.0, -1945.5, 1819.0, -1859.5, 0, 0},
	{INVALID_STREAMER_ID, 1721.0, -1430.5, 1837.0, -1307.5, 0, 0},
	{INVALID_STREAMER_ID, 1761.0, -1452.5, 1837.0, -1430.5, 0, 0},
	{INVALID_STREAMER_ID, 1150.0, -1390.5, 1296.0, -1280.5, 0, 0},
	{INVALID_STREAMER_ID, 2776.0, 836.5, 2895.0, 1023.5, 0, 0},
	{INVALID_STREAMER_ID, -1126.0, -758.5, -972.0, -587.5, 0, 0},
	{INVALID_STREAMER_ID, -1941.0, -1772.5, -1799.0, -1632.5, 0, 0},
	{INVALID_STREAMER_ID, 1297.3351, -1857.9592, 1300.5308, -1879.2183, 0, 0}
};

#define MAX_TERRITORIES	100
enum enum_TERRITORIES
{
	bool:territory_VALID,
	territory_ID,
	territory_NAME[32],
	bool:territory_OCCUPIED,
	territory_CREW_ID,
	territory_CREW_INDEX,
	territory_COLOR,
	Float:territory_MIN_X,
	Float:territory_MIN_Y,
	Float:territory_MIN_Z,
	Float:territory_MAX_X,
	Float:territory_MAX_Y,
	Float:territory_MAX_Z,

	territory_AREA,
	territory_GANG_ZONE,

	bool:territory_WAR,
	territory_ATTACKER_CREW_INDEX,
	territory_WAR_TIME_LEFT,
	Text:territory_TEXTDRAW,
	territory_TIMER,
	territory_LAST_ATTACK,
}
new TERRITORIES[MAX_TERRITORIES][enum_TERRITORIES];
forward OnTerritoriesLoaded();

// Crews
#define MAX_CREWS		50
#define MAX_CREW_RANKS	10
#define MAX_CREW_MEMBERS 20

enum enum_CREW_INFO
{
	bool:crew_VALID,
	crew_ID,
	crew_NAME[32],
	crew_COLOR,

	bool:crew_FIGHTING,
	crew_LAST_ATTACK,
	crew_LAST_ROBBERY,

	crew_MEMBERS,
	crew_ONLINE_MEMBERS,
}
new CREW_INFO[MAX_CREWS][enum_CREW_INFO];
forward OnCrewDeleted(crewId);
forward OnCrewCaptureTerritory(crewId, crewIndex, territoryId, territoryIndex);
forward OnCrewLeftTerritory(crewId, crewIndex, territoryId, territoryIndex);


new RandomColors[] =
{
	0xFFFFFFFF,
	0x000000FF,
	0x99CC00FF,
	0xFF9900FF,
	0x6699CCFF,
	0x0099FFFF,
	0xCCCC99FF,

	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,	0xF4A460FF,
	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,	0x10DC29FF,
	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,	0x65ADEBFF,
	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,	0x3D0A4FFF,
	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,	0x057F94FF,
	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,	0x18F71FFF,
	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,	0x12D6D4FF,
	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,	0x2FD9DEFF,
	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,	0x3214AAFF,
	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,	0xDCDE3DFF,
	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,	0xD8C762FF,
	0xD8C762FF,	0xFF8C13FF,	0xC715FFFF,	0x20B2AAFF,	0xDC143CFF,	0x6495EDFF,	0xf0e68cFF,	0x778899FF,	0xFF1493FF,
	0xF4A460FF,	0xEE82EEFF,	0xFFD720FF,	0x8b4513FF,	0x4949A0FF,	0x148b8bFF,	0x14ff7fFF,	0x556b2fFF,	0x0FD9FAFF,
	0x10DC29FF,	0x534081FF,	0x0495CDFF,	0xEF6CE8FF,	0xBD34DAFF,	0x247C1BFF,	0x0C8E5DFF,	0x635B03FF,	0xCB7ED3FF,
	0x65ADEBFF,	0x5C1ACCFF,	0xF2F853FF,	0x11F891FF,	0x7B39AAFF,	0x53EB10FF,	0x54137DFF,	0x275222FF,	0xF09F5BFF,
	0x3D0A4FFF,	0x22F767FF,	0xD63034FF,	0x9A6980FF,	0xDFB935FF,	0x3793FAFF,	0x90239DFF,	0xE9AB2FFF,	0xAF2FF3FF,
	0x057F94FF,	0xB98519FF,	0x388EEAFF,	0x028151FF,	0xA55043FF,	0x0DE018FF,	0x93AB1CFF,	0x95BAF0FF,	0x369976FF,
	0x18F71FFF,	0x4B8987FF,	0x491B9EFF,	0x829DC7FF,	0xBCE635FF,	0xCEA6DFFF,	0x20D4ADFF,	0x2D74FDFF,	0x3C1C0DFF,
	0x12D6D4FF,	0x48C000FF,	0x2A51E2FF,	0xE3AC12FF,	0xFC42A8FF,	0x2FC827FF,	0x1A30BFFF,	0xB740C2FF,	0x42ACF5FF,
	0x2FD9DEFF,	0xFAFB71FF,	0x05D1CDFF,	0xC471BDFF,	0x94436EFF,	0xC1F7ECFF,	0xCE79EEFF,	0xBD1EF2FF,	0x93B7E4FF,
	0x3214AAFF,	0x184D3BFF,	0xAE4B99FF,	0x7E49D7FF,	0x4C436EFF,	0xFA24CCFF,	0xCE76BEFF,	0xA04E0AFF,	0x9F945CFF,
	0xDCDE3DFF,	0x10C9C5FF,	0x70524DFF,	0x0BE472FF,	0x8A2CD7FF,	0x6152C2FF,	0xCF72A9FF,	0xE59338FF,	0xEEDC2DFF,
	0xD8C762FF,	0xD8C762FF
};


/*
Permisos de rangos

0 - cambiar nombre
1 - invitar
2 - echar
3 - cambiar rango de miembros
4 - crear rangos y modificar rangos
5 - poner casas personales a casas de banda
6 - vender casas de banda
7 - cambiar color de la banda
8 - abandonar territorio
9 - destruir cbanda
*/

//permisos
enum
{
	CREW_RANK_CHANGE_NAME,
	CREW_RANK_INVITE,
	CREW_RANK_CAST_MEMBERS,
	CREW_RANK_MODIFY_MEMBERS,
	CREW_RANK_MODIFY_RANKS,
	CREW_RANK_ADD_PROPERTIES,
	CREW_RANK_DELETE_PROPERTIES,
	CREW_RANK_CHANGE_COLOR,
	CREW_RANK_LEAVE_TERRITORY,
	CREW_RANK_DELETE,
	CREW_RANK_GRAFFITI,

	CREW_RANK_SIZE, // dejar siempre el ultimo
}

new CREW_RANKS_PERMISSIONS[][] =
{
	"cambiar nombre de la banda",	//0
	"invitar jugadores",			//1
	"echar miembros",				//2
	"cambiar rangos de miembros",	//3
	"crear rangos o modificarlos",	//4
	"poner propiedades de banda",	//5
	"liberar propiedades de banda",	//6
	"cambiar color de la banda",	//7
	"abandonar territorios",		//8
	"eliminar banda",				//9
	"crear y eliminar graffitis"	//10
};

enum enum_CREW_RANK_INFO
{
	bool:crew_rank_VALID,
	crew_rank_ID,
	crew_rank_NAME[32],
	crew_rank_PERMISSION[CREW_RANK_SIZE],
}
new CREW_RANK_INFO[MAX_CREWS][MAX_CREW_RANKS][enum_CREW_RANK_INFO];

enum obtain_work_coords_info
{
	bool:obtain_work_AVAILABLE,
	bool:obtain_work_LABELS,
	Float:obtain_work_X,
	Float:obtain_work_Y,
	Float:obtain_work_Z,
	obtain_work_INTERIOR,
	bool:obtain_work_MAP_ICON,
	obtain_work_MAP_ICON_ID,
	Float:obtain_work_MAP_ICON_X,
	Float:obtain_work_MAP_ICON_Y,
	Float:obtain_work_MAP_ICON_Z,
}
new Float:obtain_work_coords[][obtain_work_coords_info] =
{
	{false, false, 0.0, 0.0, 0.0, 0,	false, 0, 0.0, 0.0, 0.0},
	{true, true, 1490.285766, 1305.699340, 1093.296386, 3,	true, 61, 1752.603881, -1894.155883, 13.557376}, //taxista ls
	{true, true, 1297.107543, -65.027748, 1002.498046, 18, true, 51, -510.699890, -539.409118, 25.523437}, //caminero
	{true, true, 1831.917602, -1446.153564, 13.592857, 0, true, 27, 1831.917602, -1446.153564, 13.592857}, //mecanico
	{true, true, -372.126922, -1435.706298, 25.726562, 0,	true, 61, -372.126922, -1435.706298, 25.726562}, //Cosechador
	{true, true, -1342.295898, -2195.076660, 23.591030, 0, true, 61, -1342.295898, -2195.076660, 23.591030}, //Fumigador
	{true, true, -1884.997314, -1636.733642, 21.750000, 0, true, 61, -1884.997314, -1636.733642, 21.750000}, //Basurero
	{true, true, -532.029846, -97.514228, 63.296875, 0, true, 61, -532.029846, -97.514228, 63.296875}, //leñador
	{true, true, 1564.864257, 23.255302, 24.164062, 0, true, 61, 1564.864257, 23.255302, 24.164062},//agricultor
	{true, true, -510.972015, 324.242736, 2004.585937, 20,	false, 0, 1480.966918, -1772.065673, 18.795755}, // policia
	{true, true, 377.902313, -119.416114, 1001.492187, 5, false, 0, 2105.485107, -1806.400878, 13.554687}, // Pizzero
	{true, true, -2033.237304, -117.411125, 1035.171875, 3,	false, 0, 0.0, 0.0, 0.0},//médico
	{true, true, 1944.000366, -1481.420776, 1394.125244, 11, true, 61, -1058.164306, -652.747924, 32.007812}, //almacén
	{true, true, -1014.827697, -594.402160, 32.382198, 0, true, 61, -1014.827697, -594.402160, 32.382198}, //repartidor
	{true, true, 1355.2914, 1546.9314, 3001.0859, 19, true, 51, 2814.6101, 973.3275, 10.7500},//Trailero
	{true, true, 2287.4529, 605.2462, 10.9195, 0,	false, 60, 2287.4529, 605.2462, 10.9195}//FBI
};

enum Work_Vehicles_Info
{
	bool:work_vehicle_VALID,
	work_vehicle_WORK,
	work_vehicle_EXP,
	bool:work_vehicle_NEED_DUTY,
}
new WORK_VEHICLES[MAX_VEHICLES][Work_Vehicles_Info];

forward OnSanAndreasVehicleLoad(vehicleid);
forward OnSanAndreasVehiclesLoad();
new valid_work_vehicle_colors[] = {84, 63, 91, 63, 102, 65, 105, 72, 110, 93, 121, 93, 12, 95, 23, 1};
enum San_Andreas_Vehicles_Info
{
	san_andreas_vehicle_TYPE,
	san_andreas_vehicle_TYPE_IN,
	san_andreas_vehicle_TYPE_IN_EXP,
	san_andreas_vehicle_MODELID,
	Float:san_andreas_vehicle_SPAWN_X,
	Float:san_andreas_vehicle_SPAWN_Y,
	Float:san_andreas_vehicle_SPAWN_Z,
	Float:san_andreas_vehicle_SPAWN_ANGLE,
	san_andreas_vehicle_COLOR_1,
	san_andreas_vehicle_COLOR_2,
	san_andreas_vehicle_vip,
	san_andreas_vehicle_WORLD
}
new San_Andreas_Vehicles[][San_Andreas_Vehicles_Info] =
{
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 431, 2379.9023, 591.4282, 7.7584, 90.6600, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 431, 2380.2610, 585.7991, 7.7584, 90.6600, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 431, 2380.2761, 580.2516, 7.7584, 90.6600, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 433, 2377.9312, 565.7014, 8.1917, 90.6000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 433, 2377.8938, 559.6817, 8.1917, 90.6000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 433, 2377.8369, 554.0800, 8.1917, 90.6000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 487, 2359.7092, 534.8553, 1.8645, -180.4799, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 500, 2337.2937, 551.7335, 7.7943, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 500, 2333.1501, 551.7562, 7.7943, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 500, 2329.1294, 551.7614, 7.7943, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 470, 2324.3657, 551.9927, 7.5310, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 470, 2319.5254, 551.9145, 7.5310, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 470, 2314.5417, 551.9413, 7.5310, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 470, 2309.2554, 551.8690, 7.5310, 0.0000, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 472, 2291.0537, 515.7313, 0.4739, -179.2799, 47, 123, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_FBI, 2, 472, 2296.9993, 515.5900, 0.4739, -179.2799, 47, 123, 0, 0},

	//Cargas de Trailero
	//ROPA
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 435, 2875.7742, 938.1757, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 435, 2875.7742, 933.9250, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 435, 2875.7742, 929.6743, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 435, 2875.7742, 925.4236, 11.3802, 90.0000, -1, -1, 0, 0},

	//FARMACOS
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 591, 2875.7742, 915.1336, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 591, 2875.7742, 910.8829, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 591, 2875.7742, 906.6322, 11.3802, 90.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 591, 2875.7742, 902.3815, 11.3802, 90.0000, -1, -1, 0, 0},

	//TIERRA
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 450, 2850.0000, 896.4943, 11.8179, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 450, 2845.0000, 896.4943, 11.8179, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 450, 2840.0000, 896.4943, 11.8179, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 450, 2835.0000, 896.4943, 11.8179, 0.00000, -1, -1, 0, 0},

	//GASOLINA
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 584, 2812.0000, 896.1208, 11.3584, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 584, 2807.0000, 896.1208, 11.3584, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 584, 2802.0000, 896.1208, 11.3584, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRAILERO, 0, 584, 2797.0000, 896.1208, 11.3584, 0.00000, -1, -1, 0, 0},

	//taxi ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1792.5676, -1868.2953, 13.2887, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1807.7679, -1868.5153, 13.2887, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1805.2649, -1901.7776, 13.1195, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1805.2053, -1932.5355, 13.0518, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1775.7917, -1932.4465, 13.0518, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1783.2333, -1932.4965, 13.0518, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1798.8303, -1932.5427, 13.0518, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1791.2925, -1932.4644, 13.0518, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1775.7085, -1916.0463, 13.2772, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1805.3810, -1917.4658, 13.1195, 0.0000, 6, 1, 0, 0},

	// taxi sf
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 106.9412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 114.9412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 138.4412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 145.4412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 155.9412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 171.4412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, -1986.7380, 178.4412, 27.2298, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, -1986.7380, 185.4412, 27.2298, 0.0000, 6, 1, 0, 0},

	// taxi lv
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1687.2935, 1297.4829, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1695.2935, 1297.4829, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1695.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1691.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1688.2935, 1305.9829, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1681.7935, 1305.9829, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1688.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1693.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1699.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1703.3271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1706.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1711.8271, 1287.1450, 10.5616, 0.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1709.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1703.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1698.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 438, 1694.8271, 1316.1450, 10.5616, 180.0000, 6, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TAXI, 0, 420, 1691.3271, 1316.1450, 10.5616, 180.0000, 6, 1, 0, 0},

	//Camionero
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -494.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -499.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -504.5551, -473.4075, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -510.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -529.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -544.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -559.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -572.5538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -589.0538, -473.4275, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -514.8518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -533.8518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -564.8518, -473.3605, 25.5408, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -577.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -583.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -519.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0, 0},
	/*{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -550.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -489.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -483.3518, -473.3605, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -478.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -473.4160, -472.8649, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -469.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -489.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -540.2829, -488.2091, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -564.7829, -488.2091, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -589.2829, -488.2091, 25.5098, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -579.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -549.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -510.6942, -488.2058, 25.5404, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -500.5240, -488.8626, 25.4323, 180.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 456, -556.0240, -488.8626, 25.4323, 180.0000, -1, -1, 0, 0},*/
	//VIP
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -615.4958, -480.0750, 25.5963, 269.0000, 179, 178, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -615.3096, -490.5564, 25.5963, 269.0000, 179, 178, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -615.4363, -500.5580, 25.5963, 269.0000, 179, 178, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -615.4330, -527.0305, 25.5963, 269.0000, 179, 178, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -615.8846, -537.6530, 25.5963, 269.0000, 179, 178, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_TRUCK, 0, 482, -616.0970, -547.9350, 25.5963, 269.0000, 179, 178, 1, 0},

	//Cosechador
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -390.604370, -1476.015747, 26.704042, 259.474060, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -385.473022, -1464.722900, 26.711814, 227.251434, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -372.544342, -1462.451293, 26.736181, 224.972244, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -375.785583, -1473.692260, 26.720621, 224.966537, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -379.832061, -1484.033203, 26.696950, 223.968917, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -389.124328, -1491.877197, 26.187450, 314.527038, 1, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_HARVESTER, 0, 532, -382.092529, -1499.563842, 25.449359, 314.704895, 1, 1, 0, 0},

	//Fumigador
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1349.9589, -2185.4946, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1346.2903, -2172.7837, 23.5282, 258.3622, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1363.1548, -2182.3293, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1358.7863, -2169.9529, 23.5282, 258.3622, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1374.2833, -2178.7600, 23.5282, 250.3750, 1, 1, 0},
	{VEHICLE_TYPE_WORK, WORK_FUMIGATOR, 0, 512, -1370.8667, -2167.2510, 23.5282, 261.9992, 1, 1, 0},

	//Basurero
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1702.3322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1707.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1914.0554, -1713.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1719.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1726.3322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1913.5554, -1732.8322, 22.5969, 270.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1901.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1896.7543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1892.2543, -1702.9012, 22.5969, 180.0000, 26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1879.0313, -1739.9550, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1884.2616, -1743.0443, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1889.2466, -1746.0833, 22.5969, 33.7282,  26, 26, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_TRASH, 0, 408, -1894.2480, -1748.9353, 22.5969, 33.7282,  26, 26, 0, 0},

	//Mecanico
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1728.7755, -1332.1913, 13.90, 269.1739, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1728.6742, -1338.6122, 13.90, 270.9746, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1741.8524, -1332.2559, 13.90, 90.8029, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1742.1001, -1338.9211, 13.90, 90.2600, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1742.1488, -1344.9265, 13.90, 89.5431, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1728.7504, -1344.6873, 13.90, 269.7679, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1728.8019, -1352.1393, 13.90, 269.4534, 6, 0, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MECANICO, 2, 525, 1742.2356, -1352.1663, 13.90, 90.2800, 6, 0, 0, 0},

	//policia ls
/*	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 411, 1528.2512, -1688.0269, 5.6177, 269.2594, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 411, 1528.0218, -1684.0871, 5.6093, 270.9812, 152, 1, 0, 0},*/
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.9473, -1696.1240, 5.6107, 89.0810, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.1748, -1691.9042, 5.6110, 88.4362, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.0411, -1700.2920, 5.6110, 88.6648, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.8983, -1704.0681, 5.6115, 89.3552, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1587.3389, -1710.4362, 5.6118, 1.0410, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1583.4728, -1710.5020, 5.6120, 359.4709, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 1570.1743, -1710.9041, 6.0789, 0.5127, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 1574.3672, -1710.9801, 6.0787, 0.3933, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.7402, -1668.5023, 5.4657, 88.7599, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.7308, -1671.5286, 5.4637, 87.6115, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 1583.8281, -1674.2369, 5.4653, 89.9781, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, 1538.5195, -1645.3208, 6.0224, 178.7787, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, 1534.8190, -1645.2932, 6.0222, 178.9228, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, 1526.7194, -1644.9723, 5.6494, 179.5714, 110, 188, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1601.9880, -1687.8237, 5.6110, 89.6723, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1602.2769, -1684.0154, 5.6119, 89.6658, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1591.4995, -1710.3190, 5.6105, 359.6988, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 596, 1595.5188, -1710.3881, 5.6109, 358.7049, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 528, 1546.5891, -1654.8442, 5.9344, 90.4177, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 528, 1546.4629, -1650.9556, 5.9348, 90.2691, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, 1530.5052, -1644.9598, 5.6494, 179.5481, 110, 188, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 497, 1560.0271, -1657.0402, 29.1718, 85.7400, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 497, 1560.8699, -1643.7993, 29.1718, 85.7400, 152, 0, 0, 0},

	//policia sf
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1588.1722, 749.2943, -5.5779, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1592.2081, 749.1027, -5.5779, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1596.2935, 749.4324, -5.5779, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1600.3527, 749.0949, -5.5779, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1604.2867, 749.3167, -5.5779, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0361, 742.6935, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1574.9946, 738.4707, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1072, 735.0409, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0322, 730.9659, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.1212, 722.3821, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1575.0864, 718.5404, -5.5779, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.7537, 714.1426, -5.1303, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6227, 710.4202, -5.1303, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, -1574.6934, 706.5904, -5.1303, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1599.5576, 693.3072, -5.5779, 180.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1608.8636, 693.0085, -5.5779, 180.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 597, -1612.5468, 692.6500, -5.5779, 180.0000, 152, 1, 0, 0},
//	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 411, -1639.4524, 662.1886, -5.5417, -90.0000, 152, 1, 0, 0},
//	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 415, -1639.3489, 666.1519, -5.5417, -90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 413, -1639.1108, 669.9014, -5.2635, -90.0000, 127, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, -1638.7815, 678.3526, -5.4683, -90.0000, 110, 188, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, -1638.8115, 682.3326, -5.4683, -90.0000, 110, 188, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1628.3209, 691.4453, -5.0293, 180.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1624.6458, 691.1703, -5.0293, 180.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, -1621.0149, 691.4860, -5.0293, 180.0000, 152, 1, 0, 0},
//	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 426, -1639.1274, 658.2158, -5.5682, -90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1617.3679, 731.1095, -5.6017, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1615.6661, 731.2083, -5.6017, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1613.6464, 731.1612, -5.6017, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, -1611.4475, 731.4107, -5.6017, 0.0000, 152, 1, 0, 0},

	//Policia lvpd
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2314.1758, 2475.5225, 3.0620, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.4473, 2480.4548, 3.0620, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.9863, 2470.4392, 3.0620, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.3777, 2466.1509, 3.0620, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2313.2185, 2460.8066, 3.0620, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2285.6572, 2474.5803, 3.0066, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2281.5867, 2475.2078, 3.0066, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2277.3740, 2475.5874, 3.0066, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2272.8518, 2475.8105, 3.0066, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2307.3750, 2431.3274, 2.9947, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 598, 2298.9263, 2431.8225, 2.9947, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2272.4565, 2431.9678, 3.3194, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2267.9832, 2431.6877, 3.3194, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 599, 2263.6194, 2431.6626, 3.3194, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 601, 2246.5898, 2431.7930, 3.0092, 0.0000, 110, 188, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, 2250.7744, 2431.9976, 3.2946, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, 2258.8242, 2431.7910, 3.2946, 0.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 427, 2254.3489, 2432.4753, 3.2946, 0.0000, 152, 1, 0, 0},
//	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 415, 2297.8123, 2451.5508, 3.0484, 90.0000, 152, 1, 0, 0},
//	{VEHICLE_TYPE_WORK, WORK_POLICE, 2, 415, 2298.2183, 2455.7683, 3.0484, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.6643, 2459.1206, 2.8170, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.8755, 2460.9136, 2.8170, 90.0000, 152, 1, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_POLICE, 1, 523, 2299.8306, 2463.0632, 2.8170, 90.0000, 152, 1, 0, 0},

	//pizzero
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2339, -1813.4716, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1814.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1816.4722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1817.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1819.4722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2094.2139, -1820.9722, 12.9325, 90.0000, 3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2098.2712, -1812.8209, 12.9325, 0.0000,  3, 6, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_PIZZA, 0, 448, 2096.7712, -1812.8209, 12.9325, 0.0000,  3, 6, 0, 0},

	//ambulancias
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.2555, -1429.4966, 17.0571, 180.00, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2036.4742, -1439.7246, 17.0571, 180.00, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2016.8370, -1411.2896, 17.0571, 90.000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 2017.1022, -1416.2045, 17.0571, 90.000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.2153, -1308.2330, 13.8244, -90.00, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1180.4480, -1338.4403, 13.8244, -90.00, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1226.9530, 302.3792, 19.7678, 66.10860, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2202.2329, -2294.7314, 30.7048, 320.0, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.5457, 610.1262, 14.4484, 90.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.9500, 604.4023, 14.4484, 90.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.0088, 598.3672, 14.4484, 90.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2544.8770, 593.1545, 14.4484, 90.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -2545.2927, 587.3546, 14.4484, 90.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -330.0057, 1062.9534, 19.7507, -90.000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1508.8683, 2526.5510, 55.9118, 0.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, -1504.4027, 2526.4734, 55.9118, 0.0000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1617.1790, 1841.2314, 10.6855, 0.00000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1612.3330, 1841.6625, 10.6855, 0.00000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1607.3164, 1841.8850, 10.6855, 0.00000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1602.5084, 1841.9370, 10.6855, 0.00000, 1, 16, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_MEDIC, 0, 416, 1597.7699, 1841.7919, 10.6855, 0.00000, 1, 16, 0, 0},

	//renta.
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1769.0483, -1905.9906, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1766.8649, -1906.0200, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1756.9684, -1905.9261, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1764.8287, -1905.9766, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1762.6488, -1905.9103, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1760.6249, -1905.9413, 13.0658, 0.00000, -1, -1, 0, 0},
	{VEHICLE_TYPE_NONE, WORK_NONE, 0, 509, 1758.7451, -1905.8674, 13.0658, 0.00000, -1, -1, 0, 0},

	//autoescuela
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1797.7335, -1702.2894, 13.3420, 0.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1793.3932, -1702.3016, 13.3420, 0.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1788.9321, -1702.2750, 13.3420, 0.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1783.8494, -1702.2451, 13.3420, 0.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1778.9115, -1702.0493, 13.3420, 0.0000, -1, -1, 0, 0},
	{VEHICLE_TYPE_DRIVING_SCHOOL, WORK_NONE, 0, 418, 1773.7906, -1702.0295, 13.3420, 0.0000, -1, -1, 0, 0},

	//repartidor
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.529418, -623.111450, 32.130187, 89.350334, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.644104, -628.472900, 32.124935, 89.788017, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.653381, -631.068786, 32.134510, 89.788055, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.662597, -633.538085, 32.139816, 89.788063, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.681884, -638.689086, 32.143859, 89.788070, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.694030, -641.949829, 32.148231, 89.788040, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.707763, -645.661865, 32.152618, 89.788085, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.721252, -649.340087, 32.152618, 89.788017, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.734985, -653.079833, 32.152618, 89.788116, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.588500, -656.754028, 32.154575, 89.788063, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.598632, -659.465332, 32.154575, 89.788024, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -1006.454101, -663.635559, 32.156471, 89.788055, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.735717, -684.589477, 32.176849, 89.233268, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.662109, -679.098449, 32.176849, 89.233261, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.621398, -676.063781, 32.176849, 89.233207, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.560974, -671.561157, 32.176853, 89.233192, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.525085, -668.885864, 32.176853, 89.233215, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.483520, -665.785827, 32.176853, 89.233268, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.391418, -658.914794, 32.176853, 89.234283, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.802734, -655.796325, 32.166614, 89.233215, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.768005, -653.207214, 32.166645, 89.233283, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.732360, -650.552185, 32.166614, 89.233192, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.607360, -641.224426, 32.166614, 89.233207, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.557983, -637.542236, 32.166614, 89.233238, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.800598, -632.803161, 32.163383, 89.233207, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.969238, -628.100769, 32.160846, 89.233345, 8, 8, 0, 0},
	{VEHICLE_TYPE_WORK, WORK_DELIVERYMAN, 0, 482, -982.900451, -622.967102, 32.160846, 89.233222, 8, 8, 0, 0}
};

/*forward GetCacheForo();
public GetCacheForo()
{
	new Query[100], rows;
	mysql_format(db_foro, Query, sizeof(Query), "SELECT * FROM `smf0v_settings` WHERE `variable` = 'totalMembers';");
	mysql_query(db_foro, Query, true);

	if(cache_get_row_count(rows))
	{
		for(new i = 0; i != rows; i ++)
		{
			cache_get_value_name_int(0, "value", Foro_Info[Users]);
		}
	}

	printf("[CUENTAS_FORO]:%d", Foro_Info[Users]);
	return 1;
}*/

enum San_Andreas_Barriers_Info
{
	barrier_VEHICLE_TYPE,
	barrier_VEHICLE_TYPE_IN,
	barrier_VEHICLE_TYPE_IN2,
	Float:barrier_X,
	Float:barrier_Y,
	Float:barrier_Z,
	Float:barrier_ROTATION,
	barrier_INTERIOR,
	barrier_WORLD,
	barrier_OBJECT_ID,
	barrier_TIMER,
	bool:barrier_CLOSING,
	Float:barrier_DISTANCE,
	barrier_PRICE,
	Float:barrier_PLAYER_X,
	Float:barrier_PLAYER_Y,
	Float:barrier_PLAYER_Z
}
new San_Andreas_Barriers[][San_Andreas_Barriers_Info] = // usar VEHICLE_TYPE_NONE para que puedan pasar todos
{
	{VEHICLE_TYPE_WORK, WORK_TAXI, WORK_NONE, 1811.32373, -1886.26331, 12.36843, 90.00000, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,		0.0, 0.0, 0.0}, // barrera taxi ls
	{VEHICLE_TYPE_WORK, WORK_TAXI, WORK_NONE, 1717.0457, 1308.0387, 9.7157, 90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // barrera taxi lv
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, -495.0410, -562.1307, 24.4932, 180.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // barrera camioneros TRUCK
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, -1526.39063, 481.38281, 6.17970, 0.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // ejercito??
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, -82.1645, -1123.0260, 0.0373, 67.1102, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,				0.0, 0.0, 0.0}, // grua
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, 1544.69629, -1630.79651, 12.31840, -90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,		0.0, 0.0, 0.0}, // barrera POLICIA LS
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, 2238.19897, 2450.41797, 9.80680, -90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0}, // barrera POLICIA LV
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, -1572.20313, 658.83588, 6.07810, -90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0}, // barrera POLICIA SF 1
	{VEHICLE_TYPE_WORK, WORK_POLICE, WORK_NONE, -1701.42969, 687.59381, 23.88280, 90.0, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0}, // barrera POLICIA SF 2

	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1795.434448, 683.170410, 15.157672, 166.600051, 0, 0, INVALID_STREAMER_ID, -1, false, 8.0, 500,	0.0, 0.0, 0.0}, //Peaje LV
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1786.182617, 685.082275, 15.157672, 166.599960, 0, 0, INVALID_STREAMER_ID, -1, false, 8.0, 500,	0.0, 0.0, 0.0}, //Peaje LV
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1783.368286, 685.849304, 15.157672, -13.399984, 0, 0, INVALID_STREAMER_ID, -1, false, 8.0, 500,	0.0, 0.0, 0.0}, //Peaje LV
	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, 1774.675903, 687.671081, 15.157672, -13.399984, 0, 0, INVALID_STREAMER_ID, -1, false, 8.0, 500,	0.0, 0.0, 0.0}, //Peaje LV

	{VEHICLE_TYPE_NONE, WORK_NONE, WORK_NONE, -1036.1921, -588.4973, 30.9307, 355.7986, 0, 0, INVALID_STREAMER_ID, -1, false, 15.0, 0,			0.0, 0.0, 0.0} // barrera AMAZON
};

#define MAX_BOOT_SLOTS	20

enum VEHICLE_INFO_enum
{
	bool:vehicle_info_LANDING_GEAR,
	bool:vehicle_info_AIR_ALARMS,
	bool:vehicle_info_NORMAL_SPEEDO,
	vehicle_info_NAME[24],
	Float:vehicle_info_MAX_GAS, // Por defecto
	Float:vehicle_info_MAX_VEL,
	vehicle_info_PRICE,
	vehicle_info_LEVEL,
	vehicle_info_EXTRA,
	vehicle_info_BOOT_SLOTS,
	vehicle_info_SEATS,
	bool:vehicle_info_ENGINE,
	bool:vehicle_info_DRIVER_DOOR,
	bool:vehicle_info_PASSENGER_DOOR,
	vehicle_info_VIP_LEVEL,
	vehicle_info_COINS
}
new VEHICLE_INFO[][VEHICLE_INFO_enum] =
{
	{false, false, true, "Landstalker", 80.0, 159.00, 50000, 6, 0, 10		, 4		, true, true, true, 0, 0},
	{false, false, true, "Bravura", 45.0, 148.00, 25000, 4, 0, 6			, 2		, true, true, true, 0, 0},
	{false, false, true, "Buffalo", 50.0, 188.00, 150000, 8, 0, 6			, 2		, true, true, true, 0, 0},
	{false, false, true, "Linerunner", 150.0, 110.00, 80000, 30, 0, 0		, 2		, true, true, true, 0, 0},
	{false, false, true, "Perrenial", 50.0, 134.00, 5000, 2, 0, 10			, 4		, true, true, true, 0, 0},
	{false, false, true, "Sentinel", 45.0, 165.00, 12000, 2, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Dumper", 20.0, 111.00, 700000, 30, 0, 0			, 1		, true, true, true, 0, 0},
	{false, false, true, "Firetruck", 120.0, 149.00, 500000, 30, 0, 0		, 2		, true, true, true, 0, 0},
	{false, false, true, "Trashmaster", 80.0, 101.00, 300000, 30, 0, 0		, 2		, true, true, true, 0, 0},
	{false, false, true, "Stretch", 80.0, 159.00, 800000, 15, 0, 12			, 4		, true, true, true, 0, 0},
	{false, false, true, "Manana", 40.0, 131.00, 8000, 2, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Infernus", 80.0, 223.00, 350000, 15, 0, 6			, 2		, true, true, true, 1, 40},
	{false, false, true, "Voodoo", 45.0, 170.00, 25000, 6, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Pony", 60.0, 111.00, 30000, 6, 0, 12				, 4		, true, true, true, 0, 0},
	{false, false, true, "Mule", 60.0, 106.00, 30000, 8, 0, 0				, 2		, true, true, true, 0, 0},
	{false, false, true, "Cheetah", 65.0, 194.00, 20000, 15, 0, 4			, 2		, true, true, true, 1, 15},
	{false, false, true, "Ambulance", 120.0, 155.00, 600000, 30, 0, 0		, 4		, true, true, true, 0, 0},
	{false, false, false, "Leviathan", 400.0, 1.00, 1500000, 30, 0, MAX_BOOT_SLOTS	, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Moonbeam", 60.0, 116.00, 16000, 2, 0, 12			, 4		, true, true, true, 0, 0},
	{false, false, true, "Esperanto", 40.0, 150.00, 20000, 3, 0, 5			, 2		, true, true, true, 0, 0},
	{false, false, true, "Taxi", 60.0, 146.00, 80000, 8, 0, 8				, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Washington", 50.0, 155.00, 15000, 2, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Bobcat", 70.0, 141.00, 20000, 6, 0, 8				, 2		, true, true, true, 0, 0},
	{false, false, true, "MrWhoopee", 60.0, 99.00, 30000, 15, 0, 0			, 2		, true, true, true, 0, 0},
	{false, false, true, "BFInjection", 30.0, 136.00, 20000, 12, 0, 4		, 2		, true, true, false, 1, 20},
	{false, false, false, "Hunter", 425.0, 1.00, 3000000, 30, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Premier", 70.0, 175.00, 21000, 3, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Enforcer", 120.0, 167.00, 200000, 16, 0, 0		, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Securicar", 80.0, 158.00, 150000, 15, 0, 12		, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Banshee", 65.0, 203.00, 20000, 15, 0, 4			, 2		, true, true, true, 1, 15},
	{false, false, false, "Predator", 1.0, 1.00, 80000, 10, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{false, false, true, "Bus", 180.0, 131.00, 500000, 20, 0, 20			, 500	, true, true, true, 0, 0},
	{false, false, true, "Rhino", 200.0, 95.00, 10000000, 100, 0, 0			, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Barracks", 150.0, 111.00, 600000, 80, 0, 0		, 2		, true, true, true, 0, 0},
	{false, false, true, "Hotknife", 50.0, 168.00, 300000, 15, 0, 4			, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Trailer1", 1.0, 1.00, 50000, 5, 0, 0				, 0		, false, false, false, 0, 0}, // >>>> No.
	{false, false, true, "Previon", 40.0, 150.00, 8000, 2, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, true, "Coach", 150.0, 159.00, 450000, 30, 0, 20			, 500	, true, true, true, 0, 0},
	{false, false, true, "Cabbie", 80.0, 144.00, 54000, 5, 0, 6				, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Stallion", 60.0, 170.00, 15000, 2, 0, 6			, 2		, true, true, true, 0, 0},
	{false, false, true, "Rumpo", 60.0, 137.00, 20000, 5, 0, 12				, 4		, true, true, true, 0, 0},
	{false, false, false, "RCBandit", 1.0, 1.00, 500, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Romero", 60.0, 140.00, 80000, 10, 0, 0			, 2		, true, true, true, 0, 0},
	{false, false, true, "Packer", 150.0, 127.00, 500000, 15, 0, 0			, 2		, true, true, true, 0, 0},
	{false, false, true, "Monster", 80.0, 111.00, 20000, 20, 0, 20			, 2		, true, true, true, 2, 50},
	{false, false, true, "Admiral", 65.0, 165.00, 5000, 1, 0, 4				, 4		, true, true, true, 0, 0},
	{false, false, false, "Squalo", 1.0, 1.00, 20000, 12, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 2, 35},
	{false, false, false, "Seasparrow", 120.0, 1.00, 500000, 16, 0, MAX_BOOT_SLOTS	, 2		, true, true, true, 2, 150},
	{false, false, true, "Pizzaboy", 20.0, 116.00, 1600, 1, 0, 0			, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Tram", 1.0, 1.00, 0, 0, 0, 0						, 0		, false, false, false, 0, 0}, // >>>> No.
	{false, false, false, "Trailer2", 1.0, 1.00, 0, 0, 0, 0					, 0		, false, false, false, 0, 0}, // >>>> No.
	{false, false, true, "Turismo", 80.0, 195.00, 20000, 15, 0, 6			, 2		, true, true, true, 1, 30},
	{false, false, false, "Speeder", 1.0, 1.00, 1500000, 15, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{false, false, false, "Reefer", 1.0, 1.00, 800000, 10, 0, MAX_BOOT_SLOTS, 1		, true, true, true, 0, 0},
	{false, false, false, "Tropic", 1.0, 1.00, 1600000, 15, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 2, 35},
	{false, false, true, "Flatbed", 120.0, 159.00, 50000, 10, 0, 0			, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Yankee", 50.0, 107.00, 80000, 8, 0, 15			, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Caddy", 10.0, 96.00, 20000, 1, 0, 0				, 2		, true, true, false, 1, 30}, // >>>> No.
	{false, false, true, "Solair", 80.0, 158.00, 20000, 3, 0, 8				, 4		, true, true, true, 0, 0},
	{false, false, true, "BerkleyRCVan", 60.0, 137.00, 50000, 5, 0, 12		, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Skimmer", 250.0, 1.00, 160000, 15, 0, MAX_BOOT_SLOTS		, 2		, true, true, true, 0, 0},
	{false, false, true, "PCJ-600", 45.0, 167.00, 40000, 5, 0, 0			, 2		, true, true, false, 0, 0},
	{false, false, true, "Faggio", 20.0, 107.00, 1500, 1, 0, 0				, 2		, true, true, false, 0, 0},
	{false, false, true, "Freeway", 60.0, 142.00, 30000, 6, 0, 0			, 2		, true, true, false, 0, 0},
	{false, false, false, "RCBaron", 1.0, 1.00, 500, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "RCRaider", 1.0, 1.00, 500, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Glendale", 50.0, 148.00, 2000, 1, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Oceanic", 50.0, 141.00, 16000, 1, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Sanchez", 40.0, 143.00, 50000, 2, 0, 0			, 2		, true, true, false, 0, 0},
	{false, false, false, "Sparrow", 140.0, 1.00, 500000, 30, 0, MAX_BOOT_SLOTS		, 2		, true, true, true, 2, 55}, // >>>> No.
	{false, false, true, "Patriot", 120.0, 158.00, 20000, 15, 0, 8			, 4		, true, true, true, 1, 30},
	{false, false, true, "Quad", 25.0, 111.00, 20000, 1, 0, 0				, 2		, true, true, false, 1, 10},
	{false, false, false, "Coastguard", 1.0, 1.00, 150000, 5, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Dinghy", 1.0, 1.00, 10000, 5, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 0, 0},
	{false, false, true, "Hermes", 80.0, 150.00, 9000, 2, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, true, "Sabre", 45.0, 174.00, 12000, 2, 0, 6				, 2		, true, true, true, 0, 0},
	{true, false, false, "Rustler", 250.0, 1.00, 30000, 15, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{false, false, true, "ZR-350", 60.0, 188.00, 120000, 3, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Walton", 50.0, 118.00, 3500, 1, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, true, "Regina", 80.0, 141.00, 10000, 5, 0, 10			, 4		, true, true, true, 0, 0},
	{false, false, true, "Comet", 45.0, 186.00, 130000, 6, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, false, "BMX", 1.0, 1.00, 150, 1, 0, 0					, 1		, false, true, true, 0, 0},
	{false, false, true, "Burrito", 60.0, 158.00, 40000, 6, 0, 12			, 4		, true, true, true, 0, 0},
	{false, false, true, "Camper", 50.0, 124.00, 60000, 9, 0, 10			, 3		, true, true, true, 0, 0},
	{false, false, false, "Marquis", 1.0, 1.00, 6000000, 20, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{false, false, true, "Baggage", 20.0, 100.00, 1000, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Dozer", 25.0, 65.00, 50000, 5, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Maverick", 200.0, 1.00, 20000, 20, 0, MAX_BOOT_SLOTS		, 4		, true, true, true, 1, 80}, // >>>> No.
	{false, false, false, "NewsChopper", 200.0, 1.00, 500000, 20, 0, MAX_BOOT_SLOTS	, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Rancher", 90.0, 140.00, 60000, 6, 0, 10			, 2		, true, true, true, 0, 0},
	{false, false, true, "FBIRancher", 90.0, 158.00, 80000, 8, 0, 12		, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Virgo", 45.0, 150.00, 6000, 1, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Greenwood", 45.0, 141.00, 12000, 2, 0, 4			, 4		, true, true, true, 0, 0},
	{false, false, false, "Jetmax", 1.0, 1.00, 5000000, 20, 0, MAX_BOOT_SLOTS				, 1		, true, true, true, 1, 35},
	{false, false, true, "Hotring", 80.0, 216.00, 20000, 15, 0, 0			, 2		, true, true, true, 1, 35},
	{false, false, true, "Sandking", 60.0, 178.00, 20000, 15, 0, 10			, 2		, true, true, true, 1, 35},
	{false, false, true, "Blista Compact", 60.0, 164.00, 6500, 1, 0, 4		, 2		, true, true, true, 0, 0},
	{false, false, false, "Police Maverick", 200.0, 1.00, 600000, 20, 0, MAX_BOOT_SLOTS		, 4		, true, true, true, 0, 0},
	{false, false, true, "Boxville", 60.0, 109.00, 80000, 12, 0, 12			, 4		, true, true, true, 0, 0},
	{false, false, true, "Benson", 70.0, 124.00, 80000, 12, 0, 12			, 2		, true, true, true, 0, 0},
	{false, false, true, "Mesa", 60.0, 141.00, 30000, 5, 0, 2				, 2		, true, true, true, 0, 0},
	{false, false, false, "RCGoblin", 1.0, 1.00, 500, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "HotringRacer A", 80.0, 216.00, 20000, 20, 0, 0	, 2		, true, true, true, 1, 35},
	{false, false, true, "HotringRacer B", 80.0, 216.00, 20000, 20, 0, 0	, 2		, true, true, true, 1, 35},
	{false, false, true, "BloodringBanger", 40.0, 174.00, 80000, 15, 0, 0	, 2		, true, true, true, 1, 20},
	{false, false, true, "Rancher", 80.0, 140.00, 60000, 6, 0, 10			, 2		, true, true, true, 0, 0},
	{false, false, true, "SuperGT", 60.0, 180.00, 250000, 15, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Elegant", 65.0, 167.00, 5000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Journey", 90.0, 108.00, 40000, 4, 0, 12			, 2		, true, true, true, 0, 0},
	{false, false, false, "Bike", 1.0, 1.00, 500, 1, 0, 0					, 1		, false, true, true, 0, 0}, // >>>> No.
	{false, false, false, "MountainBike", 1.0, 1.00, 500, 1, 0, 0			, 1		, false, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Beagle", 300.0, 1.00, 6000000, 16, 0, MAX_BOOT_SLOTS		, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Cropdust", 150.0, 1.00, 1200000, 12, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Stunt", 150.0, 1.00, 1200000, 12, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Tanker", 130.0, 121.00, 300000, 20, 0, 0			, 2		, true, true, true, 0, 0},
	{false, false, true, "Roadtrain", 150.0, 143.00, 600000, 20, 0, 0		, 2		, true, true, true, 0, 0},
	{false, false, true, "Nebula", 60.0, 158.00, 4000, 1, 0, 4				, 4		, true, true, true, 0, 0},
	{false, false, true, "Majestic", 45.0, 158.00, 4000, 1, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Buccaneer", 50.0, 165.00, 4500, 1, 0, 4			, 2		, true, true, true, 0, 0},
	{true, true, false, "Shamal", 3000.0, 1.00, 20000000, 30, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{true, false, false, "Hydra", 3000.0, 1.00	, 50000000, 100, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 0, 0},
	{false, false, true, "FCR-900", 50.0, 169.00, 60000, 6, 0, 0			, 2		, true, true, false, 1, 25},
	{false, false, true, "NRG-500", 40.0, 190.00, 80000, 8, 0, 0			, 2		, true, true, false, 1, 30},
	{false, false, true, "HPV1000", 60.0, 168.00, 50000, 8, 0, 0			, 2		, true, true, false, 0, 0}, // >>>> No.
	{false, false, true, "CementTruck", 30.0, 131.00, 80000, 8, 0, 0		, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "TowTruck", 60.0, 162.00, 30000, 3, 0, 4			, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Fortune", 40.0, 159.00, 10000, 2, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Cadrona", 45.0, 150.00, 10000, 2, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "FBITruck", 80.0, 178.00, 150000, 15, 0, 12		, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Willard", 55.0, 150.00, 5000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Forklift", 10.0, 61.00, 1500, 1, 0, 0				, 1		, true, true, true, 0, 0},
	{false, false, true, "Tractor", 30.0, 71.00, 2000, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Combine", 20.0, 111.00, 10000, 2, 0, 0			, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Feltzer", 50.0, 168.00, 13000, 3, 0, 6			, 2		, true, true, true, 0, 0},
	{false, false, true, "Remington", 60.0, 170.00, 15000, 3, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Slamvan", 60.0, 159.00, 20000, 8, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Blade", 62.0, 174.00, 30000, 4, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, false, "Freight", 1.0, 1.00, 1000000, 100, 0, 0			, 500	, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Streak", 1.0, 1.00, 1000000, 100, 0, 0			, 500	, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Vortex", 20.0, 100.00, 2000, 20, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Vincent", 40.0, 150.00, 5000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Bullet", 60.0, 204.00, 20000, 15, 0, 4			, 2		, true, true, true, 1, 40},
	{false, false, true, "Clover", 45.0, 165.00, 6000, 1, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Sadler", 60.0, 152.00, 5000, 1, 0, 8				, 2		, true, true, true, 0, 0},
	{false, false, true, "FiretruckLA", 120.0, 149.00, 2000000, 20, 0, 0	, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Hustler", 80.0, 148.00, 60000, 25, 0, 6			, 2		, true, true, true, 0, 0},
	{false, false, true, "Intruder", 60.0, 150.00, 15000, 3, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Primo", 55.0, 144.00, 3000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, false, "Cargobob", 400.0, 1.00, 3000000, 20, 0, MAX_BOOT_SLOTS	, 2		, true, true, true, 0, 0},
	{false, false, true, "Tampa", 60.0, 154.00, 12000, 2, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Sunrise", 60.0, 146.00, 9000, 2, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Merit", 55.0, 158.00, 8000, 2, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Utility", 60.0, 122.00, 30000, 3, 0, 6			, 2		, true, true, true, 0, 0}, // >>>> No.
	{true, true, false, "Nevada", 15000.0, 1.00, 2000000, 30, 0, MAX_BOOT_SLOTS		, 1		, true, true, true, 0, 0},
	{false, false, true, "Yosemite", 60.0, 145.00, 25000, 3, 0, 8			, 2		, true, true, true, 0, 0},
	{false, false, true, "Windsor", 45.0, 159.00, 13500, 3, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "MonsterA", 45.0, 111.00, 20000, 20, 0, 20			, 2		, true, true, true, 1, 50},
	{false, false, true, "MonsterB", 60.0, 111.00, 20000, 20, 0, 20			, 2		, true, true, true, 1, 50},
	{false, false, true, "Uranus", 80.0, 157.00, 15000, 3, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Jester", 60.0, 179.00, 25000, 5, 0, 4				, 2		, true, true, true, 1, 15},
	{false, false, true, "Sultan", 60.0, 170.00, 80000, 5, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Stratum", 60.0, 155.00, 29000, 4, 0, 8			, 4		, true, true, true, 0, 0},
	{false, false, true, "Elegy", 60.0, 179.00, 20000, 6, 0, 6				, 2		, true, true, true, 1, 15},
	{false, false, false, "Raindance", 400.0, 1.00, 500000, 15, 0, MAX_BOOT_SLOTS	, 2		, true, true, true, 0, 0},
	{false, false, false, "RC Tiger", 1.0, 1.00, 500, 1, 0, 0				, 1		, true, true, true, 0, 0},
	{false, false, true, "Flash", 60.0, 166.00, 60000, 6, 0, 8				, 2		, true, true, true, 0, 0},
	{false, false, true, "Tahoma", 40.0, 161.00, 15000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Savanna", 50.0, 174.00, 30000, 5, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Bandito", 30.0, 147.00, 30000, 5, 0, 0			, 1		, true, true, true, 0, 0},
	{false, false, false, "FreightFlat", 1.0, 1.00, 5000000, 50, 0, 0		, 0		, true, true, true, 0, 0},
	{false, false, false, "StreakCarriage", 1.0, 1.00, 5000000, 50, 0, 0	, 0		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Kart", 10.0, 94.00, 20000, 1, 0, 0				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Mower", 15.0, 61.00, 1200, 1, 0, 0				, 1		, true, true, true, 0, 0},
	{false, false, true, "Duneride", 80.0, 111.00, 1000000, 20, 0, 20		, 2		, true, true, true, 2, 50},
	{false, false, true, "Sweeper", 20.0, 61.00, 4000, 1, 0, 2				, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Broadway", 45.0, 159.00, 20000, 6, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Tornado", 40.0, 159.00, 6000, 1, 0, 4				, 2		, true, true, true, 0, 0},
	{true, true, false, "AT-400", 25000.0, 1.00, 10000000, 50, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "DFT-30", 80.0, 131.00, 100000, 10, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Huntley", 80.0, 159.00, 60000, 6, 0, 8			, 4		, true, true, true, 0, 0},
	{false, false, true, "Stafford", 60.0, 154.00, 90000, 2, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "BF-400", 35.0, 168.00, 13000, 2, 0, 0				, 2		, true, true, false, 0, 0},
	{false, false, true, "Newsvan", 60.0, 137.00, 30000, 3, 0, 10			, 4		, false, false, false, 0, 0},
	{false, false, true, "Tug", 15.0, 86.00, 2000, 1, 0, 0					, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Trailer 3", 1.0, 1.00, 160000, 15, 0, 0			, 0		, true, true, true, 0, 0},
	{false, false, true, "Emperor", 60.0, 154.00, 6000, 1, 0, 6				, 4		, true, true, true, 0, 0},
	{false, false, true, "Wayfarer", 50.0, 158.00, 8000, 2, 0, 0			, 2		, true, true, false, 0, 0},
	{false, false, true, "Euros", 50.0, 166.00, 20000, 3, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Hotdog", 60.0, 109.00, 30000, 5, 0, 12			, 2		, true, true, true, 0, 0},
	{false, false, true, "Club", 65.0, 164.00, 20000, 10, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, false, "FreightCarriage", 1.0, 1.00, 1000000, 100, 0, 0	, 0		, false, false, false, 0, 0}, // >>>> No.
	{false, false, false, "Trailer3", 1.0, 1.00, 1000000, 100, 0, 0			, 0		, false, false, false, 0, 0}, // >>>> No.
	{true, true, false, "Andromada", 30000.0, 1.00, 1000000, 100, 0, MAX_BOOT_SLOTS	, 500	, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Dodo", 250.0, 1.00, 750000, 12, 0, MAX_BOOT_SLOTS, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "RCCam", 1.0, 1.00, 500, 1, 0, 0					, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "Launch", 1.0, 1.00, 800000, 8, 0, MAX_BOOT_SLOTS	, 1		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "LSPD", 60.0, 177.00, 50000, 10, 0, 8				, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "SFPD", 60.0, 177.00, 50000, 10, 0, 8				, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "LVPD", 60.0, 177.00, 50000, 10, 0, 8				, 4		, true, true, true, 0, 0},
	{false, false, true, "PoliceRanger", 90.0, 159.00, 70000, 10, 0, 12		, 2		, true, true, true, 0, 0}, // // >>>> No. >>>> No.
	{false, false, true, "Picador", 40.0, 152.00, 4500, 1, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, true, "S.W.A.T.Van", 30.0, 111.00, 4000000, 50, 0, 0		, 2		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Alpha", 60.0, 170.00, 50000, 8, 0, 4				, 2		, true, true, true, 0, 0},
	{false, false, true, "Phoenix", 60.0, 172.00, 35000, 10, 0, 4			, 2		, true, true, true, 0, 0},
	{false, false, true, "Glendale", 30.0, 148.00, 1500, 1, 0, 6			, 4		, true, true, true, 0, 0},
	{false, false, true, "Sadler", 40.0, 152.00, 1600, 1, 0, 6				, 2		, true, true, true, 0, 0},
	{false, false, false, "LuggageTrailerA", 1.0, 1.00, 500, 1, 0, 0		, 0		, true, true, true, 0, 0},
	{false, false, false, "LuggageTrailerB", 1.0, 1.00, 500, 1, 0, 0		, 0		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "StairTrailer", 1.0, 1.00, 500, 1, 0, 0			, 0		, true, true, true, 0, 0}, // >>>> No.
	{false, false, true, "Boxville", 90.0, 108.00, 60000, 6, 0, 15			, 4		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "FarmPlow", 1.0, 1.00, 3000, 1, 0, 0				, 0		, true, true, true, 0, 0}, // >>>> No.
	{false, false, false, "UtilityTrailer", 1.0, 1.00, 1000, 1, 0, 0		, 0		, true, true, true, 0, 0} // >>>> No.
};

enum
{
	BOOT_TYPE_WEAPON,
	BOOT_TYPE_MEDICINES,
	BOOT_TYPE_CANNABIS,
	BOOT_TYPE_CRACK
};
enum enum_VEHICLE_BOOT
{
	bool:vehicle_boot_VALID,
	vehicle_boot_OBJECT_ID,
	vehicle_boot_TYPE,
	vehicle_boot_INT,
	vehicle_boot_INT_EXTRA,
}
new VEHICLE_BOOT[MAX_VEHICLES][MAX_BOOT_SLOTS][enum_VEHICLE_BOOT];

enum SELL_INFO_VEHICLES_Enum
{
	sel_info_vehicle_MODELID,
	Float:sell_info_SPAWN_X,
	Float:sell_info_SPAWN_Y,
	Float:sell_info_SPAWN_Z,
	Float:sell_info_SPAWN_ANGLE,
	sell_info_COLOR_1,
	sell_info_COLOR_2,
	sell_info_SHOP,
}
new SELL_INFO_VEHICLES[][SELL_INFO_VEHICLES_Enum] = //Vehículos a la venta
{
	{515, -1936.0914,   269.3503,   42.0605,   271.6686,   -1, -1, 0},
	{514, -1935.5033,   261.1449,   41.6287,   270.1566,   -1, -1, 0},
	{403, -1935.6809,   255.7126,   41.6483,   269.8951,   -1, -1, 0},
	{400, -1971.730834, 305.717071, 35.281467, 112.761856, -1, -1, 0}, //conce0
	{489, -1972.303588, 299.899291, 35.315319, 113.739143, -1, -1, 0}, //conce0
	{500, -1989.106811, 267.932830, 35.276290, 267.933868, -1, -1, 0}, //conce0
	{516, -1988.849243, 262.505828, 35.014682, 273.633972, -1, -1, 0}, //conce0
	{517, -1989.152587, 257.527374, 35.020854, 278.511993, -1, -1, 0}, //0
	{518, -1990.650756, 252.367614, 34.853424, 260.343750, -1, -1, 0}, //0
	{526, -1991.783203, 247.102294, 34.938541, 263.152526, -1, -1, 0}, //0
	{529, -1992.195556, 241.864547, 34.804782, 265.900787, -1, -1, 0}, //0
	{533, -1970.909790, 271.824432, 34.874591, 92.208198, -1, -1, 0}, //0
	{534, -1971.686889, 266.768585, 34.897808, 90.052833, -1, -1, 0}, //0
	{535, -1972.078857, 261.530334, 34.940402, 91.687599, -1, -1, 0}, //0
	{536, -1971.535644, 255.783843, 34.909259, 90.030273, -1, -1, 0}, //0
	{540, -1985.110107, 303.989593, 35.031871, 247.498382, -1, -1, 0}, //0
	{543, -1959.895751, 272.834747, 35.330417, 315.005645, -1, -1, 0}, //0
	{546, -1947.004760, 265.553222, 35.208316, 44.999832, -1, -1, 0}, //0
	{547, -1957.724731, 261.617736, 35.244117, 134.999298, -1, -1, 0}, //0
	{549, -1950.561035, 258.919067, 35.165855, 23.361270, -1, -1, 0}, //0
	{551, -1961.752929, 284.531127, 35.270526, 0.696665, -1, -1, 0}, //0
	{554, -1946.718139, 257.937591, 41.083919, 45.030506, -1, -1, 0}, //0
	{555, -1955.544677, 257.741241, 40.755210, 315.004882, -1, -1, 0}, //0
	{558, -1945.867919, 273.318969, 40.666416, 135.659255, -1, -1, 0}, //0
	{559, -1946.407836, 264.562194, 40.705158, 70.021125, -1, -1, 0}, //0
	{560, -1953.854003, 295.461822, 40.762950, 141.442657, -1, -1, 0}, //0
	{561, -1954.960693, 302.385498, 40.873092, 45.000858, -1, -1, 0}, //0
	{562, -1955.735351, 274.163513, 40.699062, 224.775680, -1, -1, 0}, //0
	{565, 561.566101, -1290.956542, 16.871730, 13.598201, -1, -1, 1}, //1
	{566, 555.651794, -1290.101562, 17.030550, 12.250467, -1, -1, 1}, //1
	{567, 548.681701, -1288.398803, 17.121070, 2.627753, -1, -1, 1}, //1
	{575, 543.408569, -1290.018676, 16.844970, 12.805674, -1, -1, 1}, //1
	{576, 537.712585, -1289.785278, 16.853311, 8.072924, -1, -1, 1}, //1
	{579, 531.610229, -1289.627563, 17.179222, 0.727972, -1, -1, 1}, //1
	{580, 524.575805, -1290.402587, 17.038362, 347.873016, -1, -1, 1}, //1
	{585, 519.242980, -1287.057373, 16.828090, 306.424560, -1, -1, 1}, //1
	{587, 527.172241, -1282.828613, 16.988870, 225.000015, -1, -1, 1}, //1
	{589, 531.867553, -1279.575195, 16.918565, 225.000091, -1, -1, 1}, //1
	{600, 536.016235, -1276.898681, 16.963094, 225.002395, -1, -1, 1}, //1
	{602, 539.315979, -1273.561767, 17.073772, 224.999908, -1, -1, 1}, //1
	{603, 543.021911, -1270.594482, 17.126434, 224.998825, -1, -1, 1}, //1
	{402, 547.388854, -1268.065185, 17.089252, 225.000061, -1, -1, 1}, //1
	{405, 550.830261, -1264.989990, 17.167030, 225.000000, -1, -1, 1}, //1
	{604, 2123.362304, -1144.851196, 24.472566, 314.818267, -1, -1, 2}, //2
	{605, 2120.166748, -1141.430053, 24.722545, 314.695739, -1, -1, 2}, //2
	{542, 2120.096923, -1136.088378, 24.996570, 314.858062, -1, -1, 2}, //2
	{462, 2126.857177, -1147.089843, 24.115188, 314.773010, -1, -1, 2}, //2
	{543, 2132.541748, -1142.541259, 24.895196, 44.777957, -1, -1, 2}, //2
	{529, 2135.447509, -1140.396362, 24.948331, 45.030994, -1, -1, 2}, //2
	{401, 1730.930053, 1887.108520, 10.599695, 134.999694, -1, -1, 3}, //
	{404, 1731.381225, 1892.453125, 10.569231, 134.707473, -1, -1, 3}, //
	{405, 1731.109252, 1898.369384, 10.702906, 135.000000, -1, -1, 3}, //
	{410, 1731.451293, 1903.748901, 10.504331, 135.005813, -1, -1, 3}, //
	{412, 1730.241699, 1908.477050, 10.707293, 134.881576, -1, -1, 3}, //
	{413, 1730.819458, 1914.079833, 10.902223, 134.658706, -1, -1, 3}, //
	{418, 1730.897949, 1919.471923, 10.925701, 135.000335, -1, -1, 3}, //
	{419, 1730.598510, 1924.523437, 10.644100, 135.000000, -1, -1, 3}, //
	{421, 1730.842407, 1929.510375, 10.778207, 134.998794, -1, -1, 3}, //
	{422, 1731.021850, 1934.202270, 10.808994, 135.312362, -1, -1, 3}, //
	{426, 1731.136352, 1938.637451, 10.596670, 134.887939, -1, -1, 3}, //
	{426, 1730.754760, 1943.268554, 10.570414, 134.479446, -1, -1, 3}, //
	{439, 1731.084106, 1948.810180, 10.755937, 134.970794, -1, -1, 3}, //
	{445, 1730.763916, 1954.217285, 10.718680, 134.999984, -1, -1, 3}, //
	{458, 1731.066528, 1959.513549, 10.657438, 136.287368, -1, -1, 3}, //
	{459, 1731.444946, 1964.863403, 10.899006, 134.975570, -1, -1, 3}, //
	{466, 1730.831176, 1969.622192, 10.593549, 134.999984, -1, -1, 3}, //
	{467, 1730.754882, 1975.104492, 10.608223, 134.999969, -1, -1, 3}, //
	{474, 1730.852539, 1980.575927, 10.568473, 135.129379, -1, -1, 3}, //
	{475, 1730.986572, 1986.015014, 10.660503, 134.965286, -1, -1, 3}, //
	{477, 1731.019409, 1990.834350, 10.559190, 134.795349, -1, -1, 3}, //
	{478, 1731.501220, 1996.037841, 10.857707, 134.984298, -1, -1, 3}, //
	{479, 1731.119262, 2000.719360, 10.598874, 134.999588, -1, -1, 3}, //
	{480, 1731.495361, 2005.884155, 10.634652, 134.999740, -1, -1, 3}, //
	{482, 1731.285766, 2010.759765, 10.950078, 135.215301, -1, -1, 3}, //
	{483, 1730.935058, 2014.496948, 10.826995, 135.018432, -1, -1, 3}, //
	{489, 1731.131103, 2019.822509, 10.965262, 134.999526, -1, -1, 3}, //
	{491, 1742.855224, 1886.187866, 10.607666, 224.881958, -1, -1, 3}, //
	{492, 1742.420410, 1891.042602, 10.625684, 225.000015, -1, -1, 3}, //
	{496, 1741.725830, 1895.996459, 10.518464, 224.999679, -1, -1, 3}, //
	{500, 1741.789916, 1901.220703, 10.979518, 224.999908, -1, -1, 3}, //
	{507, 1742.658081, 1905.751464, 10.650567, 224.999938, -1, -1, 3}, //
	{461, 1745.890258, 1853.801513, 10.397463, 44.999942, -1, -1, 3}, //
	{462, 1741.982177, 1853.458618, 10.424824, 45.022659, -1, -1, 3}, //
	{463, 1738.716674, 1853.531250, 10.366888, 45.000011, -1, -1, 3}, //
	{468, 1735.504272, 1853.494750, 10.499835, 44.996749, -1, -1, 3}, //
	{471, 1732.698120, 1853.572998, 10.344942, 44.999938, -1, -1, 3}, //
	{521, 1729.782714, 1853.793823, 10.406937, 44.999969, -1, -1, 3}, //
	{522, 1727.729858, 1853.685791, 10.398012, 44.997669, -1, -1, 3}, //
	{581, 1725.653930, 1853.688842, 10.425397, 45.000293, -1, -1, 3}, //
	{586, 1722.802734, 1853.941406, 10.325091, 45.006359, -1, -1, 3}, //
	{470, 1742.820800, 1913.142211, 10.816078, 229.028472, -1, -1, 3},
	{444, 1742.383178, 1877.171997, 11.191605, 207.159729, -1, -1, 3},
	{556, 1730.099609, 1877.612792, 11.195281, 145.682418, -1, -1, 3},
	{568, 1741.999877, 1919.793823, 10.684306, 230.327041, -1, -1, 3},
	{571, 1748.815063, 1854.531616, 10.108824, 43.566219 , -1, -1, 3},
	{531, 1742.570190, 1923.476196, 10.785881, 234.443817, -1, -1, 3},
	{409, 1736.970092, 2030.637451, 10.619542, 359.768463, -1, -1, 3},
	{573, 1736.567016, 1873.478393, 11.484094, 181.366882, -1, -1, 3},
	{402, -1660.500610, 1214.428955, 7.081802, 245.781250, -1, -1, 4}, //
	{411, -1659.630004, 1216.934814, 13.398953, 332.907165, -1, -1, 4}, //
	{415, -1653.029663, 1210.681518, 13.444266, 253.155578, -1, -1, 4}, //
	{429, -1669.283081, 1206.197265, 13.351553, 294.647796, -1, -1, 4}, //
	{434, -1665.829223, 1222.459350, 13.684193, 224.999526, -1, -1, 4}, //
	{451, -1666.966186, 1205.829345, 20.861524, 324.716613, -1, -1, 4}, //
	{506, -1658.944458, 1206.433837, 20.860774, 17.348609, -1, -1, 4}, //
	{541, -1649.423461, 1206.491821, 20.775476, 133.478042, -1, -1, 4}, //
	{545, -1656.527587, 1216.405029, 21.003622, 44.999988, -1, -1, 4}, //
	{446, -2231.2676, 2451.4797, 0.0119, 228.6364, -1, -1, 5},
	{452, -2241.1306, 2440.2146, 0.0119, 226.4393, -1, -1, 5},
	{453, -2250.6514, 2428.3452, 0.0119, 226.4393, -1, -1, 5},
	{454, -2262.2539, 2419.0127, 0.0119, 226.4393, -1, -1, 5},
	{454, -2202.1697, 2421.1807, 0.0119, 45.7924, -1, -1,  5},
	{472, -2234.6467, 2394.7185, 0.2970, 42.8398, -1, -1,  5},
	{484, -2213.1201, 2411.4111, 0.0119, 46.0592, -1, -1,  5},
	{473, -2237.2305, 2390.8669, 0.2970, 42.8398, -1, -1,  5},
	{493, -2223.5603, 2400.2893, -0.0596, 46.0592, -1, -1, 5},
	{595, -2245.3577, 2433.8679, 0.5854, 226.4393, -1, -1, 5},
	{487, 1331.6254, 1562.7415, 11.0567, -90.0000, -1, -1, 6},
	{447, 1331.6254, 1581.2415, 11.0567, -90.0000, -1, -1, 6},
	{469, 1331.6254, 1596.7415, 11.0567, -90.0000, -1, -1, 6}
};
new Float:SELL_VEHICLES_SHOPS_SPAWN[][] =
{
	{-1920.1965, 302.7697, 40.5643, -90.0000},
	{563.774475, -1273.510986, 16.867170, 12.636687},
	{2133.863037, -1129.836791, 25.270145, 71.406616},
	{1677.705078, 1790.098144, 10.445111, 89.955596},
	{-1645.245361, 1217.047973, 6.732273, 224.517120},
	{-2258.0054, 2477.0315, 0.2512, 313.4971}, //barcos
	{1358.9822, 1540.4270, 11.0567, -90.0} //helis
};

enum SELL_VEHICLES_Enum
{
	bool:sell_vehicle_VALID,
	sell_vehicle_SHOP,
	sell_vehicle_PRICE,
	sell_vehicle_LEVEL,
	sell_vehicle_EXTRA,
	sell_vehicle_VIP_LEVEL,
	Text3D:sell_vehicle_LABEL_ID,
}
new SELL_VEHICLES[MAX_VEHICLES][SELL_VEHICLES_Enum];

// AGRICULTOR
enum
{
	PLANT_TYPE_MEDICINE, 	// VIDA
	PLANT_TYPE_CANNABIS,	// YOKSETIOXD
	PLANT_TYPE_CRACK,		//CHALECO
}

enum seed_info_enum
{
	seed_info_TYPE,
	seed_info_PLANT_TYPE,
	seed_info_EXP,
	seed_info_NAME[24],
	seed_info_PRICE,
}
new seed_info[][seed_info_enum] =
{
	{TYPE_LEGAL, PLANT_TYPE_MEDICINE, 0, "Medicina", 200}, // Presio
	{TYPE_ILLEGAL, PLANT_TYPE_CANNABIS, 30, "Marihuana", 500},
	{TYPE_ILLEGAL, PLANT_TYPE_CRACK, 50, "Coca", 600}
};

enum plant_info_enum
{
	plant_info_SEEDS,
	plant_info_NAME[24],
}
new plant_info[][plant_info_enum] =
{
	{2, "Medicamento"},
	{4, "Marihuana"},
	{5, "Crack"}
};


#define MAX_PLANTS	500
enum PLANTS_ENUM
{
	bool:plant_VALID,
	bool:plant_GROWING,
	bool:plant_INVISIBLE,
	Float:plant_GROWING_PROGRESS,
	plant_TYPE,
	plant_PLANTED_BY_ACCOUNT_ID,
	plant_PLANTED_BY_NAME[24],
	plant_OBJECT_ID,
	Text3D:plant_LABEL_ID,
	plant_EXPIRE_TIME,
	plant_TIMER,
	plant_IMMUNITY,
}
new PLANTS[MAX_PLANTS][PLANTS_ENUM];

enum
{
	OBJECT_TYPE_NONE,
	OBJECT_TYPE_PLANT,
	OBJECT_TYPE_POLICE,
	OBJECT_TYPE_FURNITURE,
	OBJECT_TYPE_WH_BOX,
	OBJECT_TYPE_GRAFFITI,
	OBJECT_TYPE_TEST
}

/* SYSTEM - GPS */
enum
{
	CHECKPOINT_TYPE_NONE,
	CHECKPOINT_TYPE_GPS,

	CHECKPOINT_TYPE_UNLOAD_TRAILER,
	CHECKPOINT_TYPE_FINISH_TRAILER,

	CHECKPOINT_TYPE_UNLOAD_TRUCK,
	CHECKPOINT_TYPE_FINISH_TRUCK,
	CHECKPOINT_TYPE_HARVEST,
	CHECKPOINT_TYPE_FUMIGATOR,
	CHECKPOINT_TYPE_TRASH,
	CHECKPOINT_TYPE_FINISH_TRASH,
	CHECKPOINT_TYPE_LUMBERJACK,
	CHECKPOINT_TYPE_PIZZA_DEL,
	CHECKPOINT_TYPE_PIZZA_FINISH,
	CHECKPOINT_TYPE_DRIVING_SCHOOL,
	CHECKPOINT_TYPE_WH_PICKUP,
	CHECKPOINT_TYPE_WH_PUT,
	CHECKPOINT_TYPE_DMAN,
	CHECKPOINT_TYPE_FINISH_DMAN
}


#define MAX_PLAYER_GPS_SAVES	10
#define MAX_LISTITEMS			35
enum Player_GPS_Enum
{
	player_gps_VALID,
	player_gps_ID,
	player_gps_NAME[24],
	Float:player_gps_X,
	Float:player_gps_Y,
	Float:player_gps_Z,
	player_gps_WORLD,
	player_gps_INTERIOR,
}
new PLAYER_GPS[MAX_PLAYERS][MAX_PLAYER_GPS_SAVES][Player_GPS_Enum];


/* SYSTEM - PHONE */
enum
{
	CALL_GAME_STATE_NONE,
	CALL_STATE_WAITING_RESPONSE,
	CALL_STATE_INCOMING_CALL,
	CALL_STATE_ESTABLISHED,
}

enum
{
	PHONE_STATE_ON,
	PHONE_STATE_OFF,
}

#define MAX_PHONE_CONTACTS	20
enum Phone_Info_Enum
{
	player_phone_VALID,
	player_phone_NUMBER,
	player_phone_STATE,
	player_phone_VISIBLE_NUMBER // para elegir si quieres aparecer en la guia o no
};
new PLAYER_PHONE[MAX_PLAYERS][Phone_Info_Enum]; //PPI (PlayerPhoneInfo)

enum Phone_Book_Enum
{
	phone_book_contact_VALID,

	phone_book_contact_ID,
	phone_book_contact_NAME[24],
	phone_book_contact_PHONE_NUMBER,
}
new PLAYER_PHONE_BOOK[MAX_PLAYERS][MAX_PHONE_CONTACTS][Phone_Book_Enum]; //PB = PhoneBook

enum
{
	SEXO_MASCULINO,
	SEXO_FEMENINO,
}

enum e_ZONEINFO
{
	z_Name[45],
	Float:z_MinX,
	Float:z_MinY,
	Float:z_MinZ,
	Float:z_MaxX,
	Float:z_MaxY,
	Float:z_MaxZ,
}
new g_Zones[][e_ZONEINFO] =
{
	// Indoor zones
	{"Caligula's Palace",			2087.30,  1543.20,   900.00,  2437.30,  1703.20,   1200.90},
	{"The Four Dragons Casino",	  1817.30,   863.20,   900.00,  2027.30,  1083.20,   1200.90},
	// Outdoor Zones list by mabako, from gta client files
	{"The Big Ear",				-410.00,  1403.30,	-3.00,  -137.90,  1681.20,   200.00},
	{"Aldea Malvada",			   -1372.10,  2498.50,	 0.00, -1277.50,  2615.30,   200.00},
	{"Angel Pine",				  -2324.90, -2584.20,	-6.10, -1964.20, -2212.10,   200.00},
	{"Arco del Oeste",			   -901.10,  2221.80,	 0.00,  -592.00,  2571.90,   200.00},
	{"Avispa Country Club",		 -2646.40,  -355.40,	 0.00, -2270.00,  -222.50,   200.00},
	{"Avispa Country Club",		 -2831.80,  -430.20,	-6.10, -2646.40,  -222.50,   200.00},
	{"Avispa Country Club",		 -2361.50,  -417.10,	 0.00, -2270.00,  -355.40,   200.00},
	{"Avispa Country Club",		 -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,	71.10},
	{"Avispa Country Club",		 -2470.00,  -355.40,	 0.00, -2270.00,  -318.40,	46.10},
	{"Avispa Country Club",		 -2550.00,  -355.40,	 0.00, -2470.00,  -318.40,	39.70},
	{"Back o Beyond",			   -1166.90, -2641.10,	 0.00,  -321.70, -1856.00,   200.00},
	{"Battery Point",			   -2741.00,  1268.40,	-4.50, -2533.00,  1490.40,   200.00},
	{"Bayside",					 -2741.00,  2175.10,	 0.00, -2353.10,  2722.70,   200.00},
	{"Bayside Marina",			  -2353.10,  2275.70,	 0.00, -2153.10,  2475.70,   200.00},
	{"Beacon Hill",				  -399.60, -1075.50,	-1.40,  -319.00,  -977.50,   198.50},
	{"Blackfield",					964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
	{"Blackfield",					964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
	{"Blackfield Chapel",			1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
	{"Blackfield Chapel",			1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
	{"Blackfield Intersection",	  1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
	{"Blackfield Intersection",	  1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
	{"Blackfield Intersection",	  1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
	{"Blackfield Intersection",	  1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
	{"Blueberry",					 104.50,  -220.10,	 2.30,   349.60,   152.20,   200.00},
	{"Blueberry",					  19.60,  -404.10,	 3.80,   349.60,  -220.10,   200.00},
	{"Blueberry Acres",			  -319.60,  -220.10,	 0.00,   104.50,   293.30,   200.00},
	{"Caligula's Palace",			2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
	{"Caligula's Palace",			2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
	{"Calton Heights",			  -2274.10,   744.10,	-6.10, -1982.30,  1358.90,   200.00},
	{"Chinatown",				   -2274.10,   578.30,	-7.60, -2078.60,   744.10,   200.00},
	{"City Hall",				   -2867.80,   277.40,	-9.10, -2593.40,   458.40,   200.00},
	{"Come-A-Lot",				   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
	{"Commerce",					 1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
	{"Commerce",					 1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
	{"Commerce",					 1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
	{"Commerce",					 1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
	{"Commerce",					 1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
	{"Commerce",					 1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
	{"Conference Center",			1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
	{"Conference Center",			1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
	{"Cranberry Station",		   -2007.80,	56.30,	 0.00, -1922.00,   224.70,   100.00},
	{"Creek",						2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
	{"Dillimore",					 580.70,  -674.80,	-9.50,   861.00,  -404.70,   200.00},
	{"Doherty",					 -2270.00,  -324.10,	-0.00, -1794.90,  -222.50,   200.00},
	{"Doherty",					 -2173.00,  -222.50,	-0.00, -1794.90,   265.20,   200.00},
	{"Downtown",					-1982.30,   744.10,	-6.10, -1871.70,  1274.20,   200.00},
	{"Downtown",					-1871.70,  1176.40,	-4.50, -1620.30,  1274.20,   200.00},
	{"Downtown",					-1700.00,   744.20,	-6.10, -1580.00,  1176.50,   200.00},
	{"Downtown",					-1580.00,   744.20,	-6.10, -1499.80,  1025.90,   200.00},
	{"Downtown",					-2078.60,   578.30,	-7.60, -1499.80,   744.20,   200.00},
	{"Downtown",					-1993.20,   265.20,	-9.10, -1794.90,   578.30,   200.00},
	{"Knox Downtown",		  1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
	{"Knox Downtown",		  1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
	{"Knox Downtown",		  1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
	{"Knox Downtown",		  1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
	{"Knox Downtown",		  1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
	{"Knox Downtown",		  1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
	{"Knox Downtown",		  1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
	{"Knox Downtown",		  1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
	{"Knox Downtown",		  1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
	{"East Beach",				   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
	{"East Beach",				   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
	{"East Beach",				   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
	{"East Beach",				   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
	{"Knox East",			  2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
	{"Knox East",			  2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
	{"Knox East",			  2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
	{"Knox East",			  2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
	{"Knox East",			  2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
	{"Knox East",			  2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
	{"Knox East",			  2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
	{"Easter Basin",				-1794.90,   249.90,	-9.10, -1242.90,   578.30,   200.00},
	{"Easter Basin",				-1794.90,   -50.00,	-0.00, -1499.80,   249.90,   200.00},
	{"Easter Bay Airport",		  -1499.80,   -50.00,	-0.00, -1242.90,   249.90,   200.00},
	{"Easter Bay Airport",		  -1794.90,  -730.10,	-3.00, -1213.90,   -50.00,   200.00},
	{"Easter Bay Airport",		  -1213.90,  -730.10,	 0.00, -1132.80,   -50.00,   200.00},
	{"Easter Bay Airport",		  -1242.90,   -50.00,	 0.00, -1213.90,   578.30,   200.00},
	{"Easter Bay Airport",		  -1213.90,   -50.00,	-4.50,  -947.90,   578.30,   200.00},
	{"Easter Bay Airport",		  -1315.40,  -405.30,	15.40, -1264.40,  -209.50,	25.40},
	{"Easter Bay Airport",		  -1354.30,  -287.30,	15.40, -1315.40,  -209.50,	25.40},
	{"Easter Bay Airport",		  -1490.30,  -209.50,	15.40, -1264.40,  -148.30,	25.40},
	{"Easter Bay Chemicals",		-1132.80,  -768.00,	 0.00,  -956.40,  -578.10,   200.00},
	{"Easter Bay Chemicals",		-1132.80,  -787.30,	 0.00,  -956.40,  -768.00,   200.00},
	{"El Castillo del Diablo",	   -464.50,  2217.60,	 0.00,  -208.50,  2580.30,   200.00},
	{"El Castillo del Diablo",	   -208.50,  2123.00,	-7.60,   114.00,  2337.10,   200.00},
	{"El Castillo del Diablo",	   -208.50,  2337.10,	 0.00,	 8.40,  2487.10,   200.00},
	{"El Corona",					1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
	{"El Corona",					1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
	{"El Quebrados",				-1645.20,  2498.50,	 0.00, -1372.10,  2777.80,   200.00},
	{"Esplanade East",			  -1620.30,  1176.50,	-4.50, -1580.00,  1274.20,   200.00},
	{"Esplanade East",			  -1580.00,  1025.90,	-6.10, -1499.80,  1274.20,   200.00},
	{"Esplanade East",			  -1499.80,   578.30,   -79.60, -1339.80,  1274.20,	20.30},
	{"Esplanade North",			 -2533.00,  1358.90,	-4.50, -1996.60,  1501.20,   200.00},
	{"Esplanade North",			 -1996.60,  1358.90,	-4.50, -1524.20,  1592.50,   200.00},
	{"Esplanade North",			 -1982.30,  1274.20,	-4.50, -1524.20,  1358.90,   200.00},
	{"Fallen Tree",				  -792.20,  -698.50,	-5.30,  -452.40,  -380.00,   200.00},
	{"Fallow Bridge",				 434.30,   366.50,	 0.00,   603.00,   555.60,   200.00},
	{"Fern Ridge",					508.10,  -139.20,	 0.00,  1306.60,   119.50,   200.00},
	{"Financial",				   -1871.70,   744.10,	-6.10, -1701.30,  1176.40,   300.00},
	{"Fisher's Lagoon",			  1916.90,  -233.30,  -100.00,  2131.70,	13.80,   200.00},
	{"Flint Intersection",		   -187.70, -1596.70,   -89.00,	17.00, -1276.60,   110.90},
	{"Flint Range",				  -594.10, -1648.50,	 0.00,  -187.70, -1276.60,   200.00},
	{"Fort Carson",				  -376.20,   826.30,	-3.00,   123.70,  1220.40,   200.00},
	{"Foster Valley",			   -2270.00,  -430.20,	-0.00, -2178.60,  -324.10,   200.00},
	{"Foster Valley",			   -2178.60,  -599.80,	-0.00, -1794.90,  -324.10,   200.00},
	{"Foster Valley",			   -2178.60, -1115.50,	 0.00, -1794.90,  -599.80,   200.00},
	{"Foster Valley",			   -2178.60, -1250.90,	 0.00, -1794.90, -1115.50,   200.00},
	{"Frederick Bridge",			 2759.20,   296.50,	 0.00,  2774.20,   594.70,   200.00},
	{"Gant Bridge",				 -2741.40,  1659.60,	-6.10, -2616.40,  2175.10,   200.00},
	{"Gant Bridge",				 -2741.00,  1490.40,	-6.10, -2616.40,  1659.60,   200.00},
	{"Ganton",					   2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
	{"Ganton",					   2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
	{"Garcia",					  -2411.20,  -222.50,	-0.00, -2173.00,   265.20,   200.00},
	{"Garcia",					  -2395.10,  -222.50,	-5.30, -2354.00,  -204.70,   200.00},
	{"Garver Bridge",			   -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
	{"Garver Bridge",			   -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
	{"Garver Bridge",			   -1499.80,   696.40,  -179.60, -1339.80,   925.30,	20.30},
	{"Glen Park",					1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
	{"Glen Park",					1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
	{"Glen Park",					1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
	{"Green Palms",				   176.50,  1305.40,	-3.00,   338.60,  1520.70,   200.00},
	{"Greenglass College",			964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
	{"Greenglass College",			964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
	{"Hampton Barns",				 603.00,   264.30,	 0.00,   761.90,   366.50,   200.00},
	{"Hankypanky Point",			 2576.90,	62.10,	 0.00,  2759.20,   385.50,   200.00},
	{"Harry Gold Parkway",		   1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
	{"Hashbury",					-2593.40,  -222.50,	-0.00, -2411.20,	54.70,   200.00},
	{"Hilltop Farm",				  967.30,  -450.30,	-3.00,  1176.70,  -217.90,   200.00},
	{"Hunter Quarry",				 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
	{"Idlewood",					 1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
	{"Idlewood",					 1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
	{"Idlewood",					 1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
	{"Idlewood",					 1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
	{"Idlewood",					 2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
	{"Idlewood",					 1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
	{"Jefferson",					1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
	{"Jefferson",					2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
	{"Jefferson",					2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
	{"Jefferson",					2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
	{"Jefferson",					2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
	{"Jefferson",					2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
	{"Julius Thruway East",		  2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
	{"Julius Thruway East",		  2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
	{"Julius Thruway East",		  2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
	{"Julius Thruway East",		  2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
	{"Julius Thruway North",		 2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
	{"Julius Thruway North",		 2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
	{"Julius Thruway North",		 2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
	{"Julius Thruway North",		 1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
	{"Julius Thruway North",		 1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
	{"Julius Thruway North",		 1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
	{"Julius Thruway North",		 1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
	{"Julius Thruway North",		 1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
	{"Julius Thruway South",		 1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
	{"Julius Thruway South",		 2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
	{"Julius Thruway West",		  1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
	{"Julius Thruway West",		  1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
	{"Juniper Hill",				-2533.00,   578.30,	-7.60, -2274.10,   968.30,   200.00},
	{"Juniper Hollow",			  -2533.00,   968.30,	-6.10, -2274.10,  1358.90,   200.00},
	{"K.A.C.C. Military Fuels",	  2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
	{"Kincaid Bridge",			  -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
	{"Kincaid Bridge",			  -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
	{"Kincaid Bridge",			  -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
	{"King's",					  -2329.30,   458.40,	-7.60, -1993.20,   578.30,   200.00},
	{"King's",					  -2411.20,   265.20,	-9.10, -1993.20,   373.50,   200.00},
	{"King's",					  -2253.50,   373.50,	-9.10, -1993.20,   458.40,   200.00},
	{"LVA Freight Depot",			1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
	{"LVA Freight Depot",			1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
	{"LVA Freight Depot",			1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
	{"LVA Freight Depot",			1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
	{"LVA Freight Depot",			1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
	{"Las Barrancas",				-926.10,  1398.70,	-3.00,  -719.20,  1634.60,   200.00},
	{"Las Brujas",				   -365.10,  2123.00,	-3.00,  -208.50,  2217.60,   200.00},
	{"Las Colinas",				  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
	{"Las Colinas",				  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
	{"Las Colinas",				  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
	{"Las Colinas",				  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
	{"Las Colinas",				  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
	{"Las Colinas",				  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
	{"Las Colinas",				  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
	{"Las Payasadas",				-354.30,  2580.30,	 2.00,  -133.60,  2816.80,   200.00},
	{"Los Angeles Airport",		 1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
	{"Los Angeles Airport",		 1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
	{"Los Angeles Airport",		 1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
	{"Los Angeles Airport",		 1515.80,  1586.40,   -12.50,  1729.90,  1714.50,	87.50},
	{"Last Dime Motel",			  1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
	{"Leafy Hollow",				-1166.90, -1856.00,	 0.00,  -815.60, -1602.00,   200.00},
	{"Lil' Probe Inn",				-90.20,  1286.80,	-3.00,   153.80,  1554.10,   200.00},
	{"Linden Side",				  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
	{"Linden Station",			   2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
	{"Linden Station",			   2811.20,  1229.50,   -39.50,  2861.20,  1407.50,	60.40},
	{"Little Mexico",				1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
	{"Little Mexico",				1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
	{"Los Flores",				   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
	{"Los Flores",				   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
	{"Knox International",	 1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
	{"Knox International",	 1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
	{"Knox International",	 1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
	{"Knox International",	 1974.60, -2394.30,   -39.00,  2089.00, -2256.50,	60.90},
	{"Knox International",	 1400.90, -2669.20,   -39.00,  2189.80, -2597.20,	60.90},
	{"Knox International",	 2051.60, -2597.20,   -39.00,  2152.40, -2394.30,	60.90},
	{"Marina",						647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
	{"Marina",						647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
	{"Marina",						807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
	{"Market",						787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
	{"Market",						952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
	{"Market",					   1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
	{"Market",						926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
	{"Market Station",				787.40, -1410.90,   -34.10,   866.00, -1310.20,	65.80},
	{"Martin Bridge",				-222.10,   293.30,	 0.00,  -122.10,   476.40,   200.00},
	{"Missionary Hill",			 -2994.40,  -811.20,	 0.00, -2178.60,  -430.20,   200.00},
	{"Montgomery",				   1119.50,   119.50,	-3.00,  1451.40,   493.30,   200.00},
	{"Montgomery",				   1451.40,   347.40,	-6.10,  1582.40,   420.80,   200.00},
	{"Montgomery Intersection",	  1546.60,   208.10,	 0.00,  1745.80,   347.40,   200.00},
	{"Montgomery Intersection",	  1582.40,   347.40,	 0.00,  1664.60,   401.70,   200.00},
	{"Mulholland",				   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
	{"Mulholland",				   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
	{"Mulholland",				   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
	{"Mulholland",				   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
	{"Mulholland",				   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
	{"Mulholland",				   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
	{"Mulholland",					768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
	{"Mulholland",					687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
	{"Mulholland",					737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
	{"Mulholland",				   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
	{"Mulholland",					952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
	{"Mulholland",					911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
	{"Mulholland",					861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
	{"Mulholland Intersection",	  1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
	{"North Rock",				   2285.30,  -768.00,	 0.00,  2770.50,  -269.70,   200.00},
	{"Ocean Docks",				  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
	{"Ocean Docks",				  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
	{"Ocean Docks",				  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
	{"Ocean Docks",				  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
	{"Ocean Docks",				  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
	{"Ocean Docks",				  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
	{"Ocean Docks",				  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
	{"Ocean Flats",				 -2994.40,   277.40,	-9.10, -2867.80,   458.40,   200.00},
	{"Ocean Flats",				 -2994.40,  -222.50,	-0.00, -2593.40,   277.40,   200.00},
	{"Ocean Flats",				 -2994.40,  -430.20,	-0.00, -2831.80,  -222.50,   200.00},
	{"Octane Springs",				338.60,  1228.50,	 0.00,   664.30,  1655.00,   200.00},
	{"Old Venturas Strip",		   2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
	{"Palisades",				   -2994.40,   458.40,	-6.10, -2741.00,  1339.60,   200.00},
	{"Palomino Creek",			   2160.20,  -149.00,	 0.00,  2576.90,   228.30,   200.00},
	{"Paradiso",					-2741.00,   793.40,	-6.10, -2533.00,  1268.40,   200.00},
	{"Pershing Square",			  1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
	{"Pilgrim",					  2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
	{"Pilgrim",					  2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
	{"Pilson Intersection",		  1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
	{"Pirates in Men's Pants",	   1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
	{"Playa del Seville",			2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
	{"Prickle Pine",				 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
	{"Prickle Pine",				 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
	{"Prickle Pine",				 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
	{"Prickle Pine",				 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
	{"Queens",					  -2533.00,   458.40,	 0.00, -2329.30,   578.30,   200.00},
	{"Queens",					  -2593.40,	54.70,	 0.00, -2411.20,   458.40,   200.00},
	{"Queens",					  -2411.20,   373.50,	 0.00, -2253.50,   458.40,   200.00},
	{"Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
	{"Redsands East",				1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
	{"Redsands East",				1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
	{"Redsands East",				1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
	{"Redsands West",				1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
	{"Redsands West",				1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
	{"Redsands West",				1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
	{"Redsands West",				1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
	{"Regular Tom",				  -405.70,  1712.80,	-3.00,  -276.70,  1892.70,   200.00},
	{"Richman",					   647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
	{"Richman",					   647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
	{"Richman",					   225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
	{"Richman",					   225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
	{"Richman",						72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
	{"Richman",						72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
	{"Richman",					   321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
	{"Richman",					   321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
	{"Richman",					   321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
	{"Richman",					   321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
	{"Robada Intersection",		 -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
	{"Roca Escalante",			   2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
	{"Roca Escalante",			   2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
	{"Rockshore East",			   2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
	{"Rockshore West",			   1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
	{"Rockshore West",			   2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
	{"Rodeo",						  72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
	{"Rodeo",						  72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
	{"Rodeo",						 225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
	{"Rodeo",						 225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
	{"Rodeo",						 334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
	{"Rodeo",						 312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
	{"Rodeo",						 422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
	{"Rodeo",						 558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
	{"Rodeo",						 466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
	{"Rodeo",						 422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
	{"Rodeo",						 466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
	{"Rodeo",						 334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
	{"Royal Casino",				 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
	{"San Andreas Sound",			2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
	{"Santa Flora",				 -2741.00,   458.40,	-7.60, -2533.00,   793.40,   200.00},
	{"Santa Maria Beach",			 342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
	{"Santa Maria Beach",			  72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
	{"Shady Cabin",				 -1632.80, -2263.40,	-3.00, -1601.30, -2231.70,   200.00},
	{"Shady Creeks",				-1820.60, -2643.60,	-8.00, -1226.70, -1771.60,   200.00},
	{"Shady Creeks",				-2030.10, -2174.80,	-6.10, -1820.60, -1771.60,   200.00},
	{"Sobell Rail Yards",			2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
	{"Spinybed",					 2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
	{"Starfish Casino",			  2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
	{"Starfish Casino",			  2437.30,  1858.10,   -39.00,  2495.00,  1970.80,	60.90},
	{"Starfish Casino",			  2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
	{"Temple",					   1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
	{"Temple",					   1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
	{"Temple",					   1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
	{"Temple",						952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
	{"Temple",					   1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
	{"Temple",					   1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
	{"The Camel's Toe",			  2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
	{"The Clown's Pocket",		   2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
	{"The Emerald Isle",			 2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
	{"The Farm",					-1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
	{"The Four Dragons Casino",	  1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
	{"The High Roller",			  1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
	{"The Mako Span",				1664.60,   401.70,	 0.00,  1785.10,   567.20,   200.00},
	{"The Panopticon",			   -947.90,  -304.30,	-1.10,  -319.60,   327.00,   200.00},
	{"The Pink Swan",				1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
	{"The Sherman Dam",			  -968.70,  1929.40,	-3.00,  -481.10,  2155.20,   200.00},
	{"The Strip",					2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
	{"The Strip",					2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
	{"The Strip",					2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
	{"The Strip",					2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
	{"The Visage",				   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
	{"The Visage",				   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
	{"Unity Station",				1692.60, -1971.80,   -20.40,  1812.60, -1932.80,	79.50},
	{"Valle Ocultado",			   -936.60,  2611.40,	 2.00,  -715.90,  2847.90,   200.00},
	{"Verdant Bluffs",				930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
	{"Verdant Bluffs",			   1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
	{"Verdant Bluffs",			   1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
	{"Verdant Meadows",				37.00,  2337.10,	-3.00,   435.90,  2677.90,   200.00},
	{"Verona Beach",				  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
	{"Verona Beach",				  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
	{"Verona Beach",				  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
	{"Verona Beach",				 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
	{"Verona Beach",				 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
	{"Vinewood",					  787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
	{"Vinewood",					  787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
	{"Vinewood",					  647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
	{"Vinewood",					  647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
	{"Whitewood Estates",			 883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
	{"Whitewood Estates",			1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
	{"Willowfield",				  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
	{"Willowfield",				  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
	{"Willowfield",				  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
	{"Willowfield",				  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
	{"Willowfield",				  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
	{"Willowfield",				  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
	{"Willowfield",				  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
	{"Yellow Bell Station",		  1377.40,  2600.40,   -21.90,  1492.40,  2687.30,	78.00},
	{"Knox City",					 44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Los Angeles",				  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",				  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",			   -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",			   -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Francisco",				  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",				  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",				-1213.90, -2892.90,  -242.90,	44.60,  -768.00,   900.00},
	{"Whetstone",				   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

new g_Cities[][e_ZONEINFO] =
{
	// Main Zones
	{"Knox City",					 44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
	{"Los Angeles",				  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
	{"Bone County",				  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
	{"Tierra Robada",			   -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
	{"Tierra Robada",			   -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
	{"San Francisco",				  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
	{"Red County",				  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
	{"Flint County",				-1213.90, -2892.90,  -242.90,	44.60,  -768.00,   900.00},
	{"Whetstone",				   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum enum_MERCADO_SITES
{
	mercado_zone_AREA_ID,
	mercado_zone_MIN_X,
	Float:mercado_zone_MIN_Y,
	mercado_zone_MAX_X,
	Float:mercado_zone_MAX_Y
}

new MercadoSites[][enum_MERCADO_SITES] =
{
	{INVALID_STREAMER_ID, 2131, -2055.0, 2168, -2020.0},
	{INVALID_STREAMER_ID, 1964, -1871.5, 2002, -1838.5},
	{INVALID_STREAMER_ID, 1974, -1900.0, 2012, -1865.0},
	{INVALID_STREAMER_ID, 2105, -2027.0, 2143, -1998.0},
	{INVALID_STREAMER_ID, 2122, -2041.0, 2152, -2008.0},
	{INVALID_STREAMER_ID, 2040, -1961.5, 2073, -1931.5},
	{INVALID_STREAMER_ID, 2018, -1941.5, 2050, -1911.5},
	{INVALID_STREAMER_ID, 1995, -1921.5, 2031, -1892.5},
	{INVALID_STREAMER_ID, 2059, -1997.0, 2093, -1955.0},
	{INVALID_STREAMER_ID, 2068, -2008.5, 2115, -1973.5}
};

/* Rangos Policias */
enum enum_WORK_SHOP_WEAPONS
{
	type_shop_WORK,
	work_shop_RANK,
	work_shop_WEAPON_ID,
	work_shop_WEAPON_PRICE,
}
new WORK_SHOP_WEAPONS[][enum_WORK_SHOP_WEAPONS] =
{
	{WORK_POLICE, 1, 3, 0},   // Porra
	{WORK_POLICE, 1, 22, 0}, // 9mm
	{WORK_POLICE, 3, 25, 0}, // escopeta
	{WORK_POLICE, 3, 24, 0}, // DK
	{WORK_POLICE, 4, 29, 0}, // Mp5
	{WORK_POLICE, 5, 31, 0}, // M4
	{WORK_POLICE, 5, 48, 0}, // Pistola taser
	{WORK_POLICE, 6, 47, 0}, // escudo
	{WORK_POLICE, 8, 27, 0}, // Edc
	{WORK_POLICE, 9, 34, 0}, // Sniper

	{WORK_FBI, 1, 3, 0},   // Porra
	{WORK_FBI, 1, 22, 0}, // 9mm
	{WORK_FBI, 1, 25, 0}, // escopeta
	{WORK_FBI, 2, 24, 0}, // DK
	{WORK_FBI, 3, 29, 0}, // Mp5
	{WORK_FBI, 4, 31, 0}, // M4
	{WORK_FBI, 4, 48, 0}, // Pistola taser
	{WORK_FBI, 5, 47, 0}, // escudo
	{WORK_FBI, 6, 27, 0}, // Edc
	{WORK_FBI, 7, 34, 0} // Sniper
};

enum enum_WORK_SKINS
{
	type_skin_WORK,
	work_skin_TYPE,
	work_skin_SKIN,
	work_skin_RANK,
}
new WORK_SKINS[][enum_WORK_SKINS] =
{
	{WORK_POLICE, SEXO_MASCULINO, 71, 1},
	{WORK_POLICE, SEXO_MASCULINO, 284, 2},
	{WORK_POLICE, SEXO_MASCULINO, 267, 3},
	{WORK_POLICE, SEXO_MASCULINO, 265, 4},
	{WORK_POLICE, SEXO_MASCULINO, 266, 5},
	{WORK_POLICE, SEXO_MASCULINO, 281, 6},
	{WORK_POLICE, SEXO_MASCULINO, 280, 7},
	{WORK_POLICE, SEXO_MASCULINO, 285, 8},
	{WORK_POLICE, SEXO_MASCULINO, 300, 9},
	{WORK_POLICE, SEXO_MASCULINO, 301, 10},
	{WORK_POLICE, SEXO_MASCULINO, 311, 11},
	{WORK_POLICE, SEXO_MASCULINO, 310, 12},

	{WORK_POLICE, SEXO_FEMENINO, 191, 2},
	{WORK_POLICE, SEXO_FEMENINO, 306, 3},
	{WORK_POLICE, SEXO_FEMENINO, 307, 4},
	{WORK_POLICE, SEXO_FEMENINO, 309, 5},

	{WORK_MECANICO, SEXO_MASCULINO, 50, 1},
	{WORK_MECANICO, SEXO_MASCULINO, 42, 2},
	{WORK_MECANICO, SEXO_MASCULINO, 268, 3},
	{WORK_MECANICO, SEXO_MASCULINO, 15, 4},
	{WORK_MECANICO, SEXO_MASCULINO, 153, 5},
	{WORK_MECANICO, SEXO_MASCULINO, 72, 6},
	{WORK_MECANICO, SEXO_MASCULINO, 208, 7},

	{WORK_MECANICO, SEXO_FEMENINO, 201, 1},

	{WORK_FBI, SEXO_MASCULINO, 250, 1},
	{WORK_FBI, SEXO_MASCULINO, 179, 2},
	{WORK_FBI, SEXO_MASCULINO, 287, 3},
	{WORK_FBI, SEXO_MASCULINO, 282, 4},
	{WORK_FBI, SEXO_MASCULINO, 302, 5},
	{WORK_FBI, SEXO_MASCULINO, 310, 6},
	{WORK_FBI, SEXO_MASCULINO, 288, 7},
//	{WORK_FBI, SEXO_MASCULINO, 165, 7},

	{WORK_FBI, SEXO_FEMENINO, 191, 1},
	{WORK_FBI, SEXO_FEMENINO, 191, 3},
	{WORK_FBI, SEXO_FEMENINO, 309, 6}
//	{WORK_FBI, SEXO_FEMENINO, 172, 4},
//	{WORK_FBI, SEXO_FEMENINO, 172, 5},
//	{WORK_FBI, SEXO_FEMENINO, 191, 6},
//	{WORK_FBI, SEXO_FEMENINO, 211, 7}
};
new FBI_RANKS[][] =
{
	"Civil",
	"Aprendiz",
	"Recluta",
	"Soldado ll",
	"Sargento",
	"Teniente ll",
	"Capitan",
	"General"
};
new MECANICO_RANKS[][] =
{
	"",
	"Reparador",
	"Gruista",
	"Tuneador",
	"Supervisor",
	"Supervisor General",
	"Encargado",
	"Lider General"
};
new POLICE_RANKS[][] =
{
	"Civil",	/* 0 */ 
	"Cadete",	/* 1 */
	"Oficial",	/* 2 */
	"Cabo",		/* 3 */
	"Sargento",	/* 4 */ 
	"Inspector",/* 5 */ 
	"Sub Teniente",/* 6 */ 
	"Teniente",	/* 7 */ 
	"Sub General",/* 8 */ 
	"General",	/* 9 */ 
	"Mayor",	/* 10 */ 
	"Capitán",	/* 11 */ 
	"Comisario"	/* 12 */ 
};

#define MAX_POLICE_OBJECTS	300
enum enum_POLICE_OBJECTS
{
	bool:police_object_VALID,
	police_object_USER[24],
	police_object_OBJECT_ID,
}
new POLICE_OBJECTS[MAX_POLICE_OBJECTS][enum_POLICE_OBJECTS];

enum enum_WORK_GARAGE_DOORS
{
	work_gdoor_MODELID,
	type_gdoor_WORK,
	Float:work_gdoor_CLOSED_X,
	Float:work_gdoor_CLOSED_Y,
	Float:work_gdoor_CLOSED_Z,
	Float:work_gdoor_CLOSED_RX,
	Float:work_gdoor_CLOSED_RY,
	Float:work_gdoor_CLOSED_RZ,
	Float:work_gdoor_OPENED_X,
	Float:work_gdoor_OPENED_Y,
	Float:work_gdoor_OPENED_Z,
	Float:work_gdoor_OPENED_RX,
	Float:work_gdoor_OPENED_RY,
	Float:work_gdoor_OPENED_RZ,
	Float:work_gdoor_MOVE_SPEED,
	bool:work_gdoor_CLOSING,
	work_gdoor_OBJECT_ID,
	work_gdoor_TIMER,
}
new WORK_GARAGE_DOORS[][enum_WORK_GARAGE_DOORS] =
{
	{3055, WORK_POLICE, 1588.48853, -1637.85852, 14.57500, 0.0, 0.0, 0.0, 1588.48853, -1637.85852, 16.45880, 90.0, 0.0, 0.0, 1.3, false, INVALID_STREAMER_ID, -1},
	{3055, WORK_POLICE, 2294.04102, 2498.81396, 4.47113, 0.0, 0.00000, 90.00000, 2294.0410, 2498.8140, 9.0059, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{3055, WORK_POLICE, 2335.13086, 2443.66895, 6.97370, 0.0, 0.0, 60.00000, 2335.1309, 2443.6689, 11.6876, 0.0, 0.0, 60.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{10184, WORK_POLICE, -1631.69556, 688.56641, 8.70960, 0.0, 0.0, 90.00000, -1631.6956, 688.5664, 13.2064, 0.0, 0.0, 90.0, 1.6, false, INVALID_STREAMER_ID, -1},
	{19912, WORK_MECANICO, 1836.6600, -1439.4043, 15.1868, 0.0, 0.0, -88.90, 1836.5072, -1429.7843, 15.1868, 0.0, 0.0, -88.90, 1.6, true, INVALID_STREAMER_ID, -1},
	{19912, WORK_MECANICO, 1836.6565, -1335.3972, 15.1868, 0.0, 0.0, -89.80, 1836.9371, -1345.9646, 15.1868, 0.0, 0.0, -89.80, 1.6, true, INVALID_STREAMER_ID, -1},
	{19912, WORK_MECANICO, 1724.4694, -1408.7980, 15.1868, 0.0, 0.0, 90.40, 1724.2687, -1398.2980, 15.1868, 0.0, 0.0, 90.40, 1.6, true, INVALID_STREAMER_ID, -1},

	{980, WORK_FBI, 2767.2664, 1169.5594, 12.5950, 0.0, 0.0, 89.8800, 2767.3713, 1180.1661, 12.5950, 0.0, 0.0, 89.8800, 1.8, true, INVALID_STREAMER_ID, -1},
	{980, WORK_FBI, 2287.4050, 605.9839, 12.6835, 0.0, 0.0, 0.0, 2298.0435, 606.0078, 12.6835, 0.0, 0.0, 0.0, 1.8, true, INVALID_STREAMER_ID, -1},
	{3354, WORK_FBI, 2250.1521, 552.2630, 8.0258, 0.0, 0.0, 0.0, 2250.1521, 552.2630, 10.0857, 0.0, 0.0, 0.0, 1.8, true, INVALID_STREAMER_ID, -1}
};

enum enum_WORK_DOORS
{
	work_door_MODELID,
	type_door_WORK,
	Float:work_door_X,
	Float:work_door_Y,
	Float:work_door_Z,
	Float:work_door_RZ,
	work_door_INTERIOR,
	work_door_WORLD,
	bool:work_door_CLOSED,
	work_door_OBJECT_ID,
	work_door_TIMER,
}
new WORK_DOORS[][enum_WORK_DOORS] =
{
	{1495, WORK_POLICE, 1582.6055, -1638.0713, 12.3384, 0.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, WORK_POLICE, 245.62910, 72.53300, 1002.54999, 0.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, WORK_POLICE, 250.65849, 62.58540, 1002.54999, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, WORK_POLICE, 226.16409, 71.01760, 1003.95050, 90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1497, WORK_POLICE, 222.14630, 70.52970, 1003.95050, -90.0, 6, 0, true, INVALID_STREAMER_ID, -1},//lspd
	{1495, WORK_POLICE, -1619.707, 688.41058, 6.17220, 180.00000, 0, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, WORK_POLICE, 239.58211, 116.84430, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, WORK_POLICE, 253.19209, 108.35700, 1002.20319, 90.00000, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1497, WORK_POLICE, 266.59210, 112.56570, 1003.60992, 180.0, 10, 0, true, INVALID_STREAMER_ID, -1},//sfpd
	{1495, WORK_POLICE, 228.27240, 150.46510, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, WORK_POLICE, 228.27240, 160.45010, 1002.01813, 90.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, WORK_POLICE, 232.21030, 169.83350, 1002.01813, 180.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1495, WORK_POLICE, 2294.03516, 2492.91528, 2.26740, 90.0, 0, 0, true, INVALID_STREAMER_ID, -1},//lvpd
	{1497, WORK_POLICE, 221.95570, 181.21680, 1002.02142, 0.0, 3, 0, true, INVALID_STREAMER_ID, -1},//lvpd

	{1495, WORK_FBI, 2250.0320, 549.5616, 6.8257, -88.9200, 0, 0, true, INVALID_STREAMER_ID, -1},
	{3354, WORK_FBI, 1504.72656, -1659.71240, -8.34050, 0.0, 4, 1, true, INVALID_STREAMER_ID, -1},
	{1495, WORK_FBI, 1520.69153, -1664.75146, -8.31245, 88.90, 4, 1, true, INVALID_STREAMER_ID, -1},
	{1495, WORK_FBI, 1520.70801, -1661.75439, -8.31245, -90.0, 4, 1, true, INVALID_STREAMER_ID, -1}
};

/* SYSTEM - PROPERTIES */
forward OnDefaultPFurChanged(index);
#define MAX_PROPIEDADES	2000
enum Property_Info_Enum
{
	property_VALID,
	property_ID,
	Float:property_EXT_X,
	Float:property_EXT_Y,
	Float:property_EXT_Z,
	Float:property_EXT_ANGLE,
	property_EXT_INTERIOR,
	property_EXT_FREEZE,
	property_ID_INTERIOR,

	bool:property_SOLD,
	bool:property_CREW,
	property_OWNER_ID,
	property_CREW_ID,
	property_NAME[24],
	property_PRICE,
	property_LEVEL,
	property_EXTRA,
	property_VIP_LEVEL,

	Text3D:property_EXT_LABEL_ID,
	Text3D:property_INT_LABEL_ID,
	property_EXT_PICKUP_ID,
	property_INT_PICKUP_ID,

	property_PRICE_BASE,
	bool:property_DIS_DEFAULT_INTERIOR,

	bool:property_POLICE_FORCING,
	bool:property_POLICE_FORCED,
	property_POLICE_FORCE_TIMER,

	property_GARAJE,
	property_EMISORA_ID
}
new PROPERTY_INFO[MAX_PROPIEDADES][Property_Info_Enum];

enum Garaje_Info_Enum
{
	garaje_ID,
	garaje_VALID,
	Text3D:garaje_EXT_LABEL_ID,
	Text3D:garaje_INT_LABEL_ID,
	garaje_EXT_INTERIOR,

	Float:garaje_EXT_X,
	Float:garaje_EXT_Y,
	Float:garaje_EXT_Z,
	Float:garaje_EXT_ANGLE,

	garaje_PROPERTY
}
new GARAJE_INFO[MAX_PROPIEDADES][Garaje_Info_Enum];


/* CONSTRUCTOR DE PROPIEADES */
#define PROPERTY_EMPTY_INTERIOR_Z_OFFSET 20.0
new TOTAL_PROPIEDADES_CARGADAS;
enum PROPERTY_INTERIOR_ENUM
{
	property_creator_LEVEL,
	property_creator_PRICE,
	Float:property_INT_X,
	Float:property_INT_Y,
	Float:property_INT_Z,
	Float:property_INT_ANGLE,
	property_INT_INTERIOR,
	bool:property_INT_FREEZE,
	bool:property_EMPTY_INTERIOR
}
new PROPERTY_INTERIORS[][PROPERTY_INTERIOR_ENUM] =
{
	{6, 180000, 140.249008, 1366.197509, 1083.859375, 0.0, 5, false, true},
	{6, 160000, 2324.530029, -1149.540039, 1050.710083, 0.0, 12, false, true},
	{6, 270000, 225.679992, 1021.450012, 1084.017700, 0.0, 7, false, true},
	{6, 190000, 234.190002, 1063.729980, 1084.212280, 0.0, 6, false, true},
	{6, 120000, 226.300003, 1114.239990, 1080.992919, 270.0, 5, false, true},
	{6, 180000, 2317.889892, -1026.760009, 1050.217773, 0.0, 9, false, true},
	{6, 120000, 2495.979980, -1692.079956, 1014.742187, 180.0, 3, false, true},
	{6, 90000,  2196.626464, -1204.321411, 1049.023437, 90.0, 6, false, true},
	{6, 105000, 2270.143554, -1210.490600, 1047.562500, 90.0, 10, false, true},
	{4, 90000,  2365.199951, -1135.595825, 1050.882568, 0.0, 8, false, true},
	{3, 75000,  2237.590087, -1081.640014, 1049.023437, 0.0, 2, false, true},
	{4, 65000,  2468.840087, -1698.239990, 1013.507812, 90.0, 2, false, false},
	{3, 45000,  2282.928955, -1140.004516, 1050.898437, 0.0, 11, false, true},
	{4, 50000,  2308.775878, -1212.731689, 1049.023437, 0.0, 6, false, true},
	{6, 135000, 2233.681396, -1114.973510, 1050.882812, 0.0, 5, false, true},
	{6, 230000, 2218.162597, -1076.148315, 1050.484375, 90.0, 1, false, true},
	{6, 220000, 266.654327, 304.961791, 999.148437, 270.0, 2, false, true},
	{6, 30000,  243.720001, 304.910003, 999.148437, 270.0, 1, false, true},
	{6, 65000,  2259.440673, -1135.905883, 1050.640258, 270.0, 10, false, true},
	{12, 3000000, 1260.910034, -785.320068, 1091.906250, 280.0, 5, false, false}
};

enum PROPERTY_CLOSET_POS_ENUM
{
	Float:property_closet_X,
	Float:property_closet_Y,
	Float:property_closet_Z
}
new PROPERTY_CLOSET_POS[][PROPERTY_CLOSET_POS_ENUM] = //de momento posicion de la puerte se cambiara porxiamn
{
	{145.103408, 1384.249877, 1088.367187},
	{2337.974609, -1141.684082, 1054.304687},
	{243.130554, 1046.244384, 1084.000000},
	{235.600509, 1079.485351, 1087.812622},
	{239.347656, 1116.808593, 1084.992187},
	{2326.974365, -1015.419189, 1054.711059},
	{2492.362060, -1708.568969, 1018.336791},
	{2198.682128, -1219.331787, 1049.023437},
	{2258.639892, -1220.260253, 1049.023437},
	{2363.767333, -1127.419433, 1050.882568},
	{2235.885986, -1073.944335, 1049.023437},
	{2450.338867, -1706.199340, 1013.507812},
	{2286.247314, -1137.693359, 1050.898437},
	{2319.417480, -1212.880981, 1049.023437},
	{2231.736328, -1112.198730, 1050.882812},
	{2215.857910, -1074.698974, 1050.484375},
	{270.320709, 303.413482, 999.155761},
	{248.817687, 303.795257, 999.148437},
	{2263.338378, -1132.665161, 1050.632812},
	{1271.444091, -822.371704, 1089.937500}
};

#define MAX_CLOSET_SLOTS	10
enum
{
	CLOSET_TYPE_WEAPON,
	CLOSET_TYPE_MEDICINES,
	CLOSET_TYPE_CANNABIS,
	CLOSET_TYPE_CRACK
};
enum enum_PROPERTY_CLOSET
{
	bool:property_closet_VALID,
	property_closet_OBJECT_ID,
	property_closet_TYPE,
	property_closet_INT,
	property_closet_INT_EXTRA
};
new PROPERTY_CLOSET[MAX_PROPIEDADES][MAX_CLOSET_SLOTS][enum_PROPERTY_CLOSET];

enum PLAYER_PROPERTY_CONSTRUCTOR_ENU
{
	bool:player_property_creator_ENABLED,
	player_property_creator_INTERIO,
	Float:player_property_creator_EXT_X,
	Float:player_property_creator_EXT_Y,
	Float:player_property_creator_EXT_Z,
	Float:player_property_creator_EXT_ANG,
	player_property_creator_EXT_INT,
}
new PLAYER_PROPERTY_CONSTRUCTOR[MAX_PLAYERS][PLAYER_PROPERTY_CONSTRUCTOR_ENU];

//Taxis
enum TAXI_METER_VEHICLE_Info
{
	bool:veh_taxi_meter_ENABLED,
	veh_taxi_meter_PRICE,
	veh_taxi_meter_PAYMENT,
	Float:veh_taxi_meter_OLD_X,
	Float:veh_taxi_meter_OLD_Y,
	Float:veh_taxi_meter_OLD_Z,
	Float:veh_taxi_meter_DISTANCE,
	veh_taxi_meter_TIMER,
}
new TAXI_METER_VEHICLE[MAX_VEHICLES][TAXI_METER_VEHICLE_Info];

// Grua
new Float:CRANE_POINTS[][] =
{
	{-28.8145, -1124.5767, 0.6990, 157.4051},
	{-34.1703, -1122.5664, 0.6990, 157.4051},
	{-39.7803, -1119.8870, 0.6990, 157.4051},
	{-45.1235, -1117.3114, 0.6990, 157.4051},
	{-49.8637, -1115.2751, 0.6990, 157.4051},
	{-42.4484, -1154.7849, 0.6990, 333.7967},
	{-46.8119, -1152.4274, 0.6990, 333.7967},
	{-50.6488, -1150.6056, 0.6990, 333.7967},
	{-54.1760, -1149.1364, 0.6990, 333.7967},
	{-57.8852, -1147.4999, 0.6990, 333.7967},
	{-62.2619, -1145.2260, 0.6990, 333.7967},
	{-66.4254, -1143.2191, 0.6990, 333.7967},
	{-70.7787, -1140.9065, 0.6990, 333.7967},
	{-75.1332, -1138.9713, 0.6990, 333.7967},
	{-79.8642, -1136.7786, 0.6990, 333.7967},
	{-33.8437, -1135.5642, 0.6990, 333.7967},
	{-36.8147, -1141.7927, 0.6990, 157.4051},
	{-40.9361, -1140.1613, 0.6990, 157.4051},
	{-45.5692, -1138.2747, 0.6990, 157.4051},
	{-50.3522, -1136.1228, 0.6990, 157.4051},
	{-54.4753, -1134.3014, 0.6990, 157.4051},
	{-38.0563, -1133.7695, 0.6990, 333.7967},
	{-42.4517, -1132.0298, 0.6990, 333.7967},
	{-47.2834, -1129.8915, 0.6990, 333.7967},
	{-51.6219, -1127.9185, 0.6990, 333.7967}
};

//Pizzero
new Float:PIZZA_DELIVERY_POINT[][] =
{
	{2232.147460, -1785.597656, 13.560449, 82.756179	},
	{2290.242675, -1796.022583, 13.546875, 267.344024   },
	{1739.314575, -1582.890747, 14.158246, 174.783370   },
	{1694.923339, -1583.478881, 13.546875, 179.829818   },
	{1241.816406, -2032.996093, 60.041099, 263.972076   },
	{1187.268798, -1666.487915, 13.634441, 172.332916   },
	{998.998962, -1868.162231, 12.820312, 333.677734	},
	{891.677551, -1695.211669, 13.546875, 182.046417	},
	{507.502838, -1606.101684, 16.247840, 359.563903	},
	{305.462341, -1748.736816, 4.546875, 356.093139	 },
	{159.034683, -1906.259521, 3.773437, 0.044234	   },
	{387.668762, -2083.981689, 7.835937, 11.638330	  },
	{902.655456, -930.055786, 42.601562, 185.516662	 },
	{1809.700439, -1166.832885, 24.226562, 168.451568   },
	{2007.953857, -985.501953, 33.888450, 203.231872	},
	{2580.753906, -969.438110, 81.363517, 50.412715	 },
	{2796.151855, -1088.867187, 30.719810, 234.631011   },
	{2819.019287, -1614.678588, 11.079871, 245.630599   },
	{2756.354492, -1979.312011, 13.547579, 270.360687   },
	{931.654541, -1231.159545, 16.928218, 262.568939	},
	{952.439208, -913.921447, 45.729900, 180.787841	 },
	{824.417663, -2031.578857, 12.867187, 331.166229	},
	{1714.394531, -1629.683593, 20.203384, 332.709594   }
};

enum PIZZA_VEHICLE_Info
{
	bool:pizza_vehicle_STARTED,
	pizza_vehicle_DRIVER_AID,
	pizza_vehicle_PIZZAS,
	pizza_vehicle_PIZZA_POINT,
	bool:pizza_vehicle_PIZZA_POINT_DELI,
}
new PIZZA_VEHICLE[MAX_VEHICLES][PIZZA_VEHICLE_Info];

//Camioneros
new Float:LoadTrucksPoints[][] =
{
	{-520.48822, -502.04059, 25.26037, 0.0},
	{-529.98822, -502.04059, 25.26040, 0.0},
	{-557.48822, -502.04059, 25.26040, 0.0},

	{4471.7319, 5898.2646, 44.1051, 180.0},
	{4477.1011, 5898.2646, 44.1051, 180.0},
	{4481.8916, 5898.2646, 44.1051, 180.0}
};

enum TRUCK_VEHICLE_Info
{
	bool:truck_vehicle_LOADED,
	bool:truck_vehicle_LOADING,
	bool:truck_vehicle_UNLOADING,
	bool:truck_vehicle_DELIVERED,
	truck_vehicle_DRIVER_USER_ID,
	truck_vehicle_POINT,
	truck_vehicle_CURRENT_POINT,
	truck_vehicle_TOTAL_POINTS,
	Float:truck_vehicle_TOTAL_DISTANCE
}
new TRUCK_VEHICLE[MAX_VEHICLES][TRUCK_VEHICLE_Info];

enum TRAILER_VEHICLE_Info
{
	bool:trailer_vehicle_LOADED,
	bool:trailer_vehicle_LOADING,
	bool:trailer_vehicle_UNLOADING,
	bool:trailer_vehicle_DELIVERED,
	trailer_vehicle_DRIVER_USER_ID,
	trailer_vehicle_POINT
}
new TRAILER_VEHICLE[MAX_VEHICLES][TRAILER_VEHICLE_Info];

new Float:Truck_Return_Positions[3] =
{
	-481.952117, -521.362060, 25.691177
};

new Float:Trailer_Return_Positions[3] =
{
	2842.2412, 956.2523, 10.7500
};

enum Truck_Content_Info
{
	truck_content_EXP,
	truck_content_NAME[32],
	truck_content_MONEY,
	Float:truck_content_X,
	Float:truck_content_Y,
	Float:truck_content_Z
}
new Truck_Contents[][Truck_Content_Info] =
{
	{0, "Cargamento de semillas", 1000, -185.473693, -280.008880, 1.603357},
	{0, "Cargamento de herramientas", 1300, 2168.514404, -2275.264892, 13.128628},
	{0, "Cargamento de leña", 1700, -2096.593017, -2243.229492, 30.352083},
	{0, "Cargamento de NIKE", 2000, 2834.454833, 958.061462, 10.479191},
	{25, "Cargamento de limpieza", 2300, 2524.153076, 2816.919189, 10.547390},
	{50, "Cargamento de pesca", 2700, -1789.979858, 1421.842895, 6.914581},
	{150, "Cargamento policial", 4000, -1862.919433, -202.232727, 18.125516},
	{300, "Cargamento militar", 7000, 1039.057983, 2132.961425, 10.547390}
};

enum Trailero_Content_Info
{
	trailero_content_EXP,
	trailero_content_NAME[32],
	trailero_content_MONEY,
	Float:trailero_content_X,
	Float:trailero_content_Y,
	Float:trailero_content_Z
}
new Trailero_Contents[][Trailero_Content_Info] =
{
	{0, "Cargamento de ropa", 5500, 1473.8853, -1156.0193, 23.9063},//		2812.4617,948.4566,10.7500
	{50, "Cargamento de farmacos", 6000, 1386.8567, -1768.2286, 13.3828},
	{150, "Cargamento de tierra", 6500, 598.1104,890.7556,-44.4419},
	{200, "Cargamento de gasolina", 7000, -1656.4657,444.0752,7.1797}
};

new Float:MecanicoBuyPiecesCoords[1][3] =
{
	{1779.7346, -1430.4901, 13.4868}
};


/* Leñador */
enum
{
	LUMBER_TREE_STATE_NORMAL,
	LUMBER_TREE_STATE_CUTTING,
	LUMBER_TREE_STATE_CUTTED,
}
enum LUMBER_TREES_Info
{
	lumber_tree_MODELID,
	Float:lumber_tree_X,
	Float:lumber_tree_Y,
	Float:lumber_tree_Z,
	Float:lumber_tree_RX,
	Float:lumber_tree_RY,
	Float:lumber_tree_RZ,
	lumber_tree_OBJECT_ID,
	Text3D:lumber_tree_LABEL,
	lumber_tree_STATE,
	lumber_tree_GROW_TIMER,
	lumber_tree_GROW_COUNTER,
}
new LUMBER_TREES[][LUMBER_TREES_Info] =
{
	{657, -467.31256, -47.68515, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -480.88443, -53.57695, 59.39736,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -491.79199, -45.14817, 59.24156,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -493.84619, -54.35930, 59.48059,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -473.43958, -40.64830, 59.00023,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -468.32245, -61.54378, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -458.69937, -75.32365, 58.80302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -453.17416, -65.31260, 58.98302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -444.92609, -78.80465, 57.97836,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -465.78470, -85.49714, 58.96302,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -454.24377, -86.58199, 58.46635,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -440.20041, -92.70150, 57.60720,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -484.98972, -65.79082, 59.82284,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -460.57928, -95.55928, 59.25615,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -521.20569, -44.74903, 60.62712,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -534.94348, -50.98387, 61.66861,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -533.45081, -41.45306, 61.64992,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -495.74197, -64.77782, 59.94119,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -519.74005, -72.02750, 61.19377,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1},
	{657, -518.47144, -57.24505, 60.76774,   0.00000, 0.00000, 0.00000, INVALID_STREAMER_ID, Text3D:INVALID_3DTEXT_ID, LUMBER_TREE_STATE_NORMAL, -1, -1}
};

/* Basurero */

#define MAX_ROUTES	5
#define MAX_OBJECTS_PER_ROUTE	20

enum Trash_Object_Info
{
	bool:trash_route_VALID,
	trash_route_OBJECTS,
	Float:trash_route_DISTANCE,
	trash_route_MONEY,
	trash_object_MODELID[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_X[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Y[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_Z[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RX[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RY[MAX_OBJECTS_PER_ROUTE],
	Float:trash_object_RZ[MAX_OBJECTS_PER_ROUTE],
}
new TRASH_OBJECTS[MAX_ROUTES][Trash_Object_Info];
new TRASH_PLAYER_OBJECTS[MAX_PLAYERS][MAX_OBJECTS_PER_ROUTE];

enum TRASH_VEHICLES_INFO
{
	bool:trash_vehicle_JOB_STARTED,
	trash_vehicle_ROUTE,
	trash_vehicle_CP,
	trash_vehicle_DRIVER_ID,
	trash_vehicle_PASSENGER_ID,
}
new TRASH_VEHICLES[MAX_VEHICLES][TRASH_VEHICLES_INFO];

/* SYSTEM - PLAYERTEMP */
enum
{
	PED_STOPPED,
	PED_WALKING,
	PED_RUNNING,
	PED_SPRINTING,
	PED_BYCICLING,
}

enum Temp_Enum
{
	pt_GAME_STATE,
	pt_NAME[24],
	pt_IP[16],
	bool:pt_USER_EXIST, // Esta registrado?
	bool:pt_USER_LOGGED, // 1 = ha cargado todos los datos del user
	pt_ANTIFLOOD_COMMANDS,
	pt_ANTIFLOOD_TALK,
	pt_TIMERS[MAX_TIMERS_PER_PLAYER],
	bool:pt_USER_VALID_NAME,
	pt_RP_NAME[24],
	pt_BAD_LOGIN_ATTEMP,
	pt_DOUBT_CHANNEL_TIME,
	pt_DOUBT_CHANNEL_TIME_TW,
	pt_LAST_PICKUP_ID,
	pt_LAST_AREA_ID,
	pt_HOSPITAL,
	Float:pt_HOSPITAL_LIFE,
	pt_TIME_PASSED_LAST_REP,
	pt_INTERIOR_INDEX,
	pt_CLOTHING_SHOP,
	pt_CLOTHING_SHOP_SELECTED_SKIN,
	bool:pt_SELECT_TEXTDRAW,
	bool:pt_HUD_TEXTDRAWS, // Barra de hambre y sed
	bool:pt_REGISTER_SELECTING_SKIN,
	pt_REGISTER_SELECTED_SKIN,
	bool:pt_REGISTER_SELECTING_STYLE,
	pt_REGISTER_SELECTED_STYLE,
	pt_REGISTER_ACTOR,
	bool:pt_THIRST_MESSAGE,
	bool:pt_HUNGRY_MESSAGE,
	bool:pt_TOYS_SHOP,
	pt_TOYS_SHOP_TOY_SELECTED,
	pt_SELECTED_TOY_SLOT,
	pt_SELECT_BANK_TRANSFER_ACCOUNT,
	pt_SELECT_BANK_TRANSFER_ID,
	bool:pt_PLAYER_IN_ATM,
	pt_POCKET_SLOT_SELECTED,
	bool:pt_PHONE_COMMANDS_MESSAGE,
	bool:pt_PLAYER_IN_CALL,
	pt_PLAYER_PHONE_CALL_STATE,
	pt_PLAYER_PHONE_CALL_PLAYERID,
	pt_PLAYER_LISTITEM[MAX_LISTITEMS],
	pt_PLAYER_PHONE_BOOK_ADD_NUMBER,
	pt_PLAYER_PHONE_BOOK_SELECTED,
	pt_PLAYER_PHONE_NUMBER_SELECTED,
	pt_BUY_HOUSE_INDEX,
	bool:pt_PLAYER_FINISH_HOSPITAL,
	pt_ANTIFLOOD_KNOCK_PROPERTY,
	pt_KNOCK_PLAYER_ID,
	pt_GPS_CHECKPOINT,
	pt_GPS_PLAYER_SELECTED,
	pt_PLAYER_GPS_SELECTED_PROPERTY[MAX_SU2_PROPERTIES],
	pt_PLAYER_PROPERTY_SELECTED,
	bool:pt_MUSIC_FOR_PROPERTY,
	bool:pt_MUSIC_FOR_VEHICLE,
	pt_SPEAKERS_TIME,
	bool:pt_MUSIC_FOR_SPEAKERS, 
	pt_MUSIC_PLAYER,
	pt_SELECTED_BUY_VEHICLE_ID,
	pt_LAST_VEHICLE_ID,
	pt_NOTARY_OPTION, //0 al banco, 1 a persona
	pt_NOTARY_PRICE,
	pt_NOTARY_TO_PLAYER,
	pt_PLAYER_VEHICLE_SELECTED,
	bool:pt_TAXI_METER_ENABLED,
	bool:pt_WANT_MECANICO,
	bool:pt_WANT_TAXI,
	bool:pt_WANT_MEDIC,
	Float:pt_TRUCK_LOADING_VALUE,
	pt_TRUCK_CHECKPOINT,
	pt_TRAILER_CHECKPOINT,
	pt_TUNING_SELECTED_PART[24],
	pt_TUNING_SELECTED_COMPONENT[24],
	pt_TUNING_SELECTED_COMPONENT_ID,
	pt_TUNING_SELECTED_PIECES,
	pt_PAINTJOB_SELECTED_ID,
	pt_WORKING_IN,
	pt_SELECTED_MECANICO_VEHICLE_ID,
	pt_MECANICO_COLOR_SLOT,
	pt_HARVERT_CHECKPOINT,
	pt_HARVERT_PROCCESS,
	pt_PIZZA_CHECKPOINT,
	bool:pt_TRASH_DRIVER,
	bool:pt_TRASH_PASSENGER,
	pt_TRASH_VEHICLE_ID,
	pt_TRASH_CHECKPOINT,
	Float:pt_RECYCLE_BIN_VALUE,
	pt_BUS_CHECKPOINT,
	bool:pt_PLAYER_CARRYING_TREE,
	pt_PLAYER_LUMBERJACK_TREE,
	pt_LUMBERJACK_CHECKPOINT,
	pt_LAST_GOT_WORK_TIME,
	pt_LAST_GIVE_MONEY_TIME,
	pt_SELECTED_BUY_SEED_ID,
	bool:pt_PLANTING,
	pt_PLANTING_PLANT_SELECTED,
	bool:pt_GPS_MAP,
	pt_PROPERTY_INDEX,
	bool:pt_KICKED,
	pt_SELECTED_DIALOG_WEAPON_SLOT,
	pt_TRICK_SELLER_PID,
	pt_TRICK_SELLER_AID,
	pt_TRICK_SELLER_EXTRA,
	pt_TRICK_PRICE,
	pt_TRICK_TIME,
	pt_DIALOG_BOT_VEHICLE,
	pt_DIALOG_BOT_VEHICLE_BOOT_SLOT,
	pt_FRECUENCIA_RADIO,
	bool:pt_CUFFING,
	bool:pt_CUFFED,
	pt_ENTER_JAIL_TIME,
	pt_DIALOG_DB_LIMIT,
	pt_DIALOG_DB_PAGE,
	pt_SELECTED_DB_AC_ID,
	bool:pt_POLICE_CALL_NAME,
	bool:pt_POLICE_CALL_DESCRIPTION,
	pt_POLICE_CALL_NAME_STR[24],
	pt_SAVE_ACCOUNT_TIME,
	pt_ANTIFLOOD_REPORT,
	bool:pt_SEE_ACMD_LOG,
	bool:pt_SEE_ADM_LOG,
	bool:pt_SEE_ADM_CHAT,
	pt_LAST_CHEAT_DETECTED_TIME,
	bool:pt_SEE_AC_LOG,
	pt_ANTIFLOOD_DEATH,
	pt_ANTIFLOOD_STATE,
	pt_ANTIFLOOD_ENTER_VEHICLE,
	pt_SELECTED_AC_LISTITEM,
	pt_ADMIN_PM_PID,
	pt_ADMIN_PM_AID,
	pt_ADMIN_PM_TIME,
	pt_MECANICO_PID,
	pt_MECANICO_AID,
	pt_MECANICO_PRICE,
	pt_MECANICO_TEXT[64],
	pt_MECANICO_TYPE,
	pt_MECANICO_EXTRA,
	pt_MECANICO_VEHICLE_ID,
	pt_MECANICO_PIECES,
	pt_MECANICO_TIME,
	pt_MECANICO_SELECTED_COLOR,
	pt_MECANICO_SELECTED_COMPONENT,
	bool:pt_SHOP,
	pt_SHOP_STATE,
	pt_SHOP_ARTICLE_ID[6],
	pt_SHOP_SELECTED_ARTICLE_ID,
	bool:pt_SHOP_COME_FROM_MY_ADS,
	pt_ANTIFLOOD_SHOP,
	pt_SHOP_ADD_TYPE,
	pt_SHOP_ADD_TEXT[24],
	pt_SHOP_ADD_MODELID,
	pt_SHOP_ADD_VCOL1,
	pt_SHOP_ADD_VCOL2,
	pt_VIRTUAL_WORLD,
	pt_PIZZA_PROCCESS,
	pt_DELIVERED_PIZZAS,
	pt_PIZZA_ACTOR,
	pt_LAST_PLANT_TIME,
	pt_LAST_SET_WANTED_LEVEL,
	pt_CREATE_CREW_NAME[32],
	pt_CREATE_CREW_COLOR,
	pt_CREW_INVITE_PID,
	pt_CREW_INVITE_AID,
	pt_CREW_INVITE_INFO[4],
	pt_CREW_SELECTED_RANK,
	pt_CREW_SELECTED_NEW_RANK,
	pt_LAST_TERRITORY,
	pt_PLAYER_TERRITORY_PRO,
	pt_PLAYER_COLOR,
	pt_LAST_GOT_CREW,
	pt_POLICE_PEN_PID,
	pt_POLICE_PEN_AID,
	pt_POLICE_PEN_IM,
	pt_POLICE_PEN_TIME,
	pt_DIALOG_ECO_SELECTED,
	pt_LAST_SU_CHECK,
	pt_PIVOT_OBJECT,
	pt_SELECT_TUNING_OBJECT,
	pt_TUNING_PICKUP,
	bool:pt_IN_TUNING_GARAGE,
	bool:pt_TUNING_GARAGE_SHOP,
	pt_TUNING_GARAGE_VEHICLEID,
	pt_TUNING_EDIT_SLOT,
	Float:pt_OLD_EDIT_VOBJECT_POS[6],
	pt_TUNING_EDIT_COLOR_SLOT,
	pt_COUNTRY_TYPE,
	pt_LAST_SHOT_ROBBERY,
	bool:pt_READING_GUIDE,
	pt_GUIDE_STEP,
	pt_PASSWD[24],
	bool:pt_CONTROL,
	pt_SELECTING_STYLE,
	pt_SELECTED_STYLE,
	pt_PROPERTY_CINFO[4],
	pt_CJ_WARNINGS,
	pt_FIRST_NAME[24],
	pt_SUB_NAME[24],
	Text3D:pt_WORK_LABEL,
	bool:pt_ADMIN_SERVICE,
	Text3D:pt_ADMIN_LABEL,
	pt_LAST_SAFE_ZONE_WARNING,
	pt_SELECTED_POLICE_OBJECT_INDEX,
	pt_SELECTED_BYC_ID,
	pt_SELECTED_BYC_USER_ID,
	bool:pt_DIALOG_RESPONDED,
	pt_DIALOG_ID,
	pt_FUMIGATOR_CHECKPOINT,
	pt_FUMIGATOR_PROCCESS,
	bool:pt_DL_EXAM,
	pt_DL_EXAM_CP,
	pt_DL_EXAM_PROCCESS,
	pt_COOLDOWN_MEDICINE,
	pt_COOLDOWN_CRACK,
	pt_COOLDOWN_WEED,
	pt_SELECTED_OBJECT,
	pt_DIALOG_CLOSET_PROPERTY,
	pt_DIALOG_CLOSET_PROPERTY_SLOT,
	bool:pt_CLASSED,
	pt_CREW_INDEX,
	pt_DEATH_TIME,
	bool:pt_CREW_HELP,
	bool:pt_POLICE_HELP,
	bool:pt_COMBAT,
	pt_COMBAT_TIMER,
	pt_LAST_VEHICLE_DESTROY,
	pt_LOGIN_KICK_TIMER,
	pt_COOLDOWN_MEDICAL_KIT,
	pt_SELECTED_GRAFFITI,
	pt_PAYDAY_DADO,
	pt_InfoTimer,
	bool:pt_Plataforma,
	pt_PRIMERA_PERSONA,
	Float:pt_DAMAGE_DANIO,
	bool:pt_CON_ESTADO,
	Text3D:pt_ESTADO_LABEL,
	pt_TIME_PICKUP,
	pt_EN_INTRO,
	bool:pt_SPECTANDO,
	pt_ID_SPEC,
	bool:pt_SPECTEADO,
	pt_SLAP_ID,
	pt_ID_COLOR,
	bool:pt_SHOW_IPHONE,
	bool:pt_LOCK_IPHONE,
	bool:pt_AUTO_LOGGED,
	pt_TIME_PAUSE,
	bool:pt_ADMIN_PM_DS,
	bool:pt_PLAYER_SECUESTRANDO,
	pt_PLAYER_ID_SECUESTRADOR,
	pt_PLAYER_ID_SECUESTRADO,
	pt_TIME_SECUESTRO
};
new PLAYER_TEMP[MAX_PLAYERS][Temp_Enum]; // PT (PlayerTemp), variables que no van a ser guardadas en base de datos.

#define MAX_ADS_PER_PLAYER	3
enum
{
	PLAYER_SHOP_STATE_ALL,
	PLAYER_SHOP_STATE_AD,
	PLAYER_SHOP_STATE_MY_ADS,
}

enum
{
	SHOP_ARTICLE_TYPE_PROPERTY,
	SHOP_ARTICLE_TYPE_VEHICLE,
	SHOP_ARTICLE_TYPE_OTHER,
}

enum
{
	MECANICO_OPTION_REPAIR,
	MECANICO_OPTION_COLOR_1,
	MECANICO_OPTION_COLOR_2,
	MECANICO_OPTION_TUNING,
	MECANICO_OPTION_REMOVE_COMPONEN,
	MECANICO_OPTION_PAINTJOB,
}

//EnterExits
enum
{
	INTERIOR_NO_INFO,
	//INTERIOR_GENERAL_HOSPITAL,
	INTERIOR_BINCO,
	INTERIOR_SUBURBAN,
	INTERIOR_PROLAPS,
	INTERIOR_DIDIER_SACHS,
	INTERIOR_VICTIM,
	INTERIOR_ZIP,
	INTERIOR_247,
	INTERIOR_PIZZA,
	INTERIOR_CLUCKIN_BELL,
	INTERIOR_BURGER_SHOT,
	INTERIOR_BANK_LS,
	INTERIOR_BANK_SF,
	INTERIOR_BANK_LV,
	INTERIOR_CITY_HALL_LS,
	INTERIOR_UNITY_STATION,
	INTERIOR_TRUCK,
	INTERIOR_POLICE_LS,
	INTERIOR_POLICE_SF,
	INTERIOR_POLICE_LV,
	INTERIOR_ALHAMBRA,
	INTERIOR_POLICE_GARAGE,
	INTERIOR_HOSPITAL,
	INTERIOR_CLUB,
	INTERIOR_DRIVING_SCHOOL,
	INTERIOR_AMAZON,
	INTERIOR_IKEA,
	INTERIOR_TRAILERO,
	INTERIOR_AMMUNATION,
//	INTERIOR_FBI
	INTERIOR_KBANK1
}

enum Entradas_Salidas
{
	ee_VISIBLE_ITEMS,
	bool:ee_ROBBABLE,
	ee_LAST_ROBBERY,
	ee_MAIN_ACTOR,
	ee_TIMER,
	Text:ee_TEXTDRAW,
	ee_STEP,
	ee_LAST_CREW_INDEX_ROBBERY,
	Float:ee_ROBBERY_PROGRESS,

	ee_ID,
	ee_NAME[64],

	ee_INTERIOR_TYPE,

	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,

	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,

	ee_TIME_OPEN,
	ee_TIME_CLOSE,

	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,


	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID,	/* Son pickups para identificar el id */

	ee_EXT_PICKUP_OBJECT, /* Pickups de area para ciudades extra */
    bool:pi_VIP
}

new ENTRADAS_SALIDAS[][Entradas_Salidas] = // EE = EnterExits
{
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID, bool:pi_VIP},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 1, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 2825.891357, 2407.322265, 11.062500, 133.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID, bool:pi_VIP}
};

enum Enter_Exits
{
	ee_VISIBLE_ITEMS,
	bool:ee_ROBBABLE,
	ee_LAST_ROBBERY,
	ee_MAIN_ACTOR,
	ee_TIMER,
	Text:ee_TEXTDRAW,
	ee_STEP,
	ee_LAST_CREW_INDEX_ROBBERY,
	Float:ee_ROBBERY_PROGRESS,

	ee_ID,
	ee_NAME[64],

	ee_INTERIOR_TYPE,

	ee_INT_MAPICON,
	ee_INT_FREEZE,
	ee_INT_WORLD,
	ee_INT_INTERIOR,
	Float:ee_INT_X,
	Float:ee_INT_Y,
	Float:ee_INT_Z,
	Float:ee_INT_ANGLE,

	ee_EXT_MAPICON,
	ee_EXT_FREEZE,
	ee_EXT_WORLD,
	ee_EXT_INTERIOR,
	Float:ee_EXT_X,
	Float:ee_EXT_Y,
	Float:ee_EXT_Z,
	Float:ee_EXT_ANGLE,

	ee_TIME_OPEN,
	ee_TIME_CLOSE,

	ee_INT_MAPICON_ID,
	ee_EXT_MAPICON_ID,
	Text3D:ee_INT_LABEL_ID,
	Text3D:ee_EXT_LABEL_ID,


	ee_INT_PICKUP_ID,	/* No son pickups decorativos */
	ee_EXT_PICKUP_ID,	/* Son pickups para identificar el id */

	ee_EXT_PICKUP_OBJECT /* Pickups de area para ciudades extra */
}

new ENTER_EXIT[][Enter_Exits] = // EE = EnterExits
{
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 0, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2244.484863, -1665.223510, 15.476562, 0.0, 9, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 1, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, -2374.125976, 910.103271, 45.433864, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 2, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 2101.902832, 2257.391845, 11.023437, 270.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Binco", INTERIOR_BINCO, -1, false, 3, 15, 207.744949, -111.073318, 1005.132812, 0.0,	45, false, 0, 0, 1656.993408, 1733.450195, 10.828111, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 0, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2112.835205, -1211.456665, 23.962865, 180.0, 9, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 1, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, -2490.140869, -29.123632, 25.617187, 90.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "SubUrban", INTERIOR_SUBURBAN, -1, false, 2, 1, 203.906326, -50.494247, 1001.804687, 0.0,	45, false, 0, 0, 2779.590087, 2453.658203, 11.062500, 136.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 0, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 499.498168, -1360.616088, 16.368682, 340.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ProLaps", INTERIOR_PROLAPS, -1, false, 1, 3, 206.995925, -140.021163, 1003.507812, 0.0,	45, false, 0, 0, 2825.891357, 2407.322265, 11.062500, 133.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 0, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 453.858032, -1478.098632, 30.813968, 111.110641, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Didier Sachs", INTERIOR_DIDIER_SACHS, -1, false, 1, 14, 204.348281, -168.678985, 1000.523437, 0.0,	45, false, 0, 0, 1642.838012, -2284.760742, -1.195312, 270.0, 8, 23, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 0, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 461.541320, -1500.892333, 31.049194, 98.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 1, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, -1694.747558, 951.613464, 24.890625, 135.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Victim", INTERIOR_VICTIM, -1, false, 2, 5, 227.350250, -8.188652, 1002.210937, 90.0,	45, false, 0, 0, 2802.926269, 2430.682861, 11.062500, 130.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 0, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 1456.611816, -1137.818969, 23.961400, 215.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 1, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, -1882.421997, 866.394836, 35.171875, 138.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 2, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2090.534667, 2224.481933, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "ZIP", INTERIOR_ZIP, -1, false, 3, 18, 161.401184, -96.887367, 1001.804687, 0.0,	45, false, 0, 0, 2572.074218, 1904.711181, 11.023437, 180.0, 9, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 0, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2194.734130, 1991.022216, 12.296875, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 1, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -180.966003, 1034.823242, 19.742187, 90.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 2, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1352.314941, -1758.961425, 13.507812, 0.0,	0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 3, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1833.540771, -1842.542724, 13.578125, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 4, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2884.694335, 2453.865478, 11.068956, 225.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 5, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2097.616210, 2224.081298, 11.023437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 6, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2247.650146, 2396.417236, 10.820312, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 7, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1315.453247, -897.967102, 39.578125, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 8, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1000.317199, -919.933349, 42.328125, 105.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 9, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2452.572021, 2064.924316, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 10, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 2546.502929, 1972.397338, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 11, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, 1937.592773, 2307.269042, 10.820312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 12, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -1562.437744, -2733.189941, 48.743457, 234.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "24/7", INTERIOR_247, -1, false, 13, 18, -30.958774, -91.807441, 1003.546875, 0.0,	17, false, 0, 0, -2442.718994, 755.316589, 35.171875, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 0, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2105.234619, -1806.479614, 13.554687, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 1, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, -1721.211425, 1359.705932, 7.185316, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 2, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2756.652099, 2477.132812, 11.062500, 135.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 3, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2083.380615, 2224.687988, 11.023437, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 4, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2351.770996, 2533.328369, 10.820312, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 5, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 2638.568847, 1849.818481, 11.023437, 90.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 6, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 372.310729, -133.246292, 1001.492187, 0.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Well Stacked Pizza", INTERIOR_PIZZA, -1, false, 7, 5, 372.310729, -133.246292, 1001.492187, 0.0,	29, false, 0, 0, 375.114501, -117.272621, 1001.492187, 180.0, 13, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 0, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2419.926025, -1509.024780, 24.000000, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 1, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2397.772949, -1898.847778, 13.546875, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 2, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 928.553466, -1352.848876, 13.343750, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 3, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2838.312011, 2407.552978, 11.068956, 225.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 4, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2101.901367, 2228.776855, 11.023437, 270.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 5, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2393.372070, 2041.856323, 10.820312, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 6, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 2638.423828, 1671.904296, 11.023437, 90.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 7, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -1816.567382, 618.417419, 35.171875, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 8, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, -2671.401611, 257.927551, 4.632812, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 9, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 364.914093, -11.778851, 1001.851562, 0.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Cluckin Bell", INTERIOR_CLUCKIN_BELL, -1, false, 10, 9, 364.914093, -11.778851, 1001.851562, 0.0,	14, false, 0, 0, 368.652679, -4.492218, 1001.851562, 180.0, 13, 2, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 0, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 810.715270, -1616.163330, 13.546875, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 1, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1199.272216, -918.372253, 43.121376, 180.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 2, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2366.805419, 2071.106201, 10.820312, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 3, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2472.626464, 2034.173339, 11.062500, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 4, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1872.485351, 2071.812255, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 5, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 2169.620117, 2795.799072, 10.820312, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 6, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, 1157.925659, 2072.159912, 11.062500, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 7, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2356.003173, 1008.051147, 50.898437, 90.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 8, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -2336.861816, -166.945022, 35.554687, 270.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Burger Shot", INTERIOR_BURGER_SHOT, -1, false, 9, 10, 362.869354, -75.153747, 1001.507812, 315.0,	10, false, 0, 0, -1912.406860, 827.900634, 35.227863, 315.0, 9, 6, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco Central Knox LS", INTERIOR_BANK_LS, -1, true, 5, 5, 1412.077880, 1315.779907, 1501.087890, 90.0,	52, false, 0, 0, 1477.583740, -1010.425170, 26.843750, 180.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco Central Knox SF", INTERIOR_BANK_SF, -1, true, 10, 10, 1104.824462, 1515.503173, 1452.807128, 0.0, 52, false, 0, 0, -1961.384887, 441.804687, 35.171875, 90.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Banco Central Knox LV", INTERIOR_BANK_LV, -1, true, 15, 15, 2673.430908, -610.844604, -71.658203, 270.0, 52, false, 0, 0, 2474.557861, 1024.154052, 10.820312, 180.0, 8, 22, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{1000, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Gobierno San Andreas", INTERIOR_CITY_HALL_LS, -1, true, 20, 20, -501.181243, 286.212188, 2001.094970, 0.0, 3, false, 0, 0, 1480.966918, -1772.065673, 18.795755, 0.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Unity Station", INTERIOR_UNITY_STATION, -1, false, 0, 3, 1494.416015, 1303.681884, 1093.289062, 0.0, -1, false, 0, 0, 1752.603881, -1894.155883, 13.557376, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Camionero", INTERIOR_TRUCK, -1, true, 25, 18, 1297.457031, -61.437820, 1002.498046, 180.0, -1, false, 0, 0, -510.699890, -539.409118, 25.523437, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Trailero", INTERIOR_TRAILERO, -1, true, 26, 19, 1349.4125, 1547.2448, 3001.0859, 266.9537, -1, false, 0, 0, 2814.6101, 973.3275, 10.7500, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Central Policial Knox", INTERIOR_POLICE_LS, -1, false, 0, 6, 246.827011, 62.424068, 1003.640625, 0.0, 30, false, 0, 0, 1555.400390, -1675.611694, 16.195312, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Central Policía San Francisco", INTERIOR_POLICE_SF, -1, false, 0, 10, 246.425857, 107.400123, 1003.218750, 0.0, 30, false, 0, 0, -1605.511840, 710.382507, 13.867187, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Central Policía Los Angeles", INTERIOR_POLICE_LV, -1, false, 0, 3, 238.758178, 138.726867, 1003.023437, 0.0, 30, false, 0, 0, 2287.059082, 2432.260742, 10.820312, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Club Alhambra", INTERIOR_ALHAMBRA, -1, false, 0, 17, 493.487731, -24.662528, 1000.679687, 0.0, 48, false, 0, 0, 1836.876586, -1682.407104, 13.329626, 90.0, 22, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Knox", INTERIOR_POLICE_GARAGE, -1, false, 0, 6, 246.407897, 87.903236, 1003.640625, 180.0, -1, false, 0, 0, 1568.651977, -1690.080688, 6.218750, 180.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía San Francisco", INTERIOR_POLICE_GARAGE, -1, false, 0, 10, 278.369232, 117.561325, 1004.617187, 90.0, -1, false, 0, 0, -1594.110107, 716.163024, -4.906250, 270.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Policía Los Angeles", INTERIOR_POLICE_GARAGE, -1, false, 0, 3, 231.671142, 181.048477, 1003.031250, 90.0, -1, false, 0, 0, 2282.221923, 2423.218505, 3.476562, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, // garaje lspd
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 1, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	2034.197875, -1403.040039, 17.294845, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 2, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1172.832763, -1323.269531, 15.400051, 270.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 3, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1242.235595, 328.113281, 19.755510, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 4, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2201.566162, -2307.610839, 30.625000, 320.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 5, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-2655.108886, 639.278625, 14.453125, 180.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 6, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-318.812774, 1050.359130, 20.340259, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 7, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	-1514.855590, 2520.366699, 55.909828, 0.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Hospital", INTERIOR_HOSPITAL, -1, false, 8, 3, -2029.700683, -119.617759, 1035.171875, 0.0, 22, false, 0, 0,	1583.311401, 1768.952758, 10.820312, 90.0	, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Club", INTERIOR_CLUB, -1, false, 0, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 693.761047, 1967.498168, 5.539062, 180.0, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Club", INTERIOR_CLUB, -1, false, 1, 3, 1212.160522, -26.097007, 1000.953125, 180.0, 21, false, 0, 0, 2421.578125, -1219.242675, 25.561519, 180.0, 20, 8, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Amazon", INTERIOR_AMAZON, -1, true, 0, 11, 1947.542846, -1486.530273, 1394.125244, 90.0,	-1, true, 0, 0, -1058.164306, -652.747924, 32.007812, 0.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, //Amazon
	{1000, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Ikea", INTERIOR_IKEA,  -1, false, 0, 10, 2008.270629, -1779.718505, 1249.232055, 90.106437, 35, false, 0, 0,	1670.253662, 735.604919, 10.820312, 0.0, 8, 21, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}, //Ikea
	{-1, false, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Ammu-Nation", INTERIOR_AMMUNATION, -1, false, 0, 1, 285.588012, -41.596870, 1001.515625, 0.0, 6, false, 0, 0, 1368.760375, -1279.867553, 13.546875, 90.0, 0, 0, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID},
	{-1, true, 0, INVALID_ACTOR_ID, -1, Text:INVALID_TEXT_DRAW, 0, -1, 0.0, -1, "Knox Mini Bank [LS]", INTERIOR_KBANK1, -1, false, 0, 0, 1289.0347, -1863.7115, 13.8759, 179.1003,	52, false, 0, 0, 1289.0686, -1861.5375, 13.5469, 0.0, 9, 20, -1, -1, Text3D:INVALID_3DTEXT_ID, Text3D:INVALID_3DTEXT_ID, -1, -1, INVALID_OBJECT_ID}

};

enum enum_JAIL_POSITIONS
{
	jail_INT,
	Float:jail_X,
	Float:jail_Y,
	Float:jail_Z,
	Float:jail_ANGLE,
	jail_INTERIOR,
}
new JAIL_POSITIONS[][enum_JAIL_POSITIONS] =
{
	{INTERIOR_POLICE_LS, 265.070129, 77.518280, 1001.039062, 270.0, 6}, //jaills
	{INTERIOR_POLICE_SF, 215.681945, 110.177680, 999.015625, 0.0, 10}, //jailsf
	{INTERIOR_POLICE_LV, 197.925323, 174.997573, 1003.023437, 0.0, 3} //jaillv
};

enum BUY_PROPERTIES_SITES_INFO
{
	site_INTERIOR_TYPE,
	Float:site_X,
	Float:site_Y,
	Float:site_Z,
	site_WORLD,
	site_INTERIOR,
}
new BUY_PROPERTIES_SITES[][BUY_PROPERTIES_SITES_INFO] =
{
	{INTERIOR_BANK_LS, 1396.613403, 1320.551635, 1501.090698, 5, 5},
	{INTERIOR_BANK_SF, 1116.351684, 1540.468750, 1451.827148, 10, 10},
	{INTERIOR_BANK_LV, 2681.990966, -615.470520, -71.658203, 15, 15}
};

enum
{
	PRODUCT_TYPE_NONE,
	PRODUCT_TYPE_FOOD,
	PRODUCT_TYPE_PHONE,
	PRODUCT_TYPE_AUDIFONOS,
	PRODUCT_TYPE_KITS,
	PRODUCT_TYPE_PHONE_RESOLVER,
	PRODUCT_TYPE_SPEAKERS,
}
enum Supermarket_Enum
{
	product_TYPE,
	product_NAME[24],
	product_PRICE,
	Float:product_HUNGRY,
	Float:product_THIRST,
	product_DRUNK,
}
new Supermarket_Product_List[][Supermarket_Enum] =
{
	{PRODUCT_TYPE_PHONE, "Teléfono", 350, 0.0, 0.0, 0},
	{PRODUCT_TYPE_PHONE_RESOLVER, "Guía telefónica", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_AUDIFONOS, "Audifonos", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_SPEAKERS, "Altavoces", 200, 0.0, 0.0, 0},
	{PRODUCT_TYPE_KITS, "Kit de reparación", 1000, 0.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Botella de agua mineral", 80, 0.0, 25.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco Sprunk", 40, 0.0, 12.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de refresco cola", 30, 0.0, 10.0, 0},
	{PRODUCT_TYPE_FOOD, "Barrita energetica", 80, 15.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Porcion de pizza", 60, 20.0, 0.0, 0},
	{PRODUCT_TYPE_FOOD, "Ensalada", 50, 15.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Sandwich", 45, 10.0, 2.0, 0},
	{PRODUCT_TYPE_FOOD, "Lata de cerveza", 40, 0.0, 3.0, 1000},
	{PRODUCT_TYPE_FOOD, "Vodka", 80, 0.0, 3.0, 2500},
	{PRODUCT_TYPE_FOOD, "Whisky", 200, 0.0, 3.0, 3000}
};

enum Clothing_Shop_Info
{
	clothing_shop_INTERIOR_TYPE,
	clothing_shop_NAME[24],
	Float:clothing_shop_X,
	Float:clothing_shop_Y,
	Float:clothing_shop_Z,
	Float:clothing_shop_ANGLE,
	clothing_shop_INTERIOR,
}
new Clothing_Shop_Positions[][Clothing_Shop_Info] =
{
	{INTERIOR_BINCO, "Binco", 207.733657, -100.633468, 1005.257812, 180.0, 15}, //Binco
	{INTERIOR_SUBURBAN, "SubUrban", 203.905395, -43.450450, 1001.804687, 180.0, 1}, //SubUrban
	{INTERIOR_PROLAPS, "ProLaps", 207.049148, -129.177581, 1003.507812, 180.0, 3}, //prolaps
	{INTERIOR_DIDIER_SACHS, "Didier Sachs", 204.348281, -159.493728, 1000.523437, 180.0, 14}, //Didier
	{INTERIOR_VICTIM, "Victim", 206.374328, -7.241514, 1001.210937, 270.0, 5}, //Victim
	{INTERIOR_ZIP, "ZIP", 161.443634, -83.589271, 1001.804687, 180.0, 18} //Zip
};

enum Fast_Food_Info
{
	fast_food_INTERIOR_TYPE,
	fast_food_NAME[24],
	Float:fast_food_X,
	Float:fast_food_Y,
	Float:fast_food_Z,
	fast_food_INTERIOR,
}
new Fast_Food_Positions[][Fast_Food_Info] =
{
	{INTERIOR_BURGER_SHOT, "Burger Shot", 375.913238, -67.435272, 1001.507812, 10}, // BurgerShot
	{INTERIOR_PIZZA, "Well Stacked Pizza", 375.254730, -118.804710, 1001.499511, 5}, //Pizza
	{INTERIOR_CLUCKIN_BELL, "Cluckin Bell", 368.757904, -6.018908, 1001.851562, 9} //Cluckin Bell
};

enum atm_bank_info
{
	atm_modelid,
	Float:atm_X,
	Float:atm_Y,
	Float:atm_Z,
	Float:atm_RX,
	Float:atm_RY,
	Float:atm_RZ
}
new ATM_BANK[][atm_bank_info] =
{
	{2754, 2833.38672, 2402.91553, 10.93546,   0.00000, 0.00000, 131.44171},
	{2754, 2088.78442, 1510.00574, 10.69234,   0.00000, 0.00000, 45.39682},
	{2754, 1662.92346, 1723.03162, 10.53258,   0.00000, 0.00000, 90.27153},
	{2754, -16.17070, 1219.33813, 19.17369,   0.00000, 0.00000, 179.53238},
	{2754, -1505.91687, 2612.09058, 55.63910,   0.00000, 0.00000, 178.85609},
	{2754, -2540.67188, 2340.96143, 4.79166,   0.00000, 0.00000, 90.97625},
	{2754, -1690.23547, 1327.11902, 7.04427,   0.00000, 0.00000, 43.44909},
	{2754, -1980.48608, 155.24883, 27.49554,   0.00000, 0.00000, 359.06995},
	{2754, -2631.60693, -6.86652, 5.97444,   0.00000, 0.00000, 181.99303},
	{2754, -2146.54395, -2332.90283, 30.43888,   0.00000, 0.00000, 232.48808},
	{2754, 574.90155, -1419.96509, 14.22211,   0.00000, 0.00000, 283.89526},
	{2754, 1227.24524, -1428.54846, 13.29063,   0.00000, 0.00000, 269.20294},
	{2754, 1810.57153, -1873.97852, 13.38759,   0.00000, 0.00000, 180.44339},
	{2754, 1493.07471, -1022.08618, 23.63997,   0.00000, 0.00000, 91.19178},
	{2754, 2330.78149, 81.79469, 26.33336,   0.00000, 0.00000, 269.20883},
	{2754, 711.71503, -542.69287, 16.04271,   0.00000, 0.00000, 180.17184},
	{2754, 242.68755, -54.72442, 1.31352,   0.00000, 0.00000, 0.00000},
	{2754, 1381.12219, 233.81693, 19.28907,   0.00000, 0.00000, 154.79193}
/*	{2754, 1294.1161, -1875.5150, 13.8759, 0.000000, 0.000000, 179.599899},
	{19526, 1289.012695, -1875.5018, 13.8759, 0.000000, 0.000000, 179.599899},
	{19526, 1290.7531, -1875.4905, 13.8759, 0.000000, 0.000000, 179.599899},
	{19526, 1288.9949, -1875.4762, 13.8759, 0.000000, 0.000000, 179.599899}*/
};

#define MAX_BANK_TRANSACTIONS_DIALOG	20
enum
{
	BANK_TRANSACTION_WITHDRAW,
	BANK_TRANSACTION_DEPOSIT,
	BANK_TRANSACTION_TRANSFER,
	BANK_TRANSACTION_CREATE_ACCOUNT,
	BANK_TRANSACTION_BUY_PROPERTY,
	BANK_TRANSACTION_SOLD_PROPERTY,
	BANK_TRANSACTION_BUY_VEHICLE,
	BANK_TRANSACTION_SOLD_VEHICLE
};
enum Bank_Interior_Info
{
	bank_INTERIOR_TYPE,
	Float:bank_X,
	Float:bank_Y,
	Float:bank_Z,
	bank_WORLD,
	bank_INTERIOR,
}
new Bank_Interior_Positions[][Bank_Interior_Info] =
{
	{INTERIOR_BANK_LS, 1407.356201, 1320.171142, 1501.083984, 5, 5},
	{INTERIOR_BANK_SF, 1105.033935, 1529.565795, 1452.480957, 10, 10},
	{INTERIOR_BANK_LV, 2690.869628, -610.943664, -71.658203, 15, 15},
	{INTERIOR_KBANK1, 2690.869628, -610.943664, -71.658203, 0, 0}
};

enum Food_Info
{
	food_NAME[24],
	food_PRICE,
	Float:food_HUNGRY,
	Float:food_THIRST,
}
new PIZZA_FOOD[][Food_Info] =
{
	{"Pizza de verduras", 25, 10.0, -0.1},
 	{"Pizza de jamón y queso", 60, 16.0, -0.1},
	{"Pizza barbacoa", 40, 15.0, -0.1},
	{"Pizza 4 quesos", 55, 14.0, -0.1},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};
new BURGER_SHOT_FOOD[][Food_Info] =
{
	{"Hamburguesa de ternera", 60, 16.0, -0.1},
	{"Hamburguesa de pollo", 80, 10.0, -0.1},
	{"Hamburguesa especial", 60, 12.0, -3.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};
new CLUCKIN_BELL_FOOD[][Food_Info] =
{
	{"Alitas de pollo", 60, 16.0, -0.1},
	{"Plato especial", 80, 18.0, -2.0},
	{"Ensalada", 20, 10.0, 5.0},
	{"Refresco de Sprunk", 30, 0.0, 12.0},
	{"Refresco de Cola", 50, 0.0, 13.5},
	{"Agua mineral", 30, 0.0, 19.0}
};

enum Player_Toys_Info
{
	player_toy_VALID,

	player_toy_ID,
	player_toy_NAME[24],
	player_toy_ATTACHED,
	player_toy_MODELID,
	player_toy_BONE,
	Float:player_toy_OFFSET_X,
	Float:player_toy_OFFSET_Y,
	Float:player_toy_OFFSET_Z,
	Float:player_toy_ROT_X,
	Float:player_toy_ROT_Y,
	Float:player_toy_ROT_Z,
	Float:player_toy_SCALE_X,
	Float:player_toy_SCALE_Y,
	Float:player_toy_SCALE_Z,
	player_toy_COLOR_1,
	player_toy_COLOR_2,
}
new PLAYER_TOYS[MAX_PLAYERS][MAX_SU2_TOYS][Player_Toys_Info]; //PTOYS = PlayerToys

new Toys_Bones[][24] =
{
	{"Espalda"},
	{"Cabeza"},
	{"Brazo izquierdo"},
	{"Brazo derecho"},
	{"Mano izquierda"},
	{"Mano derecha"},
	{"Muslo izquierdo"},
	{"Muslo derecho"},
	{"Pie izquierdo"},
	{"Pie derecho"},
	{"Pantorrilla derecha"},
	{"Pantorrilla izquierda"},
	{"Antebrazo izquierdo"},
	{"Antebrazo derecho"},
	{"Hombro izquierdo"},
	{"Hombro derecho"},
	{"Cuello"},
	{"Boca"}
};

enum Toys_Info
{
	shop_toy_model[24],
	shop_toy_modelid,
	shop_toy_price_base,
	shop_toy_price,
}
new Toys_Shop[][Toys_Info] =
{
	{"Estrella", 1247, 3000, 0},
	{"Calavera", 1254, 3000, 0},
	{"Chaleco-Casero", 1242, 4500, 0},
	{"Maletin", 1210, 4500, 0},
	{"Moto-PNE", 19086, 8500, 0},
	{"Chaleco-Construccion", 19904, 4500, 0},
	{"Casco-1", 18976, 2000, 0},
	{"Casco-2", 18977, 500, 0},
	{"Casco-3", 18978, 500, 0},
	{"Casco-4", 18979, 500, 0},
	{"Casco-Tonto-1", 19114, 100, 0},
	{"Casco-Tonto-2", 19115, 200, 0},
	{"Casco-Liso-1", 19116, 75, 0},
	{"Casco-Liso-2", 19117, 75, 0},
	{"Casco-Liso-3", 19118, 75, 0},
	{"Casco-Liso-4", 19119, 75, 0},
	{"Casco-Liso-5", 19120, 75, 0},
	{"Lentes-1", 19006, 2000, 0},
	{"Lentes-2", 19007, 2000, 0},
	{"Lentes-3", 19008, 2000, 0},
	{"Lentes-4", 19009, 2000, 0},
	{"Lentes-5", 19010, 2000, 0},
	{"Lentes-6", 19011, 2000, 0},
	{"Lentes-7", 19012, 2000, 0},
	{"Lentes-8", 19013, 2000, 0},
	{"Lentes-9", 19014, 2000, 0},
	{"Lentes-10", 19015, 2000, 0},
	{"Lentes-11", 19016, 2000, 0},
	{"Lentes-12", 19017, 2000, 0},
	{"Lentes-13", 19018, 2000, 0},
	{"Lentes-14", 19019, 2000, 0},
	{"Lentes-15", 19020, 2000, 0},
	{"Lentes-16", 19021, 2000, 0},
	{"Lentes-17", 19022, 2000, 0},
	{"Lentes-18", 19023, 2000, 0},
	{"Lentes-19", 19024, 2000, 0},
	{"Lentes-20", 19025, 2000, 0},
	{"Lentes-21", 19026, 2000, 0},
	{"Lentes-22", 19027, 2000, 0},
	{"Lentes-23", 19028, 2000, 0},
	{"Lentes-24", 19029, 2000, 0},
	{"Lentes-25", 19030, 2000, 0},
	{"Lentes-26", 19031, 2000, 0},
	{"Lentes-27", 19032, 2000, 0},
	{"Lentes-28", 19033, 2000, 0},
	{"Lentes-29", 19034, 2000, 0},
	{"Lentes-30", 19035, 2000, 0},
	{"Lentes-Policiales-1", 19138, 2300, 0},
	{"Lentes-Policiales-2", 19139, 2300, 0},
	{"Lentes-Policiales-3", 19140, 2300, 0},
	{"Bandana-1", 18891, 600, 0},
	{"Bandana-2", 18892, 600, 0},
	{"Bandana-3", 18893, 600, 0},
	{"Bandana-4", 18894, 600, 0},
	{"Bandana-5", 18895, 600, 0},
	{"Bandana-6", 18896, 600, 0},
	{"Bandana-7", 18897, 600, 0},
	{"Bandana-8", 18898, 600, 0},
	{"Bandana-9", 18899, 600, 0},
	{"Bandana-10", 18900, 600, 0},
	{"Bandana-11", 18901, 600, 0},
	{"Bandana-12", 18902, 600, 0},
	{"Bandana-13", 18903, 600, 0},
	{"Bandana-14", 18904, 600, 0},
	{"Bandana-15", 18905, 600, 0},
	{"Bandana-16", 18906, 600, 0},
	{"Bandana-17", 18907, 600, 0},
	{"Bandana-18", 18908, 600, 0},
	{"Bandana-19", 18909, 600, 0},
	{"Bandana-20", 18910, 600, 0},
	{"Mascara-1", 18911, 500, 0},
	{"Mascara-1", 18912, 500, 0},
	{"Mascara-2", 18913, 500, 0},
	{"Mascara-3", 18914, 500, 0},
	{"Mascara-4", 18915, 500, 0},
	{"Mascara-5", 18916, 500, 0},
	{"Mascara-6", 18917, 500, 0},
	{"Mascara-7", 18918, 500, 0},
	{"Mascara-8", 18919, 500, 0},
	{"Mascara-9", 18920, 500, 0},
	{"Reloj-1", 19039, 3000, 0},
	{"Reloj-2", 19040, 3000, 0},
	{"Reloj-3", 19041, 3000, 0},
	{"Reloj-4", 19042, 3000, 0},
	{"Reloj-5", 19043, 3000, 0},
	{"Reloj-6", 19044, 3000, 0},
	{"Reloj-7", 19045, 3000, 0},
	{"Reloj-8", 19046, 3000, 0},
	{"Reloj-9", 19047, 3000, 0},
	{"Reloj-10", 19048, 3000, 0},
	{"Reloj-11", 19049, 3000, 0},
	{"Reloj-12", 19050, 3000, 0},
	{"Reloj-13", 19051, 3000, 0},
	{"Reloj-14", 19052, 3000, 0},
	{"Reloj-15", 19053, 3000, 0},
	{"Boina-1", 18921, 1150, 0},
	{"Boina-2", 18922, 1150, 0},
	{"Boina-3", 18923, 1150, 0},
	{"Boina-4", 18924, 1150, 0},
	{"Boina-5", 18925, 1150, 0},
	{"Sombrero-(CJ1)", 2052, 200, 0},
	{"Sombrero-(CJ)", 2053, 200, 0},
	{"Visera-(CJ)", 2054, 2000, 0},
	{"Casco-1", 18638, 300, 0},
	{"Casco-2", 19093, 450, 0},
	{"Casco-3", 19160, 450, 0},
	{"Sombrero-Negro", 18639, 600, 0},
	{"Visera-V-1", 18926, 650, 0},
	{"Visera-V-2", 18927, 650, 0},
	{"Visera-V-3", 18928, 650, 0},
	{"Visera-V-4", 18929, 650, 0},
	{"Visera-V-5", 18930, 650, 0},
	{"Visera-V-6", 18931, 650, 0},
	{"Visera-V-7", 18932, 650, 0},
	{"Visera-V-8", 18933, 650, 0},
	{"Visera-V-9", 18934, 650, 0},
	{"Visera-V-10", 18935, 650, 0},
	{"Sombrero-G-1", 18944, 800, 0},
	{"Sombrero-G-2", 18945, 800, 0},
	{"Sombrero-G-3", 18946, 800, 0},
	{"Sombrero-G-4", 18947, 1200, 0},
	{"Sombrero-G-5", 18948, 1200, 0},
	{"Sombrero-G-6", 18949, 1200, 0},
	{"Sombrero-G-7", 18950, 1200, 0},
	{"Sombrero-G-8", 18951, 1200, 0},
	{"Sombrero-G-9", 19488, 1200, 0},
	{"Sombrero-Vaquero-1", 19095, 1150, 0},
	{"Sombrero-Vaquero-2", 18962, 1150, 0},
	{"Sombrero-Vaquero-3", 19096, 1150, 0},
	{"Sombrero-Vaquero-4", 19097, 1150, 0},
	{"Sombrero-Vaquero-5", 19098, 1150, 0},
	{"Visera-G-1", 18967, 650, 0},
	{"Visera-G-2", 18968, 650, 0},
	{"Visera-G-3", 18969, 650, 0},
	{"Visera-G-4", 18969, 650, 0},
	{"Visera-G-Tigre", 18970, 1500, 0},
	{"Sombrero-Grande-1", 18971, 1500, 0},
	{"Sombrero-Grande-2", 18972, 1500, 0},
	{"Sombrero-Grande-3", 18973, 1500, 0},
	{"Gorro-de-Navidad-1", 19064, 100, 0},
	{"Gorro-de-Navidad-2", 19065, 100, 0},
	{"Gorro-de-Navidad-3", 19066, 100, 0},
	{"Gorro-1", 19067, 500, 0},
	{"Gorro-2", 19068, 500, 0},
	{"Gorro-3", 19069, 500, 0},
	{"Gorra-Policial-1", 19161, 2500, 0},
	{"Gorra-Policial-2", 19162, 2500, 0},
	{"Sombrerero-1", 19352, 700, 0},
	{"Sombrerero-2", 19487, 700, 0},
	{"Sombrero-de-Piloto", 19520, 3000, 0},
	{"Sombrero-de-Oficial", 19521, 3000, 0},
	{"Sombrero-de-Bruja", 19528, 150, 0},
	{"Sombrero-de-Paja", 19553, 450, 0},
	{"Visera-Pizzero", 19558, 100, 0},
	{"Visera-CLB", 19137, 2500, 0},
	{"Visera-BGS", 19094, 2000, 0},
	{"Mochila-de-Viajero", 19559, 600, 0},
	{"Cabello-1", 19517, 1000, 0},
	{"Cabello-2", 19516, 1000, 0},
	{"Cabello-3", 19077, 1000, 0},
	{"Cabello-4", 18975, 1000, 0},
	{"Sombrero-AntiFuego-1", 19330, 3000, 0},
	{"Sombrero-AntiFuego-2", 19331, 3000, 0},
	{"Visera-Cool)", 18961, 1000, 0},
	{"Guitarra-Roja", 19317, 2100, 0},
	{"Guitarra-Blanco-Negro", 19318, 2100, 0},
	{"Casco-de-Boxeador", 18952, 1500, 0},
	{"Mascara-de-Jason", 19036, 1700, 0},
	{"El-Loro", 19078, 7500, 0},
	{"Chaleco-Casero", 19515, 7000, 0},
	{"Mascara-de-Demonio", 11704, 3500, 0},
	{"Mascara-de-Esclavo/a", 19163, 2500, 0},
	{"Auriculares", 19422, 1500, 0},
	{"Paracaidas", 371, 2200, 0},
	{"Laser", 18643, 1500000, 0},
   	{"Moto-Polla", 19086, 3000, 0},
   	{"Navaja", 19590, 5000, 0},
	{"Parche", 19085, 5000, 0},
	{"Radio", 2226, 1000, 0},
	{"Botella", 1668, 3500, 0},
	{"Maletin", 1210, 5000, 0},
	{"Bolsa-Con-Dinero", 1550, 10000, 0},
	{"Bate", 2045, 3249, 0},
	{"Martillo", 18635, 5000, 0},
	{"Telefono", 18874, 10000, 0},
	{"Mascarilla", 19085, 1000, 0},
	{"Cuernos", 19314, 2000, 0},
 	{"Calabaza", 19320, 4000, 0},
	{"Guante-de-Box", 19555, 2500, 0},
	{"Mochila-de-Explorador", 19559, 10000, 0},
	{"Cuchillo", 19583, 2500, 0},
	{"Sarten", 19581, 3000, 0},
	{"Microfono", 19610, 1000, 0},
	{"Patineta", 19878, 5500, 0},
	{"Papel-Higienico", 19873, 2000, 0},
	{"Bolsa", 11745, 5000, 0},
	{"Linterna-Policial", 18646, 20000, 0}
};
enum oi_info
{
	obj_ID,
	obj_BONE,
	obj_NAME[32]
};
new OBJETOS_INFO[][oi_info] =
{
	{0, 1,	"Desconocido"},
	{1, 1,	"Manopla"},
	{2, 1,	"Palo de golf"},
	{3, 1,	"Porra"},
	{4, 1,	"Cuchillo"},
	{5, 1,	"Bate de beisbol"},
	{6, 1,	"Pala"},
	{7, 1,	"Palo de billar"},
	{8, 1,	"Katana"},
	{9, 1,	"Motosierra"},
	{10, 1,	"Consolador rosa"},
	{11, 1,	"Vibrador blanco"},
	{12, 1,	"Gran vibrador blanco"},
	{13, 1,	"Vibrador plateado"},
	{14, 1,	"Ramo de flores"},
	{15, 1,	"Baston"},
	{16, 1,	"Granada"},
	{17, 1,	"Gas Lacrimógeno"},
	{18, 1,	"Molotov"},
	{22, 1,	"9mm"},
	{23, 1,	"9mm con silenciador"},
	{24, 1,	"Desert Eagle"},
	{25, 1,	"Escopeta"},
	{26, 1,	"Sawn Off"},
	{27, 1,	"Escopeta de combate"},
	{28, 1,	"UZI"},
	{29, 1,	"MP5"},
	{30, 1,	"AK-47"},
	{31, 1,	"M4"},
	{32, 1,	"TEC-9"},
	{33, 1,	"Rifle"},
	{34, 1,	"Sniper"},
	{35, 1,	"Lanzacohetes"},
	{36, 1,	"Bazooka"},
	{37, 1,	"Lanzallamas"},
	{38, 1,	"Minigun"},
	{39, 1,	"Bomba"},
	{40, 1,	"Detonador"},
	{41, 1,	"Spray"},
	{42, 1,	"Extintor De Incendios"},
	{43, 1,	"Camara"},
	{44, 1,	"Lentes de visión nocturna"},
	{45, 1,	"Gafas termicas"},
	{46, 1,	"Paracaídas"},
	{19472, 2, "Mascara Anti-Gas"},
	{18637, 4,	"Escudo Policía"},
	{18640, 2,	"Peluca"},
	{18642, 6,	"Taser"},
	{18645, 2,	"Casco con Llamas"},
	{18646, 2,  "Casco con Luces"},
	{18692, 6, 	"Llamas"},
	{18913, 2,	"Bandana Verde"},
	{18917, 2,	"Bandana Azul"},
	{18918, 2,	"Bandana Negro"},
	{18939, 2,	"Jockey Azul"},
	{18942, 2,	"Jockey Ploma"},
	{18943, 2,	"Jockey Verde"},
	{18947, 2,	"Sombrero Negro"},
	{18961, 2,	"Jockey de Camionero"},
	{18962, 2,	"Sombrero negro"},
	{18964, 2,	"Gorro Negro"},
	{18974, 2,	"Antifaz"},
	{18976, 2,	"Casco Azul"},
	{18978, 2,	"Casco Blanco"},
	{18979, 2,	"Casco Morado"},
	{19033, 2,	"Gafas Negras"},
	{19036, 2,	"Mascara Blanca"},
	{19064, 2,	"Gorra de Navidad"},
	{19078, 15,	"Loro"},
	{19079, 16, "Loro"},
	{19086, 6,	"Vibrador Gigante"},
	{19093, 2,	"Gorro"},
	{19136, 2,	"Sombrero con Pelo"},
	{19137, 2,	"Mascara de Pollo"},
	{19138, 2,	"Lentes Negros"},
	{19139, 2,	"Lentes Rojos"},
	{19140, 2,	"Lentes Azules"},
	{19142, 1,	"Chaleco"},
	{19352, 2,	"Sombrero Elegante"},
	{19421, 2,	"Audifonos"},
	{19472, 2,	"Mascara de Gas"},
	{19488, 2,	"Sombrero Gris"},
	{19559, 1,	"Mochila"},
	{19801, 2,	"Mascara"},
	{18897, 2, "Bandana azul"},
	{18898, 2, "Bandana verde"},
	{18899, 2, "Bandana Rosa"},
 	{18971, 2, "Sombrero blanco y negro"},
 	{18972, 2, "Sombrero negro y naranja"},
 	{18893, 2, "Gorra pirata blanca"},
 	{18895, 2, "Gorra pirata negra"},
 	{18915, 2, "Cubre boca morado"},
 	{18920, 2, "Cubre boca amarillo"},
 	{18949, 2, "Sombrero verde"},
 	{19022, 2, "Lentes negros"},
 	{19023, 2, "Lentes azules"},
 	{19025, 2, "Lentes morado"},
 	{19029, 2, "Lentes verdes"},
 	{19069, 2, "Gorra negra"},
 	{18963, 2, "CJ"},
 	{19317, 1, "Guitarra"},
	{2404, 5, "Tabla de Suft T1"},
 	{2405, 5, "Tabla de Suft T2"},
 	{2406, 5, "Tabla de Suft T3"},
 	{1210, 5, "Maletín"},
 	{19318, 5, "Bajo"},
 	{19351, 2, "Bigote"},
	{18638, 2, "Casco de seguridad"},
	{19160, 2, "Casco de seguridad"},
	{18639, 2, "Sombrero negro"},
	{18975, 2, "Peluca"},
	{19274, 2, "Peluca de payaso roja"},
	{18891, 2, "Bandana"},
	{18892, 2, "Bandana"},
	{18894, 2, "Bandana"},
	{18896, 2, "Bandana"},
	{18900, 2, "Bandana"},
	{18901, 2, "Bandana"},
	{18902, 2, "Bandana"},
	{18903, 2, "Bandana"},
	{18904, 2, "Bandana"},
	{18905, 2, "Bandana"},
	{18906, 2, "Bandana"},
	{18907, 2, "Bandana"},
	{18908, 2, "Bandana"},
	{18909, 2, "Bandana"},
	{18910, 2, "Bandana"},
	{18911, 2, "Cubre Bocas"},
	{18912, 2, "Cubre Bocas"},
	{18914, 2, "Cubre Bocas"},
	{18916, 2, "Cubre Bocas"},
	{18919, 2, "Cubre Bocas"},
	{18921, 2, "Boina"},
	{18922, 2, "Boina"},
	{18923, 2, "Boina"},
	{18924, 2, "Boina"},
	{18925, 2, "Boina"},
	{18926, 2, "Jockey"},
	{18927, 2, "Jockey"},
	{18928, 2, "Jockey"},
	{18929, 2, "Jockey"},
	{18930, 2, "Jockey"},
	{18931, 2, "Jockey"},
	{18932, 2, "Jockey"},
	{18933, 2, "Jockey"},
	{18934, 2, "Jockey"},
	{18935, 2, "Jockey"},
	{19487, 2, "sombrero de copa"},
	{18940, 2, "Jockey"},
	{18941, 2, "Jockey"},
	{18955, 2, "Jockey"},
	{18956, 2, "Jockey"},
	{18957, 2, "Jockey"},
	{18958, 2, "Jockey"},
	{18959, 2, "Jockey"},
	{18960, 2, "Jockey"},
	{18936, 2, "Yelmo"},
	{18937, 2, "Yelmo"},
	{18938, 2, "Yelmo"},
	{18944, 2, "Sombrero rojo"},
	{18945, 2, "Sombrero gris"},
	{18946, 2, "Sombrero"},
	{18948, 2, "Sombrero"},
	{18950, 2, "Sombrero"},
	{18951, 2, "Sombrero"},
	{18952, 2, "Casco De Boxeo"},
	{18953, 2, "Gorro"},
	{18954, 2, "Gorro"},
	{18965, 2, "Gorro"},
	{18966, 2, "Gorro"},
	{18967, 2, "Gorro"},
	{18968, 2, "Gorro"},
	{18969, 2, "Gorro"},
	{18970, 2, "Sombrero de tigre"},
	{18973, 2, "Sombreo cool"},
	{19095, 2, "Sombrero de vaquero"},
	{19096, 2, "Sombrero negro"},
	{19097, 2, "Sombrero de vaquero"},
	{19098, 2, "Sombrero oscuro"},
	{18977, 2, "Casco rojo"},
	{19006, 2, "Gafas"},
	{19007, 2, "Gafas"},
	{19008, 2, "Gafas"},
	{19009, 2, "Gafas"},
	{19010, 2, "Gafas"},
	{19011, 2, "Gafas"},
	{19012, 2, "Gafas"},
	{19013, 2, "Gafas"},
	{19014, 2, "Gafas"},
	{19015, 2, "Gafas"},
	{19016, 2, "Gafas"},
	{19017, 2, "Gafas"},
	{19018, 2, "Gafas"},
	{19019, 2, "Gafas"},
	{19020, 2, "Gafas"},
	{19021, 2, "Gafas"},
	{19024, 2, "Gafas"},
	{19026, 2, "Gafas"},
	{19027, 2, "Gafas"},
	{19028, 2, "Gafas"},
	{19030, 2, "Gafas"},
	{19031, 2, "Gafas"},
	{19032, 2, "Gafas"},
	{19034, 2, "Gafas"},
	{19035, 2, "Gafas"},
	{19037, 2, "Mascara roja"},
	{19038, 2, "Mascara verde"},
	{19528, 2, "Sombrero de bruja"},
	{19553, 2, "Sombrero de paja"},
	{19554, 2, "Gorro"},
	{19558, 2, "Jockey de Pizza"},
	{19065, 2, "Gorro navideño"},
	{19085, 2, "Parche en el ojo"},
	{19094, 2, "Sombrero de amburguesa"},
	{19039, 5, "Reloj de oro"},
	{19040, 5, "Reloj"},
	{19041, 5, "Reloj"},
	{19042, 5, "Reloj"},
	{19043, 5, "Reloj"},
	{19044, 5, "Reloj"},
	{19045, 5, "Reloj"},
	{19046, 5, "Reloj"},
	{19047, 5, "Reloj"},
	{19048, 5, "Reloj"},
	{19049, 5, "Reloj"},
	{19050, 5, "Reloj"},
	{19051, 5, "Reloj"},
	{19052, 5, "Reloj"},
	{19053, 5, "Reloj"},
	{19319, 1, "Guitarra electrica"},
	{19556, 5, "Guante de boxeo"},
	{19557, 2, "Antifaz"},
	{19590, 5, "Espada japonesa"},
	{19591, 6, "Abanico"},
	{19878, 2, "Patineta"},
	{18632, 6, "Caña de pescar"},
	{1607, 2, "Delfin"},
	{19314, 2, "Cuernos"},
	{1550, 1, "Bolso con dinero"},
	{19777, 1, "FBI logo"},
	{19141, 2, "Casco SWAT"}
};

new
Binco_Shop_Male_Skins[][] =
{
	/* BINCO - HOMBRE */
	{4, 75, 0},
	{5, 75	  , 0},
	{6, 90	  , 0},
	{7, 80	  , 0},
	{21, 121	, 0},
	{44, 65	 , 0},
	{47, 119	, 0},
	{101, 149   , 0},
	{127, 89	, 0},
	{128, 25	, 0},
	{134, 25	, 0},
	{135, 25	, 0},
	{137, 19	, 0},
	{160, 55	, 0},
	{161, 68	, 0},
	{168, 39	, 0},
	{176, 79	, 0},
	{177, 65	, 0},
	{179, 110   , 0},
	{184, 150   , 0},
	{188, 160   , 0},
	{200, 15	, 0},
	{212, 30	, 0},
	{230, 10	, 0},
	{258, 69	, 0},
	{259, 69	, 0},
	{262, 50	, 0},
	{86, 70		, 0},
	{102, 100	, 0},
	{103, 100	, 0},
	{104, 100	, 0},
	{105, 100	, 0},
	{106, 100	, 0},
	{107, 100	, 0},
	{108, 100	, 0},
	{109, 100	, 0},
	{110, 100	, 0},
	{111, 100	, 0},
	{112, 100	, 0},
	{113, 100	, 0},
	{114, 100	, 0},
	{115, 100	, 0},
	{116, 100	, 0},
	{117, 100	, 0},
	{118, 100	, 0},
	{119, 100	, 0},
	{120, 100	, 0},
	{121, 100	, 0},
	{122, 100	, 0},
	{123, 100	, 0},
	{124, 100	, 0},
	{125, 100	, 0},
	{126, 100	, 0}
},

Binco_Shop_Female_Skins[][] =
{
	/* BINCO - MUJER */
	{13, 120   , 0},
	{41, 59	, 0},
	{56, 190   , 0},
	{65, 110   , 0},
	{69, 100   , 0},
	{75, 50	, 0},
	{89, 69	, 0},
	{151, 89   , 0},
	{152, 3000 , 0},
	{207, 500  , 0},
	{226, 120  , 0},
	{298, 900  , 0}
},

Suburban_Shop_Male_Skins[][] =
{
	/* SUBURBAN - HOMBRE */
	{2, 100   , 0},
	{3, 140   , 0},
	{20, 190  , 0},
	{43, 180  , 0},
	{48, 145  , 0},
	{60, 250  , 0},
	{100, 300 , 0},
	{112, 200 , 0},
	{119, 49  , 0},
	{143, 199 , 0},
	{180, 150 , 0},
	{183, 100 , 0},
	{184, 140 , 0},
	{241, 200 , 0},
	{242, 190 , 0},
	{247, 450 , 0},
	{248, 499 , 0},
	{249, 650 , 0},
	{264, 5   , 0}
},

Suburban_Shop_Female_Skins[][] =
{
	/* SUBURBAN - MUJER */
	{39, 109  , 0},
	{56, 100  , 0},
	{88, 140  , 0},
	{131, 200 , 0},
	{195, 199 , 0}
},

Prolaps_Shop_Male_Skins[][] =
{
	/* PROLAPS - HOMBRE */
	{29, 129  , 0},
	{36, 140  , 0},
	{37, 150  , 0},
	{51, 160  , 0},
	{52, 170  , 0},
	{96, 200  , 0},
	{99, 700  , 0},
	{206, 499 , 0},
	{154, 199 , 0}
},

Prolaps_Shop_Female_Skins[][] =
{
	/* PROLAPS - MUJER */
	{41, 199 , 0},
	{90, 250 , 0},
	{92, 860 , 0},
	{138, 150, 0},
	{139, 150, 0},
	{140, 159, 0},
	{190, 150, 0},
	{192, 180, 0},
	{193, 195, 0}
},

Didier_Shop_Male_Skins[][] =
{
	/* DIDIER - HOMBRE */
	{17, 1500  , 0},
	{46, 1900  , 0},
	{57, 1220  , 0},
	{82, 3400  , 0},
	{83, 3400  , 0},
	{84, 3400  , 0},
	{124, 3500 , 0},
	{147, 6000 , 0},
	{163, 3000 , 0},
	{166, 3000 , 0},
	{171, 4000 , 0},
	{187, 4500 , 0},
	{223, 3100 , 0},
	{240, 1500 , 0},
	{295, 3000 , 0}
},

Didier_Shop_Female_Skins[][] =
{
	/* DIDIER - MUJER */
	{11, 1500  , 0},
	{12, 3000  , 0},
	{40, 2500  , 0},
	{91, 8000  , 0},
	{141, 3500 , 0},
	{169, 4000 , 0},
	{172, 2100 , 0},
	{194, 2000 , 0},
	{214, 25000, 0},
	{215, 3200 , 0},
	{216, 10500, 0},
	{219, 9500 , 0}
},

Victim_Shop_Male_Skins[][] =
{
	/* VICTIM - HOMBRE */
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 900   , 0},
	{72, 599   , 0},
	{73, 699   , 0},
	{98, 339   , 0},
	{121, 200  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{250, 50000, 0},
	{289, 699  , 0},
	{299, 700  , 0},
	{303, 500  , 0},
	{304, 700  , 0}
},

Victim_Shop_Female_Skins[][] =
{
	/* VICTIM - MUJER */
	{12, 2900  , 0},
	{40, 3000  , 0},
	{55, 1010  , 0},
	{56, 400   , 0},
	{192, 3000 , 0},
	{211, 3500 , 0},
	{226, 600  , 0},
	{233, 900  , 0}
},

Zip_Shop_Male_Skins[][] =
{
	/* ZIP - HOMBRE */
	{121, 190  , 0},
	{170, 500  , 0},
	{185, 400  , 0},
	{186, 900  , 0},
	{19, 400   , 0},
	{46, 1200  , 0},
	{59, 905   , 0},
	{72, 400   , 0},
	{73, 650   , 0},
	{98, 320   , 0},
	{250, 49999, 0},
	{289, 622  , 0},
	{299, 730  , 0},
	{303, 550  , 0},
	{188, 350  , 0},
	{221, 700  , 0},
	{223, 1200 , 0},
	{304, 700  , 0}
},

Zip_Shop_Female_Skins[][] =
{
	/* ZIP - MUJER */
	{56, 405	, 0},
	{192, 3010  , 0},
	{211, 3520  , 0},
	{226, 620   , 0},
	{233, 950   , 0},
	{12, 2904   , 0},
	{40, 3002   , 0},
	{55, 1011   , 0}
};

enum
{
	PICKUP_TYPE_NONE = 0,
	PICKUP_TYPE_ENTER_EXIT,
	PICKUP_TYPE_ENTRADAS_SALIDAS,
	PICKUP_TYPE_ATM,
	PICKUP_TYPE_PROPERTY,
	PICKUP_TYPE_HOTDOG
};

new Intro_Skins[][] =
{
	{ // HOMBRE
		26,
		60
	},

	{ // MUJER
		65,
		69,
	}
};

enum E_Intro_Info
{
	Float:intro_info_CAM_X,
	Float:intro_info_CAM_Y,
	Float:intro_info_CAM_Z,
	Float:intro_info_CAM_RX,
	Float:intro_info_CAM_RY,
	Float:intro_info_CAM_RZ,
	Float:intro_info_CAM_LOOK_AT_X,
	Float:intro_info_CAM_LOOK_AT_Y,
	Float:intro_info_CAM_LOOK_AT_Z,
	Float:intro_info_CAM_LOOK_AT_RX,
	Float:intro_info_CAM_LOOK_AT_RY,
	Float:intro_info_CAM_LOOK_AT_RZ,
	intro_info_HOUR,
	intro_info_WEATHER,
};

new Intro_Info[][E_Intro_Info] =
{
	{333.7010, -2042.3513, 39.9175, 378.5435, -2062.0178, 33.7408, 334.6483, -2042.0359, 39.4875, 378.8962, -2061.0833, 33.3308, 0, 1},
	{1499.2256, -925.6680, 131.6658, 1370.3438, -894.3703, 100.7715, 1498.7183, -924.8074, 131.1807, 1370.7372, -893.4518, 100.5263, 6, 1},
	{412.1094, -1401.7605, 69.4092, 402.4440, -1341.7719, 36.2958, 412.8539, -1401.0869, 69.3792, 402.8102, -1340.8368, 36.3408, 20, 17}
};

new Intro_Audios[][] =
{
	"https://cdn.discordapp.com/attachments/891461459027062824/896563609121996860/Kkkk.mp3",
	"https://cdn.discordapp.com/attachments/891461459027062824/896917111572693012/50_cent_ft._olivia___candy_shop__sub._espanol__128kbps_.mp3"
};

enum Fuel_Stations_Info
{
	Float:fs_X,
	Float:fs_Y,
	Float:fs_Z
};
new Fuel_Stations[][Fuel_Stations_Info] =
{
	{1942.679443, -1771.374511, 13.390598},
	{654.678710, -570.627807, 16.335937},
	{1384.011962, 457.825012, 19.995258},
	{-1669.027221, 411.541076, 7.179687},
	{-2409.644042, 976.147644, 45.307708},
	{-1328.633666, 2675.913818, 50.062500},
	{612.890563, 1692.938720, 6.992187},
	{-1607.715820, -2717.499023, 48.539062},
	{2146.831542, 2743.855224, 10.820312},
	{2197.993408, 2475.015625, 10.820312},
	{2115.124267, 926.094909, 10.960937},
	{1595.974731, 2193.016845, 10.820312},
	{-1477.559326, 1858.962524, 32.639846},
	{-98.757804, -1172.726440, 2.428447}
};

enum E_HOSPITAL_SPAWN_INFO
{
	Float:hspi_X,
	Float:hspi_Y,
	Float:hspi_Z,
	Float:hspi_ANGLE,
}

new Hospital_Spawn_Positions[][E_HOSPITAL_SPAWN_INFO] =
{
	{2034.197875, -1403.040039, 17.294845, 180.0},
	{1172.832763, -1323.269531, 15.400051, 270.0},
	{1242.235595, 328.113281, 19.755510, 0.0},
	{-2201.566162, -2307.610839, 30.625000, 320.0},
	{-2655.108886, 639.278625, 14.453125, 180.0},
	{-318.812774, 1050.359130, 20.340259, 0.0},
	{-1514.855590, 2520.366699, 55.909828, 0.0},
	{1583.311401, 1768.952758, 10.820312, 90.0}
};

new Float:Hospital_Cameras_Positions[][] =
{
	{2007.3301, -1442.3809, 26.7332, 2008.0043, -1441.6445, 26.4982},
	{1209.2427, -1314.4705, 23.4945, 1208.5284, -1315.1681, 23.3195},
	{1260.2025, 342.6251, 22.3913, 1259.4681, 341.9478, 22.2512},
	{-2200.5859, -2316.3057, 31.7932, -2200.8340, -2315.3367, 31.6932},
	{-2530.8450, 568.0942, 29.4603, -2531.6973, 568.6146, 29.4553},
	{-305.5014, 1068.6696, 24.2657, -306.1943, 1067.9514, 24.0607},
	{-1504.2892, 2553.1243, 61.1113, -1504.5568, 2552.1619, 60.8414},
	{1624.5881, 1837.4691, 12.5740, 1623.9382, 1836.7124, 12.4690}
};


// CONCEPTOS
enum RuleInfo
{
	Rule_Title[64],
	Rule_Info[512],
	Rule_Pages,
}
new Server_Rules[][RuleInfo] =
{
	{
		"RolePlay_(RP)",
			"Un_modo_de_juego_donde_vamos_a_crear_nuestro~n~\
			propio_personaje,_y_hacernos_un_hueco_en_el~n~\
			juego,_donde_serás_conocido_por_tus_acciones,~n~\
			mentalidad,_forma_de_actuar_y_mucho_más.~n~\
			~n~\
			Teniendo_esto_en_cuenta,_vamos_a_explicarte~n~\
			los_conceptos_básicos_de_"SERVER_NAME".", 7
	},
	{
		"PowerGaming_(PG)",
			"Se_conoce_como_realizar_acciones_que_son~n~\
			imposibles_de_realizar_en_la_vida_real.~n~\
			~n~\
			Un_ejemplo_de_PowerGaming_sería_empujar~n~\
			un_camion_siendo_una_sola_persona.", 5
	},
	{
		"DeathMatch_(DM)_y_FreeKill_(FK)",
			"Consiste_en_realizar_daño_a_otro_jugador~n~\
			sin_razones_que_justifiquen_la_agresión.~n~\
			~n~\
			Realizar_DM_a_un_gran_número_de_jugadores_se~n~\
			conoce_como_FreeKill_(FK).~n~\
			~n~\
			"SERVER_NAME"_no_es_el_sitio_para_realizar~n~\
			DM.", 8
	},
	{
		"InCharacter(IC)_y_OutOfCharacter(OOC)",
			"IC_es_la_información_o_charla_obtenida~n~\
			por_el_personaje_dentro_del_juego.~n~\
			~n~\
			OOC_es_la_información_obtenida_fuera_del_juego~n~\
			o_por_canales_OOC_del_servidor.~n~", 5
	},
	{
		"MetaGaming(MG)",
			"Este_término_aplica_al_obtener_información_de~n~\
			un_medio_Out_of_Channel_para_beneficiarse_de.~n~\
			ella_de_manera_InCharacter.~n~\
			~n~\
			Además_se_considera_MG_gran_al_uso_de_información~n~\
			obtenida_de_modo_Out_of_Channel.", 6
	},
	{
		"CarJack(CJ)_e_InsultosOOC(IOOC)",
			"CJ_hace_referencia_a_robar_vehículos_sin~n~\
			rol_previo.~n~\
			~n~\
			IOOC_es_insultar_a_un_usuario_por_canales~n~\
			OOC_del_servidor. Esto_está_totalmente~n~\
			prohíbido.", 6
	},
	{
		"Spam_y_Flood",
			"Spam_es_mencionar_una_comunidad_externa_a~n~\
			"SERVER_NAME"_o_un_programa_que_de_ventajas_ante~n~\
			otros_usuarios.~n~\
			~n~\
			Flood_hace_referencia_a_mandar_el_mismo_texto~n~\
			repetidas_veces.", 6
	},
	{
		""SERVER_NAME"",
			"Para_más_conceptos_para_así_no_tener_problemas~n~\
			en_un_futuro_te_recomendamos_visitar_en_nuestro~n~\
			foro_(www.proximamente.com/foro)_la_sección~n~\
			guías._Ahí_te_informas_todo_al_respecto_del_GM~n~\
			y_las_reglas.", 5
	}
};

/* TEXTDRAWS */
#define MAX_PLAYER_MAP_GPS_POINTS 20
#define HUD_PTEXTDRAWS_SIZE 4
enum Player_Textdraws_Enum
{
	PlayerText:ptextdraw_GUIDE[5],
	PlayerText:ptextdraw_HOSPITAL[3], //Barra recuperando vida despues de morir
	PlayerText:ptextdraw_CLOTHING_SHOP[6], //Tiendas de ropas
	PlayerText:ptextdraw_REGISTER_SKIN[10],
	PlayerText:ptextdraw_TOYS_SHOP[10],
	PlayerText:ptextdraw_PROPERTY_CONSTRUCTOR[6],
	PlayerText:ptextdraw_TRUCK_LOAD[4],
	PlayerText:ptextdraw_RECYCLE_TRASH[3],
	PlayerText:ptextdraw_PLAYER_GPS_MAP[MAX_PLAYER_MAP_GPS_POINTS],
	PlayerText:ptextdraw_WANTED_LEVEL[2],
	PlayerText:ptextdraw_SHOP_BUTTONS[5],
	PlayerText:ptextdraw_SHOP_ARTICLES_PAGE,
	PlayerText:ptextdraw_SHOP_ARTICLES_MODEL[6],
	PlayerText:ptextdraw_SHOP_ARTICLES_PRICE[6],
	PlayerText:ptextdraw_SHOP_ARTICLE_NUMBER,
	PlayerText:ptextdraw_SHOP_ARTICLE_INFO,
	PlayerText:ptextdraw_SHOP_ARTICLE_MODELID,
	PlayerText:ptextdraw_TUNING_SHOP,
	PlayerText:ptextdraw_MESSAGE,
	PlayerText:ptextdraw_HUD[HUD_PTEXTDRAWS_SIZE],
	PlayerText:ptextdraw_PAYDAY,
	PlayerText:ptextdraw_InfoText,
	PlayerText:ptextdraw_DAMAGE[2],
	PlayerText:ptextdraw_PING,
	PlayerText:ptextdraw_ZONE_TEXT,
	PlayerText:ptextdraw_SERVER_TIME,
	PlayerText:ptextdraw_iPhone[24],
	PlayerText:ptextdraw_INFO_TERRI[2],
	PlayerText:ptextdraw_INFO_HEALTH,
	PlayerText:ptextdraw_ON_DUTY[2],
	PlayerText:pSpeedoTd[8],
	PlayerText:ptextdraw_TV_SYSTEM[MAX_PLAYERS]
}
new PlayerTextdraws[MAX_PLAYERS][Player_Textdraws_Enum];

#define map_td_X 3.0
#define map_td_Y 134.0
#define map_td_SIZE_X 175.0
#define map_td_SIZE_Y 190.0

#define HUD_TEXTDRAWS_SIZE 8
#define LOAD_SCREEN_TEXTDRAWS_SIZE 4
enum Textdraws_Enum
{
	Text:textdraw_PLAYER_REP_BACK[2],
	Text:textdraw_LOAD_SCREEN[LOAD_SCREEN_TEXTDRAWS_SIZE],
	Text:textdraw_GPS_MAP[4],
	Text:textdraw_SHOP[5],
	Text:textdraw_SHOP_ARTICLES_BOX[6],
	Text:textdraw_SHOP_ARTICLE_BOX,
	Text:textdraw_TERRITORY_BOX,
	Text:textdraw_SHOP_TUNING[5],
	Text:textdraw_HUD[HUD_TEXTDRAWS_SIZE],
	Text:textdraw_COMBAT_MODE, // Combate
	Text:textdraw_PING[3],
	Text:textdraw_iPhone[5],
	Text:textdraw_TV_SYSTEM[MAX_PLAYERS]
}
new Textdraws[Textdraws_Enum];

#define MIN_PASS_LENGTH	6
#define MAX_PASS_LENGTH	18

enum enum_PI
{
	pi_ID,
	pi_CUENTA_FORO,
	pi_NAME[24],
	pi_IP[16],
	pi_EMAIL[32],
	pi_SALT[16],
	pi_PASS[65],
	pi_REG_DATE[24],
	pi_LAST_CONNECTION[24],
	pi_LAST_CONNECTION_TIMESTAMP,
	pi_TIME_PLAYING,
	pi_LEVEL,
	pi_REP,
	pi_CONNECTED,
	pi_PLAYERID,
	pi_DOUBT_CHANNEL,
	pi_DOUBT_CHANNEL_TW,
	pi_TIME_FOR_REP,
	pi_ADMIN_LEVEL,
	pi_PAYDAY_REP,
	pi_VIP,
	pi_VIP_EXPIRE_DATE[24],
	pi_COINS,
	pi_SKIN,
	pi_CASH,
	Float:pi_POS_X,
	Float:pi_POS_Y,
	Float:pi_POS_Z,
	Float:pi_ANGLE,
	pi_STATE,
	pi_INTERIOR,
	pi_LOCAL_INTERIOR,
	pi_FIGHT_STYLE,
	Float:pi_HEALTH,
	Float:pi_ARMOUR,
	pi_GENERO,
	Float:pi_HUNGRY,
	Float:pi_THIRST,
	pi_BLACK_MARKET_LEVEL,
	pi_WANTED_LEVEL,
	pi_POLICE_JAIL_TIME,
	pi_WORK_DUTY,
	pi_POLICE_JAIL_ID,
	pi_DRIVE_LICENSE_POINTS,
	pi_BANK_ACCOUNT,
	pi_BANK_MONEY,
	pi_PHONE_NUMBER,
	pi_PHONE_STATE,
	pi_PHONE_VISIBLE_NUMBER,
	pi_MP3,
	pi_Patines,
	pi_PHONE_RESOLVER,
	pi_SPEAKERS,
	pi_MECANICO_PIECES,
	pi_FUEL_DRUM,
	pi_SEED_MEDICINE,
	pi_SEED_CANNABIS,
	pi_SEED_CRACK,
	pi_MEDICINE,
	pi_CANNABIS,
	pi_CRACK,
	pi_CONFIG_SOUNDS,
	pi_CONFIG_AUDIO,
	pi_CONFIG_TIME,
	pi_CONFIG_HUD,
	pi_CONFIG_ADMIN,
	pi_CONFIG_AUTO_LOGIN,
	pi_MUTE,
	pi_MUTE_TW,
	pi_JETPACK,
	pi_PLACA_PD,
	pi_CAN_BUY_BM,
	pi_CREW,
	pi_CREW_RANK,
	pi_MECANICO_KITS,
	pi_MEDICAL_KITS,
	pi_TIME_FARMACIA,
	pi_camaraon,
	pi_DAMAGE,
	pi_PING,
	pi_ZONE_TEXT,
	pi_INFO_HEALTH,
	pi_ACENTO
};
new PI[MAX_PLAYERS][enum_PI];

forward OnPlayerRegister(playerid);
forward GetPlayerCache(playerid);


#define MAX_PLAYER_POCKET_OBJECTS 10
enum Player_Pocket_Enum
{
	bool:player_pocket_VALID,
	player_pocket_object_ID,
	player_pocket_object_NAME[24],
	Float:player_pocket_object_HUNGRY,
	Float:player_pocket_object_THIRST,
	player_pocket_object_DRUNK,
}
new PLAYER_POCKET[MAX_PLAYERS][MAX_PLAYER_POCKET_OBJECTS][Player_Pocket_Enum]; // PP (PlayerPocket)


new
	DIALOG_FOOD_PIZZA_String[800],
	DIALOG_FOOD_CLUCKIN_String[800],
	DIALOG_FOOD_BURGER_String[800],
	DIALOG_247_LIST_String[34 + 55 * sizeof Supermarket_Product_List],
	DIALOG_ANIMS_String[1000],
	DIALOG_PLAYER_GPS_SITE_7_String[90 * (sizeof(SELL_VEHICLES_SHOPS_SPAWN) + 1)],
	DIALOG_CREATE_CREW_COLOR_String[4200],
	DIALOG_CREDIT_String[2000]
;


#define HidePlayerDialog(%1)		ShowPlayerDialog(%1, -1, 0, " ", " ", " ", " ")


// PLAYER WEAPONS
#define NO_WEAPON 0
enum
{
	WEAPON_SHIELD = 300,
	WEAPON_TASER_GUN
};
enum enum_WEAPON_INFO
{
	bool:weapon_info_SPECIAL,
	bool:weapon_info_AC_CBUG,
	bool:weapon_info_ANTI_CHEAT,
	bool:weapon_info_AMMO,
	weapon_info_TYPE,
	weapon_info_NAME[32],
	weapon_info_SLOT,
	weapon_info_SHOT_TIME,
	weapon_info_MODEL,
	bool:weapon_info_DROP
}
new WEAPON_INFO[][enum_WEAPON_INFO] =
{
	{false, false, false, false, NO_WEAPON, "Puño", 0, 250, -1, false},
	{false, false, true, false, WEAPON_BRASSKNUCKLE, "Manopla", 0, 250, 331, true},
	{false, false, true, false, WEAPON_GOLFCLUB, "Palo de golf", 1, 250, 333, true},
	{false, false, true, false, WEAPON_NITESTICK, "Porra", 1, 250, 334, false},
	{false, false, true, false, WEAPON_KNIFE, "Cuchillo", 1, 250, 335, true},
	{false, false, true, false, WEAPON_BAT, "Bate", 1, 250, 336, true},
	{false, false, true, false, WEAPON_SHOVEL, "Pala", 1, 250, 337, true},
	{false, false, true, false, WEAPON_POOLSTICK, "Taco", 1, 250, 338, true},
	{false, false, true, false, WEAPON_KATANA, "Katana", 1, 250, 339, true},
	{false, false, true, false, WEAPON_CHAINSAW, "Motosierra", 1, 30, 341, true},
	{false, false, true, false, WEAPON_DILDO, "Dildo morado", 10, 250, 321, true},
	{false, false, true, false, WEAPON_DILDO2, "Dildo", 10, 250, 322, true},
	{false, false, true, false, WEAPON_VIBRATOR, "Vibrador", 10, 250, 323, true},
	{false, false, true, false, WEAPON_VIBRATOR2, "Vibrador plateado", 10, 250, 324, true},
	{false, false, true, false, WEAPON_FLOWER, "Flores", 10, 250, 325, true},
	{false, false, true, false, WEAPON_CANE, "Bastón", 10, 250, 326, true},
	{false, false, true, true, WEAPON_GRENADE, "Granada", 8, 500, 342, true},
	{false, false, true, true, WEAPON_TEARGAS, "Gas lacrimógeno", 8, 500, 343, true},
	{false, false, true, true, WEAPON_MOLTOV, "Cocktail Molotov", 8, 500, 344, true},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, false, false, false, NO_WEAPON, "", 0, 0, -1, false},
	{false, true, true, true, WEAPON_COLT45, "9mm", 2, 160, 346, true},
	{false, true, true, true, WEAPON_SILENCED, "9mm silenciada", 2, 120, 347, true},
	{false, true, true, true, WEAPON_DEAGLE, "Desert Eagle", 2, 950, 348, true},
	{false, true, true, true, WEAPON_SHOTGUN, "Escopeta", 3, 800, 349, true},
	{false, true, true, true, WEAPON_SAWEDOFF, "Escopeta recortada", 3, 120, 350, true},
	{false, false, true, true, WEAPON_SHOTGSPA, "Escopeta de combate", 3, 120, 351, true},
	{false, true, true, true, WEAPON_UZI, "Micro UZI", 4, 70, 352, true},
	{false, true, true, true, WEAPON_MP5, "MP5", 4, 70, 353, true},
	{false, true, true, true, WEAPON_AK47, "Ak-47", 5, 80, 355, true},
	{false, false, true, true, WEAPON_M4, "M4", 5, 80, 356, true},
	{false, true, true, true, WEAPON_TEC9, "TEC-9", 4, 70, 372, true},
	{false, true, true, true, WEAPON_RIFLE, "Rifle", 6, 1000, 357, true},
	{false, false, true, true, WEAPON_SNIPER, "Sniper", 6, 1000, 358, true},
	{false, true, true, true, WEAPON_ROCKETLAUNCHER, "Lanzacohetes RPG", 7, 1000, 359, true},
	{false, true, true, true, WEAPON_HEATSEEKER, "Lanzacohetes HS", 7, 1000, 360, true},
	{false, true, true, true, WEAPON_FLAMETHROWER, "Lanzallamas", 7, 500, 361, true},
	{false, true, true, true, WEAPON_MINIGUN, "Minigun", 7, 0, 362, false},
	{false, false, true, true, WEAPON_SATCHEL, "Bomba detonadora", 8, 500, 363, false},
	{false, false, false, false, WEAPON_BOMB, "Detonador", 12, 500, 364, false},
	{false, false, true, true, WEAPON_SPRAYCAN, "Bote de spray", 9, 10, 365, true},
	{false, false, true, true, WEAPON_FIREEXTINGUISHER, "Extintor", 9, 10, 366, true},
	{false, false, true, false, WEAPON_CAMERA, "Cámara", 9, 500, 367, true},
	{false, false, true, false, NO_WEAPON, "Gafas de visión nocturna", 11, 0, 368, false},
	{false, false, true, false, NO_WEAPON, "Gafas térmicas", 11, 0, 369, false},
	{false, false, false, false, WEAPON_PARACHUTE, "Paracaídas", 11, 0, 371, true},
	{true, false, false, false, WEAPON_SHIELD, "Escudo", 13, 0, 18637, false},
	{true, true, true, true, WEAPON_TASER_GUN, "Pistola taser", 2, 120, 347, false}
};

enum enum_BLACK_MARKT_WEAPONS
{
	black_market_EXP,
	black_market_WEAPON_ID,
	black_market_WEAPON_PRICE_BASE,
	black_market_WEAPON_PRICE,
}
new BLACK_MARKT_WEAPONS[][enum_BLACK_MARKT_WEAPONS] =
{
	{0, 10, 1000, 80}, // Dildo
	{0, 22, 2500, 150}, // 9mm
	{0, 23, 2500, 200}, // 9mm silenciada
	{5, 24, 7000, 500}, // DK
	{5, 25, 4000, 800}, // Shogunt
	{5, 29, 12000, 1200}, // MP5
	{5, 33, 15000, 1700}, // Rifle
	{10, 30, 18000, 3100}, // AK-47
	{12, 31, 20000, 3100}, // M4
	{15, 27, 25000, 6000}, // Edc
	{20, 34, 35000, 8000} // Sniper
};

enum enum_PLAYER_WEAPONS
{
	bool:player_weapon_VALID,
	player_weapon_DB_ID,
	player_weapon_ID,
	player_weapon_AMMO,
}
new PLAYER_WEAPONS[MAX_PLAYERS][20][enum_PLAYER_WEAPONS];


enum
{
	TYPE_WARNING,
	TYPE_KICK,
	TYPE_BAN,
	TYPE_TEMP_BAN,
	TYPE_UNBAN
}

enum
{
	CMD_USER,
	CMD_AYUDANTE,
	CMD_MODERADOR,
	CMD_MODERADOR_GLOBAL,
	CMD_ADMINISTRADOR,
	CMD_ADMINISTRADOR_GENERAL,
	CMD_OWNER,
	CMD_GAMEMASTER,
	CMD_DISABLED,
}
new ADMIN_LEVELS[][] =
{
	"Civil",
	"Ayudante",
	"Moderador",
	"Moderador Global",
	"Administrador",
	"Operador",
	"Encargado",
	"Fundador"
};

GetNameRankAdmin(playerid)
{
	new name[24], id = PI[playerid][pi_ADMIN_LEVEL];
	switch(id)
	{
		case 0, 1, 7: format(name, 24, "%s", ADMIN_LEVELS[id]);
		case 2:
		{
			if(PI[playerid][pi_GENERO]) name = "Moderadora";
			else format(name, 24, "%s", ADMIN_LEVELS[id]);
		}
		case 3:
		{
			if(PI[playerid][pi_GENERO]) name = "Moderadora Global";
			else format(name, 24, "%s", ADMIN_LEVELS[id]);
		}
		case 4:
		{
			if(PI[playerid][pi_GENERO]) name = "Administradora";
			else format(name, 24, "%s", ADMIN_LEVELS[id]);
		}
		case 5:
		{
			if(PI[playerid][pi_GENERO]) name = "Administradora General";
			else format(name, 24, "%s", ADMIN_LEVELS[id]);
		}
		case 6:
		{
			if(PI[playerid][pi_GENERO]) name = "Dueña";
			else format(name, 24, "%s", ADMIN_LEVELS[id]);
		}
	}
	return name;
}


public OnIncomingConnection(playerid, ip_address[], port)
{
	if(!server_loaded) BlockIpAddress(ip_address, 20 * 1000);
	return 1;
}

public OnPlayerConnect(playerid) //ERROR AQUII
{
	//Auto escuela
	RemoveBuildingForPlayer(playerid, 4018, 1791.800, -1716.979, 12.523, 0.250);
	RemoveBuildingForPlayer(playerid, 4075, 1791.800, -1716.979, 12.523, 0.250);
	RemoveBuildingForPlayer(playerid, 1531, 1799.130, -1708.770, 14.101, 0.250);
	//Knox F.C.
	RemoveBuildingForPlayer(playerid, 11396, -2051.540, -444.179, 43.554, 0.250);
	RemoveBuildingForPlayer(playerid, 10954, -2051.540, -444.156, 53.828, 0.250);
	RemoveBuildingForPlayer(playerid, 11049, -2051.540, -444.156, 53.828, 0.250);
	RemoveBuildingForPlayer(playerid, 10955, -2051.540, -444.156, 53.828, 0.250);
	RemoveBuildingForPlayer(playerid, 11397, -2051.540, -444.156, 53.828, 0.250);
	RemoveBuildingForPlayer(playerid, 11395, -2155.199, -401.617, 42.257, 0.250);
	RemoveBuildingForPlayer(playerid, 1342, -2151.840, -435.562, 35.289, 0.250);
	RemoveBuildingForPlayer(playerid, 1340, -2146.520, -424.773, 35.328, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2118.969, -423.648, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2118.620, -422.414, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2097.270, -398.335, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 1340, -2094.229, -396.460, 35.656, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2068.560, -398.335, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 1340, -2036.319, -396.757, 35.656, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2039.849, -398.335, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 955, -2011.140, -398.335, 34.726, 0.250);
	RemoveBuildingForPlayer(playerid, 792, -2130.909, -387.554, 34.437, 0.250);
	RemoveBuildingForPlayer(playerid, 792, -2140.860, -387.554, 34.437, 0.250);
	
	if(CheckPlayerFakeClient(playerid)) //PLAYER_TEMP[playerid][pt_Plataforma] = true;
	{
		new ip[16], string[128];
		GetPlayerIp(playerid, ip, 16);
		format(string, sizeof string, "[AC-KICK]: Se expulsó a un bot con la ip: %s\n@everyone", ip);
		DCC_SendChannelMessage(dc_channel[0], string);

		Kick(playerid);
		return 1;
	}

	if(IsPlayerUsingLauncher(playerid) == true) PLAYER_TEMP[playerid][pt_Plataforma] = true;
	else PLAYER_TEMP[playerid][pt_Plataforma] = false;

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_CONNECTED;
	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;
	PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_AC_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] = true;
	PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] = true;
	PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	PLAYER_TEMP[playerid][pt_CREW_HELP] = false;
	PLAYER_TEMP[playerid][pt_POLICE_HELP] = false;
	PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = -1;
	PLAYER_TEMP[playerid][pt_COMBAT] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_ID] = -1;
	PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	PLAYER_TEMP[playerid][pt_PRIMERA_PERSONA] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	PLAYER_TEMP[playerid][pt_ID_SPEC] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ID_COLOR] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADOR] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;

	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++) TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

	GetPlayerName(playerid, PLAYER_TEMP[playerid][pt_NAME], 24);
	GetPlayerIp(playerid, PLAYER_TEMP[playerid][pt_IP], 16);

	EnablePlayerCameraTarget(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	HidePlayerDialog(playerid);
	ResetPlayerMoney(playerid);
	SetPlayerScore(playerid, 0);
	ResetPlayerWeapons(playerid);
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	CancelEdit(playerid);

	if(!IsValidRPName(PLAYER_TEMP[playerid][pt_NAME]) && strcmp(PLAYER_TEMP[playerid][pt_NAME], "Luis", true))
	{
		PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = false;
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Bienvenido, has entrado a un servidor de rol.\n\nTu nombre no cumple con el formato necesario.\nPor favor utilice el formato: Nombre_Apellido.", "Entiendo", "");
		KickEx(playerid, 500);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_USER_VALID_NAME] = true;
		SetRolePlayNames(playerid);

		new string[128];
		format(string, sizeof string, "El jugador `%s(%d)` ha entrado al servidor.\nPlataforma: %s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, (PLAYER_TEMP[playerid][pt_Plataforma] ? "Android" : "PC"));
		DCC_SendChannelMessage(dc_channel[1], string);

		if(GetNumberOfPlayersOnThisIP(PLAYER_TEMP[playerid][pt_IP]) > 3)
		{
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", "Ha sido expulsado por exceder el máximo de conexiones desde una IP.", "Entiendo", "");
			KickEx(playerid, 500);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = SetTimerEx("KickPlayer", SECURE_LOGIN_TIME, false, "i", playerid);

			GameTextForPlayer(playerid, "~y~cargando...", 10000, 3);
			CreatePlayerTextdraws(playerid);
			SetPiDefaultValues(playerid);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{

	for(new i = 0; i != MAX_TIMERS_PER_PLAYER; i++) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][i]);

	if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
		PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	}

	if(PLAYER_TEMP[playerid][pt_COMBAT])
	{
		new
			str_text[190];

		PLAYER_TEMP[playerid][pt_COMBAT] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_COMBAT_TIMER]);
		PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = -1;

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		ResetPlayerWeaponsEx(playerid);

		format(str_text, 190, "* %s ha perdido todas sus armas por desconectar estando en combate.", PLAYER_TEMP[playerid][pt_RP_NAME]);
		ProxDetector(playerid, 25.0, str_text, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 0xDD4C4FFF, 85);
	}

	if(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] != INVALID_ACTOR_ID)
	{
		DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
		PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid)
		{
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ vehicleid ][gb_vehicle_OCCUPIED] = false;
		}
	}
	if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid) GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	}

	PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000 - PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
	PI[playerid][pi_TIME_FOR_REP] -= PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP];
	if(PI[playerid][pi_CREW]) CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID) DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL) PI[playerid][pi_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);

	DestroyPlayerCheckpoints(playerid);
	DestroyPlayerTextdraws(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], false);

	//db
	if(PI[playerid][pi_ID] != 0)
	{
		if(PLAYER_TEMP[playerid][pt_USER_LOGGED]) //guardar datos solo si ha logeado
		{
			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK && PI[playerid][pi_WANTED_LEVEL] > 0)
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
			}

			PI[playerid][pi_CONNECTED] = 0;
			PI[playerid][pi_PLAYERID] = 0;
			UpdatePlayerWorldInfo(playerid);

			getDateTime(PI[playerid][pi_LAST_CONNECTION]);
			SavePlayerData(playerid);
			SavePlayerVehicles(playerid, true);
			SavePlayerToys(playerid);
			SavePlayerWeaponsData(playerid);
			SavePlayerWorkLevels(playerid);

			if(!PLAYER_TEMP[playerid][pt_SPECTANDO])
			{
				//msg
				new disconnect_message[128];
				switch(reason)
				{
					case 0: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado por error (crash).", PLAYER_TEMP[playerid][pt_RP_NAME]);
					case 1: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					case 2: format(disconnect_message, sizeof disconnect_message, "%s se ha desconectado porque fue expulsado del servidor.", PLAYER_TEMP[playerid][pt_RP_NAME]);
				}
			 	NearbyMessage(PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_INTERIOR], GetPlayerVirtualWorld(playerid), 15.0, 0x909D95FF, disconnect_message);
			}
		}
		else
		{
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 0, playerid = 0 WHERE id = %d;", PI[playerid][pi_ID]);
			mysql_tquery(mysql_db, QUERY_BUFFER);
		}
	}

	if(PLAYER_TEMP[playerid][pt_SPECTEADO])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PLAYER_TEMP[i][pt_ID_SPEC] == playerid)
			{
				PC_EmulateCommand(i, "/specoff");
				SendNotification(i, "El jugador que estabas spectando se ha desconectado.");
			}
		}
	}

	//reset
	ResetPlayerVariables(playerid);
	return 1;
}

ResetPlayerVariables(playerid)
{
	new tmp_PI[enum_PI]; PI[playerid] = tmp_PI;

	new temp_PLAYER_TEMP[Temp_Enum]; PLAYER_TEMP[playerid] = temp_PLAYER_TEMP;

	new temp_PLAYER_TOYS[Player_Toys_Info];
	for(new i = 0; i != MAX_SU2_TOYS; i ++) PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;

	new temp_PLAYER_POCKET[Player_Pocket_Enum];
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;

	new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

	new temp_PLAYER_GPS[Player_GPS_Enum];
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

	new tmp_PLAYER_WORKS[enum_PLAYER_WORKS];
	for(new i = 0; i != sizeof(PLAYER_WORKS[]); i ++) PLAYER_WORKS[playerid][i] = tmp_PLAYER_WORKS;

	new temp_PLAYER_PROPERTY_CONSTRUCTO[PLAYER_PROPERTY_CONSTRUCTOR_ENU]; PLAYER_PROPERTY_CONSTRUCTOR[playerid] = temp_PLAYER_PROPERTY_CONSTRUCTO;

	PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;
	PLAYER_TEMP[playerid][pt_ID_SPEC] = INVALID_PLAYER_ID;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	new tmp_PLAYER_AC_INFO[e_PLAYER_AC_INFO];
	for(new i = 0; i != sizeof(ac_Info); i ++) PLAYER_AC_INFO[playerid][i] = tmp_PLAYER_AC_INFO;
	return 1;
}

DestroyPlayerCheckpoints(playerid)
{
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ESTADO_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ESTADO_LABEL]);
		PLAYER_TEMP[playerid][pt_ESTADO_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]);
		PLAYER_TEMP[playerid][pt_WORK_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
	}
	return 1;
}

GetEnterExitIndexById(id)
{
	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_ID] == 0) continue;
		if(ENTER_EXIT[i][ee_ID] == id) return i;
	}
	return -1;
}

GetEntrarSalirIndexById(id)
{
	for(new i = 0; i != sizeof ENTRADAS_SALIDAS; i ++)
	{
		if(ENTRADAS_SALIDAS[i][ee_ID] == 0) continue;
		if(ENTRADAS_SALIDAS[i][ee_ID] == id) return i;
	}
	return -1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success) BlockIpAddress(ip, 12000);
	return 1;
}

public OnPlayerSpawn(playerid)
{
    //if(!PI[playerid][pi_CUENTA_FORO] && PI[playerid][pi_LEVEL] > 2) CrearCuentaForo(playerid); //FORO
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return Kick(playerid);

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Primer spawn
	{
		if(IsPlayerHaveAutoaim(playerid) == true) return AddBanForAntiCheat(playerid, "AIM-BOT");

		if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
			PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
		}

		new now = gettime();
		PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = now;
		PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] = now + 300;
		format(PI[playerid][pi_IP], 16, "%s", PLAYER_TEMP[playerid][pt_IP]);

		SetPlayerZonasSeguras(playerid);
		if(PI[playerid][pi_CREW]) SetPlayerGangZones(playerid);
		SetPlayerSkillLevels(playerid);
		ApplyAnimation(playerid,"SWAT","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"MEDIC","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SHOP","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"FOOD","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CHAINSAW","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"ROB_BANK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CARRY","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"PED","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"SWEET","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"CRACK","null",0.0,0,0,0,0,0);
		ApplyAnimation(playerid,"POLICE","null",0.0,0,0,0,0,0);

		if(PI[playerid][pi_WORK_DUTY] != 0)
		{
			new work = GetIDFaccionPlayer(playerid);

			if(work != -1)
			{
				if(PLAYER_WORKS[playerid][work][pwork_SET]) CallLocalFunction("StartPlayerJob", "iii", playerid, work, INVALID_VEHICLE_ID);
				else PI[playerid][pi_WORK_DUTY] = 0;
			}
			else PI[playerid][pi_WORK_DUTY] = 0;
		}
		switch(PI[playerid][pi_STATE])
		{
			case ROLEPLAY_STATE_NORMAL:
			{
				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

				SetPlayerVirtualWorld(playerid, 0);

				if(PI[playerid][pi_WANTED_LEVEL] > 0)
				{
					PI[playerid][pi_POLICE_JAIL_ID] = 0;
					JailPlayer(playerid);
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
				PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_ARRESTED:
			{

				if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
				else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];

				PI[playerid][pi_WANTED_LEVEL] = 0;

				PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
				if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
				PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

				PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
				SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

				new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
				SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_OWN_PROPERTY://comprobar si los vehículos están en el mismo interior que todos los garajes.
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;

					SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0);
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = index;
						SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, PROPERTY_INFO[index][property_ID]);
					}
					else
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][pi_LOCAL_INTERIOR] = 0;
						PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];

						SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], 0, false, true);//qq
					}
				}

				SetPlayerHud(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllableEx(playerid, false);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
				PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
			}
			case ROLEPLAY_STATE_HOSPITAL:
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;

				TogglePlayerControllableEx(playerid, true);
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);

				//ClearPlayerChat(playerid);
				if(PI[playerid][pi_WANTED_LEVEL] > 0)
				{
					if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
					else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];

					SendNotification(playerid, "Fuiste ingresado en ~r~el centro médico más cercano~w~.~n~~n~Espera mientras te recuperas.");
				}
				else SendNotification(playerid, "Fuiste ingresado en ~r~el centro médico más cercano~w~.~n~~n~Espera mientras te recuperas.");

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}

		for(new i = 0; i < LOAD_SCREEN_TEXTDRAWS_SIZE; i ++)
		{
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);
		}

		if(PI[playerid][pi_PHONE_NUMBER])
		{
			inline OnOfflineMessagesChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new unreaded_messages;
						cache_get_value_index_int(0, 0, unreaded_messages);
						if(unreaded_messages > 0) SendClientMessageEx(playerid, -1, "Tienes {f1f442}%d {FFFFFF}WhatsApp's nuevos en tu /movil desde tu última conexión.", unreaded_messages);
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pmessages SET offline = 0 WHERE to_id = %d;", PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM pmessages WHERE to_id = %d AND offline = 1;", PI[playerid][pi_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnOfflineMessagesChecked);
		}
	}
	else if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) // Viene de morir
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL)
		{
			if(!PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
			{
				TogglePlayerSpectatingEx(playerid, true);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
				{
					CallLocalFunction("OnPlayerExitInterior", "ii", playerid, PLAYER_TEMP[playerid][pt_INTERIOR_INDEX]);
				}
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;

				PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 35.0;
				UpdateHospitalSizeTextdrawLife(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
				PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("HealthUp", 1000, false, "i", playerid);

				DeleteIlegalInv(playerid);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);

				ClearPlayerChat(playerid);
				if(PI[playerid][pi_WANTED_LEVEL] > 0 || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
				{
					SendNotification(playerid, "Fuiste ingresado en el centro médico más cercano.");
					SendNotification(playerid, "Pronto seras llevado a prision.");
				}
				else
				{
					SendNotification(playerid, "Fuiste ingresado en el centro médico más cercano.");
					SendNotification(playerid, "Espera mientras te recuperas.");
				}

				InterpolateCameraPos(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][0], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][1], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][2], 1000, CAMERA_CUT);
				InterpolateCameraLookAt(playerid, Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][3], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][4], Hospital_Cameras_Positions[PLAYER_TEMP[playerid][pt_HOSPITAL]][5], 1000, CAMERA_CUT);
			}
		}
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL])
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
			PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);
		}
		SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerHud(playerid);
		TogglePlayerControllableEx(playerid, false);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		SetCameraBehindPlayer(playerid);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}

	new work = GetIDFaccionPlayer(playerid);

	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) SetPlayerSkin(playerid, PI[playerid][pi_WORK_DUTY]);
	else SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_NORMAL;

	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_JAIL && PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK) SetWeaponsForPlayer(playerid);
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_HOSPITAL) SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL]);
	SetPlayerNormalColor(playerid);
	SetPlayerCityWeather(playerid);
	SetPlayerToys(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	GameTextForPlayer(playerid, "_", 500, 3);
	PLAYER_TEMP[playerid][pt_CONTROL] = false;

	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;
	return 1;
}
CMD:secuestrar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 4) return SendNotification(playerid, "Debes ser al menos ~r~nivel 4 ~w~para secuestrar.");
	if(gettime() < PLAYER_TEMP[playerid][pt_TIME_SECUESTRO] + 900)  return SendFormatNotification(playerid, "Tienes que esperar ~r~%s minutos ~w~para volver a secuestrar.", TimeConvert((900-(gettime()-PLAYER_TEMP[playerid][pt_TIME_SECUESTRO]))));
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "Debes estar dentro de un vehículo.");
	if(GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_PARAMS_DOORS]) return SendNotification(playerid, "Las puertas del vehículo deben estar abiertas");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /secuestrar <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(PI[to_player][pi_LEVEL] < 4) return SendNotification(playerid, "El jugador debe ser al menos ~r~nivel 4~w~.");

	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás cerca de la persona.");
	if(PI[to_player][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "No puedes secuestrar a esta persona en este momento.");
	if(GetPlayerState(to_player) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "La persona debe estar de pie.");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_HANDSUP);
	SendNotification(to_player, "~r~¡Estás siendo secuestrado, corre para evitarlo!");

	PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = to_player;
	PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] = playerid;
	PLAYER_TEMP[to_player][pt_PLAYER_SECUESTRANDO] = true;

	SendFormatNotification(playerid, "Estás secuestrando a ~b~%s~w~, si se aleja dentro de 5 segundos va a escapar.", PI[to_player][pi_NAME]);
	PLAYER_TEMP[playerid][pt_TIMERS][17] = SetTimerEx("SecuestrarPlayer", 5000, false, "i", playerid);
	return 1;
}
CMD:acento(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_ACENTOS);
	return 1;
}
alias:acento("acentos");
CMD:pp(playerid, params[])
{
	if(PI[playerid][pi_camaraon])
	{
		PI[playerid][pi_camaraon] = 0;
		ShowPlayerMessage(playerid, "~w~Primera persona ~r~Desactivado", 3000);
		SetCameraBehindPlayer(playerid);
	}
	else
	{
		PI[playerid][pi_camaraon] = 1;
		ShowPlayerMessage(playerid, "~w~Primera persona ~g~Activado", 3000);
		AttachObjectToPlayer(PLAYER_TEMP[playerid][pt_PRIMERA_PERSONA], playerid, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
		AttachCameraToObject(playerid, PLAYER_TEMP[playerid][pt_PRIMERA_PERSONA]);
	}
	return 1;
}

CMD:creditos(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Información", DIALOG_CREDIT_String, "Cerrar", "");
	return 1;
}

CMD:colorex(playerid, params[])
{
	if(sscanf(params, "s[12]", params)) return SendNotification(playerid, "Uso: /colorex [COLOR RGBA])");

	SendClientMessageEx(playerid, -1, "{%s}SEXOOOOOOOOOOOOOOOOOOO", params);
	return 1;
}

CMD:estado(playerid,params[])
{
	if(PLAYER_TEMP[playerid][pt_CON_ESTADO]) return SendNotification(playerid, "Ya tienes un estado activado usa ~p~/qestado ~w~para borrarlo.");
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/estado [texto].");

	new str[256];
	format(str, sizeof str, ""SERVER_SHORT_NAME"\n{DDAA0B}%s", params);
	PLAYER_TEMP[playerid][pt_ESTADO_LABEL] = CreateDynamic3DTextLabel(str, 0xCC46DCFF, 0.0, 0.0, 0.5, 20.0, playerid, .testlos = true);
	PLAYER_TEMP[playerid][pt_CON_ESTADO] = true;

	SendFormatNotification(playerid, "Tu estado ha sido cambiado a: ~y~%s", params);
	SendNotification(playerid, "Para borrar tu nuevo estado usa el comando ~r~/qestado");
	return 1;
}

CMD:qestado(playerid,params[])
{
	if(!PLAYER_TEMP[playerid][pt_CON_ESTADO]) return SendNotification(playerid, "No tienes ningun estado activo.");

	if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ESTADO_LABEL]))
	{
		DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ESTADO_LABEL]);
		PLAYER_TEMP[playerid][pt_ESTADO_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	SendNotification(playerid, "Tu estado ha sido eliminado.");
	PLAYER_TEMP[playerid][pt_CON_ESTADO] = false;
	return 1;
}
CMD:patinar(playerid)
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_Patines]) return SendNotification(playerid, "Para poder patinar necesitas tener unos patines.");
	SendNotification(playerid, "Usa: /patinar[1-3]");
	return 1;
}
CMD:patinar1(playerid)
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_Patines])
	{
		SendNotification(playerid, "Para poder patinar necesitas tener unos patines.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	ApplyAnimation(playerid,"SKATE","skate_run",4.0,1,1,1,1,500);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:patinar2(playerid)
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_Patines])
	{
		SendNotification(playerid, "Para poder patinar necesitas tener unos patines.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	ApplyAnimation(playerid,"SKATE","skate_sprint",4.0,1,1,1,1,500);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:patinar3(playerid)
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_Patines])
	{
		SendNotification(playerid, "Para poder patinar necesitas tener unos patines.");
		PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
		return 1;
	}
	ApplyAnimation(playerid,"SKATE","skate_idle",4.0,1,1,1,1,500);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}

CMD:tula(playerid, params[])
{
	SendClientMessage(playerid, 0xB09CA9FF, "La que te gusta");
	return 1;
}

CMD:cachear(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No formas parte de una banda.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /cachear [playerid/nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás de pie.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PI[params[0]][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "El jugador no está abatido.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar de pie.");

	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");

	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[params[0]][i][player_weapon_VALID]) continue;

		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[params[0]][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[params[0]][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", PLAYER_TEMP[playerid][pt_RP_NAME]);

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "» Continuar", "Cerrar");

	new action[64];
	format(action, sizeof action, "cachea rápidamente a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:morir(playerid, params[])
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "No estás malherido");

	new now = gettime();
	if(now < PLAYER_TEMP[playerid][pt_DEATH_TIME] + 30)
	{
		new time = 30 - (now - PLAYER_TEMP[playerid][pt_DEATH_TIME]);
		SendFormatNotification(playerid, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
		return 1;
	}

	SetPlayerHealthEx(playerid, 0.0);
	Auto_SendPlayerAction(playerid, "ha elegido la salida rápida.");
	return 1;
}

CMD:gpos(playerid, params[])
{
	new Float:pos[3], Float:angle;
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleId = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicleId, pos[0], pos[1], pos[2]);
		GetVehicleZAngle(vehicleId, angle);
	}
	else
	{
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, angle);
	}

	if(isnull(params)) printf("%f, %f, %f, %f, %d, %d", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	else printf("%f, %f, %f, %f, %d, %d //%s", pos[0], pos[1], pos[2], angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), params);
	return 1;
}

CMD:cpos(playerid, params[])
{
	new Float:pos[3], Float:at[3];
	GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerCameraLookAt(playerid, at[0], at[1], at[2]);

	printf("{%f, %f, %f, %f, %f, %f}", pos[0], pos[1], pos[2], at[0], at[1], at[2]);
	return 1;
}

hook OnPlayerDeath(playerid, killerid, reason)
{
	if(PLAYER_TEMP[playerid][pt_KICKED] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	if(PLAYER_TEMP[playerid][pt_SPECTEADO])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
			{
				if(PI[i][pi_ADMIN_LEVEL] >= 2 && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
				{
					SendDeathMessageToPlayer(i, killerid, playerid, reason);
				}

				if(PLAYER_TEMP[i][pt_ID_SPEC] == playerid)
				{
					SendNotification(i, "El jugador que estabas specteando acaba de ~r~morir~w~.");
					PC_EmulateCommand(i, "/specoff");
					PLAYER_TEMP[playerid][pt_SPECTEADO] = false;
				}
			}
		}
	}

	if(PLAYER_TEMP[playerid][pt_COMBAT]) ResetCombat(playerid);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][14]);
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	if(!PI[playerid][pi_VIP]) SetPlayerArmourEx(playerid, 0.0);

	if(ac_Info[CHEAT_DEATH_SPAMMER][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_IMMUNITY])
		{
			new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH]);
			if(interval < 50)
			{
				if(!ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DEATH_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DEATH_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DEATH_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DEATH_SPAMMER, float(interval));
				}
			}
			PLAYER_TEMP[playerid][pt_ANTIFLOOD_DEATH] = GetTickCount();
		}
	}

	HidePlayerMessage(playerid);

	if(IsPlayerConnected(killerid) && PI[killerid][pi_STATE] == ROLEPLAY_STATE_NORMAL && PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		if(!PLAYER_WORKS[killerid][WORK_POLICE][pwork_SET])
		{
			if(IsPlayerInSafeZone(killerid))
			{
				SendClientMessage(killerid, -1, "Estás en una zona segura, la policía ha sido avisada del homicidio.");

				new level = PI[killerid][pi_WANTED_LEVEL] + 3;
				if(level > 6) level = 6;

				SetPlayerWantedLevelEx(killerid, level);

				new city[45], zone[45];
				GetPlayerZones(killerid, city, zone);

				new message[145];
				format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central de policía] {FFFFFF}%s ha causado un asesinato en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[killerid][pt_RP_NAME], city, zone);
				SendWorkRadioMessage(WORK_POLICE, -1, -1, message);

				PLAYER_TEMP[killerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
			}
		}
	}
	PlayAudioStreamForPlayer(killerid, "https://cdn.discordapp.com/attachments/720886743724982323/911056788072308786/kill.mp3");
	if(IsPlayerConnected(killerid) && PI[killerid][pi_STATE] == ROLEPLAY_STATE_NORMAL && PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL)
	{
		new string[64];
		format(string, sizeof string, "~r~%s ~w~te acaba de asesinar.", PLAYER_TEMP[killerid][pt_RP_NAME]);
		ShowPlayerMessage(playerid, string, 4000);

		format(string, sizeof string, "Acabas de asesinar a ~g~%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
		ShowPlayerMessage(killerid, string, 4000);
	}

	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW])
	{
		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) ClosePlayerClothingMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);
		if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
		{
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
		}
	}

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);

	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
	PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
	HidePlayerHud(playerid);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	SetNormalPlayerMarkers(playerid);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], false);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerJobMark(playerid, WORK_TAXI);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE]) { HidePlayeriPhone(playerid); HidePlayeriPhoneApps(playerid); }
	if(PI[playerid][pi_WANTED_LEVEL] > 0) DisablePlayerJobMark(playerid, WORK_TAXI);
	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP]) CancelPlayerTuningShop(playerid);
	if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE])
	{
		PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
		SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
		SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 3.363841);
		SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);
	}
	if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
	{
		if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
				CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
			}
		}
	}

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		PI[playerid][pi_POLICE_JAIL_TIME] -= gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME];
		if(PI[playerid][pi_POLICE_JAIL_TIME] < 5) PI[playerid][pi_POLICE_JAIL_TIME] = 5;
		PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
		PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
		SetPlayerVirtualWorld(playerid, 0);
	}
	else
	{
		new bool:wanted_level_go_to_hospital = false;
		if(PI[playerid][pi_WANTED_LEVEL] > 0 && CountPlayersJobOnDuty(WORK_POLICE) < 2)
		{
			wanted_level_go_to_hospital = true;
		}

		if(wanted_level_go_to_hospital || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		{
			DisablePlayerInjuredMark(playerid);
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);
			PI[playerid][pi_STATE] = ROLEPLAY_STATE_HOSPITAL;
			PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = false;
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][14]);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_DEATH_TIME] = gettime();
			PI[playerid][pi_STATE] = ROLEPLAY_STATE_CRACK;

			new Float:pos[3], Float:angle;
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(playerid, angle);

			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], pos[0], pos[1], pos[2], angle, 0, 0, 0, 0, 0, 0);
		}
	}

	PLAYER_TEMP[playerid][pt_GAME_STATE] = GAME_STATE_DEAD;
   	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) // Recién conectado
	{
		PlayAudioStreamForPlayer(playerid, Intro_Audios[random(sizeof Intro_Audios)]);

		if(!PLAYER_TEMP[playerid][pt_USER_VALID_NAME] || PLAYER_TEMP[playerid][pt_KICKED] || PLAYER_TEMP[playerid][pt_CLASSED]) Kick(playerid);
		else
		{
			PLAYER_TEMP[playerid][pt_CLASSED] = true;
			TogglePlayerSpectatingEx(playerid, true);
			ClearPlayerChat(playerid);

			//check ban
			inline OnPlayerBannedCheck()
			{
				new rows, bool:continue_proccess;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], expire_date[24], id_player, by, text[128], date[24], expire_date_ts, now[24], now_ts, bool:isnull_name, bool:isnull_by, bool:isnull_expire_date_ts;
						cache_is_value_name_null(0, "name", isnull_name);
						if(!isnull_name) cache_get_value_name(0, "name", name, 24);
						cache_get_value_name(0, "expire_date", expire_date, 24);
						cache_get_value_name_int(0, "id_player", id_player);
						cache_is_value_name_null(0, "by", isnull_by);
						if(!isnull_by) cache_get_value_name_int(0, "by", by);
						cache_get_value_name(0, "text", text, 128);
						cache_get_value_name(0, "date", date, 24);
						cache_is_value_name_null(0, "expire_date_ts", isnull_expire_date_ts);
						if(!isnull_expire_date_ts) cache_get_value_name_int(0, "expire_date_ts", expire_date_ts);
						cache_get_value_name(0, "now", now, 24);
						cache_get_value_name_int(0, "now_ts", now_ts);

						if(expire_date_ts)
						{
							//temporal
							if(now_ts >= expire_date_ts)
							{
								continue_proccess = true;
								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
								mysql_tquery(mysql_db, QUERY_BUFFER);

								if(id_player) AddPlayerBadHistory(id_player, -1, TYPE_UNBAN, "Readmitido (de tban)");
								SendNotification(playerid, "Tu cuenta ha sido re-admitida, no hagas que vuelvan a banearte.");
							}
							else
							{
								new dialog[600];
								format(dialog, sizeof dialog,

									"\
										Esta IP o cuenta está expulsada temporalmente, detalles:\n\
										\n\
										Tu nombre: %s\n\
										\n\
										Nombre: %s\n\
										Expulsado por: %d\n\
										Fecha expulsión: %s\n\
										Razón: %s\n\
										\n\
										Fecha actual: %s\n\
										Fecha readmisión: %s\n\
										\n\
									",

									PLAYER_TEMP[playerid][pt_NAME],
									name, by, date, text, now, expire_date
								);

								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
								KickEx(playerid, 500);
							}

						}
						else
						{
							//permanente
							new dialog[480];
							format(dialog, sizeof dialog,

								"\
									Esta IP o cuenta está expulsada permanentemente, detalles:\n\
									\n\
									Tu nombre: %s\n\
									\n\
									Nombre: %s\n\
									Expulsado por: %d\n\
									Fecha expulsión: %s\n\
									Razón: %s\n\
									\n\
								",

								PLAYER_TEMP[playerid][pt_NAME],
								name, by, date, text
							);

							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
							KickEx(playerid, 500);
						}
					}
					else continue_proccess = true;

					if(continue_proccess)
					{
						inline OnPlayerCheck()
						{
							if(cache_get_row_count(rows))
							{
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);
								SelectTextDrawEx(playerid, 0xb5bfcbFF);
								PLAYER_TEMP[playerid][pt_EN_INTRO] = true;

								new intro = random(sizeof(Intro_Info));
								InterpolateCameraPos(playerid, Intro_Info[intro][intro_info_CAM_X], Intro_Info[intro][intro_info_CAM_Y], Intro_Info[intro][intro_info_CAM_Z], Intro_Info[intro][intro_info_CAM_RX], Intro_Info[intro][intro_info_CAM_RY], Intro_Info[intro][intro_info_CAM_RZ], 10000, CAMERA_MOVE);
								InterpolateCameraLookAt(playerid, Intro_Info[intro][intro_info_CAM_LOOK_AT_X], Intro_Info[intro][intro_info_CAM_LOOK_AT_Y], Intro_Info[intro][intro_info_CAM_LOOK_AT_Z], Intro_Info[intro][intro_info_CAM_LOOK_AT_RX], Intro_Info[intro][intro_info_CAM_LOOK_AT_RY], Intro_Info[intro][intro_info_CAM_LOOK_AT_RZ], 10000, CAMERA_MOVE);
								SetPlayerMyWeather(playerid, Intro_Info[intro][intro_info_WEATHER]);
								SetPlayerMyTime(playerid, Intro_Info[intro][intro_info_HOUR], 0);

								if(rows)
								{
									cache_get_value_name_int(0, "id", PI[playerid][pi_ID]);
									cache_get_value_name(0, "ip", PI[playerid][pi_IP], 16);
									cache_get_value_name(0, "email", PI[playerid][pi_EMAIL], 32);
									cache_get_value_name(0, "salt", PI[playerid][pi_SALT], 16);
									cache_get_value_name(0, "pass", PI[playerid][pi_PASS], 65);
									cache_get_value_name_int(0, "config_auto_login", PI[playerid][pi_CONFIG_AUTO_LOGIN]);

									mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET connected = 1, playerid = %d WHERE id = %d;", playerid, PI[playerid][pi_ID]);
									mysql_tquery(mysql_db, QUERY_BUFFER);
									PLAYER_TEMP[playerid][pt_USER_EXIST] = true;
								}
								else PLAYER_TEMP[playerid][pt_USER_EXIST] = false;

								GameTextForPlayer(playerid, "_", 500, 3);
								if(PLAYER_TEMP[playerid][pt_USER_EXIST])
								{
									if(strcmp(PLAYER_TEMP[playerid][pt_IP], PI[playerid][pi_IP])) // La IP actual no es la misma IP de la última conexión
										SendNotification(playerid, "Tu dirección IP ha cambiado desde tu última conexión.");
									else if(PI[playerid][pi_CONFIG_AUTO_LOGIN]) PLAYER_TEMP[playerid][pt_AUTO_LOGGED] = true;
								}
								else
								{
									// Nuevo usuario
									PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = CreateActor(Intro_Skins[0][0], 399.016082, -1334.164916, 27.506919, 150.551940); //ACTOR DE LA HABITACION DE LA INTRO
									SetActorVirtualWorld(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], playerid + 10);
									ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
								}
							}
							else Kick(playerid);
						}
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, email, salt, pass, config_auto_login FROM player WHERE name = '%e';", PLAYER_TEMP[playerid][pt_NAME]);
						mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerCheck);
					}
				}
				else Kick(playerid);
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT *, UNIX_TIMESTAMP(bans.expire_date) AS expire_date_ts, NOW() AS now, UNIX_TIMESTAMP(NOW()) AS now_ts FROM bans LEFT JOIN bad_history ON bans.id_history = bad_history.id WHERE bans.name = '%e' OR bans.ip = '%e';", PLAYER_TEMP[playerid][pt_NAME], PLAYER_TEMP[playerid][pt_IP]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerBannedCheck);
		}
	}
	else if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD) && PLAYER_TEMP[playerid][pt_USER_LOGGED]) // Viene de jugar
	{
		SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	return 0;
}

public OnPlayerRequestSpawn(playerid) // Intentar 'spawnear' mediante la selección de skin << spawn >>
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_CONNECTED) CallLocalFunction("OnPlayerRequestClass", "dd", playerid, 0);
	return 0;
}

forward minconnecttime();
public minconnecttime()
{
	SendRconCommand("minconnectiontime 0"); //3000");
	return 1;
}

public OnGameModeInit()
{
	CreateDynamic3DTextLabel("{E0E0E0}Presiona la tecla {5867D6}C {E0E0E0}para abrir el porton", -1, 2250.1521, 552.2630, 8.0258, 8.0);
	SetGameModeText(SERVER_GAMEMODE);
	SendRconCommand(NombreServidor[random(sizeof(NombreServidor))]);
	SendRconCommand("language "SERVER_LANGUAGE"");
	SendRconCommand("weburl "SERVER_WEBSITE"");
	SendRconCommand("minconnectiontime 0");
	SendRconCommand("ackslimit 8000");
	SendRconCommand("messageslimit 100");
	SendRconCommand("conncookies 1");
	SendRconCommand("cookielogging 0");
	SendRconCommand("chatlogging 0");
	SendRconCommand("sleep 1");

	// Cada 2 minutos (120000 ms) enviar anuncio
    SetTimer("SendRandomAnnouncement", 900000, true); //ANUNCIOS RADIOS

	//Tiempos
	SetTimer("EnvioMsn",800000, true);
	SetTimer("BajarTiempos",1000,true);
	SetTimer("Cambiandonombre",2000,true);
	SetTimer("minconnecttime", 60000, 0);
	
	/*new MySQLOpt:option_id = mysql_init_options();
	mysql_set_option(option_id, AUTO_RECONNECT, true);
	mysql_set_option(option_id, SERVER_PORT, 3306);
	db_foro = mysql_connect(HOST_FORO, USER_FORO, PASS_FORO, SELE_FORO, option_id);
	mysql_set_charset("latin1", db_foro);
	if(db_foro == MYSQL_INVALID_HANDLE || mysql_errno(db_foro) != 0)
	{
		print("|-----------------------------------------");
		print("|Conexión fallida con la base de datos del Foro|");
		print("|El servidor se cerrara en 5 segundos... |");
		print("|-----------------------------------------");
		SendRconCommand("exit");
		return 1;
	}
	else
	{
		print("-------------------------------------------");
		print("|Conexión correcta con la base de datos del Foro|");
		print("-------------------------------------------");
		GetCacheForo();
	}*/
	ConnectDatabase();
	CargarRuedaDeChicago();

	SetWorldMinutesForDay(180); // 3 horas reales = 24 horas en juego
	DisableInteriorEnterExits();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	FormatDialogStrings();
	UsePlayerPedAnims();
	MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	return 1;
}
//===ANUNCIOS RADIOS===
forward SendRandomAnnouncement();
public SendRandomAnnouncement()
{
    new msgIndex = random(MAX_ANNOUNCEMENTS);
    SendClientMessageToAll(0x00FFFFAA, g_Announcements[msgIndex]);
    return 1;
}
//======================
FormatDialogStrings()
{
	new Dialog_Lines_String[256];

		/* PIZZA FOOD */
	format(DIALOG_FOOD_PIZZA_String, sizeof DIALOG_FOOD_PIZZA_String, "Producto\tPrecio\n");
	for(new i; i != sizeof PIZZA_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, PIZZA_FOOD[i][food_NAME], PIZZA_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_PIZZA_String, Dialog_Lines_String);
	}

		/* CLUCKIN FOOD */
	format(DIALOG_FOOD_CLUCKIN_String, sizeof DIALOG_FOOD_CLUCKIN_String, "Producto\tPrecio\n");
	for(new i; i != sizeof CLUCKIN_BELL_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, CLUCKIN_BELL_FOOD[i][food_NAME], CLUCKIN_BELL_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_CLUCKIN_String, Dialog_Lines_String);
	}

		/* BURGER_SHOT FOOD */
	format(DIALOG_FOOD_BURGER_String, sizeof DIALOG_FOOD_BURGER_String, "Producto\tPrecio\n");
	for(new i; i != sizeof BURGER_SHOT_FOOD; i ++)
	{
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, BURGER_SHOT_FOOD[i][food_NAME], BURGER_SHOT_FOOD[i][food_PRICE]);
		strcat(DIALOG_FOOD_BURGER_String, Dialog_Lines_String);
	}

		/* 24/7 LIST */
	format(DIALOG_247_LIST_String, sizeof DIALOG_247_LIST_String, "Producto\tPrecio\n");
	for(new i = 0; i != sizeof Supermarket_Product_List; i ++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{FFFFFF}%d. %s\t{"#BLUE_COLOR"}%d$\n", i + 1, Supermarket_Product_List[i][product_NAME], Supermarket_Product_List[i][product_PRICE]);
		strcat(DIALOG_247_LIST_String, Dialog_Lines_String);
	}

	//GPS
	new city[45], zone[45];

	//GPS CONCES
	format(DIALOG_PLAYER_GPS_SITE_7_String, sizeof DIALOG_PLAYER_GPS_SITE_7_String, "{"#SILVER_COLOR"}Lugar\t{"#BLUE_COLOR"}Zona\n");
	for(new i = 0; i != sizeof(SELL_VEHICLES_SHOPS_SPAWN); i++ )
	{
		GetPointZone(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], city, zone);
		format(Dialog_Lines_String, sizeof Dialog_Lines_String, "{FFFFFF}Concesionario %d\t{"#BLUE_COLOR"}%s, %s\n", i + 1, city, zone);
		strcat(DIALOG_PLAYER_GPS_SITE_7_String, Dialog_Lines_String);
	}

	//Colores bandas
	format(DIALOG_CREATE_CREW_COLOR_String, sizeof DIALOG_CREATE_CREW_COLOR_String, "");
	for(new i = 0; i != sizeof(RandomColors); i++)
	{
		format(Dialog_Lines_String, sizeof(Dialog_Lines_String), "{%06x}color %d\n", RandomColors[i] >>> 8, i + 1);
		strcat(DIALOG_CREATE_CREW_COLOR_String, Dialog_Lines_String);
	}

	format(DIALOG_CREDIT_String, sizeof DIALOG_CREDIT_String,
		"\
			Servidor: "SERVER_NAME"\n\
			Discord: "SERVER_WEBSITE"\n\
			Versión: "SERVER_VERSION"\n\
			Fecha versión: "VERSION_DATE"\n\
			\n\
			"SERVER_NAME" Se encuentra en una versión mediana, pero siempre\n\
			se puede mejorar un poco, en caso de querer sugerir algo\n\
			lo puedes hacer mediante el discord oficial de Knox City\n\
			/discord disfruta del sv. Att; STAFF Knox City :)\n\
			\n\
			\n\
			Programación: DrigoFK\n\
		"
	);

	//Animaciones
	format(DIALOG_ANIMS_String, sizeof DIALOG_ANIMS_String, "");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rendirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /blowjob\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rodar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /borracho\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bomba\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /apuntar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /reir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /amenazar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /paja\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /herido\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cruzarbrazos\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /recostarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /cubrirse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /vomitar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /comer\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /despedir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /nalgada\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /agonizar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /besar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /crack\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /mear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /sentarse\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /fucku\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llamar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /taichi\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /beber\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /boxear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /saludar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /llorar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /dormir\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /rapear\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /astrip\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /bailar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /alentar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /hablar\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /asiento\n");
	strcat(DIALOG_ANIMS_String, "{"#SILVER_COLOR"}>> /accion\n");
	return 1;
}


new
	Club_Strippers_Actor[4],
	Club_Bar_Actor[2],
	Club_Actors[14];

new RandomStripAnimations[][] =
{
	"STR_A2B",
	"strip_G",
	"STR_B2C",
	"STR_C1",
	"STR_C2"
};

new RandomPayStripAnimations[][] =
{
	"PLY_CASH",
	"PUN_CASH",
	"PUN_HOLLER",
	"PUN_LOOP"
};
//========================== FUNCIONES =============================//
forward CerrarServidor();
public CerrarServidor()
{
	SendRconCommand("gmx");
}
forward BajarTiempos();
public BajarTiempos()
{
	if(TiempoReinicio > 0)
	{

		new string[200];
		new m = TiempoReinicio/60;
		new c = TiempoReinicio;
		TiempoReinicio --;
		if((m == 1 || m == 2 || m == 3 || m == 4 || m == 5 || m == 6 || m == 7 || m == 8 || m == 9 || m == 10) && TiempoReinicio%(60) == 0)
		{

			if(m == 1) format(string, sizeof(string), "El servidor se reiniciará automáticamente en 1 minuto.", m);
			else format(string, sizeof(string), "El servidor se reiniciará automáticamente en %d minutos.", m);
			SendClientMessageToAll(0xb5bfcbFF, string);
		}
		if(m == 0)
		{

			if(c == 1 || c == 2 || c == 3 || c == 4 || c == 5 || c == 10 ||  c == 20 || c == 30 || c == 40 || c == 50)
			{

				format(string, sizeof(string), "El servidor se reiniciará automáticamente en %d segundos.", c);
				SendClientMessageToAll(0xb5bfcbFF, string);
			}
		}
		if(TiempoReinicio == 0)
		{
			SendClientMessageToAll(0xb5bfcbFF, "El servidor se reiniciará ahora.");
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
				{
					SavePlayerData(i);
					SavePlayerVehicles(i, false);
					SavePlayerToys(i);
					SavePlayerWeaponsData(i);
					SavePlayerWorkLevels(i);
				}
				TiempoReinicio = -1;
				mysql_tquery(mysql_db, "UPDATE player SET connected = 0, playerid = 0;");
				KickPlayer(i);
			}
			SetTimer("CerrarServidor", segundos(2), false);
		}
	}
	return 1;
}

SanAndreas()
{
	CreateTextDraws();
	LoadEnterExits();

	//db
	CargarPropiedades();

	//LoadIntroData();

	//auto
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/examen {FFFFFF}para realizar el examen por 500$.", 0xFFFFFFFF, 1773.0845, -1709.0139, 13.5351, 5.0, .testlos = true, .worldid = -1, .interiorid = -1);
	//SALA DE CAMARAS
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/camm [ID] {FFFFFF}para acceder a las camaras de seguridad.", 0xFFFFFFFF, 256.9269, 63.6477, 1003.6406, 4.4, .testlos = true, .worldid = -1, .interiorid = -1);
	//Putis
	CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'F' {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFFF, 1208.744140, -34.261119, 1000.953125, 5.0, .testlos = true, .worldid = -1, .interiorid = 3);
	CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'F' {FFFFFF}para soltar unos cuantos billetes.", 0xFFFFFFFF, 1213.738037, -33.667881, 1000.953125, 5.0, .testlos = true, .worldid = -1, .interiorid = 3);
	CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"}'H' {FFFFFF}para comprar bebida alcohólica.", 0xFFFFFFFF, 1207.234375, -29.231435, 1000.953125, 5.0, .testlos = true, .worldid = -1, .interiorid = 3);

	CreateDynamic3DTextLabel("Osvalda", 0xFFFFFFAA, 1209.416503, -36.272216, 1001.484375 + 0.3, 5.0, .testlos = false, .interiorid = 3);
	CreateDynamic3DTextLabel("Tamara", 0xFFFFFFAA, 1215.355712, -33.439422, 1001.382812 + 0.3, 5.0, .testlos = false, .interiorid = 3);
	Club_Strippers_Actor[0] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 0, .interiorid = 3);
	Club_Strippers_Actor[1] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 0, .interiorid = 3);
	Club_Bar_Actor[0] = CreateDynamicActor(195, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 0, .interiorid = 3);
	Club_Actors[0] = CreateDynamicActor(1, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 0, .interiorid = 3);
	Club_Actors[1] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 0, .interiorid = 3);
	Club_Actors[2] = CreateDynamicActor(21, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 0, .interiorid = 3);
	Club_Actors[3] = CreateDynamicActor(73, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 0, .interiorid = 3);
	Club_Actors[4] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 0, .interiorid = 3);
	Club_Actors[5] = CreateDynamicActor(127, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 0, .interiorid = 3);
	Club_Actors[6] = CreateDynamicActor(131, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 0, .interiorid = 3);

	Club_Strippers_Actor[2] = CreateDynamicActor(246, 1209.416503, -36.272216, 1001.484375, 17.0, .worldid = 1, .interiorid = 3);
	Club_Strippers_Actor[3] = CreateDynamicActor(87, 1215.355712, -33.439422, 1001.382812, 85.3, .worldid = 1, .interiorid = 3);
	Club_Bar_Actor[1] = CreateDynamicActor(195, 1206.232788, -29.325387, 1000.953125, 270.0, .worldid = 1, .interiorid = 3);
	Club_Actors[7] = CreateDynamicActor(1, 1209.846191, -33.879096, 1000.953125, 180.626205, .worldid = 1, .interiorid = 3);
	Club_Actors[8] = CreateDynamicActor(15, 1207.873535, -34.441837, 1000.953125, 213.213790, .worldid = 1, .interiorid = 3);
	Club_Actors[9] = CreateDynamicActor(21, 1215.694702, -31.700962, 1000.953125, 158.379913, .worldid = 1, .interiorid = 3);
	Club_Actors[10] = CreateDynamicActor(73, 1214.740356, -35.461227, 1000.953125, 337.608306, .worldid = 1, .interiorid = 3);
	Club_Actors[11] = CreateDynamicActor(78, 1213.713012, -34.496170, 1000.953125, 293.427886, .worldid = 1, .interiorid = 3);
	Club_Actors[12] = CreateDynamicActor(127, 1211.037963, -36.378440, 1000.960571, 74.092475, .worldid = 1, .interiorid = 3);
	Club_Actors[13] = CreateDynamicActor(131, 1207.190307, -36.132881, 1000.953125, 277.761077, .worldid = 1, .interiorid = 3);
	UpdateThePutis();
	SetTimer("UpdateThePutis", 3000, true);

	SetTimer("TimerPlayer", segundos(1), true);

	// Map Icons Hospitales
	//for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++) CreateDynamicMapIcon(Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], Hospital_Spawn_Positions[i][hspi_Z], 22, -1, 0, 0);
	//AUTOESCUELA KNOXCITY
	CreateDynamicMapIcon(1785.4174, -1722.6566, 13.5469, 36, -1, 0, 0);
	//FORT KNOX
	CreateDynamicMapIcon(2287.4529, 605.2462, 10.9195, 60, -1, 0, 0);
	//Tuning
	CreateDynamicMapIcon(263.592102, 22.960014, 2.170951, 63, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/tuning {FFFFFF}para tunear tu vehículo", 0xFFFFFFFF, 263.592102, 22.960014, 2.170951, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//3d texts armarios
	for(new i = 0; i < sizeof PROPERTY_CLOSET_POS; i++)
	{
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
		if(PROPERTY_INTERIORS[i][property_EMPTY_INTERIOR]) CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Armario\n\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/armario {FFFFFF}para verlo", 0xFFFFFFFF, PROPERTY_CLOSET_POS[i][property_closet_X], PROPERTY_CLOSET_POS[i][property_closet_Y], PROPERTY_CLOSET_POS[i][property_closet_Z] + 0.25 + PROPERTY_EMPTY_INTERIOR_Z_OFFSET, 10.0, .testlos = true, .interiorid = PROPERTY_INTERIORS[i][property_INT_INTERIOR]);
	}

	// 3D Texts Ropas
	for(new i = 0; i < sizeof Clothing_Shop_Positions; i++)
	{
		new label_str[256];
		format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para ver las opciones disponibles", Clothing_Shop_Positions[i][clothing_shop_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Clothing_Shop_Positions[i][clothing_shop_X], Clothing_Shop_Positions[i][clothing_shop_Y], Clothing_Shop_Positions[i][clothing_shop_Z] + 0.25, 10.0, .testlos = true, .interiorid = Clothing_Shop_Positions[i][clothing_shop_INTERIOR]);
	}

	// 3D Texts Pedir comida
	for(new i = 0; i < sizeof Fast_Food_Positions; i++)
	{
		new label_str[128];
		format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para alimentarte", Fast_Food_Positions[i][fast_food_NAME]);
		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z] + 0.25, 10.0, .testlos = true, .interiorid = Fast_Food_Positions[i][fast_food_INTERIOR]);
	}

	// 3D Texts Bank
	for(new i = 0; i < sizeof Bank_Interior_Positions; i++) CreateDynamic3DTextLabel("Banco\nPresiona {"#PRIMARY_COLOR"} [ H ] {FFFFFF}para realizar una operación", 0xFFFFFFFF, Bank_Interior_Positions[i][bank_X], Bank_Interior_Positions[i][bank_Y], Bank_Interior_Positions[i][bank_Z] + 0.25, 10.0, .testlos = true, .worldid = Bank_Interior_Positions[i][bank_WORLD], .interiorid = Bank_Interior_Positions[i][bank_INTERIOR]);
	for(new i = 0; i < sizeof BUY_PROPERTIES_SITES; i++) CreateDynamic3DTextLabel("Escribe {"#PRIMARY_COLOR"}/comprarcasa [ID] {FFFFFF}para comprar una propiedad", 0xFFFFFFFF, BUY_PROPERTIES_SITES[i][site_X], BUY_PROPERTIES_SITES[i][site_Y], BUY_PROPERTIES_SITES[i][site_Z] + 0.25, 10.0, .testlos = true, .worldid = BUY_PROPERTIES_SITES[i][site_WORLD], .interiorid = BUY_PROPERTIES_SITES[i][site_INTERIOR]);

	//Cajeros
	for(new i = 0; i < sizeof ATM_BANK; i ++)
	{
		CreateDynamicObject(ATM_BANK[i][atm_modelid], ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], ATM_BANK[i][atm_RX], ATM_BANK[i][atm_RY], ATM_BANK[i][atm_RZ], 0, 0);

		ATM_BANK[i][atm_X] += (-0.8 * floatsin(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		ATM_BANK[i][atm_Y] += (-0.5 * floatcos(-(ATM_BANK[i][atm_RZ] - 90.0), degrees));
		CreateDynamicMapIcon(ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z], 52, -1, 0, 0);
		CreateDynamic3DTextLabel("·{FFFFFF}Cajero automático\nAcercate para {FF00CF}realizar {FFFFFF}operaciones", COLOR_PRINCIPAL, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);

		new atm_pickup_id = CreateDynamicPickup(1274, 1, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z] + 0.10, 0, 0), info[3];
		info[0] = PICKUP_TYPE_ATM;
		info[1] = i; // Index
		info[2] = 0; // Nada
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, atm_pickup_id, E_STREAMER_EXTRA_ID, info);
	}
	// 3D Texts Gasolinera
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Gasolinera\n\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}9$/Litro\n{FFFFFF}Escribe {"#PRIMARY_COLOR"}/gasolina [litros / lleno] {FFFFFF}para repostar\n\nCompra {"#PRIMARY_COLOR"}/bidon {FFFFFF}de 20 litros por 250$", 0xFFFFFFFF, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z] + 0.25, 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//24/7 Int
	CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, -27.964675, -89.948631, 1003.546875 + 0.25, 10.0, .testlos = true, .interiorid = 18);

	//Farmacia
	CreateDynamic3DTextLabel("{F00000}Farmaceutica {71C263}Knox\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, 1371.0985, -1761.4934, 13.6050 + 0.25, 10.0, .testlos = true, .interiorid = 0);
	CreateDynamic3DTextLabel("{F00000}Farmacia {C2B070}Fort Knox\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para ver los productos disponibles", 0xFFFFFFFF, 2315.2271, 595.9661, 7.8641 + 0.25, 10.0, .testlos = true, .interiorid = 0);
	//Knox Bank


	//Mercado negro
	CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}Mercado negro\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para comprar", 0xFFFFFFFF, 2119.059814, -2001.701904, 7.984375, 10.0, .testlos = true, .interiorid = 0, .worldid = 0);

	//Vehs venta
	for(new i = 0; i != sizeof SELL_INFO_VEHICLES; i ++)
	{
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_1] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];
		if(SELL_INFO_VEHICLES[i][sell_info_COLOR_2] == -1) SELL_INFO_VEHICLES[i][sell_info_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

		new vehicle_id = INVALID_VEHICLE_ID;
		vehicle_id = CreateVehicle(SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID], SELL_INFO_VEHICLES[i][sell_info_SPAWN_X], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y], SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z], SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE], SELL_INFO_VEHICLES[i][sell_info_COLOR_1], SELL_INFO_VEHICLES[i][sell_info_COLOR_2], -1, false);

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_SELL;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = SELL_INFO_VEHICLES[i][sel_info_vehicle_MODELID];
		format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "EN VENTA");
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_Z];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = SELL_INFO_VEHICLES[i][sell_info_SPAWN_ANGLE];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = SELL_INFO_VEHICLES[i][sell_info_COLOR_1];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = SELL_INFO_VEHICLES[i][sell_info_COLOR_2];
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = 0.0;
		GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;

		SELL_VEHICLES[vehicle_id][sell_vehicle_VALID] = true;
		SELL_VEHICLES[vehicle_id][sell_vehicle_SHOP] = SELL_INFO_VEHICLES[i][sell_info_SHOP];
		SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_PRICE];
		SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1; /*VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_LEVEL];*/
		SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_COINS];
		SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL] = VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_VIP_LEVEL];

		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL] = 1;
		if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA]) SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE] = 0;

		SetVehicleToRespawnEx(vehicle_id);


		new label_str[256];

		if(SELL_VEHICLES[vehicle_id][sell_vehicle_VIP_LEVEL])
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
							\n\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
							\n\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}
		else
		{
			if(SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA])
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[vehicle_id][sell_vehicle_EXTRA], SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
			else
			{
				format
				(
					label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}%s\n\n\
							{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
							{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
						", VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[vehicle_id][sell_vehicle_PRICE]), SELL_VEHICLES[vehicle_id][sell_vehicle_LEVEL]
				);
			}
		}


		SELL_VEHICLES[vehicle_id][sell_vehicle_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, 0.0, 0.0, 1.5, 10.0, .attachedvehicle = vehicle_id, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//Concesionarios
	for(new i = 0; i < sizeof SELL_VEHICLES_SHOPS_SPAWN; i++)
	{
		CreateDynamicMapIcon(SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 55, -1, 0, 0);
		CreateDynamic3DTextLabel("{"#PRIMARY_COLOR"}SALIDA DE VEHICULOS", 0xFFFFFFFF, SELL_VEHICLES_SHOPS_SPAWN[i][0], SELL_VEHICLES_SHOPS_SPAWN[i][1], SELL_VEHICLES_SHOPS_SPAWN[i][2], 10.0, .testlos = true, .worldid = 0, .interiorid = 0);
	}

	//Notario
	CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para vender\nalguna propiedad o vehículo", 0xFFFFFFFF, -474.596282, 289.679107, 2004.584960, 10.0, .testlos = true, .interiorid = 20);
	//Grua
	CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para solicitar\nel servicio de grúa a un vehículo", 0xFFFFFFFF, -508.645385, 322.147644, 2004.585937, 10.0, .testlos = true, .interiorid = 20);


	//San Andreas Vehicles
	new total_vehicles = 0;
	new failed_vehicles = 0;

	for(new i = 0; i != sizeof San_Andreas_Vehicles; i ++)
	{
	    if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] == -1)
	        San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

	    if(San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] == -1)
	        San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2] = valid_work_vehicle_colors[random(sizeof(valid_work_vehicle_colors))];

	    new vehicle_id = INVALID_VEHICLE_ID, respawn_time = 300;

	    if(San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	    {
	        if(work_info[ San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN] ][work_info_TYPE] == WORK_TYPE_FAMILY)
	        {
	            respawn_time = 2700;
	        }
	    }

	    vehicle_id = CreateVehicle(
	        San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1],
	        San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2],
	        respawn_time, false
	    );

	    if(vehicle_id == INVALID_VEHICLE_ID)
	    {
	        failed_vehicles++;
	        continue;
	    }

	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = San_Andreas_Vehicles[i][san_andreas_vehicle_MODELID];
	    format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%c%c%c-%04d", getRandomLetter(), getRandomLetter(), getRandomLetter(), random(9999));
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_X];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Y];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_Z];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = San_Andreas_Vehicles[i][san_andreas_vehicle_SPAWN_ANGLE];

	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_1];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = San_Andreas_Vehicles[i][san_andreas_vehicle_COLOR_2];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[ GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_MAX_GAS];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] / 3, 2);
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VIP] = San_Andreas_Vehicles[i][san_andreas_vehicle_vip];
	    GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = San_Andreas_Vehicles[i][san_andreas_vehicle_WORLD];

	    if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	    {
	        WORK_VEHICLES[vehicle_id][work_vehicle_VALID] = true;
	        WORK_VEHICLES[vehicle_id][work_vehicle_WORK] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN];
	        WORK_VEHICLES[vehicle_id][work_vehicle_EXP] = San_Andreas_Vehicles[i][san_andreas_vehicle_TYPE_IN_EXP];
	        WORK_VEHICLES[vehicle_id][work_vehicle_NEED_DUTY] = work_info[ WORK_VEHICLES[vehicle_id][work_vehicle_WORK] ][work_info_NEED_DUTY];
	    }

	    AddVehicleComponents(vehicle_id);
	    SetVehicleToRespawnEx(vehicle_id);
	    CallLocalFunction("OnSanAndreasVehicleLoad", "i", vehicle_id);

	    total_vehicles++;
	}

	CallLocalFunction("OnSanAndreasVehiclesLoad", "");
	printf("[VEHICULOS CREADOS]: %d", total_vehicles);
	printf("[VEHICULOS FALLIDOS]: %d", failed_vehicles);
	printf("[TOTAL DEFINIDOS]: %d", sizeof San_Andreas_Vehicles);


	//Barreras
	for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
	{
		new tmpobjid = CreateDynamicObject(966, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z], 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tmpobjid, 1, 9514, "711_sfw", "ws_carpark2", 0x00000000);
		tmpobjid = CreateDynamicObject(968, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION], San_Andreas_Barriers[i][barrier_WORLD], San_Andreas_Barriers[i][barrier_INTERIOR], .streamdistance = 600.0, .drawdistance = 600.0);
		SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ws_carparkwall2", 0xFFFFFFFF);
		SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "ws_carparkwall2", 0x00000000);
		San_Andreas_Barriers[i][barrier_OBJECT_ID] = tmpobjid;

		new label_str[256];

		if(San_Andreas_Barriers[i][barrier_PRICE] > 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Peaje\n\n{FFFFFF}Toca el {"#PRIMARY_COLOR"}claxón {FFFFFF}para pagar {"#PRIMARY_COLOR"}%s$", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
		else
		{
			if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE]) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%c%s\n\n{FFFFFF}Toca el {"#PRIMARY_COLOR"}claxón {FFFFFF}para que te abran", toupper(work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][0]), work_info[ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][work_info_NAME][1]);
			else format(label_str, sizeof label_str, "{FFFFFF}Toca el {"#PRIMARY_COLOR"}claxón {FFFFFF}para que te abran");
		}

		CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 1.5, 15.0, .worldid = San_Andreas_Barriers[i][barrier_WORLD], .interiorid = San_Andreas_Barriers[i][barrier_INTERIOR], .testlos = true);

		San_Andreas_Barriers[i][barrier_PLAYER_X] = San_Andreas_Barriers[i][barrier_X] + (3.4 * floatsin(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Y] = San_Andreas_Barriers[i][barrier_Y] + (3.4 * floatcos(-(San_Andreas_Barriers[i][barrier_ROTATION] + 90.0), degrees));
		San_Andreas_Barriers[i][barrier_PLAYER_Z] = San_Andreas_Barriers[i][barrier_Z];
	}
	//portones de trabajos
	for(new i = 0; i != sizeof WORK_GARAGE_DOORS; i ++)
	{
		WORK_GARAGE_DOORS[i][work_gdoor_OBJECT_ID] = CreateDynamicObject(WORK_GARAGE_DOORS[i][work_gdoor_MODELID], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_X], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_Y], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_Z], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_RX], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_RY], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_RZ], 0, 0);
	}
	//puertas de policías
	for(new i = 0; i != sizeof WORK_DOORS; i ++)
	{
		WORK_DOORS[i][work_door_OBJECT_ID] = CreateDynamicObject(WORK_DOORS[i][work_door_MODELID], WORK_DOORS[i][work_door_X], WORK_DOORS[i][work_door_Y], WORK_DOORS[i][work_door_Z], 0.0, 0.0, WORK_DOORS[i][work_door_RZ], WORK_DOORS[i][work_door_WORLD], WORK_DOORS[i][work_door_INTERIOR]);
		CreateDynamic3DTextLabel("Pulsa {"#PRIMARY_COLOR"} F {FFFFFF}para abrir la puerta", 0xFFFFFFFF, WORK_DOORS[i][work_door_X], WORK_DOORS[i][work_door_Y], WORK_DOORS[i][work_door_Z] + 1.25, 5.0, .testlos = false, .interiorid = WORK_DOORS[i][work_door_INTERIOR], .worldid = WORK_DOORS[i][work_door_WORLD]);
	}

	for(new i; i != sizeof StartWorkingCoords; i++)
		CreateDynamic3DTextLabel("Pulsa {DEFF00}(H) {FFFFFF}para {00FFFB}empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, StartWorkingCoords[i][start_pos_X], StartWorkingCoords[i][start_pos_Y], StartWorkingCoords[i][start_pos_Z], 5.0, .testlos = true, .interiorid = StartWorkingCoords[i][start_pos_interiorid]);

	for(new i; i != sizeof WeaponShopWorkCoords; i++)
		CreateDynamic3DTextLabel("Pulsa {DEFF00}(H) {FFFFFF}para {00FFFB}equipar", 0xFFFFFFFF, WeaponShopWorkCoords[i][shop_pos_X], WeaponShopWorkCoords[i][shop_pos_Y], WeaponShopWorkCoords[i][shop_pos_Z], 5.0, .testlos = true, .interiorid = WeaponShopWorkCoords[i][shop_pos_interiorid]);

	Jail_Areas[0] = CreateDynamicRectangle(258.236938, 72.319061, 273.117279, 95.841438, -1, 6);
	Jail_Areas[1] = CreateDynamicRectangle(211.001739, 117.171920, 236.010986, 104.004219, -1, 10);
	Jail_Areas[2] = CreateDynamicRectangle(204.957885, 180.868392, 183.743148, 168.624618, -1, 3);
	Jail_Areas[3] = CreateDynamicRectangle(366.3146, 1951.8367, 17.6406, 78.4408, -1, 13);

	//Safe Zones
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		SAFE_ZONES[i][safe_zone_AREA_ID] = CreateDynamicRectangle(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y], SAFE_ZONES[i][safe_zone_WORLD], SAFE_ZONES[i][safe_zone_INTERIOR]);

		new info[2];
		info[0] = AREA_TYPE_ZONA_SEGURA;
		info[1] = i;
		Streamer_SetArrayData(STREAMER_TYPE_AREA, SAFE_ZONES[i][safe_zone_AREA_ID], E_STREAMER_EXTRA_ID, info);

		SAFE_ZONES[i][safe_zone_AREA_ID] = GangZoneCreate(SAFE_ZONES[i][safe_zone_MIN_X], SAFE_ZONES[i][safe_zone_MIN_Y], SAFE_ZONES[i][safe_zone_MAX_X], SAFE_ZONES[i][safe_zone_MAX_Y]);
	}

	//Trabajos
	for(new i = 1; i < E_WORKS; i ++)
	{
		if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;
		switch(work_info[i][work_info_TYPE])
		{
			case WORK_TYPE_NORMAL:
			{
				if(obtain_work_coords[i][obtain_work_LABELS])
				{
					new label_str[256];

					format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Puesto de trabajo (%s)\n\n{FFFFFF}Nivel requerido: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Presiona {"#PRIMARY_COLOR"} [ H ]{FFFFFF} para conseguirlo", work_info[i][work_info_NAME], work_info[i][work_info_LEVEL]);
					CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], 10.0, .testlos = true, .interiorid = obtain_work_coords[i][obtain_work_INTERIOR]);
					CreateDynamicPickup(1239, 1, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z], -1, obtain_work_coords[i][obtain_work_INTERIOR]);
				}
				if(obtain_work_coords[i][obtain_work_MAP_ICON]) CreateDynamicMapIcon(obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z], obtain_work_coords[i][obtain_work_MAP_ICON_ID], -1, 0, 0);
			}
		}
	}
	//Random taximeters
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++) TAXI_METER_VEHICLE[i][veh_taxi_meter_PRICE] = minrand(2, 8);

	//Carga camioneros
	for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
	{
		CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/cargar {FFFFFF}para cargar el camión", 0xFFFFFFFF, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], 10.0, .testlos = true, .interiorid = 0);
		CreateDynamicPickup(19135, 1, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2], -1, 0);
	}

	 //Mercado Sitios
	for(new i = 0; i != sizeof MercadoSites; i ++)
	{
		MercadoSites[i][mercado_zone_AREA_ID] = CreateDynamicRectangle(MercadoSites[i][mercado_zone_MIN_X], MercadoSites[i][mercado_zone_MIN_Y], MercadoSites[i][mercado_zone_MAX_X], MercadoSites[i][mercado_zone_MAX_Y], 0, 0);
	}

	for(new i; i != sizeof MecanicoBuyPiecesCoords; i++)
		CreateDynamic3DTextLabel("Piezas de Mecánico\nEscribe {"#PRIMARY_COLOR"}/piezas [cantidad] {FFFFFF}para comprar piezas\nPrecio de pieza: {"#PRIMARY_COLOR"}50$", 0xFFFFFFFF, MecanicoBuyPiecesCoords[i][0], MecanicoBuyPiecesCoords[i][1], MecanicoBuyPiecesCoords[i][2], 5.0, .testlos = true, .interiorid = 0);

	//Leñador
	CreateDynamicPickup(19793, 1, -527.670349, -97.338562, 63.176174, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/talar {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -527.670349, -97.338562, 63.176174, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Pizzero
	CreateDynamicPickup(1582, 1, 2097.355712, -1818.040771, 13.382812, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/pizzero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, 2097.355712, -1818.040771, 13.382812, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Medico
	CreateDynamicPickup(1275, 1, -2029.751342, -114.503044, 1035.171875, -1, 3);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/medico {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -2029.751342, -114.503044, 1035.171875, 5.0, .testlos = true, .interiorid = 3);

	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		CreateDynamic3DTextLabel("Botiquines\n\nEscribe {"#PRIMARY_COLOR"}/botiquin {FFFFFF}para comprar un botiquín\nPrecio del botiquín: {"#PRIMARY_COLOR"}5.100$", 0xFFFFFFFF, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2], 5.0, .testlos = true);

	//mercado
	CreateDynamicActor(179, 2120.724853, -2000.400268, 7.984375, 130.0, true, 100.0, 0, 0);

	//Actor help
	//CreateDynamicActor(, Float:x, Float:y, Float:z, Float:r, invulnerable = 1, Float:health = 100.0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_ACTOR_SD, STREAMER_TAG_AREA areaid = STREAMER_TAG_AREA -1, priority = 0)

	//Trash
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/basurero {FFFFFF}para empezar a trabajar\no para dejar de trabajar", 0xFFFFFFFF, -1906.577514, -1756.457519, 22.079319, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Ruta 0
	CreateTrashCheckpoint(0, 1440, -1812.46228, -558.37744, 15.73948,   0.00000, 0.00000, 274.24359);
	CreateTrashCheckpoint(0, 1440, -1793.84106, -312.50452, 24.46057,   0.00000, 0.00000, 268.49271);
	CreateTrashCheckpoint(0, 1440, -1801.20825, 115.39587, 14.55550,   0.00000, 0.00000, 280.09882);
	CreateTrashCheckpoint(0, 1440, -1750.40051, 323.11810, 6.61720,   0.00000, 0.00000, 319.06424);
	CreateTrashCheckpoint(0, 1440, -1814.43311, 511.15622, 28.66113,   0.00000, 9.00000, 304.31201);
	CreateTrashCheckpoint(0, 1440, -1982.79871, 614.85687, 34.61121,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2229.42896, 575.27448, 34.58952,   0.00000, 0.00000, 0.00000);
	CreateTrashCheckpoint(0, 1440, -2385.20020, 513.64594, 28.11606,   0.00000, 0.00000, 282.48959);
	CreateTrashCheckpoint(0, 1440, -2258.51782, 221.79150, 34.74878,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -2266.30273, -206.86926, 34.86986,   0.00000, 0.00000, 90.00000);
	CreateTrashCheckpoint(0, 1440, -1995.48499, -771.90076, 31.56746,   0.00000, 0.00000, 90.00000);
		//Ruta 1
	CreateTrashCheckpoint(1, 1440, -2211.24414, -964.98248, 38.68247,   0.00000, 2.50000, 286.39740);
	CreateTrashCheckpoint(1, 1440, -2424.54443, -595.71997, 131.88649,   0.00000, -4.50000, 303.65921);
	CreateTrashCheckpoint(1, 1440, -2602.82544, -478.18484, 68.15035,   0.00000, 0.00000, 21.71607);
	CreateTrashCheckpoint(1, 1440, -2353.62256, -396.48764, 78.42006,   0.00000, -3.50000, 305.07410);
	CreateTrashCheckpoint(1, 1440, -2756.29199, -500.66721, 6.77589,   0.00000, 0.00000, 316.44635);
	CreateTrashCheckpoint(1, 1440, -2811.07056, -346.85269, 6.66456,   0.00000, 0.00000, 259.86459);
	CreateTrashCheckpoint(1, 1440, -2415.51563, -128.34013, 34.82273,   0.00000, 0.00000, 250.60507);
	CreateTrashCheckpoint(1, 1440, -2028.09985, -76.42242, 34.70956,   0.00000, 0.00000, 0.00000);
		//Ruta 2
	CreateTrashCheckpoint(2, 1440, -2193.88306, -2156.55347, 46.46848,   0.00000, -10.00000, 46.48320);
	CreateTrashCheckpoint(2, 1440, -2208.01904, -2280.10645, 30.12751,   0.00000, 0.00000, 331.91882);
	CreateTrashCheckpoint(2, 1440, -2125.33594, -2256.24902, 30.10599,   0.00000, 0.00000, 326.47290);
	CreateTrashCheckpoint(2, 1440, -2101.86353, -2313.20093, 30.14946,   0.00000, 0.00000, 42.68287);
	CreateTrashCheckpoint(2, 1440, -2183.69775, -2449.03003, 30.01783,   0.00000, 0.00000, 51.16318);
	CreateTrashCheckpoint(2, 1440, -2328.98047, -2704.17358, 44.41791,   6.17998, 5.88000, 340.20822);
	CreateTrashCheckpoint(2, 1440, -2601.78345, -2334.39746, 10.50614,   0.00000, 0.00000, 41.64481);

	//Leñador arboles
	Lumberjack_Area = CreateDynamicRectangle(-613.953796, -209.777252, -381.961181, -6.355076, 0, 0);
	for(new i = 0; i != sizeof LUMBER_TREES; i ++)
	{
		LUMBER_TREES[i][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[i][lumber_tree_MODELID], LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z], LUMBER_TREES[i][lumber_tree_RX], LUMBER_TREES[i][lumber_tree_RY], LUMBER_TREES[i][lumber_tree_RZ], 0, 0);

		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el Árbol.", i);
		LUMBER_TREES[i][lumber_tree_LABEL] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z] + 1.5, 5.0, .testlos = false, .worldid = 0, .interiorid = 0);
	}

	//Agricultor
	CreateDynamicMapIcon(1461.8894, -83.2621, 65.0, 53, -1, 0, 0);
	CreateDynamic3DTextLabel("Usa {"#PRIMARY_COLOR"}/semillas {FFFFFF}para comprar semillas", 0xFFFFFFFF, 1566.521606, 31.370532, 24.16406, 5.0, .testlos = true, .worldid = 0, .interiorid = 0);

	//Cosechador
	Harvest_Area = CreateDynamicRectangle(-428.336059, -1667.658569, -116.565414, -1220.122070, 0, 0);
	///Mecanicos
	Areas_Mecanico[0] = CreateDynamicRectangle(1791.4602,-1321.5704,13.3769,357.1687,0,0); //new
	return 1;
}

forward UpdateThePutis();
public UpdateThePutis()
{
	new
		strip_anim = random(sizeof(RandomStripAnimations)),
		stripper = random(sizeof(Club_Strippers_Actor));
	ApplyDynamicActorAnimation(Club_Strippers_Actor[stripper], "STRIP", RandomStripAnimations[strip_anim], 4.1, 1, 0, 0, 0, 0);

	for(new i = 0; i != sizeof(Club_Actors); i ++)
	{
		ApplyDynamicActorAnimation(Club_Actors[i], "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 1, 0, 0, 0, 0);
	}
	for(new i = 0; i != sizeof(Club_Bar_Actor); i ++)
	{
		ApplyDynamicActorAnimation(i, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0);
	}
	return 1;
}

stock Float:GetSpeed(Float:vx, Float:vy, Float:vz)
{
	new Float:vel = floatmul(floatsqroot(floatadd(floatadd(floatpower(vx, 2), floatpower(vy, 2)),  floatpower(vz, 2))), 181.5);
	return vel;
}


//By Kar
stock IsVehicleDrivingForward(vehicleid)
{
	new Float:Float[3];
	if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
	{
		GetVehicleZAngle(vehicleid, Float[0]);
		if(Float[0] < 90)
		{
			if(Float[1] < 0 && Float[2] > 0) return true;
		}
		else if(Float[0] < 180)
		{
			if(Float[1] < 0 && Float[2] < 0) return true;
		}
		else if(Float[0] < 270)
		{
			if(Float[1] > 0 && Float[2] < 0) return true;
		}
		else if(Float[1] > 0 && Float[2] > 0) return true;
	}
	return false;
}
//====================================    Foro     ====================================//
/*CrearCuentaForo(playerid)
{
	if(PI[playerid][pi_CUENTA_FORO]) return 0;
	new Query[620];

	mysql_format
	(
		db_foro, Query, sizeof (Query),
		"\
			INSERT INTO smf0v_members\
			(\
				id_player,\
				member_name,\
				real_name,\
				skin,\
				date_registered,\
				id_group,\
				passwd,\
				email_address,\
				buddy_list\
			)\
			VALUES\
			(\
				'%d', '%e', '%e', '%d', UNIX_TIMESTAMP(now()), '17', SHA1(CONCAT(LOWER('%e'),'%e')), '%e', '0'\
			);\
		",
			PI[playerid][pi_ID],
			PI[playerid][pi_NAME],
			PI[playerid][pi_NAME],
			PI[playerid][pi_SKIN],
			PI[playerid][pi_NAME],
			PI[playerid][pi_PASS],
			PI[playerid][pi_EMAIL]
	);
	mysql_tquery(db_foro, Query);

	Foro_Info[Users] ++;

	mysql_format(db_foro, Query, sizeof(Query), "UPDATE `smf0v_settings` SET `Value`='%e' WHERE `Variable`='latestRealName'",PI[playerid][pi_NAME]);
	mysql_tquery(db_foro, Query);
	mysql_format(db_foro, Query, sizeof(Query), "UPDATE `smf0v_settings` SET `Value`='%d' WHERE `Variable`='totalMembers'", Foro_Info[Users]);
	mysql_tquery(db_foro, Query);
	mysql_format(db_foro, Query, sizeof(Query), "UPDATE `smf0v_settings` SET `Value`='%d' WHERE `Variable`='latestMember'", Foro_Info[Users]);
	mysql_tquery(db_foro, Query);
    //mysql_format(Conecction, Query, sizeof(Query), "UPDATE `player` SET cuenta_foro='1' WHERE `ID`='%d'",PI[playerid][pi_ID]);
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET cuenta_foro = 1 WHERE id = %d;", PI[playerid][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	//mysql_tquery(Conecction, Query);

	SendClientMessage(playerid, -1, "Ya puedes usar tu cuenta en el Foro.");
	return 1;
}*/

CreateTrashCheckpoint(route, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(route >= MAX_ROUTES) return print("---> Límite superado en array 'TRASH_OBJECTS, route' en la función 'CreateTrashCheckpoint'.");
	if(!TRASH_OBJECTS[route][trash_route_VALID]) TRASH_OBJECTS[route][trash_route_VALID] = true;
	if(TRASH_OBJECTS[route][trash_route_OBJECTS] >= MAX_OBJECTS_PER_ROUTE) return print("---> Límite superado en array 'TRASH_OBJECTS, objects' en la función 'CreateTrashCheckpoint'.");

	if(TRASH_OBJECTS[route][trash_route_OBJECTS] == 0) TRASH_OBJECTS[route][trash_route_DISTANCE] = GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	else
	{
		TRASH_OBJECTS[route][trash_route_DISTANCE] -= GetDistanceBetweenPoints3D(TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
		TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1], TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ], TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] - 1 ]);
	}

	TRASH_OBJECTS[route][trash_object_MODELID][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = modelid;
	TRASH_OBJECTS[route][trash_object_X][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = x;
	TRASH_OBJECTS[route][trash_object_Y][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = y;
	TRASH_OBJECTS[route][trash_object_Z][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = z;
	TRASH_OBJECTS[route][trash_object_RX][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rx;
	TRASH_OBJECTS[route][trash_object_RY][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = ry;
	TRASH_OBJECTS[route][trash_object_RZ][ TRASH_OBJECTS[route][trash_route_OBJECTS] ] = rz;
	//CreateDynamicObject(modelid, x, y, z, rx, ry, rz, 0, 0);

	TRASH_OBJECTS[route][trash_route_DISTANCE] += GetDistanceBetweenPoints3D(x, y, z, obtain_work_coords[WORK_TRASH][obtain_work_X], obtain_work_coords[WORK_TRASH][obtain_work_Y], obtain_work_coords[WORK_TRASH][obtain_work_Z]);
	TRASH_OBJECTS[route][trash_route_MONEY] = floatround(0.3 * TRASH_OBJECTS[route][trash_route_DISTANCE]);

	TRASH_OBJECTS[route][trash_route_OBJECTS] ++;
	return 1;
}

stock Float:GetDistanceBetweenPoints3D(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return VectorSize(x1-x2,y1-y2,z1-z2);
}

CreateTextDraws() // Text Draws
{
	for(new i; i < sizeof(Textdraws); i++) Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	Textdraws[textdraw_TV_SYSTEM] = TextDrawCreate(320.0, 20.0, "~w~?? TV EN VIVO ~n~~g~CANAL ACTIVO");
	TextDrawFont(Textdraws[textdraw_TV_SYSTEM], 1);
	TextDrawColor(Textdraws[textdraw_TV_SYSTEM], 0xFFFFFFAA);
	TextDrawBackgroundColor(Textdraws[textdraw_TV_SYSTEM], 0x000000AA);
	TextDrawUseBox(Textdraws[textdraw_TV_SYSTEM], true);
	TextDrawBoxColor(Textdraws[textdraw_TV_SYSTEM], 0x00000066);
	TextDrawAlignment(Textdraws[textdraw_TV_SYSTEM], 2);
	TextDrawLetterSize(Textdraws[textdraw_TV_SYSTEM], 0.4, 1.3);
	TextDrawSetOutline(Textdraws[textdraw_TV_SYSTEM], 1);
	TextDrawSetShadow(Textdraws[textdraw_TV_SYSTEM], 1);

	Textdraws[textdraw_iPhone][0] = TextDrawCreate(367.332305, 58.100276, "");//telefono
	TextDrawTextSize(Textdraws[textdraw_iPhone][0], 380.000000, 437.000000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][0], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][0], 255);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][0], 0);
	TextDrawFont(Textdraws[textdraw_iPhone][0], 5);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][0], 0);
	TextDrawSetPreviewModel(Textdraws[textdraw_iPhone][0], 18868);
	TextDrawSetPreviewRot(Textdraws[textdraw_iPhone][0], 90.000000, 0.000000, 0.000000, 1.000000);

	Textdraws[textdraw_iPhone][1] = TextDrawCreate(523.575866, 165.265136, "");//wallpaper
	TextDrawTextSize(Textdraws[textdraw_iPhone][1], 74.000000, 201.000000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][1], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][1], 255);
	TextDrawFont(Textdraws[textdraw_iPhone][1], 5);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][1], 0);
	TextDrawSetPreviewModel(Textdraws[textdraw_iPhone][1], 19129);
	TextDrawSetPreviewRot(Textdraws[textdraw_iPhone][1], 115.000000, 0.000000, 0.000000, 0.000000);

	Textdraws[textdraw_iPhone][2] = TextDrawCreate(525.199157, 166.216934, "18:00");//hora cuando está desbloqueado
	TextDrawLetterSize(Textdraws[textdraw_iPhone][2], 0.138299, 0.781656);
	TextDrawTextSize(Textdraws[textdraw_iPhone][2], 596.000000, 0.400000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][2], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][2], -1);
	TextDrawUseBox(Textdraws[textdraw_iPhone][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_iPhone][2], 40);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][2], 255);
	TextDrawFont(Textdraws[textdraw_iPhone][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][2], 1);

	Textdraws[textdraw_iPhone][3] = TextDrawCreate(560.836669, 197.566833, "18:40");//hora cuando está bloqueado
	TextDrawLetterSize(Textdraws[textdraw_iPhone][3], 0.426999, 2.329999);
	TextDrawTextSize(Textdraws[textdraw_iPhone][3], 0.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][3], 2);
	TextDrawColor(Textdraws[textdraw_iPhone][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_iPhone][3], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][3], 255);
	TextDrawFont(Textdraws[textdraw_iPhone][3], 2);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][3], 1);

	Textdraws[textdraw_iPhone][4] = TextDrawCreate(554.245910, 367.333465, "O");//Tecla
	TextDrawLetterSize(Textdraws[textdraw_iPhone][4], 0.400000, 1.600000);
	TextDrawAlignment(Textdraws[textdraw_iPhone][4], 1);
	TextDrawColor(Textdraws[textdraw_iPhone][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_iPhone][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_iPhone][4], 255);
	TextDrawFont(Textdraws[textdraw_iPhone][4], 2);
	TextDrawSetProportional(Textdraws[textdraw_iPhone][4], 1);

	Textdraws[textdraw_PING][0] = TextDrawCreate(7.000000, 390.000000, "~r~~h~.");
	TextDrawBackgroundColor(Textdraws[textdraw_PING][0], 255);
	TextDrawFont(Textdraws[textdraw_PING][0], 1);
	TextDrawLetterSize(Textdraws[textdraw_PING][0], 0.460000, 1.700000);
	TextDrawColor(Textdraws[textdraw_PING][0], -1);
	TextDrawSetOutline(Textdraws[textdraw_PING][0], 0);
	TextDrawSetProportional(Textdraws[textdraw_PING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_PING][0], 1);
	TextDrawSetSelectable(Textdraws[textdraw_PING][0], 0);

	Textdraws[textdraw_PING][1] = TextDrawCreate(11.000000, 396.000000, "~r~~h~)");
	TextDrawBackgroundColor(Textdraws[textdraw_PING][1], 255);
	TextDrawFont(Textdraws[textdraw_PING][1], 1);
	TextDrawLetterSize(Textdraws[textdraw_PING][1], 0.380000, 1.000000);
	TextDrawColor(Textdraws[textdraw_PING][1], -1);
	TextDrawSetOutline(Textdraws[textdraw_PING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_PING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_PING][1], 1);
	TextDrawSetSelectable(Textdraws[textdraw_PING][1], 0);

	Textdraws[textdraw_PING][2] = TextDrawCreate(14.000000, 394.000000, "~r~~h~)");
	TextDrawBackgroundColor(Textdraws[textdraw_PING][2], 255);
	TextDrawFont(Textdraws[textdraw_PING][2], 1);
	TextDrawLetterSize(Textdraws[textdraw_PING][2], 0.410000, 1.400000);
	TextDrawColor(Textdraws[textdraw_PING][2], -1);
	TextDrawSetOutline(Textdraws[textdraw_PING][2], 0);
	TextDrawSetProportional(Textdraws[textdraw_PING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_PING][2], 1);
	TextDrawSetSelectable(Textdraws[textdraw_PING][2], 0);

	Textdraws[textdraw_COMBAT_MODE] = TextDrawCreate(317.000000, 391.000000, "En_combate");
	TextDrawLetterSize(Textdraws[textdraw_COMBAT_MODE], 0.267000, 1.521185);
	TextDrawTextSize(Textdraws[textdraw_COMBAT_MODE], 0.000000, 98.000000);
	TextDrawAlignment(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawColor(Textdraws[textdraw_COMBAT_MODE], -16776961);
	TextDrawSetShadow(Textdraws[textdraw_COMBAT_MODE], 0);
	TextDrawSetOutline(Textdraws[textdraw_COMBAT_MODE], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_COMBAT_MODE], 255);
	TextDrawFont(Textdraws[textdraw_COMBAT_MODE], 2);
	TextDrawSetProportional(Textdraws[textdraw_COMBAT_MODE], 1);

	Textdraws[textdraw_HUD][0] = TextDrawCreate(-15.000000, 446.000000, "barraReputacion");
	TextDrawLetterSize(Textdraws[textdraw_HUD][0], 0.000000, 0.500000);
	TextDrawTextSize(Textdraws[textdraw_HUD][0], 650.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][0], 1);
	TextDrawColor(Textdraws[textdraw_HUD][0], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][0], 140);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][0], 255);
	TextDrawFont(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][0], 0);

	Textdraws[textdraw_HUD][1] = TextDrawCreate(497.000000, 112.000000, "hud:radar_datefood"); //Icono comida
	TextDrawLetterSize(Textdraws[textdraw_HUD][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][1], 12.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][1], 1);
	TextDrawColor(Textdraws[textdraw_HUD][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][1], 255);
	TextDrawFont(Textdraws[textdraw_HUD][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][1], 0);

	Textdraws[textdraw_HUD][2] = TextDrawCreate(499.000000, 102.000000, "bordebarraHambre");
	TextDrawLetterSize(Textdraws[textdraw_HUD][2], 0.000000, 0.699999);
	TextDrawTextSize(Textdraws[textdraw_HUD][2], 549.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][2], 1);
	TextDrawColor(Textdraws[textdraw_HUD][2], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][2], 255);
	TextDrawFont(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][2], 0);

	Textdraws[textdraw_HUD][3] = TextDrawCreate(500.699981, 104.000000, "barraHambre");
	TextDrawLetterSize(Textdraws[textdraw_HUD][3], 0.000000, 0.238333);
	TextDrawTextSize(Textdraws[textdraw_HUD][3], 546.730102, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][3], 1);
	TextDrawColor(Textdraws[textdraw_HUD][3], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][3], 0xA50783FF);//1414856922
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][3], 255);
	TextDrawFont(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][3], 0);

	Textdraws[textdraw_HUD][4] = TextDrawCreate(556.000000, 112.000000, "hud:radar_datedrink"); //Icono bebida
	TextDrawLetterSize(Textdraws[textdraw_HUD][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_HUD][4], 9.000000, 10.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][4], 1);
	TextDrawColor(Textdraws[textdraw_HUD][4], -1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][4], 255);
	TextDrawFont(Textdraws[textdraw_HUD][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_HUD][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_HUD][4], 0);

	Textdraws[textdraw_HUD][5] = TextDrawCreate(556.000000, 102.000000, "bordeBarraSed");
	TextDrawLetterSize(Textdraws[textdraw_HUD][5], 0.000000, 0.699999);
	TextDrawTextSize(Textdraws[textdraw_HUD][5], 606.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][5], 1);
	TextDrawColor(Textdraws[textdraw_HUD][5], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][5], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][5], 255);
	TextDrawFont(Textdraws[textdraw_HUD][5], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][5], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][5], 0);

	Textdraws[textdraw_HUD][6] = TextDrawCreate(557.699981, 104.000000, "barraSed");
	TextDrawLetterSize(Textdraws[textdraw_HUD][6], 0.000000, 0.238333);
	TextDrawTextSize(Textdraws[textdraw_HUD][6], 603.730102, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_HUD][6], 1);
	TextDrawColor(Textdraws[textdraw_HUD][6], -1);
	TextDrawUseBox(Textdraws[textdraw_HUD][6], 1);
	TextDrawBoxColor(Textdraws[textdraw_HUD][6], 0x0C8D87FF);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);
	TextDrawSetOutline(Textdraws[textdraw_HUD][6], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][6], 255);
	TextDrawFont(Textdraws[textdraw_HUD][6], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][6], 1);
	TextDrawSetShadow(Textdraws[textdraw_HUD][6], 0);

	Textdraws[textdraw_HUD][7] = TextDrawCreate(638.747924, 1.249984, "Knox City ~w~RP");
	TextDrawLetterSize(Textdraws[textdraw_HUD][7], 0.211926, 1.069298);
	TextDrawTextSize(Textdraws[textdraw_HUD][7], -7.000000, 1.010964);
	TextDrawAlignment(Textdraws[textdraw_HUD][7], 3);
	TextDrawColor(Textdraws[textdraw_HUD][7], -16723969);
	TextDrawSetShadow(Textdraws[textdraw_HUD][7], -257);
	TextDrawSetOutline(Textdraws[textdraw_HUD][7], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_HUD][7], 255);
	TextDrawFont(Textdraws[textdraw_HUD][7], 1);
	TextDrawSetProportional(Textdraws[textdraw_HUD][7], 1);

	Textdraws[textdraw_GPS_MAP][0] = TextDrawCreate(-5.000000, 132.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][0], 0.000000, 22.498472);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][0], 180.130477, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_GPS_MAP][0], 120);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][0], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][0], 0);

	Textdraws[textdraw_GPS_MAP][1] = TextDrawCreate(map_td_X, map_td_Y, "samaps:map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][1], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][1], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][1], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][1], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][1], 0);

	Textdraws[textdraw_GPS_MAP][2] = TextDrawCreate(90.000000, 324.000000, "GPS_-_/mapa");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][2], 0.197330, 1.027553);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][2], 2);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][2], -186);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][2], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][2], 0);

	Textdraws[textdraw_GPS_MAP][3] = TextDrawCreate(map_td_X, map_td_Y, "mdl-1000:lc_map");
	TextDrawLetterSize(Textdraws[textdraw_GPS_MAP][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_GPS_MAP][3], map_td_SIZE_X, map_td_SIZE_Y);
	TextDrawAlignment(Textdraws[textdraw_GPS_MAP][3], 1);
	TextDrawColor(Textdraws[textdraw_GPS_MAP][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_GPS_MAP][3], 255);
	TextDrawFont(Textdraws[textdraw_GPS_MAP][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_GPS_MAP][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_GPS_MAP][3], 0);


	Textdraws[textdraw_PLAYER_REP_BACK][0] = TextDrawCreate(500.000000, 13.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 0.000000, 0.633333);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][0], 605.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][0], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][0], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][0], 0);

	Textdraws[textdraw_PLAYER_REP_BACK][1] = TextDrawCreate(502.000000, 15.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 0.000000, 0.200000);
	TextDrawTextSize(Textdraws[textdraw_PLAYER_REP_BACK][1], 603.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawColor(Textdraws[textdraw_PLAYER_REP_BACK][1], -1);
	TextDrawUseBox(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 5787296);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_PLAYER_REP_BACK][1], 255);
	TextDrawFont(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_PLAYER_REP_BACK][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_PLAYER_REP_BACK][1], 0);

	Textdraws[textdraw_LOAD_SCREEN][0] = TextDrawCreate(319.463470, 73.783164, "box");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 5.970718);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][0], 0.000000, 610.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][0], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][0], -1);
	TextDrawUseBox(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_LOAD_SCREEN][0], -1378296782);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][0], -713359360);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][0], 1);

	Textdraws[textdraw_LOAD_SCREEN][1] = TextDrawCreate(467.127166, 76.000045, "Knox ~p~City");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][1], 1.210067, 5.524159);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][1], 23.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][1], 3);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][1], 0xFF00CFFF);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][1], 1);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][1], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][1], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][1], 1);

	Textdraws[textdraw_LOAD_SCREEN][2] = TextDrawCreate(420.273956, 216.302917, "Knox ~p~City");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][2], 0.837374, 4.182501);
	TextDrawTextSize(Textdraws[textdraw_LOAD_SCREEN][2], 18.000000, 0.000000);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][2], 3);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][2], -16723969);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][2], -1);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][2], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][2], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][2], 1);

	Textdraws[textdraw_LOAD_SCREEN][3] = TextDrawCreate(319.917144, 262.185455, "HAGA CLICK AQUI");
	TextDrawLetterSize(Textdraws[textdraw_LOAD_SCREEN][3], 0.379096, 1.909166);
	TextDrawAlignment(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawColor(Textdraws[textdraw_LOAD_SCREEN][3], -1);
	TextDrawSetShadow(Textdraws[textdraw_LOAD_SCREEN][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawBackgroundColor(Textdraws[textdraw_LOAD_SCREEN][3], 255);
	TextDrawFont(Textdraws[textdraw_LOAD_SCREEN][3], 2);
	TextDrawSetProportional(Textdraws[textdraw_LOAD_SCREEN][3], 1);
	TextDrawSetSelectable(Textdraws[textdraw_LOAD_SCREEN][3], true);

	Textdraws[textdraw_SHOP][0] = TextDrawCreate(320.000000, 120.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][0], 0.000000, 24.936986);
	TextDrawTextSize(Textdraws[textdraw_SHOP][0], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][0], 201);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][0], 0);

	Textdraws[textdraw_SHOP][1] = TextDrawCreate(320.000000, 125.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][1], 0.000000, 23.766672);
	TextDrawTextSize(Textdraws[textdraw_SHOP][1], 0.000000, 254.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][1], 11117257);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][1], 0);

	Textdraws[textdraw_SHOP][2] = TextDrawCreate(207.000000, 128.000000, "Compra_y_venta");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][2], 0.295333, 1.388446);
	TextDrawAlignment(Textdraws[textdraw_SHOP][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP][2], -1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][2], 0);

	Textdraws[textdraw_SHOP][3] = TextDrawCreate(320.000000, 145.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][3], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][3], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][3], 0);

	Textdraws[textdraw_SHOP][4] = TextDrawCreate(320.000000, 301.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP][4], 0.000000, -0.266666);
	TextDrawTextSize(Textdraws[textdraw_SHOP][4], 0.000000, 222.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP][4], 0);


	Textdraws[textdraw_SHOP_ARTICLES_BOX][0] = TextDrawCreate(208.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][0], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][1] = TextDrawCreate(285.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][1], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][2] = TextDrawCreate(362.000000, 148.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][2], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][3] = TextDrawCreate(208.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][3], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][4] = TextDrawCreate(285.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][4], true);

	Textdraws[textdraw_SHOP_ARTICLES_BOX][5] = TextDrawCreate(362.000000, 225.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 70.000000, 70.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_ARTICLES_BOX][5], true);

	Textdraws[textdraw_SHOP_ARTICLE_BOX] = TextDrawCreate(208.000000, 175.000000, "LD_SPAC:white");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0.000000, 0.000000);
	TextDrawTextSize(Textdraws[textdraw_SHOP_ARTICLE_BOX], 100.000000, 100.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_ARTICLE_BOX], 1);
	TextDrawColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_ARTICLE_BOX], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_ARTICLE_BOX], 4);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_ARTICLE_BOX], 0);

	Textdraws[textdraw_TERRITORY_BOX] = TextDrawCreate(320.000000, 355.000000, "-");
	TextDrawLetterSize(Textdraws[textdraw_TERRITORY_BOX], 12.321674, 9.937778);
	TextDrawAlignment(Textdraws[textdraw_TERRITORY_BOX], 2);
	TextDrawColor(Textdraws[textdraw_TERRITORY_BOX], 167);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawSetOutline(Textdraws[textdraw_TERRITORY_BOX], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_TERRITORY_BOX], 255);
	TextDrawFont(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetProportional(Textdraws[textdraw_TERRITORY_BOX], 1);
	TextDrawSetShadow(Textdraws[textdraw_TERRITORY_BOX], 0);

	Textdraws[textdraw_SHOP_TUNING][0] = TextDrawCreate(320.000000, 330.000000, "box");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 6.966667);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][0], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][0], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][0], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][0], 95);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][0], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][0], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][0], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][0], 0);

	Textdraws[textdraw_SHOP_TUNING][1] = TextDrawCreate(320.000000, 330.000000, ""SERVER_SHORT_NAME"_Tuning_Club");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][1], 0.354000, 1.533629);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][1], 0.000000, 152.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][1], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][1], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][1], 10205093);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][1], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][1], 0);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][1], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][1], 0);

	Textdraws[textdraw_SHOP_TUNING][2] = TextDrawCreate(320.000000, 376.000000, "COMPRAR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][2], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][2], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][2], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][2], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][2], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][2], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][2], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][2], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][2], true);

	Textdraws[textdraw_SHOP_TUNING][3] = TextDrawCreate(370.000000, 376.000000, "SIGUIENTE");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][3], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][3], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][3], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][3], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][3], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][3], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][3], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][3], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][3], true);

	Textdraws[textdraw_SHOP_TUNING][4] = TextDrawCreate(270.000000, 376.000000, "ANTERIOR");
	TextDrawLetterSize(Textdraws[textdraw_SHOP_TUNING][4], 0.219666, 1.031703);
	TextDrawTextSize(Textdraws[textdraw_SHOP_TUNING][4], 10.000000, 43.000000);
	TextDrawAlignment(Textdraws[textdraw_SHOP_TUNING][4], 2);
	TextDrawColor(Textdraws[textdraw_SHOP_TUNING][4], -1);
	TextDrawUseBox(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawBoxColor(Textdraws[textdraw_SHOP_TUNING][4], -1936945921);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetOutline(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawBackgroundColor(Textdraws[textdraw_SHOP_TUNING][4], 255);
	TextDrawFont(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetProportional(Textdraws[textdraw_SHOP_TUNING][4], 1);
	TextDrawSetShadow(Textdraws[textdraw_SHOP_TUNING][4], 0);
	TextDrawSetSelectable(Textdraws[textdraw_SHOP_TUNING][4], true);
	return 1;
}

stock DestroyTextDraws()
{
	for(new i; i < sizeof(Textdraws); i++)
	{
		if(Textdraws[Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		TextDrawDestroy(Text:Textdraws[Textdraws_Enum:i]);
		Textdraws[Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnGameModeExit()
{
	print("\n\n\n----> Saliendo\n\n");

	new date[24];
	getDateTime(date);
	for(new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
		{
			format(PI[i][pi_LAST_CONNECTION], 24, "%s", date);
			SavePlayerData(i);
			SavePlayerVehicles(i, false);
			SavePlayerToys(i);
			SavePlayerWeaponsData(i);
			SavePlayerWorkLevels(i);
			PLAYER_TEMP[i][pt_SAVE_ACCOUNT_TIME] = gettime();
		}
	}
	mysql_close(mysql_db);

	forEx(sizeof FerrisWheelObjects,x) DestroyObject(FerrisWheelObjects[x]);
	/*
	for(new i, j = GetPlayerPoolSize(); i <= j; i++) // Cerrar conexión a todos al cerrar el server
	{
		if(IsPlayerConnected(i))
		{
				new BitStream:bs = BS_New();

				BS_WriteValue(
					bs,
					PR_UINT8, 33
				);

				BS_Send(bs, i);
				BS_Delete(bs);
		}
	}
	*/
	return 1;
}

#define MIN_SECONDS_BETWEEN_TALKS 100 // Deben pasar al menos 1 segundos para volver a hablar.
hook OnPlayerText(playerid, text[])
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] || PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL || IsPlayerInWorkTutorial(playerid)) { SendNotification(playerid, "Ahora no puedes hablar."); return 0; }
	if(PLAYER_TEMP[playerid][pt_SPECTANDO] && text[0] != '!' && text[1] != '!' && text[0] != '@')
	{
		SendClientMessage(playerid, COLOR_PRINCIPAL, "·{FFFFFF}Por seguridad, no está permitido hablar dentro del personaje mientras ves a un jugador.");
		SendClientMessage(playerid, COLOR_PRINCIPAL, "·{FFFFFF}Si necesitas hacerlo, usa el comando {4CF5F5}/b [texto]");
		return 0;
	}

	if(text[0] == '@' && PI[playerid][pi_ADMIN_LEVEL] > 1) //&& PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
	{
	  	new string[145];
		format(string, sizeof string, "Chat Administrativo: {90D496}%s (%s): {FFFFFF}%s", PI[playerid][pi_NAME], GetNameRankAdmin(playerid), text[1]);
		SendChatMessageToAdmins(0x90C3D4FF, string);

		format(string, sizeof string, "Chat Administrativo IC: `%s` (%s): %s", PI[playerid][pi_NAME], GetNameRankAdmin(playerid), text[1]);
		FixCharacterString(string);
		DCC_SendChannelMessage(dc_channel[0], string);
		return 0;
	}

	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK]);
	if(interval < MIN_SECONDS_BETWEEN_TALKS)
	{
		if(ac_Info[CHEAT_TEXT_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_TEXT_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_TEXT_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_TEXT_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_TEXT_SPAMMER, float(interval));
					}
				}
			}
		}
		SendNotification(playerid, "Cálmate.");
		return 0;
	}
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_TALK] = GetTickCount();

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME])
	{
		format(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], 24, "%s", text);
		SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Operadora: de acuerdo, describe brevemente lo que sucede para enviar una patrulla.");
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = true;
		return 0;
	}
	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;


		new city[45], zone[45];
		GetPlayerZones(playerid, city, zone);

		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}Reporte {"#SILVER_COLOR"}[%s (%d), gps: %s, %s]: {FFFFFF}%s", PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME_STR], playerid, city, zone, text);
		SendWorkRadioMessage(WORK_POLICE, -1, -1, message);

		SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Operadora: su petición fue enviada, en breve una patrulla acudirá.");
		SendNotification(playerid, "Llamada finalizada.");
		return 0;
	}

	new str_text[190];
	if(text[0] == '!')
	{
		if(PLAYER_WORKS[playerid][WORK_FBI][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_FBI)
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "[Radio] {FFFFFF}(( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[Radio]{FF3F00} %s %s: {FFFFFF}%s", FBI_RANKS[ PLAYER_WORKS[playerid][WORK_FBI][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);

			SendWorkRadioMessage(WORK_FBI, PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO], 0x004791CC, str_text);
			return 0;
		}
		else if(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MECANICO)
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "[Radio] {FFFFFF}(( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[Radio]{FF3F00} %s %s: {FFFFFF}%s", MECANICO_RANKS[ PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);

			SendWorkRadioMessage(WORK_MECANICO, PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO], 0x00FFFFCC, str_text);
			return 0;
		}
		else if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE)
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "[Radio] {FFFFFF}(( %s: %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "[Radio]{FF8C00} %s %s: {FFFFFF}%s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], text[1]);

			SendWorkRadioMessage(WORK_POLICE, PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO], COLOR_POLICE, str_text);
			return 0;
		}
		else if(PI[playerid][pi_CREW])
		{
			if(text[1] == '!') format(str_text, sizeof str_text, "{%06x}[Radio] {FFFFFF}(( %s: %s ))", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], text[2]);
			else format(str_text, sizeof str_text, "{%06x}[Radio] %s %s: {FFFFFF}%s", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], text[1]);

			SendMessageToCrewMembers(PI[playerid][pi_CREW], 0xCCCCCCCC, str_text);
			return 0;
		}
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_STATE_ESTABLISHED)
	{
		format(str_text, 145, "%s dice (por teléfono): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		SendClientMessageEx(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], -1, "{"#SILVER_COLOR"}Teléfono: %s: %s", convertPhoneNumber(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID], PI[playerid][pi_PHONE_NUMBER]), text);
	}
	else
	{
		if(PI[playerid][pi_ACENTO] > 0)
		{
			if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "[Acento %s] %s alcoholizado dice: %s", ListAcentos[ PI[playerid][pi_ACENTO] ], PLAYER_TEMP[playerid][pt_RP_NAME], text);
			else format(str_text, 145, "[Acento %s] %s dice: %s", ListAcentos[ PI[playerid][pi_ACENTO] ], PLAYER_TEMP[playerid][pt_RP_NAME], text);
		}
		else if(GetPlayerDrunkLevel(playerid) > 2000) format(str_text, 145, "%s dice (ebrio): %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		else format(str_text, 145, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], text);
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 15.0, 5000);
	}
	ProxDetector(playerid, 15.0, str_text, COLOR_HABLAR1, COLOR_HABLAR2, COLOR_HABLAR3, COLOR_HABLAR4, COLOR_HABLAR5, 85);
	return 0;
}

CMD:novedades(playerid, params[])
{
	new str[145];
	format(str, sizeof str, "::::::::::::{256DCE} UPDATE "SERVER_WEBSITE" {FFFFFF}::::::::::::\n\
		Ahora las novedades las podrás ver en "VERSION_DATE"");

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{00FFFB}Knox City RP{FFFFFF} - Novedades", str, "Aceptar", "");
	return 1;
}

CMD:discord(playerid, params[])
{
	new str[145];

	format(str, sizeof str, "__________________________________________________\n\
		{9A5DE3}Discord:{FFFFFF} "SERVER_WEBSITE"\n\
		__________________________________________________\n\
		{FFFFFF}Unete!");

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Knox Citys RP- Discord", str, "Aceptar", "");
	SendClientMessage(playerid, -1, ""SERVER_WEBSITE"");
	return 1;
}

CMD:examen(playerid, params[])
{
//	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
//	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_DRIVING_SCHOOL) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, 1773.0845, -1709.0139, 13.5351)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PLAYER_TEMP[playerid][pt_DL_EXAM]) return SendNotification(playerid, "Ya estás en el examen, sal afuera y toma un vehículo para empezar con el examen.");
	if(PI[playerid][pi_DRIVE_LICENSE_POINTS] > 6) return SendNotification(playerid, "Tienes más de 6 puntos del carnet, no te hace falta hacer el examen.");
	if(PI[playerid][pi_CASH] < 500) return SendNotification(playerid, "El examen cuesta ~g~500$~w~.");

	if(QuitarDinero(playerid, 500, false))
	{
		PLAYER_TEMP[playerid][pt_DL_EXAM] = true;
		PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] = 0;
		SendNotification(playerid, "Para comenzar con el examen subete a un vehículo de la autoescuela, están en el aparcamiento.");
	}
	return 1;
}

CMD:bebida(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CLUB) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE)
	{
		if(PI[playerid][pi_CASH] < 50) return SendNotification(playerid, "La bebida cuesta ~g~50$~w~.");

		if(QuitarDinero(playerid, 50, false)) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	}
	return 1;
}

//dudas
#define MIN_TIME_BETWEEN_DOUBT	60
#define IP_SPAM_MUTE_TIME		5 //minutos

//twitter
#define MIN_TIME_BETWEEN_DOUBT_TW	60
#define IP_SPAM_MUTE_TIME_TW		5 //minutos

CMD:duda(playerid, params[])
{
	if(!PI[playerid][pi_DOUBT_CHANNEL]) return SendNotification(playerid, "Para enviar una duda primero debes activar el canal de dudas con ~g~/dudas");
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/duda [DUDA]");
	if(PI[playerid][pi_MUTE] > gettime()) return SendFormatNotification(playerid, "Estás silenciado en el canal de dudas por ~r~%s minutos~w~.", TimeConvert(PI[playerid][pi_MUTE] - gettime()));
	if(!PI[playerid][pi_ADMIN_LEVEL])
	{
		if(gettime() < PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] + MIN_TIME_BETWEEN_DOUBT) return
			SendFormatNotification(playerid, "Tienes que esperar ~r~%s minutos ~w~para volver a realizar otra consulta.", TimeConvert((MIN_TIME_BETWEEN_DOUBT-(gettime()-PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME]))));
	}
 	SendMessageToDoubtChannel(playerid, params);
	return 1;
}

CMD:dudas(playerid, params[])
{
	if(PI[playerid][pi_DOUBT_CHANNEL])
	{
		PI[playerid][pi_DOUBT_CHANNEL] = false;
		SendNotification(playerid, "Canal de dudas ~r~deshabilitado~w~.");
	}
	else
	{
		PI[playerid][pi_DOUBT_CHANNEL] = true;
		SendNotification(playerid, "Canal de dudas ~r~habilitado~w~.");
	}
	return 1;
}

CMD:g(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/gritar [TEXTO]");

	new str_text[190];
	format(str_text, 190, "%s grita: ¡%s!", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 25.0, str_text, COLOR_HABLAR1, COLOR_HABLAR2, COLOR_HABLAR3, COLOR_HABLAR4, COLOR_HABLAR5, 85);
	if(strlen(str_text) < 190) SetPlayerChatBubble(playerid, str_text, COLOR_WHITE, 60.0, 5000);
	return 1;
}
alias:g("gritar");

CMD:s(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/susurrar [TEXTO]");

	new str_text[190];
	format(str_text, sizeof(str_text), "%s susurra: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 5.0, str_text, COLOR_HABLAR1, COLOR_HABLAR2, COLOR_HABLAR3, COLOR_HABLAR4, COLOR_HABLAR5, 85);
	return 1;
}
alias:s("susurrar");

CMD:decir(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/decir [TEXTO]");

	new str_text[190];
	format(str_text, 145, "%s dice: %s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_HABLAR1, COLOR_HABLAR2, COLOR_HABLAR3, COLOR_HABLAR4, COLOR_HABLAR5, 85);
	SetPlayerChatBubble(playerid, str_text, COLOR_WHITE, 15.0, 5000);
	return 1;
}


CMD:b(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/b [TEXTO]");

	new str_text[190];
	format(str_text, sizeof(str_text), "ID: %d | %s: (( %s ))", playerid, PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, COLOR_HABLAR1, COLOR_HABLAR2, COLOR_HABLAR3, COLOR_HABLAR4, COLOR_HABLAR5, 85);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/do [TEXTO]");

	new str_text[190];
	format(str_text, sizeof(str_text), "* %s (( %s ))", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 15.0, str_text, 0x28E4E7FF, 0x28E4E7FF, 0x28E4E7FF, 0x28E4E7FF, 0x28E4E7FF, 85);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/me [TEXTO]");

	SendPlayerAction(playerid, params);
	return 1;
}
alias:me("y");

CMD:experiencia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowPlayerSkills(playerid, playerid);
	return 1;
}
alias:experiencia("exp", "skills");

CMD:est(playerid, params[])
{
	ShowPlayerStats(playerid, playerid);
	return 1;
}
alias:est("estadisticas", "cuenta");

CMD:web(playerid, params[])
{
	SendClientMessage(playerid, -1, "Web: {a7f442}"SERVER_WEBSITE"");
	return 1;
}

CMD:csave(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] + 30) return 
		SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a guardar tus datos.", TimeConvert((30-(gettime()-PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME]))));

	SavePlayerData(playerid);
	SavePlayerVehicles(playerid, false);
	SavePlayerToys(playerid);
	SavePlayerWeaponsData(playerid);
	SavePlayerWorkLevels(playerid);
	PLAYER_TEMP[playerid][pt_SAVE_ACCOUNT_TIME] = gettime();

	SendNotification(playerid, "Datos de la cuenta guardados.");
	return 1;
}

CMD:ayuda(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<general>: ShowDialog(playerid, DIALOG_HELP_GENERAL);
		case _I<informacion>: ShowDialog(playerid, DIALOG_HELP_INFO);
		case _I<personaje>: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
		case _I<propiedades>: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
		case _I<reportar>: ShowDialog(playerid, DIALOG_HELP_REPORT);
		case _I<trabajos>: ShowDialog(playerid, DIALOG_HELP_WORKS);
		case _I<vehiculos>: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
		case _I<bandas>: ShowDialog(playerid, DIALOG_HELP_CREWS);
		case _I<vip>: ShowDialog(playerid, DIALOG_HELP_VIPS);

		default: ShowDialog(playerid, DIALOG_HELP);
	}
	return 1;
}

CMD:accesorios(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_TOYS);
	return 1;
}
alias:accesorios("prendas");

CMD:armas(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
	return 1;
}

CMD:ropa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");

	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	SetPlayerPosEx(playerid, 257.251373, -40.797775, 1002.023437, 135.0, 14, playerid + MAX_PLAYERS, false); // World = Playerid + Max_players
	TogglePlayerControllableEx(playerid, false);

	SetPlayerCameraPos(playerid, 254.988632, -43.060516, 1002.9131);
	SetPlayerCameraLookAt(playerid, 257.251373, -40.797775, 1002.023437);

	UpdateClothingShop(playerid);
	ShowClothingShopTextdraws(playerid);

	SendNotification(playerid, "Pulsa ~r~'ESCAPE' ~w~para dejar de probarte ropa.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:toys(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new shop = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(shop == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[shop][clothing_shop_X], Clothing_Shop_Positions[shop][clothing_shop_Y], Clothing_Shop_Positions[shop][clothing_shop_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = true;

	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);
	TogglePlayerControllableEx(playerid, false);

	UpdateToysShop(playerid);
	ShowToysShopTextdraws(playerid);

	SendNotification(playerid, "Pulsa ~r~'ESCAPE' ~w~para salir del menú.");
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

CMD:pedir(playerid, params[])
{
	new index = GetPlayerFastFoodIndex(playerid);
	if(index == -10) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(Fast_Food_Positions[index][fast_food_INTERIOR_TYPE])
	{
		case INTERIOR_BURGER_SHOT: ShowDialog(playerid, DIALOG_FOOD_BURGER);
		case INTERIOR_PIZZA: ShowDialog(playerid, DIALOG_FOOD_PIZZA);
		case INTERIOR_CLUCKIN_BELL: ShowDialog(playerid, DIALOG_FOOD_CLUCKIN);
		case -1: ShowDialog(playerid, DIALOG_FOOD_BURGER);
	}
	return 1;
}

CMD:productos(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_247) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	ShowDialog(playerid, DIALOG_247_LIST);
	return 1;
}

CMD:mercado(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2119.059814, -2001.701904, 7.984375)) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "{E0BA9B}Miguel{BD3939}: {E0E0E0}Fuera no eres bienvenido aquí{BD3939}.");
	ShowDialog(playerid, DIALOG_BLACK_MARKET);
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No puedes usar el gps sin ningun télefono.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");

	Auto_SendPlayerAction(playerid, "mira su GPS.");
	ShowDialog(playerid, DIALOG_PLAYER_GPS);
	return 1;
}

CMD:tiempo(playerid, params[])
{
	new to_player;
	if(!sscanf(params, "u", to_player) && PI[playerid][pi_ADMIN_LEVEL] > 2)
	{
		if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
		if(PI[to_player][pi_STATE] == ROLEPLAY_STATE_JAIL)
		{
			new time = GetTimeJail(to_player);
			SendClientMessageEx(playerid, -1, "{"#SILVER_COLOR"}Le quedan %s minutos de condena a %s.", TimeConvert(time), PLAYER_TEMP[to_player][pt_RP_NAME]);
			return 1;
		}
		else SendNotification(playerid, "Este jugador no está en la carcel.");
	}
	else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = GetTimeJail(playerid);
		SendClientMessageEx(playerid, -1, "{"#SILVER_COLOR"}Te quedan %s minutos de condena.", TimeConvert(time));
	}
	else SendNotification(playerid, "No estás en la cárcel.");
	return 1;
}

GetTimeJail(playerid)
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
	{
		new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
		if(time <= 0)
		{
			UnjailPlayer(playerid);
			return 1;
		}
		return time;
	}
	return -1;
}

CMD:mapa(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No puedes usar el mapa sin ningun télefono.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");

	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE]) { HidePlayeriPhone(playerid); HidePlayeriPhoneApps(playerid); }
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	else ShowPlayerGpsMap(playerid);
	return 1;
}

CMD:stop(playerid, params[])
{
	PLAYER_TEMP[playerid][pt_MUSIC_PLAYER] = 0;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:pass(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_PASSWORD);
	return 1;
}
alias:pass("contra", "cpass");

CMD:gcp(playerid, params[])
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;

		SendNotification(playerid, "Has cancelado la ruta antigua de tu GPS.");
	}
	else SendNotification(playerid, "No tienes ningún punto marcado en tu GPS.");
	return 1;
}
alias:gcp("borrarcp", "cpborrar");
CMD:movil(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) SendFormatNotification(playerid, "Estás en una llamada.");

	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);

	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON) PLAYER_TEMP[playerid][pt_LOCK_IPHONE] = true;
	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE]) { HidePlayeriPhone(playerid); HidePlayeriPhoneApps(playerid); }
	else ShowPlayeriPhone(playerid);
	return 1;
}
alias:movil("celular", "telefono", "tlf", "iphone", "i");

CMD:minumero(playerid, params[])
{
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	SendClientMessageEx(playerid, -1, "Tu número de teléfono es: {DBED15}%d", PI[playerid][pi_PHONE_NUMBER]);
	return 1;
}

CMD:guia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_RESOLVER]) return SendNotification(playerid, "No tienes una guía telefónica, puedes ir a cualquier 24/7 para comprar una.");

	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/guia [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "Jugador desconectado.");

	if(!PI[params[0]][pi_PHONE_NUMBER]) return SendNotification(playerid, "Este jugador no tiene teléfono.");
	if(!PI[params[0]][pi_PHONE_VISIBLE_NUMBER]) return SendNotification(playerid, "Este jugador ha decidido no mostrar su número en la guía.");

	SendFormatNotification(playerid, "Persona encontrada:~n~~n~~b~Nombre: ~w~%s~n~~b~Teléfono: ~w~%d.", PLAYER_TEMP[params[0]][pt_RP_NAME], PI[params[0]][pi_PHONE_NUMBER]);
	return 1;
}

CMD:sguia(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_VISIBLE_NUMBER])
	{
		PI[playerid][pi_PHONE_VISIBLE_NUMBER] = false;
		SendNotification(playerid, "Tu número no aparecerá ahora en la guía telefónica.");
	}
	else
	{
		PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;
		SendNotification(playerid, "Tu número aparecerá en la guía telefónica.");
	}
	return 1;
}

CMD:sms(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "Estás en una llamada.");

	new params_message[64], params_number, params_contact[24];
	if(!sscanf(params, "ds[64]", params_number, params_message))
	{
		if(params_number <= 0) SendNotification(playerid, "El número destino no es válido.");
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new id, connected, pid;
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 0);
						else RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 1);
						if(connected)
						{
							if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessageEx(pid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]), params_message);
							}
						}
						SendFormatNotification(playerid, "WhatsApp enviado a ~b~%s~w~.", convertPhoneNumber(playerid, params_number));
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneChecked);
		}
	}
	else if(!sscanf(params, "s[24]s[64]", params_contact, params_message))
	{
		inline OnPhoneChecked()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					new number, id, connected, pid, bool:isnull_id;
					cache_is_value_name_null(0, "id", isnull_id);
					if(!isnull_id)
					{
						cache_get_value_name_int(0, "number", number);
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);

						if(connected) RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 0);
						else RegisterPhoneMessage(PI[playerid][pi_ID], id, params_message, 1);

						if(connected)
						{
							if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_ON)
							{
								SendClientMessageEx(pid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]), params_message);
							}
						}
						SendFormatNotification(playerid, "WhatsApp enviado a ~b~%s~w~.", convertPhoneNumber(playerid, number));
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
				else SendNotification(playerid, "El número destino no es válido.");
			}
		}
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", PI[playerid][pi_ID], params_contact);
		mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneChecked);
	}
	else SendNotification(playerid, "Usa /sms [numero o contacto]");
	return 1;
}

CMD:agenda(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "Estás en una llamada.");

	ShowDialog(playerid, DIALOG_PHONE_BOOK);
	return 1;
}

CMD:tienda(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");

	ShowPlayerShop(playerid);
	return 1;
}

HandleStaticPhoneNumbers(playerid, call_number)
{
	switch(call_number)
	{
		case 911: //Policía
		{
			if(PI[playerid][pi_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para llamar a la policía.");
			if(CountPlayersJobOnDuty(WORK_POLICE) > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
				PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = true;
				PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;

				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Operadora: ha llamado a la central de policía, indícanos su nombre por favor.");
			}
			else SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No hay policías en servicio, llame más tarde.");
			return 1;
		}
		case 450: //Taxi
		{
			if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerJobMark(playerid, WORK_TAXI);
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Has cancelado el taxi.");
			}
			else
			{
				if(CountPlayersJobOnDuty(WORK_TAXI) > 0)
				{
					PLAYER_TEMP[playerid][pt_WANT_TAXI] = true;
					SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Tu llamada se ha enviado a los taxistas disponibles, espera a que llegue un taxi.");
					SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Vuelve a llamar a este número si ya no necesitas un taxi.");
					SendAlertToTaxiDrivers(playerid);
				}
				else SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No hay ningún taxista en servicio, llame más tarde.");
			}
			return 1;
		}
		case 570: //Mecánico
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MECANICO])
			{
				PLAYER_TEMP[playerid][pt_WANT_MECANICO] = false;
				DisablePlayerJobMark(playerid, WORK_MECANICO);
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}El mecánico que habías solicitado ha sido cancelado.");
			}
			else
			{
				if(CountPlayersJobOnDuty(WORK_MECANICO) > 0)
				{
					PLAYER_TEMP[playerid][pt_WANT_MECANICO] = true;
					SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Tu llamada se ha enviado a los mecánicos disponibles, espera a que llegue un mecánico.");
					SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Vuelve a llamar a este número si ya no necesitas un mecánico.");
					SendAlertToMechanic(playerid);
				}
				else SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No hay ningún mecánico en servicio, llame más tarde.");
			}
			return 1;
		}
		case 151: //Médico
		{
			if(PLAYER_TEMP[playerid][pt_WANT_MEDIC])
			{
				PLAYER_TEMP[playerid][pt_WANT_MEDIC] = false;
				DisablePlayerJobMark(playerid, WORK_MEDIC);
				SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Has cancelado el médico");
			}
			else
			{
				if(CountPlayersJobOnDuty(WORK_MEDIC) > 0)
				{
					PLAYER_TEMP[playerid][pt_WANT_MEDIC] = true;
					SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Tu llamada se ha enviado a los médicos disponibles, espera a que llegue una ambulancia");
					SendNotification(playerid, "Vuelve a llamar a este número si ya no necesitas un médico");
					SendAlertToMedics(playerid);
				}
				else SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No hay ningún médico en servicio, llame más tarde");
			}
			return 1;
		}
		case 6740:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}No vuelvas a llamar al banco, cuidado.");
			return 1;
		}
		case 38350:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Aseguradora que asegura tus vehículos de mierda.");
			return 1;
		}
		case 666:
		{
			SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}Mirar a las estrellas es mirar al pasado, no mires.");
			return 1;
		}
	}
	return 0;
}

CMD:llamar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "Estás en una llamada.");

	new params_number, params_contact[24];
	if(!sscanf(params, "d", params_number))
	{
		if(params_number <= 0) SendNotification(playerid, "El número destino no es válido.");
		else
		{
			if(!HandleStaticPhoneNumbers(playerid, params_number))
			{
				inline OnPhoneChecked()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new id, connected, pid;
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);

							if(!connected) SendNotification(playerid, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendNotification(playerid, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PLAYER_TEMP[pid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "El número al que intentas llamar está en otra llamada.");

								SendFormatNotification(pid, "~b~[Llamada entrante] ~w~%s te está llamando, para responser usa ~b~/responder ~w~o ~b~/colgar~w~.", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]));
								PLAYER_TEMP[pid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
								PlayerPlaySoundEx(playerid, 20804, 0.0, 0.0, 0.0);

								SendFormatNotification(playerid, "Llamando a ~b~%s~w~...", convertPhoneNumber(playerid, params_number));
								PLAYER_TEMP[playerid][pt_TIMERS][5] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendNotification(playerid, "El número destino no es válido.");
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, connected, playerid FROM player WHERE phone_number = %d;", params_number);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneChecked);
			}
		}
	}
	else if(!sscanf(params, "s[24]", params_contact))
	{
		if(!strcmp(params_contact, "policia", true)) HandleStaticPhoneNumbers(playerid, 911);
		else if(!strcmp(params_contact, "taxi", true)) HandleStaticPhoneNumbers(playerid, 450);
		else if(!strcmp(params_contact, "mecanico", true)) HandleStaticPhoneNumbers(playerid, 570);
		else if(!strcmp(params_contact, "medico", true)) HandleStaticPhoneNumbers(playerid, 151);
		else
		{
			inline OnPhoneChecked()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new number, id, connected, pid, bool:isnull_id;
						cache_is_value_name_null(0, "id", isnull_id);
						if(!isnull_id)
						{
							cache_get_value_name_int(0, "number", number);
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);

							if(!connected) SendNotification(playerid, "El número al que intentas llamar está fuera de cobertura (desconectado).");
							else
							{
								if(pid == playerid) return SendNotification(playerid, "El número al que intentas llamar es el tuyo.");
								if(PI[pid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "El número al que intentas llamar está apagado o fuera de cobertura.");
								if(PLAYER_TEMP[pid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "El número al que intentas llamar está en otra llamada.");

								SendFormatNotification(pid, "~b~[Llamada entrante] ~w~%s te está llamando, para responser usa ~b~/responder ~w~o ~b~/colgar~w~.", convertPhoneNumber(pid, PI[playerid][pi_PHONE_NUMBER]));
								PLAYER_TEMP[pid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_INCOMING_CALL;
								PLAYER_TEMP[pid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;

								SendFormatNotification(playerid, "Llamando a ~b~%s~w~...", convertPhoneNumber(playerid, number));
								PLAYER_TEMP[playerid][pt_TIMERS][5] = SetTimerEx("NoCallResponse", 15000, false, "i", playerid);
								PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_WAITING_RESPONSE;
								PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = pid;
								PlayerPlaySoundEx(playerid, 3600, 0.0, 0.0, 0.0);
							}
						}
						else SendNotification(playerid, "El número destino no es válido.");
					}
					else SendNotification(playerid, "El número destino no es válido.");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pbook.number, player.id, player.connected, player.playerid FROM pbook LEFT JOIN player ON pbook.number = player.phone_number WHERE pbook.id_player = %d AND pbook.name LIKE '%%%e%%' LIMIT 1;", PI[playerid][pi_ID], params_contact);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneChecked);
		}
	}
	else SendNotification(playerid, "Usa /llamar [numero o contacto]");
	return 1;
}

CMD:responder(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(!PI[playerid][pi_PHONE_NUMBER]) return SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");

	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_INCOMING_CALL) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");

	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];

	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = to_playerid;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][5]);
	PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = true;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_STATE_ESTABLISHED;
	PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = playerid;
	SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_USECELLPHONE);

	SendNotification(playerid, "Llamada establecida, usa ~r~/colgar ~w~para terminarla.");
	SendNotification(to_playerid, "Llamada establecida, usa ~r~/colgar ~w~para terminarla.");
	return 1;
}

CMD:colgar(playerid, params[])
{
	if(!PI[playerid][pi_PHONE_NUMBER])
	{
		SendNotification(playerid, "No tienes ningún teléfono, puedes ir a cualquier 24/7 para comprar uno.");
		return 1;
	}
	if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendFormatNotification(playerid, "Tu teléfono está apagado, para encenderlo usa /movil.");

	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		SendNotification(playerid, "~r~Llamada finalizada~w~.");
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return SendFormatNotification(playerid, "No hay ninguna llamada entrante.");

	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "Colgaste.");
		}
		case CALL_STATE_INCOMING_CALL:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "No has respondido la llamada.");
		}
		case CALL_STATE_ESTABLISHED:
		{
			EndPhoneCall(playerid);
			SendNotification(playerid, "~r~Llamada finalizada~w~.");
		}
		default: SendFormatNotification(playerid, "No estás en ninguna llamada.");
	}
	return 1;
}

CMD:panel(playerid, params[])
{
	ShowDialog(playerid, DIALOG_PLAYER_CONFIG);
	return 1;
}
alias:panel("config", "configuracion", "ajustes");

CMD:darcasa(playerid, params[])
{
	new to_player, casa_id;
	if(sscanf(params, "ud", to_player, casa_id)) return SendNotification(playerid, "~r~Modo de uso: ~w~/darcasa <PlayerID> <casaID>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(casa_id <= 0) return SendNotification(playerid, "Error: casaID no es válida.");

	new index = GetPropertyIndexByID(casa_id);
	if(index == -1) return SendNotification(playerid, "Error: casaID no es válida.");

	if(PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Esta propiedad ya está vendida.");

	PLAYER_TEMP[to_player][pt_BUY_HOUSE_INDEX] = index;
	ShowDialog(to_player, DIALOG_CONFIRM_BUY_PROPERTY);
	return 1;
}

CMD:comprarcasa(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new site_index = GetBuyPropertySiteIndexByIntTyp(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(site_index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, BUY_PROPERTIES_SITES[site_index][site_X], BUY_PROPERTIES_SITES[site_index][site_Y], BUY_PROPERTIES_SITES[site_index][site_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No puedes comprar una casa sin tener cuenta bancaria.");

	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/comprarcasa [ID]");
	if(params[0] <= 0) return SendNotification(playerid, "Error: ID no es válida.");

	new player_properties = CountPlayerProperties(playerid);
	if(player_properties >= MAX_SU2_PROPERTIES) return SendNotification(playerid, "No puedes comprar más propiedades.");
	if(PI[playerid][pi_VIP] == 1)
	{
		if(player_properties >= MAX_SU_PROPERTIES) return SendFormatNotification(playerid, "No puedes comprar más propiedades, puedes adquirir ~y~ VIP2 para tener hasta %d propiedades.", MAX_SU2_PROPERTIES);
	}
	else
	{
		if(player_properties >= MAX_NU_PROPERTIES)
		{
			SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d propiedades! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_PROPERTIES);
			SendNotification(playerid, "No puedes comprar más propiedades.");
			return 1;
		}
	}

	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendNotification(playerid, "Error: ID no es válida.");

	if(PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Esta propiedad ya está vendida.");
	if(PROPERTY_INFO[index][property_LEVEL] > PI[playerid][pi_LEVEL]) return SendFormatNotification(playerid, "Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[index][property_LEVEL]);
	if(PROPERTY_INFO[index][property_VIP_LEVEL] > PI[playerid][pi_VIP]) return SendFormatNotification(playerid, "Necesitas membresía VIP (%d) para comprar esta propiedad.", PROPERTY_INFO[index][property_VIP_LEVEL]);
	if(PROPERTY_INFO[index][property_EXTRA] > PI[playerid][pi_COINS]) return SendFormatNotification(playerid, "Necesitas %d "SERVER_COIN" para comprar esta propiedad.", PROPERTY_INFO[index][property_EXTRA]);
	if(PI[playerid][pi_BANK_MONEY] >= PROPERTY_INFO[index][property_PRICE])
	{
		PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] = index;
		ShowDialog(playerid, DIALOG_CONFIRM_BUY_PROPERTY);
	}
	else SendFormatNotification(playerid, "No tienes fondos suficientes en tu cuenta, te faltan ~r~%s dólares ~w~para poder comprar esta propiedad.", number_format_thousand(PROPERTY_INFO[index][property_PRICE] - PI[playerid][pi_BANK_MONEY]));
	return 1;
}

GetPropertyIndexByID(id)
{
	for(new i = 0; i != MAX_PROPIEDADES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) continue;
		if(PROPERTY_INFO[i][property_ID] == id) return i;
	}
	return -1;
}

GetGarajeIndexByID(id)
{
	for(new i = 0; i != MAX_PROPIEDADES; i ++)
	{
		if(!GARAJE_INFO[i][garaje_VALID]) continue;
		if(GARAJE_INFO[i][garaje_ID] == id) return i;
	}
	return -1;
}

CMD:banco(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return SendNotification(playerid, "No estás en el lugar adecuado.");


	new index = GetBankLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
	if(index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][pi_BANK_ACCOUNT] == 0) // no tiene cuenta bancaria
	{
		ShowDialog(playerid, DIALOG_CREATE_BANK_ACCOUNT);
		return 1;
	}
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new info[3];
	new Float:pos[3];

	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info[0]);
	if(info[0] != PICKUP_TYPE_ATM) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No tienes cuenta bancaria, puedes crearla en cualquier Banco.");

	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = true;
	ShowDialog(playerid, DIALOG_BANK);
	return 1;
}

CMD:alimentos(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	ShowDialog(playerid, DIALOG_PLAYER_POCKET);
	return 1;
}

#define TIME_BETWEEN_GIVE_CASH	30 // segundos
CMD:dar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 3) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");

	new option[24], to_playerid, extra;
	if(sscanf(params, "s[24]ud", option, to_playerid, extra)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man dar.");

	if(!IsPlayerConnected(to_playerid)) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes darle nada a este jugador ahora.");

	switch(YHash(option, false))
	{
		case _I<dinero>:
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] + TIME_BETWEEN_GIVE_CASH)
			{
				new time = TIME_BETWEEN_GIVE_CASH - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME]);
				SendFormatNotification(playerid, "Debes de esperar %s minutos para volver a dar dinero.", TimeConvert(time));
				return 1;
			}

			if(extra < 0 || extra > PI[playerid][pi_CASH]) return SendNotification(playerid, "Cantidad de dinero incorrecta.");
			if(extra > 50000) return SendNotification(playerid, "Para dar tanto dinero tienes que hacerlo a través de transferencias bancarias.");

			if(GivePlayerCash(playerid, -extra, true, true) && GivePlayerCash(to_playerid, extra, true, false))
			{
				SendFormatNotification(playerid, "Le has dado ~g~%s dólares~w~ a %s.", number_format_thousand(extra), PLAYER_TEMP[to_playerid][pt_RP_NAME]);
				SendFormatNotification(to_playerid, "%s te ha dado ~g~%s dólares~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(extra));

				new action[64];
				format(action, sizeof action, "le da dinero a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
				PLAYER_TEMP[playerid][pt_LAST_GIVE_MONEY_TIME] = gettime();
			}
		}
		case _I<alimento>:
		{
			if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendNotification(playerid, "~r~Modo de uso: ~w~/dar alimento [ID o Nombre] [Slot /alimentos]");

			extra --;

			if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");

			new to_player_slot = GetEmptyPlayerPocketSlot(to_playerid);
			if(to_player_slot == -1)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "El jugador no tiene más espacio entre sus alimentos.");
				return 1;
			}

			new action[64];
			format(action, sizeof action, "le da su %s a %s.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);

			TransferPlayerPocketObject(playerid, extra, to_playerid, to_player_slot);
		}
		case _I<medicamentos>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MEDICINE] -= extra;
			PI[to_playerid][pi_MEDICINE] += extra;

			SendFormatNotification(playerid, "Le has dado ~g~%d gramos~w~ de medicamentos a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado ~g~%d gramos~w~ de medicamentos.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<marihuana>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_CANNABIS] -= extra;
			PI[to_playerid][pi_CANNABIS] += extra;

			SendFormatNotification(playerid, "Le has dado %dg de marihuana a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %dg de marihuana.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<crack>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_CRACK] -= extra;
			PI[to_playerid][pi_CRACK] += extra;

			SendFormatNotification(playerid, "Le has dado ~g~%d gramos~w~ de crack a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado ~g~%d gramos~w~ de crack.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<arma>:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Los policías no pueden dar armas.");
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/dar arma [ID o Nombre] [Slot /armas]");

			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendNotification(playerid, "No tienes ningún arma en ese slot.");

			if(PI[to_playerid][pi_LEVEL] < 2) return SendNotification(playerid, "La otra persona tiene que ser al menos nivel 2.");
			if(PLAYER_WEAPONS[to_playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "El jugador ya tiene un arma en ese slot.");
				return 1;
			}

			SendFormatNotification(playerid, "~w~Le has dado tu ~g~'%s'~w~ a %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado su ~g~'%s'~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

			new action[64];
			format(action, sizeof action, "le da un arma a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);

			TransferPlayerWeapon(playerid, extra, to_playerid);
		}
		case _I<kit>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MECANICO_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MECANICO_KITS] -= extra;
			PI[to_playerid][pi_MECANICO_KITS] += extra;

			SendFormatNotification(playerid, "Le has dado %d kits de reparación a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %d kits de reparación.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		case _I<botiquin>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICAL_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MEDICAL_KITS] -= extra;
			PI[to_playerid][pi_MEDICAL_KITS] += extra;

			SendFormatNotification(playerid, "Le has dado %d botiquines a %s.", extra, PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			SendFormatNotification(to_playerid, "%s te ha dado %d botiquines.", PLAYER_TEMP[playerid][pt_RP_NAME], extra);

			new action[64];
			format(action, sizeof action, "le da algo a %s.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			Auto_SendPlayerAction(playerid, action);
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man dar~w~.");
	}
	return 1;
}

CMD:vender(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");

	new option[24], to_playerid, extra, price;
	if(sscanf(params, "s[24]udd", option, to_playerid, extra, price)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man vender~w~.");

	if(price <= 0 || price > 10000000) return SendNotification(playerid, "El precio no es válido.");
	if(!IsPlayerConnected(to_playerid)) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_playerid, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes venderle nada a este jugador ahora.");

	if(price > PI[to_playerid][pi_CASH])
	{
		SendNotification(playerid, "Esta persona no tiene el dinero que pides.");
		return 1;
	}

	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_PID] = playerid;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_AID] = PI[playerid][pi_ID];
	PLAYER_TEMP[to_playerid][pt_TRICK_PRICE] = price;
	PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] = extra;
	PLAYER_TEMP[to_playerid][pt_TRICK_TIME] = gettime();

	switch(YHash(option, false))
	{
		case _I<alimento>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 1 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > MAX_PLAYER_POCKET_OBJECTS) return SendNotification(playerid, "~r~Modo de uso: ~w~/vender alimento [ID o Nombre] [Slot /alimentos] [precio]");
			PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] --;

			if(!PLAYER_POCKET[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_FOOD);
		}
		case _I<medicamentos>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_MEDICINE);
		}
		case _I<marihuana>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CANNABIS);
		}
		case _I<crack>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_CRACK);
		}
		case _I<arma>:
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Los policías no pueden vender armas.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] < 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "Error en slot de /armas.");

			if(!PLAYER_WEAPONS[playerid][ PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID]) return SendNotification(playerid, "No tienes ningún arma en ese slot.");

			if(PI[to_playerid][pi_LEVEL] < 2) return SendNotification(playerid, "La otra persona tiene que ser al menos nivel 2.");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_WEAPON);
		}
		case _I<coins>:
		{
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] <= 0 || PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(PLAYER_TEMP[to_playerid][pt_TRICK_SELLER_EXTRA] > PI[playerid][pi_COINS]) return SendNotification(playerid, "No tienes esa cantidad de "SERVER_COIN".");

			SendFormatNotification(playerid, "Le has ofrecido una venta a ~g~%s~w~, espera a ver si la acepta.", PLAYER_TEMP[to_playerid][pt_RP_NAME]);
			ShowDialog(to_playerid, DIALOG_TRICKS_SU);
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man vender~w~.");
	}
	return 1;
}

CMD:consumir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	new option[24], slot;
	if(!sscanf(params, "s[24]d", option, slot))
	{
		if(!strcmp(option, "alimento", true))
		{
			if(slot < 1 || slot > MAX_PLAYER_POCKET_OBJECTS) return SendFormatNotification(playerid, "~r~Modo de uso: ~w~/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);

			slot --;

			if(!PLAYER_POCKET[playerid][slot][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");
			if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendNotification(playerid, "¿Es que quieres reventar?");

			Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST]);
			GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);

			new action[64];
			format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][slot][player_pocket_object_NAME]);
			Auto_SendPlayerAction(playerid, action);

			DeletePlayerPocketObject(playerid, slot);

			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
		}
		else SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
	}
	else if(!sscanf(params, "s[24]", option))
	{
		switch(YHash(option, false))
		{
			case _I<medicamento>:
			{
				if(PI[playerid][pi_MEDICINE] <= 0) return SendNotification(playerid, "No tienes medicamentos.");
				if(PLAYER_TEMP[playerid][pt_COMBAT] >= true) return SendNotification(playerid, "No puedes consumir estando en combate.");
	  			if(PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir medicamentos", PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] - gettime());

				PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICINE] = gettime() + 30;
				PI[playerid][pi_MEDICINE] --;
				GivePlayerHealthEx(playerid, 15.0);
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				Auto_SendPlayerAction(playerid, "se toma un medicamento.");
			}
			case _I<crack>:
			{
				if(PI[playerid][pi_CRACK] <= 0) return SendNotification(playerid, "No tienes crack.");
				if(PLAYER_TEMP[playerid][pt_COMBAT] >= true) return SendNotification(playerid, "No puedes consumir estando en combate.");
				if(PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir crack", PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] - gettime());

				PLAYER_TEMP[playerid][pt_COOLDOWN_CRACK] = gettime() + 30;
				PI[playerid][pi_CRACK] --;
				GivePlayerArmourEx(playerid, 20.0);
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
				Auto_SendPlayerAction(playerid, "consume crack.");
				GivePlayerDrunkLevel(playerid, 2000);
			}
			case _I<marihuana>:
			{
				if(PI[playerid][pi_CANNABIS] <= 0) return SendNotification(playerid, "No tienes marihuana.");
				if(PLAYER_TEMP[playerid][pt_COMBAT] >= true) return SendNotification(playerid, "No puedes consumir estando en combate.");
				if(PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] > gettime()) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder consumir marihuana", PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] - gettime());

				PLAYER_TEMP[playerid][pt_COOLDOWN_WEED] = gettime() + 30;

				PI[playerid][pi_CANNABIS] --;
				GivePlayerHealthEx(playerid, 80.0);
				GivePlayerArmourEx(playerid, 10.0);
				Auto_SendPlayerAction(playerid, "consume marihuana.");
				GivePlayerDrunkLevel(playerid, 3000);
				ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
				ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 5000);
			}
			case _I<alimento>: SendFormatNotification(playerid, "~r~Modo de uso: ~w~/consumir alimento [SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);

			default: SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
		}
	}
	else SendNotification(playerid, "~r~Modo de uso: ~w~/consumir [medicamento - marihuana - crack - alimento]");
	return 1;
}

CMD:man(playerid, params[])
{
	switch(YHash(params, false))
	{
		case _I<dar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,

					"Manual",
						"\
							Comando: dar\n\
							Sintaxis: dar <opcion> <playerid o nombre> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <playerid o nombre> <slot de /armas>\n\
							    - dinero <playerid o nombre> <cantidad>\n\
							    - alimento <playerid o nombre> <slot de /alimentos>\n\
							    - medicamentos <playerid o nombre> <cantidad>\n\
							    - marihuana <playerid o nombre> <cantidad>\n\
							    - crack <playerid o nombre> <cantidad>\n\
							    - kit <playerid o nombre> <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""

			);
			return 1;
		}
		case _I<tirar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,

					"Manual",
						"\
							Comando: tirar\n\
							Sintaxis: tirar <opcion> <extra>\n\
							\n\
							Este comando sirve para deshacerte de algún objeto.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <slot de /armas>\n\
							    - dinero <cantidad>\n\
							    - alimento <slot de /alimentos>\n\
							    - medicamentos <cantidad>\n\
							    - marihuana <cantidad>\n\
							    - crack <cantidad>\n\
							    - kit <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""

			);
			return 1;
		}
		case _I<vender>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,

					"Manual",
						"\
							Comando: vender\n\
							Sintaxis: vender <opcion> <playerid o nombre> <extra> <precio>\n\
							\n\
							Este comando sirve para vender algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <playerid o nombre> <slot de /armas> <precio>\n\
							    - alimento <playerid o nombre> <slot de /alimentos> <precio>\n\
							    - medicamentos <playerid o nombre> <cantidad> <precio>\n\
							    - marihuana <playerid o nombre> <cantidad> <precio>\n\
							    - crack <playerid o nombre> <cantidad> <precio>\n\
							    - coins <playerid o nombre> <cantidad> <precio>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""

			);
			return 1;
		}
		case _I<guardar>:
		{
			ShowPlayerDialog
			(
				playerid,
				DIALOG_INFO,
				DIALOG_STYLE_MSGBOX,

					"Manual",
						"\
							Comando: guardar\n\
							Sintaxis: dar <opcion> <extra>\n\
							\n\
							Este comando sirve para dar algo a otro jugador cercano.\n\
							Para comprobar que tiene el objeto y la cantidad utilice /inv.\n\
							\n\
							Esta es la lista de opciones:\n\
							    - arma <slot de /armas>\n\
							    - medicamentos <cantidad>\n\
							    - marihuana <cantidad>\n\
							    - crack <cantidad>\n\
							\n\
							Para obtener ayuda diferente use /ayuda.\
						",
					"Cerrar", ""

			);
			return 1;
		}
		default: SendNotification(playerid, "~r~Modo de uso: ~w~/man [dar-tirar-vender-guardar]");
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man tirar~w~.");

	switch(YHash(option, false))
	{
		case _I<dinero>:
		{
			if(extra < 0 || extra > PI[playerid][pi_CASH]) return SendNotification(playerid, "Cantidad de dinero incorrecta.");

			if(GivePlayerCash(playerid, -extra, true, true))
			{
				SendFormatNotification(playerid, "Has tirado al suelo ~g~%s dólares~w~.", number_format_thousand(extra));
				Auto_SendPlayerAction(playerid, "tira dinero.");
			}
			return 1;
		}
		case _I<alimento>:
		{
			if(extra < 1 || extra > MAX_PLAYER_POCKET_OBJECTS) return SendFormatNotification(playerid, "~r~Modo de uso: ~w~/tirar alimento {FFFFFF}[SLOT 1-%d]", MAX_PLAYER_POCKET_OBJECTS);

			extra --;

			if(!PLAYER_POCKET[playerid][extra][player_pocket_VALID]) return SendNotification(playerid, "No tienes nada en ese slot.");

			SendFormatNotification(playerid, "Has eliminado ~g~\"%s\"~w~ de tus alimentos.", PLAYER_POCKET[playerid][extra][player_pocket_object_NAME]);
			DeletePlayerPocketObject(playerid, extra);
			return 1;
		}
		case _I<medicamentos>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICINE]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MEDICINE] -= extra;

			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de medicamentos.", extra);
			return 1;
		}
		case _I<marihuana>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CANNABIS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_CANNABIS] -= extra;

			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de marihuana.", extra);
			return 1;
		}
		case _I<crack>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_CRACK]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_CRACK] -= extra;

			SendFormatNotification(playerid, "Has tirado ~g~%d gramos~w~ de crack.", extra);
			return 1;
		}
		case _I<arma>:
		{
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/tirar arma [slot /armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID]) return SendNotification(playerid, "No tienes ningún arma en ese slot.");

			new bool:in_mercado_area;
			for(new i = 0; i != sizeof MercadoSites; i ++)
				if(IsPlayerInDynamicArea(playerid, MercadoSites[i][mercado_zone_AREA_ID]))
				{
					in_mercado_area = true;
					break;
				}

			if(in_mercado_area)
			{
				SendNotification(playerid, "No puedes tirar armas en este sitio.");
				return 1;
			}

			SendFormatNotification(playerid, "Has eliminado tu ~g~'%s'~w~ de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

			new string[64];
			format(string, sizeof string, "tira su %s al suelo", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			Auto_SendPlayerAction(playerid, string);


			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				TirarArma(playerid, PLAYER_WEAPONS[playerid][extra][player_weapon_ID]);
			}

			RemovePlayerSlotWeapon(playerid, extra, true);
			return 1;
		}
		case _I<kit>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MECANICO_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MECANICO_KITS] -= extra;

			SendFormatNotification(playerid, "Has tirado ~g~%d ~w~kits de reparación.", extra);
			return 1;
		}
		case _I<botiquin>:
		{
			if(extra <= 0 || extra > 10000000) return SendNotification(playerid, "Cantidad incorrecta.");
			if(extra > PI[playerid][pi_MEDICAL_KITS]) return SendNotification(playerid, "No tienes esa cantidad.");

			PI[playerid][pi_MEDICAL_KITS] -= extra;

			SendFormatNotification(playerid, "Has tirado ~g~%d ~w~botiquines.", extra);
			return 1;
		}
		default: SendNotification(playerid, "Error en los parámetros, utilice ~r~/man tirar~w~.");
	}
	return 1;
}

CMD:entrar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new info[3];

	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
					PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
					PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
					SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
				}
				else
				{
					if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
						PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false /*ENTER_EXIT[info[1]][ee_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
						CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);

						if(ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");
					}
					else
					{
						if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendFormatNotification(playerid, "~r~%s ~w~abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
						else SendFormatNotification(playerid, "~r~%s ~w~está cerrado, su horario es: ~r~%02d:00h ~w~- ~r~%02d:00h~w~.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
					}
				}
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		//
		case PICKUP_TYPE_ENTRADAS_SALIDAS:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(ENTRADAS_SALIDAS[info[1]][ee_TIME_OPEN] == 0 && ENTRADAS_SALIDAS[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
					PI[playerid][pi_LOCAL_INTERIOR] = ENTRADAS_SALIDAS[info[1]][ee_ID];
					PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
					SetPlayerPosEx(playerid, ENTRADAS_SALIDAS[info[1]][ee_INT_X], ENTRADAS_SALIDAS[info[1]][ee_INT_Y], ENTRADAS_SALIDAS[info[1]][ee_INT_Z], ENTRADAS_SALIDAS[info[1]][ee_INT_ANGLE], ENTRADAS_SALIDAS[info[1]][ee_INT_INTERIOR], ENTRADAS_SALIDAS[info[1]][ee_INT_WORLD], false /*ENTRADAS_SALIDAS[info[1]][ee_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
				}
				else
				{
					if(is_open(GetMyWorldHour(), ENTRADAS_SALIDAS[info[1]][ee_TIME_OPEN], ENTRADAS_SALIDAS[info[1]][ee_TIME_CLOSE]))
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
						PI[playerid][pi_LOCAL_INTERIOR] = ENTRADAS_SALIDAS[info[1]][ee_ID];
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTRADAS_SALIDAS[info[1]][ee_INT_X], ENTRADAS_SALIDAS[info[1]][ee_INT_Y], ENTRADAS_SALIDAS[info[1]][ee_INT_Z], ENTRADAS_SALIDAS[info[1]][ee_INT_ANGLE], ENTRADAS_SALIDAS[info[1]][ee_INT_INTERIOR], ENTRADAS_SALIDAS[info[1]][ee_INT_WORLD], false /*ENTRADAS_SALIDAS[info[1]][ee_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
						CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);

						if(ENTRADAS_SALIDAS[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");
					}
					else
					{
						if(ENTRADAS_SALIDAS[info[1]][ee_TIME_OPEN] == -1 && ENTRADAS_SALIDAS[info[1]][ee_TIME_CLOSE] == -1) SendFormatNotification(playerid, "~r~%s ~w~abrirá próximamente.", ENTRADAS_SALIDAS[info[1]][ee_NAME]);
						else SendFormatNotification(playerid, "~r~%s ~w~está cerrado, su horario es: ~r~%02d:00h ~w~- ~r~%02d:00h~w~.", ENTRADAS_SALIDAS[info[1]][ee_NAME], ENTRADAS_SALIDAS[info[1]][ee_TIME_OPEN], ENTRADAS_SALIDAS[info[1]][ee_TIME_CLOSE]);
					}
				}
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		//
		case PICKUP_TYPE_PROPERTY:
		{
			PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

			if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
			{
				if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE))
				{
					new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
					if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
					FreezePlayer(playerid);
					return 1;
				}
				if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendNotification(playerid, "Esta propiedad está en venta.");
				if(PROPERTY_INFO[info[1]][property_CREW])
				{
					if(!PI[playerid][pi_CREW]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
					if(PI[playerid][pi_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");

					PI[playerid][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
					PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
					PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

					new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
					if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false, true);
					FreezePlayer(playerid);
				}
				else
				{
					if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
						PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false, true);
						FreezePlayer(playerid);
					}
					else
					{
						if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendNotification(playerid, "Espera para volver a tocar, si no te quieren abrir, vete.");

						new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
						if(owner_playerid == -1) return SendNotification(playerid, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");

						PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
						PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
						SendFormatNotification(owner_playerid, "~b~%s ~w~está tocando la puerta, para dejarle entrar ve a la puerta y usa ~b~/puerta~w~.", PLAYER_TEMP[playerid][pt_RP_NAME]);
						SendNotification(playerid, "Has tocado en la puerta, espera para que te abran o vete.");
					}
				}
			}
		}
		default: SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:puerta(playerid, params[])
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_OWN_PROPERTY) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] != PICKUP_TYPE_PROPERTY) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new Float:pos[3];
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(info[2] == 1) // Está en el Pickup Interior
	{
		if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
		{
			if(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID] == INVALID_PLAYER_ID) return SendNotification(playerid, "Nadie ha tocado en la puerta.");
			if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID])) return SendNotification(playerid, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], 3.0, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z])) return SendNotification(playerid, "Nadie ha tocado en la puerta o ya se ha ido.");
			if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Este jugador no puede entrar ahora.");

			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_HOSPITAL] = GetNearestHospitalForPlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);

			PI[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
			PI[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
			PLAYER_TEMP[PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]][pt_PROPERTY_INDEX] = info[1];

			new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
			if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
			SetPlayerPosEx(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
			FreezePlayer(PLAYER_TEMP[playerid][pt_KNOCK_PLAYER_ID]);
		}
		else SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:pvender(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return 1;
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return 1;
	if(PI[playerid][pi_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para usar este comando.");
	if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "Necesitas tener una cuenta bancaria para poder realizar estas operaciones.");

	ShowDialog(playerid, DIALOG_NOTARY);
	return 1;
}

CMD:grua(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return SendNotification(playerid, "No estás en lugar adecuado.");

	ShowDialog(playerid, DIALOG_CRANE_SELECT_VEHICLE);
	return 1;
}

CMD:casa(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No Estás de pie");
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[playerid][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
		{
			if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
			{
				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY)
		{
			if(PROPERTY_INFO[index][property_CREW])
			{
				if(PROPERTY_INFO[index][property_CREW_ID] != PI[playerid][pi_CREW]) return SendNotification(playerid, "Esta no es una propiedad de tu banda.");
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendNotification(playerid, "No tienes permiso.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes liberar una propiedad cuando tu banda está en combate.");

				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = index;
				ShowDialog(playerid, DIALOG_CREW_LEAVE_PROPERTY);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:armario(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "BUG: CMD /armario, Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Esta no es tu casa");

		new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		if(IsPlayerInRangeOfPoint(playerid, 1.0, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos))
		{
			PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] = index;
			ShowDialog(playerid, DIALOG_PROPERTY_CLOSET);
		}
		else SendNotification(playerid, "No estás cerca del armario.");
	}
	else SendNotification(playerid, "No estás en tu casa.");
	return 1;
}

CMD:echar(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/echar [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	if(playerid == params[0]) return SendNotification(playerid, "No te eches a ti mismo.");

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		if( PI[params[0]][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && PI[params[0]][pi_LOCAL_INTERIOR] == PI[playerid][pi_LOCAL_INTERIOR])
		{
			new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
			if(index == -1) return SendNotification(playerid, "BUG: CMD /ECHAR, Tome captura y contacte con administrador.");

			PI[params[0]][pi_STATE] = ROLEPLAY_STATE_NORMAL;
			PI[params[0]][pi_LOCAL_INTERIOR] = 0;
			PLAYER_TEMP[params[0]][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(params[0], PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[ index ][property_EXT_FREEZE]*/, false);
			StopAudioStreamForPlayer(params[0]);
			FreezePlayer(params[0]);

			SendFormatNotification(params[0], "~r~%s ~w~te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendFormatNotification(playerid, "Has echado a ~r~%s ~w~de tu propiedad.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		}
		else SendNotification(playerid, "Este jugador no está en tu propiedad.");
		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(GetPlayerVehicleID(params[0]) != vehicleid) return SendNotification(playerid, "Este jugador no está en tu vehículo.");

		RemovePlayerFromVehicle(params[0]);

		new action[64];
		format(action, sizeof action, "ha echado a %s de su vehículo.", PLAYER_TEMP[ params[0] ][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}

	SendNotification(playerid, "No estás en tu propiedad o en tu vehículo.");
	return 1;
}

CMD:tarifa(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo.");
	if(!PLAYER_WORKS[playerid][WORK_TAXI][pwork_SET]) return SendNotification(playerid, "No eres Knox City transport.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TAXI) return SendNotification(playerid, "No estás de servicio como Knox City transport.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED]) return SendNotification(playerid, "Solo puedes cambiar la tarifa cuando no haya ningún pasajero.");

	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/tarifa [0-140]");
	if(params[0] < 0 || params[0] > 140) return SendNotification(playerid, "~r~Modo de uso: ~w~/tarifa [0-140]");

	TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_PRICE] = params[0];
	Auto_SendPlayerAction(playerid, "ajusta el taxímetro.");
	UpdatePlayerTaxiMeterTextdraws(playerid);
	return 1;
}

CMD:cargar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "No estás en un vehículo de carga.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK && WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_DELIVERYMAN) return SendNotification(playerid, "No estás en un vehículo de carga.");

	if(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_TRUCK)
	{
		for(new i = 0; i != sizeof LoadTrucksPoints; i ++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, LoadTrucksPoints[i][0], LoadTrucksPoints[i][1], LoadTrucksPoints[i][2]))
			{
				new Float:angle;
				GetVehicleZAngle(vehicleid, angle);
				if(angle > 180.0) angle -= 360.0;

				if(angle > (LoadTrucksPoints[i][3] - 15.0) && angle < (LoadTrucksPoints[i][3] + 15.0))
				{
					if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED]) return SendNotification(playerid, "El camión ya está cargado.");
					if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendNotification(playerid, "El camión ya se está cargando.");

					TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = true;
					TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] = PI[playerid][pi_ID];

					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
					UpdateVehicleParams(vehicleid);

					ShowDialog(playerid, DIALOG_SELECT_TRUCK_TYPE);
				}
				else SendNotification(playerid, "El camión no está correctamente colocado para cargarlo.");
				return 1;
			}
		}
		SendNotification(playerid, "Para cargar el camión colocate en cualquier punto de carga.");
	}
	if(PLAYER_WORKS[playerid][WORK_DELIVERYMAN][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_DELIVERYMAN)
	{
		CallLocalFunction("OnDeliveryManRequestLoad", "ii", playerid, vehicleid);
	}
	else SendNotification(playerid, "No estás trabajando en camionero o repartidor.");
	return 1;
}

CMD:salir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] == 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new info[3];

	new Float:pos[3];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	if(info[0] == PICKUP_TYPE_NONE) return SendNotification(playerid, "No estás en el lugar adecuado.");

	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_X, pos[0]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Y, pos[1]);
	Streamer_GetFloatData(STREAMER_TYPE_PICKUP, PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID], E_STREAMER_Z, pos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 1.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "No estás en el lugar adecuado.");

	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				//StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
				CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		//
		case PICKUP_TYPE_ENTRADAS_SALIDAS:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
				SetPlayerPosEx(playerid, ENTRADAS_SALIDAS[info[1]][ee_EXT_X], ENTRADAS_SALIDAS[info[1]][ee_EXT_Y], ENTRADAS_SALIDAS[info[1]][ee_EXT_Z], ENTRADAS_SALIDAS[info[1]][ee_EXT_ANGLE], ENTRADAS_SALIDAS[info[1]][ee_EXT_INTERIOR], ENTRADAS_SALIDAS[info[1]][ee_EXT_WORLD], false /*ENTER_EXIT[info[1]][ee_EXT_FREEZE]*/);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				//StopAudioStreamForPlayer(playerid);
				FreezePlayer(playerid);
				CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		//
		case PICKUP_TYPE_PROPERTY:
		{
			if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
			{
				PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
				PI[playerid][pi_LOCAL_INTERIOR] = 0;
				PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
				SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false /*PROPERTY_INFO[info[1]][property_EXT_FREEZE]*/, false);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				if(PLAYER_TEMP[playerid][pt_MUSIC_PLAYER] != 0)
				{
					if(PROPERTY_INFO[info[1]][property_EMISORA_ID] != 0) StopAudioStreamForPlayer(playerid);
				}
				FreezePlayer(playerid);
			}
			else SendNotification(playerid, "No estás en el lugar adecuado.");
		}
		default: SendNotification(playerid, "No estás en el lugar adecuado.");
	}
	return 1;
}

CMD:gasolina(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás en ningún vehículo.");

	new vehicleid = GetPlayerVehicleID(playerid), modelid = GetVehicleModel(vehicleid);
	if(!VEHICLE_INFO[modelid - 400][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "No puedes repostar este vehículo.");

	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "Este vehículo no tiene depósito de gasolina.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendNotification(playerid, "Por favor, detiene primero el motor del vehículo.");
		return 1;
	}

	if(!sscanf(params, "d", params[0]))
	{
		new Float:amount = float(params[0]);
		if(amount < 0.0) return SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
		if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

		new price = floatround( floatmul(amount, 9.0) );

		if(PI[playerid][pi_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true))
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "Cantidad: ~b~%.1f litros~n~~w~Precio: ~g~%s dólares~w~", amount, number_format_thousand(price));
				Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
			}
		}
		else
		{
			PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
			SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][pi_CASH]), amount);
		}
		return 1;
	}

	new text[24];
	if(!sscanf(params, "s[24]", text))
	{
		if(!strcmp(text, "lleno", true))
		{
			new Float:amount = floatsub(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

			new price = floatround( floatmul(amount, 9.0) );
			if(PI[playerid][pi_CASH] >= price)
			{
				if(GivePlayerCash(playerid, -price, true, true))
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Cantidad: ~b~%.1f litros~n~~w~Precio: ~g~%s dólares~w~.", amount, number_format_thousand(price));
					Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder repostar {588dc9}%.1f.", number_format_thousand(price - PI[playerid][pi_CASH]), amount);
			}
		}
		else SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
		return 1;
	}

	SendNotification(playerid, "~r~Modo de uso: ~w~/gasolina [litros / lleno]");
	return 1;
}

CMD:bidon(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new fuel_station = -1;
	for(new i = 0; i < sizeof Fuel_Stations; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]))
		{
			fuel_station = i;
			break;
		}
	}
	if(fuel_station == -1) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(PI[playerid][pi_FUEL_DRUM] <= 0)
	{
		PI[playerid][pi_FUEL_DRUM] = 0;
		if(GivePlayerCash(playerid, -250, true, true))
		{
			PI[playerid][pi_FUEL_DRUM] = 20;
			SendNotification(playerid, "Has comprado un bidón de gasolina de 20 litros por 250$, usa ~g~/vertir ~w~para repostar un vehículo.");
		}
		else SendNotification(playerid, "No tienes suficiente dinero para comprar el bidón.");
	}
	else
	{
		if(PI[playerid][pi_FUEL_DRUM] >= 20) return SendNotification(playerid, "Tu bidón de gasolina está lleno.");

		new amount = (20 - PI[playerid][pi_FUEL_DRUM]);
		new price = (13 * amount);

		if(PI[playerid][pi_CASH] >= price)
		{
			if(GivePlayerCash(playerid, -price, true, true))
			{
				PI[playerid][pi_FUEL_DRUM] += amount;
				SendFormatNotification(playerid, "Has llenado tu bidón de gasolina con 20 litros por %d$, usa ~g~/vertir ~w~para repostar un vehículo.", price);
			}
		}
		else SendNotification(playerid, "No tienes suficiente dinero para comprar el bidón.");
	}
	return 1;
}

CMD:vertir(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Tienes que estar fuera del vehículo para vertir el bidón.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		SendNotification(playerid, "Por favor, para primero el motor del vehículo.");
		return 1;
	}
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "Este vehículo no tiene depósito de gasolina.");

	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/vetir [Cantidad de litros]");
	if(params[0] <= 0) return SendNotification(playerid, "Cantidad de litros no válida.");
	if(params[0] > PI[playerid][pi_FUEL_DRUM]) return SendFormatNotification(playerid, "Solo tienes %d.0 litros en el bidón.", PI[playerid][pi_FUEL_DRUM]);

	new Float:amount = float(params[0]);
	if(amount + GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) amount = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] - GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS];

	PI[playerid][pi_FUEL_DRUM] -= floatround(amount);
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] += amount;
	SendFormatNotification(playerid, "Has vertido ~b~%.1f litros~w~ del bidón, te quedan ~b~%d.0 litros~w~.", amount, PI[playerid][pi_FUEL_DRUM]);
	Auto_SendPlayerAction(playerid, "ha repostado el vehículo.");
	return 1;
}

CMD:setfdrum(playerid, params[])
{
	new to_player, amount;
	if(sscanf(params, "ud", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setfdrum <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	PI[to_player][pi_FUEL_DRUM] = amount;

	SendCmdLogToAdmins(playerid, "setfdrum", params);
	return 1;
}

SendPlayerAction(playerid, action[])
{
	new str_text[190];
	format(str_text, sizeof str_text, "** %s %s **", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF, 85);
	return 1;
}

Auto_SendPlayerAction(playerid, action[]) // /me
{
	new str_text[145];
	format(str_text, 145, "* %s %s *", PLAYER_TEMP[playerid][pt_RP_NAME], action);
	ProxDetector(playerid, 15.0, str_text, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF, 0xDDAA0BFF);
	return 1;
}

ShowDialog(playerid, dialogid)
{
	PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = false;
	PLAYER_TEMP[playerid][pt_DIALOG_ID] = dialogid;

	switch(dialogid)
	{
		case DIALOG_PLAYER_RENUNCIO:
		{
			new player_jobs = CountPlayerJobs(playerid);
			if(!player_jobs) return SendNotification(playerid, "No tienes ningún trabajo.");

			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

			for(new i = 0; i != MAX_LISTITEMS; i++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new works[32 * sizeof(work_info)], line_str[32], count, dialog[32];
			for(new i = 1; i != sizeof(work_info); i ++)
			{
				if(PLAYER_WORKS[playerid][i][pwork_SET])
				{
					if(count > 0) strcat(works, "\n");

					format(line_str, sizeof line_str, "%s (%d)", work_info[i][work_info_NAME], i);
					strcat(works, line_str);

					//count ++;
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
				}
			}
			format(dialog, sizeof dialog, "%s", works);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Tus trabajos", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Colores disponibles", 
				"\
					{FFFFFF}Blanco\n\
					{000000}Negro\n\
					{FF0000}Rojo\n\
					{00FF00}Lima\n\
					{0000FF}Azul\n\
					{808080}Gris\n\
					{FFFF00}Amarillo\n\
					{00FFFF}Cian\n\
					{FF00FF}Fucsia\n\
					{800000}Marrón\n\
					{800080}Púrpura\n\
				", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			new dialog[228], line_str[64];
			for(new i = 0; i != MAX_LISTITEMS; i++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			for(new i = 0; i != sizeof ListEmisoras; i ++)
			{
				if(i == 0) format(line_str, sizeof line_str, "{999999}%d. Detener música\n", i);
				else format(line_str, sizeof line_str, "{ffffff}%d. %s\n", i, ListEmisoras[i][emisora_NAME]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = i;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00BFFF} "SERVER_NAME"{FFFFFF} | Estaciones disponibles |", dialog, "Seleccionar", "Salir");
			return 1;
		}
		case DIALOG_ACENTOS:
		{
			new dialog[40 * 30 + 1], line_str[300];
			for(new i = 0; i < 32; i++)
			{
				if(PI[playerid][pi_ACENTO] == i) format(line_str, sizeof line_str, "{999999}%d. %s\n", i, ListAcentos[i]);
				else format(line_str, sizeof line_str, "{ffffff}%d. %s\n", i, ListAcentos[i]);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{00BFFF} "SERVER_NAME"{FFFFFF} | Selecciona tu nuevo acento |", dialog, "Seleccionar", "Salir");
			return 1;
		}
		case DIALOG_CLEOS:
		{
			new dialog[180];

			format(dialog, sizeof dialog,

				"\
					Cleo\tEstado actual\n\
					Primera Persona\t%s\n\
					Damage Informer\t%s\n\
					Ping\t%s\n\
					ZoneText\t%s\n\
					Info Health\t%s\
				",
					(PI[playerid][pi_camaraon] ? "< {"#CORRECT_COLOR"}Activado" : "> {"#RED_COLOR"}Desactivado"),
					(PI[playerid][pi_DAMAGE] ? "< {"#CORRECT_COLOR"}Activado" : "> {"#RED_COLOR"}Desactivado"),
					(PI[playerid][pi_PING] ? "< {"#CORRECT_COLOR"}Activado" : "> {"#RED_COLOR"}Desactivado"),
					(PI[playerid][pi_ZONE_TEXT] ? "< {"#CORRECT_COLOR"}Activado" : "> {"#RED_COLOR"}Desactivado"),
					(PI[playerid][pi_INFO_HEALTH] ? "< {"#CORRECT_COLOR"}Activado" : "> {"#RED_COLOR"}Desactivado")
				);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Cleos disponibles", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_FARMACIA:
		{
			new dialog[140];
			format(dialog, sizeof dialog, "Producto\tCantidad\tPrecio\nMedicamento\t1\t{96FF00}$350");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Farmacia", dialog, "» Continuar", "Cerrar");
		}
		case DIALOG_REGISTER:
		{
			new dialog[180];
			format(dialog, sizeof dialog, "{FFFFFF}Esta cuenta no está {92BD57}registrada{FFFFFF}.\nIngrese su {668AE3}contraseña {FFFFFF}a continuación.\n\nLa contraseña debe contener entre {E3D6A6}%d-%d {FFFFFF}caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "{E3E3E3}Registrarse {E30000}· {7C7BE3}Knox City {E30000}· {E3E3E3}RP", dialog, "» Aceptar", "Salir");
			return 1;
		}
		case DIALOG_LOGIN:
		{
			new dialog[164];
			format(dialog, sizeof dialog, "{FFFFFF}Bienvenido de nuevo {92BD57}%s{FFFFFF}.\nIngrese su {668AE3}contraseña {FFFFFF}para acceder.", PLAYER_TEMP[playerid][pt_RP_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "{E3E3E3}Ingresar {E30000}· {7C7BE3}Knox City {E30000}· {E3E3E3}RP", dialog, "» Entrar", "Salir");
			return 1;
		}
		case DIALOG_REGISTER_EMAIL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Correo electrónico", "Ingresa una dirección de correo electrónico válida.\n\nEs importante que tengas acceso al correo ya que\nserá la única manera de recuperar tu contraseña.\n\nTranquilo, no recibirás ningún tipo de SPAM ni suscripciones.", "» Continuar", "Cerrar");
		case DIALOG_CLOTHES: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{"#PRIMARY_COLOR"}¿Qué quieres comprar?", "Ropa\nAccesorios", ">>", "Salir");
		case DIALOG_FOOD_PIZZA: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_PIZZA_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_CLUCKIN: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_CLUCKIN_String, "Pedir", "Cerrar");
		case DIALOG_FOOD_BURGER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Comida rápida", DIALOG_FOOD_BURGER_String, "Pedir", "Cerrar");
		case DIALOG_PLAYER_TOYS:
		{
			new dialog[96 * (MAX_SU2_TOYS + 2)], line_str[64];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Accesorio\t{"#BLUE_COLOR"}Colocado\n");
			for(new i; i != MAX_SU2_TOYS; i ++)
			{
				if(PI[playerid][pi_VIP])
				{
					if(PLAYER_TOYS[playerid][i][player_toy_VALID])
					{
						if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
					}
					else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				}
				else
				{
					if(i >= MAX_NU_TOYS)
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID]) format(line_str, sizeof line_str, "{666666}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
					else
					{
						if(PLAYER_TOYS[playerid][i][player_toy_VALID])
						{
							if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, PLAYER_TOYS[playerid][i][player_toy_NAME]);
						}
						else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					}
				}
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis accesorios", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID])
			{
				SendNotification(playerid, "Este slot está vacío, puedes comprar accesorios en cualquier tienda de ropa.");
				return 1;
			}

			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[256];
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			else
			{
				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
				{
					SendNotification(playerid, "Este accesorio es nuevo y aún no ha sido configurado, configuralo desde 'Configurar el accesorio'.");
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
				}
				else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocarte el accesorio\n{"#SILVER_COLOR"}Cambiar el nombre del accesorio\n{"#SILVER_COLOR"}Configurar el accesorio\n{"#SILVER_COLOR"}Color primario\n{"#SILVER_COLOR"}Color secundario\n{"#SILVER_COLOR"}Eliminar este accesorio");
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#SILVER_COLOR"}Accesorio - Modificar nombre", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente accesorio?\n\t\"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "{"#SILVER_COLOR"}Accesorio - Eliminar accesorio", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			SendNotification(playerid, "Selecciona en que parte del cuerpo quieres colocar este accesorio.");

			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[45 * sizeof Toys_Bones], line_str[45];
			for(new i = 0; i != sizeof Toys_Bones; i ++)
			{
				format(line_str, sizeof(line_str), "{"#BLUE_COLOR"}%d. %s\n", i + 1, Toys_Bones[i]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			new caption[48];
			format(caption, sizeof caption, "{"#SILVER_COLOR"}Accesorio '%s'", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

			new dialog[145];
			format(dialog, sizeof(dialog), "¿Quieres cambiar la parte del cuerpo donde se coloca este accesorio?\nActualmente está colocado en: %s", Toys_Bones[ PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] - 1 ]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Sí", "No");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			SendNotification(playerid, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			SendNotification(playerid, "Selecciona el color 0 para poner el color original del accesorio.");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Accesorios - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus accesorios?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_BBVA:
		{
			if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No tienes cuenta bancaria.");

			new caption[80];
			format(caption, sizeof caption, "Número de cuenta: {"#BLUE_COLOR"}%s {FFFFFF}- Balance actual: {"#LIMA_COLOR"}$%s", number_format_thousand(PI[playerid][pi_BANK_ACCOUNT]), number_format_thousand(PI[playerid][pi_BANK_MONEY]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption,
				"{"#CORRECT_COLOR"}·{FFFFFF}Transferir dinero\n\
				{"#CORRECT_COLOR"}·{FFFFFF}últimas transacciones",
			"» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK:
		{
			if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "No tienes cuenta bancaria.");

			new caption[80];
			format(caption, sizeof caption, "Mi cuenta bancaria: {"#BLUE_COLOR"}%s {FFFFFF}- Balance actual: $%s", number_format_thousand(PI[playerid][pi_BANK_ACCOUNT]), number_format_thousand(PI[playerid][pi_BANK_MONEY]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption,
				"{"#RED_COLOR"}·{FFFFFF}Retirar dinero\n{"#CORRECT_COLOR"}·{FFFFFF}Depositar dinero\n{"#CORRECT_COLOR"}·{FFFFFF}Transferir dinero\n{"#CORRECT_COLOR"}·{FFFFFF}últimas transacciones",
			"» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear cuenta bancaria",
				"{"#SILVER_COLOR"}Bienvenido, actualmente no tienes una cuenta bancaria.\n\nPara disfrutar de los beneficios de una cuenta bancaria\npuedes crearla ahora mismo con un depósito minimo de 500$.",
			"Crear", "Cerrar");
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere retirar?", number_format_thousand(PI[playerid][pi_BANK_MONEY]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Retirar", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			new dialog[100];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Dinero actual: {"#BLUE_COLOR"}%s$\n{"#SILVER_COLOR"}¿Cuánto quiere depositar?", number_format_thousand(PI[playerid][pi_CASH]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Depositar", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if(PI[playerid][pi_LEVEL] < 3)
			{
				SendNotification(playerid, "Debes ser al menos nivel 3 para poder transferir.");
				return ShowDialog(playerid, DIALOG_BANK);
			}
			return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", "Indica a que número de cuenta quiere transferir dinero.", "» Continuar", "Atrás");
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			new dialog[170];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Transferir a cuenta: {"#BLUE_COLOR"}%s\n{"#SILVER_COLOR"}Balance actual: {"#BLUE_COLOR"}%s$\n\n{"#SILVER_COLOR"}¿Cuánto quiere transferir?", number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]), number_format_thousand(PI[playerid][pi_BANK_MONEY]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Banco - Transferir", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			inline OnBankMovementsLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[2675], caption[40], line_str[128];
					format(caption, sizeof caption, "Banco - últimas %d transacciones", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Concepto\t{"#SILVER_COLOR"}Importe\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new date[24], type, from_id, to_id, amount, from_bankid, to_bankid, bool:insull_from_id, bool:isnull_to_id;
							cache_get_value_name(i, "date", date);
							cache_get_value_name_int(i, "type", type);
							cache_is_value_name_null(i, "from_id", insull_from_id);
							if(!insull_from_id) cache_get_value_name_int(i, "from_id", from_id);
							cache_is_value_name_null(i, "to_id", isnull_to_id);
							if(!isnull_to_id) cache_get_value_name_int(i, "to_id", to_id);
							cache_get_value_name_int(i, "amount", amount);
							cache_get_value_name_int(i, "from_bankid", from_bankid);
							cache_get_value_name_int(i, "to_bankid", to_bankid);

							switch(type)
							{
								case BANK_TRANSACTION_WITHDRAW:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Retirada efectivo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_DEPOSIT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Ingreso efectivo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_TRANSFER:
								{
									if(from_id == PI[playerid][pi_ID]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia a %d\t{"#SILVER_COLOR"}-%s$\n", date, to_bankid, number_format_thousand(amount));
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Transferencia de %d\t{"#SILVER_COLOR"}%s$\n", date, from_bankid, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_CREATE_ACCOUNT:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Apertura cuenta\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de propiedad\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_PROPERTY:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de propiedad\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_BUY_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Compra de vehículo\t{"#SILVER_COLOR"}-%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
								case BANK_TRANSACTION_SOLD_VEHICLE:
								{
									format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}Venta de vehículo\t{"#SILVER_COLOR"}%s$\n", date, number_format_thousand(amount));
									strcat(dialog, line_str);
								}
							}
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay transacciones en tu cuenta.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bank_movements.*, player.bank_account AS from_bankid, player2.bank_account AS to_bankid FROM bank_movements LEFT JOIN player ON bank_movements.from_id = player.id LEFT JOIN player AS player2 ON bank_movements.to_id = player2.id WHERE bank_movements.from_id = %d OR bank_movements.to_id = %d ORDER BY date DESC LIMIT %d;", PI[playerid][pi_ID], PI[playerid][pi_ID], MAX_BANK_TRANSACTIONS_DIALOG);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnBankMovementsLoad);
			return 1;
		}
		case DIALOG_247_LIST: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "24/7", DIALOG_247_LIST_String, "» Continuar", "Cerrar");
		case DIALOG_PLAYER_POCKET:
		{
			new dialog[50 * (MAX_PLAYER_POCKET_OBJECTS + 2)], line_str[50];
			for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
			{
				if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
					strcat(dialog, line_str);
				}
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Alimentos", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Alimento - %s", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "- Consumir\n- Dar\n- Vender\n- Eliminar", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_OPTIONS:
		{
			new caption[64];
			format(caption, sizeof caption, "Arma - %s", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);

			new dialog_body[1024] = "- Dar\n- Vender\n- Tirar\n";

			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
			{
				new vehicleid = GetPlayerCameraTargetVehicle(playerid);
				if(vehicleid != INVALID_VEHICLE_ID && PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					strcat(dialog_body, "- Guardar en el maletero");
				}
			}
			else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);

				if(index != -1)
				{
					new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
					if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID] && IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos)) {
						strcat(dialog_body, "- Guardar en el armario");
					}
				}
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog_body, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Alimentos - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus alimentos?\nEsta opción no se puede deshacer y perderás todos lo que haya.", "Eliminar", "Atrás");
		case DIALOG_PHONE:
		{
			new dialog[228];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}1. Agenda\n{"#SILVER_COLOR"}2. Llamar\n{"#SILVER_COLOR"}3. Enviar mensaje\n{"#SILVER_COLOR"}4. Ver mensajes recibidos\n{"#SILVER_COLOR"}5. Ver mensajes enviados");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{"#WHATSAPP_COLOR"}WhatsApp", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_TWITTER:
		{
			new dialog[128];
			if(PI[playerid][pi_DOUBT_CHANNEL_TW]) format(dialog, sizeof dialog, "Enviar un TWITT\nEnviar un TWITT {"#RED_COLOR"}anónimo\nDeshabilitar {"#TWITTER_COLOR"}Twitter");
			else format(dialog, sizeof dialog, "Habilitar {"TWITTER_COLOR"}Twitter\n{"#SILVER_COLOR"}Enviar un TWITT\n{"#SILVER_COLOR"}Enviar un TWITT anónimo");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "{"#TWITTER_COLOR"}Twitter", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SMS:
		{
			new dialog[64];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Ver mensajes recibidos\n{"#SILVER_COLOR"}Ver mensajes enviados");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "SMS", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[80 * (MAX_PHONE_CONTACTS + 3)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#BLUE_COLOR"}Número\n");

			new line_str[80], contacts, listitem;
			for(new i = 0; i != MAX_PHONE_CONTACTS; i++)
			{
				if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%d\n", listitem + 1, PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER]);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				contacts ++; listitem ++;
			}
			if(contacts < MAX_PHONE_CONTACTS)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir contacto\n"); listitem ++;
			}
			if(contacts > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PHONE_CONTACTS + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}- Agenda", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el número de teléfono del nuevo contacto.", "» Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_ADD_NAME: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Agenda - Añadir contacto", "Está añadiendo un nuevo contacto en su agenda.\nIndique el nombre del nuevo contacto.", "» Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Llamar\n{"#SILVER_COLOR"}2. Enviar mensaje\n{"#SILVER_COLOR"}3. Cambiar nombre del contacto\n{"#SILVER_COLOR"}4. Eliminar este contacto", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "Nombre actual: %s\nTeléfono: %d\n\nIndica el nuevo nombre de este contacto.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			new caption[40];
			format(caption, sizeof caption, "Contacto - %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

			new dialog[140];
			format(dialog, sizeof dialog, "¿Estás seguro de que desea eliminar el siguiente contacto?\n\nNombre: %s\nTeléfono: %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Agenda - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus contactos?\nEsta opción no se puede deshacer y perderás todos los contactos guardados.", "Eliminar", "Atrás");
		case DIALOG_PHONE_CALL_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}- Realizar una llamada", "¿A quién quieres llamar?\nIndique el número al que desea llamar.", "» Continuar", "Atrás");
		case DIALOG_PHONE_SMS_NUMBER: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}- Enviar mensaje", "¿A quién quieres enviarle el mensaje?\nIndique el número al que desea enviar el mensaje.", "» Continuar", "Atrás");
		case DIALOG_PHONE_SMS_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}- Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "» Continuar", "Atrás");
		case DIALOG_PHONE_BOOK_SEND_MESSAGE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}- Enviar mensaje", "Escribe el mensaje que quieres enviar\nCaracteres: 1-64.", "» Continuar", "Atrás");
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			inline OnSentMessagesLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}Últimos %d mensajes enviados", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Enviado a\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							cache_get_value_name(i, "message", message);
							cache_get_value_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) cache_get_value_name_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.to_id = player.id WHERE pmessages.from_id = %d ORDER BY pmessages.date DESC LIMIT 10;", PI[playerid][pi_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnSentMessagesLoad);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			inline OnReceivedMessagesLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[1600], caption[40], line_str[128];
					format(caption, sizeof caption, "{"#WHATSAPP_COLOR"}WhatsApp {FFFFFF}Últimos %d mensajes recibidos", rows);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Fecha\t{"#BLUE_COLOR"}Remitente\t{"#SILVER_COLOR"}Mensaje\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new message[64], date[24], phone_number, bool:isnull_phone_number;
							cache_get_value_name(i, "message", message);
							cache_get_value_name(i, "date", date);
							cache_is_value_name_null(i, "phone_number", isnull_phone_number);
							if(!isnull_phone_number) cache_get_value_name_int(i, "phone_number", phone_number);

							if(!phone_number) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}---\t{"#SILVER_COLOR"}%s\n", date, message);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", date, convertPhoneNumber(playerid, phone_number), message);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No hay mensajes.");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cerrar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pmessages.*, player.phone_number FROM pmessages LEFT JOIN player ON pmessages.from_id = player.id WHERE pmessages.to_id = %d ORDER BY pmessages.date DESC LIMIT 10;", PI[playerid][pi_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnReceivedMessagesLoad);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			new dialog[220];

			if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA])
			{
				format(dialog, sizeof dialog, "Coste de la propiedad: %d "SERVER_COIN"\nSeguro: NO\nMonedas "SERVER_COIN" actuales: %d "SERVER_COIN"\nMonedas "SERVER_COIN" tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar esta propiedad?", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA], PI[playerid][pi_COINS], PI[playerid][pi_COINS] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_EXTRA]);
			}
			else
			{
				format(dialog, sizeof dialog, "Precio de la propiedad: %s$\nSeguro: %s$\nBalance actual: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar esta propiedad?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]), number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE_BASE] / 200), number_format_thousand(PI[playerid][pi_BANK_MONEY]), number_format_thousand(PI[playerid][pi_BANK_MONEY] - PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX] ][property_PRICE]));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar propiedad",  dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS",  "- Mis lugares\n- Mis propiedades\n- Mis vehículos\n- Lugares de interés\n- Trabajos\n- Ver mapa", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_PLAYER_GPS_SAVES + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{FF846A}Distancia\n");

			new line_str[90], sites, listitem;
			for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i++)
			{
				if(!PLAYER_GPS[playerid][i][player_gps_VALID]) continue;

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%.2f Km\n", listitem + 1, PLAYER_GPS[playerid][listitem][player_gps_NAME], (GetPlayerDistanceFromPoint(playerid, PLAYER_GPS[playerid][listitem][player_gps_X], PLAYER_GPS[playerid][listitem][player_gps_Y], PLAYER_GPS[playerid][listitem][player_gps_Z]) * 0.01));
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				sites ++; listitem ++;
			}
			if(sites < MAX_PLAYER_GPS_SAVES)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 10;
				strcat(dialog, "{"#SILVER_COLOR"}+ Añadir lugar actual\n"); listitem ++;
			}
			if(sites > 0)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_PLAYER_GPS_SAVES + 20;
				strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis lugares", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Añadir lugar", "Tu posición actual será guardada en este lugar para ir más tarde.\nIndica el nombre de este lugar para guardarlo.", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis lugares - Eliminar todo", "¿Estás seguro de que quiere eliminar todos sus lugares?\nEsta opción no se puede deshacer y perderás todos los lugares guardados.", "Eliminar", "Atrás");
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			new caption[40];
			format(caption, sizeof caption, "GPS - %s", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}1. Marcar coordenadas en el GPS\n{"#SILVER_COLOR"}2. Cambiar nombre de este lugar\n{"#SILVER_COLOR"}3. Eliminar este lugar del GPS", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			new dialog[90];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\nIndica el nuevo nombre para este lugar.", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "GPS - Cambiar nombre de un lugar", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			new dialog[95];
			format(dialog, sizeof dialog, "Nombre del lugar: %s\n¿Estás seguro de que quiere borrarlo del GPS?", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "GPS - Eliminar un lugar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			new dialog[1024];
			format(dialog, sizeof dialog, "- Hospitales\n- Tiendas de Ropa\n- Tiendas 24/7\n- Restaurantes\n- Bancos\n- Cajeros\n- Gasolineras\n- Concesionarios\n- Gobierno\n- Policías\n- "SERVER_SHORT_NAME" Tuning Club\n- Autoescuela\n- Ikea (tienda de muebles)");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "GPS - Lugares de interés", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\tDistancia\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;
				if(!obtain_work_coords[i][obtain_work_AVAILABLE]) continue;

				new line_str[85];
				if(i == WORK_MEDIC)
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}-\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL]);
				else
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s\t{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%.2f Km\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], work_info[i][work_info_LEVEL], (GetPlayerDistanceFromPoint(playerid, obtain_work_coords[i][obtain_work_MAP_ICON_X], obtain_work_coords[i][obtain_work_MAP_ICON_Y], obtain_work_coords[i][obtain_work_MAP_ICON_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Trabajos", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_WORKS_TELEPORTS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(work_info) + 1)], listitem;
			format(dialog, sizeof dialog, "Trabajo\tNivel\n");

			for(new i = 1; i != sizeof work_info; i ++)
			{
				new line_str[85];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s (id: %d)\t{"#SILVER_COLOR"}%d\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], i, work_info[i][work_info_LEVEL]);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Trabajos", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BANDAS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[85 * (sizeof(CREW_INFO) + 1)], listitem;
			format(dialog, sizeof dialog, "ID\tNombre de la banda\n");

			for(new i = 0; i < MAX_CREWS; i ++)
			{
				if(CREW_INFO[i][crew_VALID])
	 			{
					new line_str[85];
					format(line_str, sizeof line_str, "%d\t{%06x}%s\n", CREW_INFO[i][crew_ID], CREW_INFO[i][crew_COLOR] >>> 8, CREW_INFO[i][crew_NAME]);
					strcat(dialog, line_str);

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Bandas", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			new dialog[90 * (sizeof Hospital_Spawn_Positions)], listitem;

			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Lugar\t{"#BLUE_COLOR"}Zona");
			for(new i = 0; i != sizeof(Hospital_Spawn_Positions); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				new city[45], zone[45];
				GetPointZone(Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], city, zone);
				format(dialog, sizeof dialog, "%s\n{FFFFFF}Hospital %d\t{"#BLUE_COLOR"}%s, %s", dialog, listitem + 1, city, zone);

				listitem++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Hospitales", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1: //Tiendas de ropa
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BINCO && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_SUBURBAN && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PROLAPS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_DIDIER_SACHS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_VICTIM && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_ZIP) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas de ropa", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_2: //Tiendas 24 horas
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_247) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Tiendas 24/7", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_3: //Comida rapida
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_PIZZA && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_CLUCKIN_BELL && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BURGER_SHOT) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Restaurantes", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_4: //Bancos
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_KBANK1 && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_BANK_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Bancos", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			new dialog[90 * (sizeof(ATM_BANK) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ATM_BANK); i++ )
			{

				format(line_str, sizeof line_str, "{FFFFFF}Cajero %d\t{"#SILVER_COLOR"}%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, ATM_BANK[i][atm_X], ATM_BANK[i][atm_Y], ATM_BANK[i][atm_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Cajeros", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			new dialog[90 * (sizeof(Fuel_Stations) + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(Fuel_Stations); i++ )
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				format(line_str, sizeof line_str, "{FFFFFF}Gasolinera %d\t%.2f Km\n", sites + 1, (GetPlayerDistanceFromPoint(playerid, Fuel_Stations[i][fs_X], Fuel_Stations[i][fs_Y], Fuel_Stations[i][fs_Z]) * 0.01));
				strcat(dialog, line_str);

				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Gasolineras", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Concesionarios", DIALOG_PLAYER_GPS_SITE_7_String, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_8: //Policias
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[90 * (MAX_LISTITEMS + 1)];
			format(dialog, sizeof dialog, "Lugar\tDistancia\n");

			new line_str[90], sites;
			for(new i = 0; i != sizeof(ENTER_EXIT); i++ )
			{
				if(sites >= MAX_LISTITEMS) break;
				if(ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LS && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_SF && ENTER_EXIT[i][ee_INTERIOR_TYPE] != INTERIOR_POLICE_LV) continue;

				format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t%.2f Km\n", sites + 1, ENTER_EXIT[i][ee_NAME], (GetPlayerDistanceFromPoint(playerid, ENTER_EXIT[i][ee_EXT_X], ENTER_EXIT[i][ee_EXT_Y], ENTER_EXIT[i][ee_EXT_Z]) * 0.01));
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][sites] = i;
				sites ++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Policías", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[90 * (MAX_SU2_PROPERTIES + 2)], line_str[90];
					format(dialog, sizeof dialog, "Propiedad\tDistancia\n");
					for(new i = 0; i != MAX_SU2_PROPERTIES; i ++) PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU2_PROPERTIES) break;
							new property_name[24], Float:pos[3], bool:isnull_name;
							cache_get_value_name_int(i, "id", PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) cache_get_value_name(i, "name", property_name);
							cache_get_value_name_float(i, "ext_x", pos[0]);
							cache_get_value_name_float(i, "ext_y", pos[1]);
							cache_get_value_name_float(i, "ext_z", pos[2]);
							format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{"#SILVER_COLOR"}%.2f Km\n", i + 1, property_name, (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis propiedades", dialog, "» Continuar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM properties WHERE id_player = %d;", PI[playerid][pi_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[115 * (MAX_SU2_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU2_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new Float:pos[3];
					GetVehiclePos(i, pos[0], pos[1], pos[2]);

					new line_str[115];

					if(!PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE])
						format(line_str, sizeof line_str, "{666666}%d. %s (%d)\t{666666}%s\t{666666}-\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], i, GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					else
						format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}%.2f Km\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) * 0.01));

					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "GPS - Mis vehículos", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			new caption[40];
			format(caption, sizeof caption, "Propiedad - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[512];
			format(dialog, sizeof dialog, "1. Cambiar nombre de la propiedad\n2. Echar a todo del mundo de mi propiedad\n3. Poner música desde tu MP3\n4. Muebles\n");

			if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_DIS_DEFAULT_INTERIOR]) strcat(dialog, "5. Crear muebles por defecto\n");
			else strcat(dialog, "5. Eliminar muebles por defecto\n");

			if(PI[playerid][pi_CREW])
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES])
				{
					strcat(dialog, "6. Pasar a propiedad de banda\n");
				}
			}

			if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_GARAJE])
			{
				if(PI[playerid][pi_CREW])
				{
					if(IsPlayerInRangeOfPoint(playerid, 30.0, 488.118377, -422.914733, 2758.268798)) strcat(dialog, "7.Entrar a la casa\n");
					else strcat(dialog, "7.Entrar al garaje\n");
				}
				else
				{
					if(IsPlayerInRangeOfPoint(playerid, 30.0, 488.118377, -422.914733, 2758.268798)) strcat(dialog, "6.Entrar a la casa\n");
					else strcat(dialog, "6.Entrar al garaje\n");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			new dialog[85];
			format(dialog, sizeof dialog, "Nombre actual: %s\nIndica el nuevo nombre de la propiedad.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Propiedad - Cambiar nombre", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 0;
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 0;
			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 0;

			new dialog[800];
			format(dialog, sizeof dialog,
				"Vehículo: %s\n\
				Nivel necesario: %d\n\
				Precio del vehículo: %s$\n\
				Velocidad máxima: %d Km/h\n\
				Capacidad depósito: %.1f Litros\n\
				Espacio maletero: %d\n\
				Seguro: %s$\n\n",
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL],
				number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]),
				floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_VEL]),
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_BOOT_SLOTS],
				number_format_thousand(VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100)
			);

			new str[145];
			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > PI[playerid][pi_LEVEL])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Necesitas ser al menos nivel %d para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > PI[playerid][pi_VIP])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Necesitas membresía VIP (%d) para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(PI[playerid][pi_BANK_ACCOUNT] == 0)
			{
				strcat(dialog, "{"#RED_COLOR"}- Necesitas una cuenta bancaria para poder comprar vehículos.");
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > PI[playerid][pi_BANK_MONEY])
			{
				new diff = SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] - PI[playerid][pi_BANK_MONEY];
				format(str, sizeof str, "{"#RED_COLOR"}- Te faltan %s$ en tu cuenta bancaria para poder comprar este vehículo.", number_format_thousand(diff));
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > PI[playerid][pi_COINS])
			{
				format(str, sizeof str, "{"#RED_COLOR"}- Te faltan %d "SERVER_COIN" para poder comprar este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] - PI[playerid][pi_COINS]);
				strcat(dialog, str);
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(PI[playerid][pi_DRIVE_LICENSE_POINTS] == 0)
			{
				strcat(dialog, "{"#RED_COLOR"}- No puedes comprar vehículos sin una licencia.");
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = INVALID_VEHICLE_ID;
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Cerrar", "");
				return 1;
			}

			if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]) format(str, sizeof str, "Balance de tu cuenta bancaria: %s$\nBalance tras la compra: %s$\n\n¿De verdad desea comprar este vehículo?", number_format_thousand(PI[playerid][pi_BANK_MONEY]), number_format_thousand(PI[playerid][pi_BANK_MONEY] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
			else format(str, sizeof str, "Tus monedas: %d "SERVER_COIN"\nMonedas tras la compra: %d "SERVER_COIN"\n\n¿De verdad desea comprar este vehículo?", PI[playerid][pi_COINS], PI[playerid][pi_COINS] - SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
			strcat(dialog, str);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar vehículo", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Notaría", "{"#SILVER_COLOR"}Vender una propiedad al banco\n{"#SILVER_COLOR"}Vender un vehículo al banco\n{"#SILVER_COLOR"}Vender una propiedad a una persona\n{"#SILVER_COLOR"}Vender un vehículo a una persona", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[45 * (MAX_SU2_PROPERTIES + 2)], line_str[45];
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Propiedad\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_SU2_PROPERTIES) break;
							new property_name[24], bool:isnull_name;
							cache_get_value_name_int(i, "id", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i]);
							cache_is_value_name_null(i, "name", isnull_name);
							if(!isnull_name) cache_get_value_name(i, "name", property_name);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, property_name);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}No tienes propiedades");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la propiedad que quieres vender", dialog, "» Continuar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM properties WHERE id_player = %d;", PI[playerid][pi_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new Float:price, payment;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
			if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );

			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderla?", number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new Float:price, min_price, max_price;
			price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );

			new dialog[250];
			format(dialog, sizeof dialog,
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender esta propiedad?",
			number_format_thousand(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME]);

			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender esta propiedad por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			new dialog[240];
			format(dialog, sizeof dialog,
				"%s te quiere vender una propiedad.\n\n\
				Propiedad: %d\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar esta propiedad?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][pi_BANK_MONEY] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU2_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU2_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95];
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE]);
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres vender", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new Float:price, payment;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
			else payment = floatround( floatmul(price, 0.25) );

			new dialog[160];
			format(dialog, sizeof dialog, "Precio en mercado: %s$\nNosotros te pagaremos: %s$\n\n¿Estás seguro de que quiere venderlo?", number_format_thousand( VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] ), number_format_thousand(payment));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, caption, dialog, "Vender", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new Float:price, min_price, max_price;
			price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
			min_price = floatround( floatmul(price, 0.15) );
			max_price = floatround( floatmul(price, 6.0) );

			new dialog[250];
			format(dialog, sizeof dialog,
			"Precio en mercado: %s$\n\nPrecio mínimo de venta: %s$\nPrecio máximo de venta: %s$\n\n¿Por cuánto quieres vender este vehículo?",
			number_format_thousand(VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE]),
			number_format_thousand(min_price),
			number_format_thousand(max_price));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			new caption[40];
			format(caption, sizeof caption, "Vender - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[250];
			format(dialog, sizeof dialog, "De acuerdo, quieres vender este vehículo por %s$.\n\nIndica el nombre o playerid del comprador.\nEl comprador debe estar en la sala y cumplir todos los requisitos.", number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			new dialog[300];
			format(dialog, sizeof dialog,
				"%s te quiere vender un vehículo.\n\n\
				Vehículo: %s\n\
				Matrícula: %s\n\
				Precio: %s$\n\n\
				Balance tras la compra: %s$\n\n\
				¿Quieres comprar este vehículo?",
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_RP_NAME],
				VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME],
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_NUMBER_PLATE],
				number_format_thousand(PLAYER_TEMP[playerid][pt_NOTARY_PRICE]),
				number_format_thousand( PI[playerid][pi_BANK_MONEY] - PLAYER_TEMP[playerid][pt_NOTARY_PRICE] )
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Oferta recibida", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];

				if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			new dialog[105 * (sizeof(Truck_Contents) + 2)], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#BLUE_COLOR"}Beneficios\t{"#SILVER_COLOR"}Distancia\n");
			for(new i = 0; i != sizeof Truck_Contents; i ++)
			{
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;

				new line_str[105];
				if(Truck_Contents[i][truck_content_EXP] > PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\t{666666}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s$\t{"#SILVER_COLOR"}%.2f Km\n", Truck_Contents[i][truck_content_NAME], number_format_thousand(Truck_Contents[i][truck_content_MONEY] + work_extra_payment), (GetPlayerDistanceFromPoint(playerid, Truck_Contents[i][truck_content_X], Truck_Contents[i][truck_content_Y], Truck_Contents[i][truck_content_Z]) * 0.01));
					strcat(dialog, line_str);
				}

				listitem++;
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la carga", dialog, "» Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[45], dialog[80 * TOTAL_TUNING_PARTS], line_str[80];
					format(caption, sizeof caption, "Tuning - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= TOTAL_TUNING_PARTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Parts' al intentar cargar de la base de datos.");
								break;
							}

							cache_get_value_index(i, 0, PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}Este vehículo no se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.part FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents.modelid = %d GROUP BY vcomponents_info.part;", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[45], dialog[75 * MAX_TUNING_PARTS_COMPONENTS], line_str[75];
					format(caption, sizeof caption, "%s > %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Categoría\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							if(i >= MAX_TUNING_PARTS_COMPONENTS)
							{
								printf("---> Límite superado en array 'PLAYER_TUNING_MENU, dialog Partsnames' al intentar cargar de la base de datos.");
								break;
							}

							cache_get_value_name_int(i, "id", PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID]);
							cache_get_value_name(i, "name", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME]);
							cache_get_value_name_int(i, "pieces", PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES]);
							format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%d\t{"#SILVER_COLOR"}%s$\n", PLAYER_TUNING_MENU[playerid][i][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES], number_format_thousand(PLAYER_TUNING_MENU[playerid][i][tuning_menu_PIECES] * 50));
							strcat(dialog, line_str);
						}
					}
					else strcat(dialog, "{666666}No se puede tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Atrás");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vcomponents_info.id, vcomponents_info.name, vcomponents_info.pieces FROM vcomponents_info INNER JOIN vcomponents ON vcomponents_info.id = vcomponents.componentid WHERE vcomponents_info.part = '%e' AND vcomponents.modelid = %d;", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_GRAFFITI_EDIT: {
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_EDIT, DIALOG_STYLE_LIST, "Graffiti", "1. Cambiar posición\n2. Editar texto\n3. Borrar", "» Continuar", "Cerrar");
		}
		case DIALOG_MECANICO_MENU:
		{
			new caption[60];
			format(caption, sizeof caption, "%s piezas disponibles - %s", number_format_thousand(PI[playerid][pi_MECANICO_PIECES]), VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new dialog[450];
			format(dialog, sizeof dialog,
			"\
				{"#SILVER_COLOR"}Opción\t{"#BLUE_COLOR"}Piezas necesarias\t{"#SILVER_COLOR"}Estimación\n\
				{"#SILVER_COLOR"}Reparación completa\t{"#BLUE_COLOR"}10\t{"#SILVER_COLOR"}500$\n\
			");

			for(new i; i != sizeof Areas_Mecanico; i++)
				if(IsPlayerInDynamicArea(playerid, Areas_Mecanico[i]))
				{
					new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] );
					strcat(dialog, "{"#SILVER_COLOR"}Pintar vehículo\t{"#BLUE_COLOR"}5\t{"#SILVER_COLOR"}250$\n");
					if(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL] >= 3)
					{
						strcat(dialog, "{"#SILVER_COLOR"}Eliminar componentes\n");
						strcat(dialog, "{"#SILVER_COLOR"}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{"#SILVER_COLOR"}Paintjob\t{"#BLUE_COLOR"}15\t{"#SILVER_COLOR"}750$\n");
					}
					else
					{
						strcat(dialog, "{666666}Eliminar componentes\n");
						strcat(dialog, "{666666}Tunear vehículo\n");
						if(paintjobs > 0) strcat(dialog, "{666666}Paintjob\t{666666}15\t{666666}750$\n");
					}
					break;
				}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_REPAIR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Reparar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio de la reparación.\nRango de precio: 0$ - 2.000$", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_COLOR_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para pintar el vehículo.\nRango de precio: 0$ - 1.750$", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_TUNING_PRICE:
		{
			new caption[60], dialog[145];
			format(caption, sizeof caption, "Tunear %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, "Indica el precio para tunear el vehículo.\nRango de precio: 0$ - %s$", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_PAINTJOB_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Paintjob %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			if(PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] == 3)
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "» Continuar", "Atrás");
			else
				ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para el paintjob del vehículo.\nRango de precio: 0$ - 2.750$", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_REM_COM_PRICE:
		{
			new caption[60];
			format(caption, sizeof caption, "Eliminar componente de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Indica el precio para eliminar el componente del vehículo.\nRango de precio: 0$ - 2.750$", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_ACCEPT:
		{
			new dialog[300];
			format(dialog, sizeof dialog,

				"\
					{"#SILVER_COLOR"}El Mecánico %s te ofrece:\n\
						\t%s\n\
					\n\
					{"#SILVER_COLOR"}Precio: %s$\n\
					¿Quieres aceptarlo?\n\
				",
					PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pt_RP_NAME],
					PLAYER_TEMP[playerid][pt_MECANICO_TEXT],
					number_format_thousand(PLAYER_TEMP[playerid][pt_MECANICO_PRICE])
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mecánico", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_MECANICO_SELECT_COL_SLOT:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "{"#SILVER_COLOR"}Pintar color primario\n{"#SILVER_COLOR"}Pintar color secundario", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_SELECT_COLOR, DIALOG_PLANE_SELECT_COLOR, DIALOG_BOAT_SELECT_COLOR:
		{
			new caption[60];
			format(caption, sizeof caption, "Pintar %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);


			new dialog[15 * (sizeof(VEHICLE_COLORS) + 1) ];
			for(new i = 0; i != sizeof VEHICLE_COLORS; i++)
			{
				new line_str[15];
				format(line_str, sizeof(line_str), "{%06x}%d\n", VEHICLE_COLORS[i] >>> 8, i);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_MECANICO_REMOVE_COMPONEN:
		{
			inline OnComponentsInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new caption[60], dialog[80 * (MAX_VEHICLE_COMPONENTS + 2) ], count, line_str[80];
					format(caption, sizeof caption, "Componentes de %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Componente\t{"#BLUE_COLOR"}Piezas\n");
					if(rows)
					{
						for(new i = 0; i != rows; i ++)
						{
							new id, part[24], name[24];
							cache_get_value_name_int(i, "id", id);
							PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] = GetVehicleComponentIndexFromId(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], id);
							if(PLAYER_TUNING_MENU[playerid][count][tuning_menu_ID] != -1)
							{
								cache_get_value_name(i, "part", part);
								cache_get_value_name(i, "name", name);
								cache_get_value_name_int(i, "pieces", PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s > %s\t{"#BLUE_COLOR"}+ %d\n", part, name, PLAYER_TUNING_MENU[playerid][count][tuning_menu_PIECES]);
								strcat(dialog, line_str);
								count++;
							}
							else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear");
						}
					}
					else strcat(dialog, "{"#SILVER_COLOR"}Vehículo sin tunear");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Eliminar", "Atrás");
				}
			}

			new components_query[1024], count;
			format(components_query, sizeof components_query, "SELECT * FROM vcomponents_info WHERE");
			for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
			{
				PLAYER_TUNING_MENU[playerid][i][tuning_menu_ID] = -1;
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]) continue;
				if(count == 0) format(components_query, sizeof components_query, "%s id = %d", components_query, GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				else format(components_query, sizeof components_query, "%s OR id = %d", components_query, GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][i]);
				count ++;
			}
			if(!count) SendNotification(playerid, "Vehículo sin tunear.");
			else mysql_tquery_inline(mysql_db, components_query, using inline OnComponentsInfoLoad);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			new caption[60], dialog[25 * 4];
			format(caption, sizeof caption, "Paintjob - %s", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			new paintjobs = VehiclePaintjob( GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_MODELID] );
			if(paintjobs == 0)
			{
				SendNotification(playerid, "Este vehículo no soporta paintjobs.");
				ShowDialog(playerid, DIALOG_MECANICO_MENU);
				return 1;
			}

			strcat(dialog, "{"#SILVER_COLOR"}Eliminar paintjob (+ 15 piezas)\n");
			for(new i = 0; i != paintjobs; i ++)
			{
				new line_str[25];
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Paintjob %d\n", i + 1);
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SEED_LIST:
		{
			new dialog[64 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Nombre\tPrecio por semilla\n");

			for(new i = 0; i != sizeof seed_info; i ++)
			{
				new line_str[64];
				if(PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] >= seed_info[i][seed_info_EXP])
				{
					if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
					else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);
				}
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%d$\n", seed_info[i][seed_info_NAME], seed_info[i][seed_info_PRICE]);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Semillas", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vale, quieres comprar semillas de %s.\n{"#SILVER_COLOR"}El precio por semilla es de: %d$\n\n{"#SILVER_COLOR"}¿Cuántas semillas quieres comprar?", seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Semillas", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			new dialog[95 * (sizeof(seed_info) + 1)];
			format(dialog, sizeof dialog, "Planta\tSemilla requerida\tSemillas necesarias\n");

			for(new i = 0; i != sizeof plant_info; i ++)
			{
				new line_str[95];

				if(seed_info[i][seed_info_TYPE] == TYPE_LEGAL) format(line_str, sizeof line_str, "{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);
				else format(line_str, sizeof line_str, "{"#RED_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", plant_info[i][plant_info_NAME], seed_info[i][seed_info_NAME], plant_info[i][plant_info_SEEDS]);

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Plantar", dialog, "» Continuar", "Cerrar");
		}
		case DIALOG_BLACK_MARKET:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Mercado negro", "{"#SILVER_COLOR"}Comprar armas\n{"#SILVER_COLOR"}Comprar munición para mis armas", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			new dialog[64 * (sizeof(BLACK_MARKT_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#SILVER_COLOR"}Precio\n");

			for(new i = 0; i != sizeof BLACK_MARKT_WEAPONS; i ++)
			{
				new line_str[64];
				if(BLACK_MARKT_WEAPONS[i][black_market_EXP] > PI[playerid][pi_BLACK_MARKET_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", WEAPON_INFO[ BLACK_MARKT_WEAPONS[i][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");

			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 3$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");

			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = 13 + 20;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Mis armas", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Eliminar todo", "¿Estás seguro de que quiere eliminar todas sus armas?", "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\n¿Estás seguro de que quiere eliminar esta arma?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Mis armas - Tirar arma", dialog, "Tirar", "Cerrar");
			return 1;
		}
		case DIALOG_ANIMS: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Animaciones", DIALOG_ANIMS_String, "» Continuar", "X");
		case DIALOG_TRICKS_FOOD:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: alimento\nNombre: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_POCKET[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_pocket_object_NAME],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: medicamento\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: marihuana\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: crack\nCantidad: %dg\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			new dialog[150];
			format(dialog, sizeof dialog, "%s te quiere vender %d "SERVER_COIN"\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA],
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			new dialog[180];
			format(dialog, sizeof dialog, "%s te quiere vender algo.\n\nTipo: arma\nNombre: %s\nMunición: %s\nPrecio: %s$\n\n¿Quieres comprárselo?",
									PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_RP_NAME],
									WEAPON_INFO[ PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME],
									number_format_thousand(PLAYER_WEAPONS[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_AMMO]),
									number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE])
								);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Ventas", dialog, "Aceptar", "Cancelar");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
			if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

			new dialog[128 * (MAX_BOOT_SLOTS + 2)], line_str[128], listitem;
			format(dialog, sizeof dialog, "Tipo\tDescripción\n");

			for(new i = 0; i != max_slots; i ++)
			{
				if(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_VALID])
				{
					switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE])
					{
						case BOOT_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_TYPE]), number_format_thousand(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i][vehicle_boot_INT]));
							strcat(dialog, line_str);
						}
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, "Maletero de %s (%d espacios disponibles)", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME], max_slots - listitem);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_BOOT_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Cerrar");
		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su maletero?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Opciones", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			new dialog[190];

			switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE])
			{
				case BOOT_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME], number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA] ));
				case BOOT_TYPE_MEDICINES, BOOT_TYPE_CANNABIS, BOOT_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetBootTypeName(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]), number_format_thousand( VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Maletero - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_SELECT_WORK_SKIN:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			
			new dialog[60 * sizeof(WORK_SKINS)], line_str[60], listitem, work = GetIDFaccionPlayer(playerid);
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Ropa\t{"#SILVER_COLOR"}Rango necesario\n");
			for(new i = 0; i != sizeof WORK_SKINS; i ++)
			{
				if(WORK_SKINS[i][type_skin_WORK] != work) continue;
				if(WORK_SKINS[i][work_skin_TYPE] != PI[playerid][pi_GENERO]) continue;
				
				if(WORK_SKINS[i][work_skin_RANK] > PLAYER_WORKS[playerid][work][pwork_LEVEL])
				{ 
					if(work == WORK_POLICE) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", WORK_SKINS[i][work_skin_SKIN], POLICE_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
					else if(work == WORK_MECANICO) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", WORK_SKINS[i][work_skin_SKIN], MECANICO_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
					else if(work == WORK_FBI) format(line_str, sizeof line_str, "{666666}%d\t{666666}%s\n", WORK_SKINS[i][work_skin_SKIN], FBI_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
				}
				else 
				{
					if(work == WORK_POLICE) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%s\n", WORK_SKINS[i][work_skin_SKIN], POLICE_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
					else if(work == WORK_MECANICO) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%s\n", WORK_SKINS[i][work_skin_SKIN], MECANICO_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
					else if(work == WORK_FBI) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d\t{"#SILVER_COLOR"}%s\n", WORK_SKINS[i][work_skin_SKIN], FBI_RANKS[ WORK_SKINS[i][work_skin_RANK] ]);
				}
				strcat(dialog, line_str);
				
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la ropa", dialog, "Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PLAYERS_WORK_LIST:
		{
			new work = GetIDFaccionPlayer(playerid);
			if(work == -1) return 1;

			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i ++)
					{
						new level, id, name[24], last_connection[24], connected;
						cache_get_value_name_int(i, "level", level);
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);

						if(connected) 
						{
							if(work == WORK_POLICE) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, POLICE_RANKS[level]);
							else if(work == WORK_MECANICO) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, MECANICO_RANKS[level]);
							else if(work == WORK_FBI) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, FBI_RANKS[level]);
						}
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, FBI_RANKS[level], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");

					new caption[28];
					if(work == WORK_POLICE) format(caption, sizeof caption, "Policías");
					else if(work == WORK_MECANICO) format(caption, sizeof caption, "Mecánicos");
					else if(work == WORK_FBI) format(caption, sizeof caption, "Integrantes de Fort Knox");

					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.id, player.name, player.last_connection, player.connected FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_work = %d AND pworks.`set` = 1 ORDER BY player.connected DESC, pworks.level DESC LIMIT %d, %d;", work, PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_WORK_RADIOS:
		{
			if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) return 1;

			new dialog[64 * 6];
			for(new i = 0; i != 6; i ++)
			{
				new players = CountWorkRadioPlayers(PLAYER_TEMP[playerid][pt_WORKING_IN], i);

				if(PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO] == i) strcat(dialog, "{"#SILVER_COLOR"}");
				else strcat(dialog, "{666666}");
				format(dialog, sizeof dialog, "%sFrecuencia %d:\t%d personas\n", dialog, i, players);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Selecciona la frecuencia", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_WORK_RANK_MODIFY:
		{
			new work = GetIDFaccionPlayer(playerid);
			if(work == -1) return 1;

			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new level, name[24];
						cache_get_value_name_int(0, "level", level);
						cache_get_value_name(0, "name", name);

						if(work == WORK_POLICE)
						{
							if(level > PLAYER_WORKS[playerid][work][pwork_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este policía porque es un rango superior al tuyo.");
							else
							{
								new caption[45], dialog[45 * sizeof(POLICE_RANKS)], line_str[45];
								format(caption, sizeof caption, "policía - %s", name);
								format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
								for(new i = 1; i != sizeof POLICE_RANKS; i ++)
								{
									if(i > PLAYER_WORKS[playerid][work][pwork_LEVEL])
									{
										if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", POLICE_RANKS[i]);
										else format(line_str, sizeof line_str, "{666666}%s\n", POLICE_RANKS[i]);
									}
									else
									{
										if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", POLICE_RANKS[i]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", POLICE_RANKS[i]);
									}
									strcat(dialog, line_str);
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
							}
						}
						else if(work == WORK_MECANICO)
						{
							if(level > PLAYER_WORKS[playerid][work][pwork_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este mecánico porque es un rango superior al tuyo.");
							else
							{
								new caption[45], dialog[45 * sizeof(MECANICO_RANKS)], line_str[45];
								format(caption, sizeof caption, "mecánico - %s", name);
								format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
								for(new i = 1; i != sizeof MECANICO_RANKS; i ++)
								{
									if(i > PLAYER_WORKS[playerid][work][pwork_LEVEL])
									{
										if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", MECANICO_RANKS[i]);
										else format(line_str, sizeof line_str, "{666666}%s\n", MECANICO_RANKS[i]);
									}
									else
									{
										if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", MECANICO_RANKS[i]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", MECANICO_RANKS[i]);
									}
									strcat(dialog, line_str);
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
							}
						}
						else if(work == WORK_MECANICO)
						{
							if(level > PLAYER_WORKS[playerid][work][pwork_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este integrante porque es un rango superior al tuyo.");
							else
							{
								new caption[45], dialog[45 * sizeof(FBI_RANKS)], line_str[45];
								format(caption, sizeof caption, "FBI - %s", name);
								format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Civil (eliminar)\n");
								for(new i = 1; i != sizeof FBI_RANKS; i ++)
								{
									if(i > PLAYER_WORKS[playerid][work][pwork_LEVEL])
									{
										if(level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", FBI_RANKS[i]);
										else format(line_str, sizeof line_str, "{666666}%s\n", FBI_RANKS[i]);
									}
									else
									{
										if(level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", FBI_RANKS[i]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", FBI_RANKS[i]);
									}
									strcat(dialog, line_str);
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
							}
						}
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d AND pworks.`set` = 1;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], work);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_WORK_WEAPON_SHOP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Equiparse", "{"#SILVER_COLOR"}Comprar armas\n{"#SILVER_COLOR"}Comprar munición para mis armas\n{"#SILVER_COLOR"}Comprar chaleco antibalas", "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_WORK_SELECT_WEAPON:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * 15], line_str[95], listitem;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");

			for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
			{
				if(!PLAYER_WEAPONS[playerid][i][player_weapon_VALID]) continue;

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[playerid][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][i][player_weapon_AMMO]), i);
				strcat(dialog, line_str);

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				listitem ++;
			}
			if(listitem == 0) strcat(dialog, "{666666}No tienes armas");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona la arma a la que quieres comprarle munición", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_WORK_AMMO:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Arma: %s\nMunición: %s\n\nEl precio por bala es de 2$\n¿Cuánto munición quiere comprar?", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO]));

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Comprar munición", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_WORK_ARMOUR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Comprar chaleco", "El precio del chaleco antibalas es de 300$.\n¿Lo quieres comprar?", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_WORK_WEAPONS:
		{
			new dialog[64 * (sizeof(WORK_SHOP_WEAPONS) + 2)];
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Producto\t{"#SILVER_COLOR"}Precio\n");

			for(new i = 0; i != sizeof WORK_SHOP_WEAPONS; i ++)
			{
				new line_str[64], work = GetIDFaccionPlayer(playerid);
				if(WORK_SHOP_WEAPONS[i][work_shop_RANK] > PLAYER_WORKS[playerid][work][pwork_LEVEL])
				{
					format(line_str, sizeof line_str, "{666666}%s\t{666666}%s$\n", WEAPON_INFO[ WORK_SHOP_WEAPONS[i][work_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(WORK_SHOP_WEAPONS[i][work_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
				else
				{
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", WEAPON_INFO[ WORK_SHOP_WEAPONS[i][work_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(WORK_SHOP_WEAPONS[i][work_shop_WEAPON_PRICE]));
					strcat(dialog, line_str);
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Armas", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, ""SERVER_NAME" v"SERVER_VERSION"",

				"\
					{"#SILVER_COLOR"}- General\n\
					{"#SILVER_COLOR"}- Información\n\
					{"#SILVER_COLOR"}- Personaje\n\
					{"#SILVER_COLOR"}- Propiedades\n\
					{"#SILVER_COLOR"}- Reportar\n\
					{"#SILVER_COLOR"}- Trabajos\n\
					{"#SILVER_COLOR"}- Vehículos\n\
					{"#SILVER_COLOR"}- Bandas\n\
					{"#PRIMARY_COLOR"}- Membresía VIP\n\
				"

			, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_GENERAL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "General",

				"\
					{FFFFFF}Un día del juego dura tres horas reales.\n\
					\n\
					Para subir de nivel necesitas rellenar la reputación, puedes verlo gráficamente\n\
					en la barra que aparece en la parte superior derecha que representa tu reputación.\n\
					La reputación se aumenta cada {"#PRIMARY_COLOR"}25 minutos,{FFFFFF} cuando la reputación llegue\n\
					al límite podrás subir al siguiente nivel con el comando {"#SILVER_COLOR"}/comprarnivel.\n\
					{FFFFFF}El pago de juego(payday) se recibe cada tres reputaciones {"#PRIMARY_COLOR"}(75 minutos).\n\
					{FFFFFF}Puedes utilizar {"#SILVER_COLOR"}/csave{FFFFFF} para guardar los datos de tu cuenta.\n\
					\n\
					Para cargar a alguien usa {"#SILVER_COLOR"}/cargarpj y /soltarpj{FFFFFF}, usarlo solo en rol o cuando esten heridos.\n\
					Sistema de TV's!!! Usa:{"#SILVER_COLOR"}/tv [CANAL] y /offtv{FFFFFF}, para sincronizar canales y para apagar la TV.\n\
					Utiliza {"#SILVER_COLOR"}/estadisticas{FFFFFF} para ver tus estadísticas, utiliza {"#SILVER_COLOR"}/exp{FFFFFF} para ver tus habilidades.\n\
					En el nivel uno no podrás agredir a otros jugadores, tampoco podrás tener armas\n\
					hasta el nivel tres.\n\
					Utiliza {"#SILVER_COLOR"}/nombre{FFFFFF} para cambiar tu nombre.\n\
					Utiliza {"#SILVER_COLOR"}/correo{FFFFFF} para cambiar tu correo electrónico.\n\
					Utiliza {"#SILVER_COLOR"}/pass{FFFFFF} para cambiar la contraseña de tu cuenta.\n\
					Para ver el tiempo que te queda en la cárcel utiliza {"#SILVER_COLOR"}/tiempo.\n\
					\n\
					{FFFFFF}Para utilizar el canal de dudas utiliza el comando {"#SILVER_COLOR"}/duda{FFFFFF} seguido de tu duda.\n\
					Para deshabilitar o volver a habilitar el canal de dudas usa {"#SILVER_COLOR"}/dudas.\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/panel {FFFFFF}para configuraciones básicas de tu cuenta.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_INFO:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Información", DIALOG_CREDIT_String, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_CHARACTER:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Personaje",

				"\
					{FFFFFF}Para poder localizar cualquier punto en San Andreas puedes abrir la App\n\
					desde tu télefono ({FF846A}GPS{FFFFFF}) Desde el GPS podrás localizarlo todo, tus vehículos,\n\
					tus propiedades, trabajos, lugares de interés, etc.\n\
					\n\
					Utiliza tu teléfono para llamar a la policía, Mecánico, taxi... o para hablar con\n\
					alguien, por defecto tendrás varios contactos en la agenda pero puedes eliminarlos\n\
					o añadir más, puedes tener hasta 20 contactos, todo esto se hace desde {"#SILVER_COLOR"}/movil{FFFFFF} o {"#SILVER_COLOR"}/celular.\n\
					\n\
					{FFFFFF}En las tiendas {FF846A}24/7{FFFFFF} puedes comprar guías para saber el número de cualquier jugador.\n\
					Para evitar aparecer en la guía utiliza {"#SILVER_COLOR"}/sguia.\n\
					\n\
					{FFFFFF}Las barras en la esquina superior derecha representan tu nivel de hidratación y de alimentación,\n\
					si los niveles llegan muy abajo tu personaje se empezará a sentir mal y empezarás a perder vida.\n\
					Los niveles bajarán según tu actividad física, corriendo te dará sed más pronto que caminando.\n\
					Para alimentarte ve a un restaurante de cómida rápida o a un {FF846A}24/7{FFFFFF} donde podrás comprar alimentos,\n\
					que podrás consumir el cualquier momento con {"#SILVER_COLOR"}/alimentos{FFFFFF} o {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes dar objetos con el comando {"#SILVER_COLOR"}/dar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man dar.\n\
					{FFFFFF}Puedes deshacerte de tus objetos con el comando {"#SILVER_COLOR"}/tirar,{FFFFFF} para más información utiliza {"#SILVER_COLOR"}/man tirar.\n\
					{FFFFFF}Puedes vender objetos con el comando {"#SILVER_COLOR"}/vender, para más información utiliza {"#SILVER_COLOR"}/man vender.\n\
					{FFFFFF}Para consumir consumibles que lleves contigo utiliza {"#SILVER_COLOR"}/consumir.\n\
					\n\
					{FFFFFF}Puedes cambiar la ropa de tu personaje en cualquier tienda de ropa, también\n\
					podrás comprarte accesorios y ponertelos o quitartelos {"#SILVER_COLOR"}(/accesorios).\n\
					\n\
					{FFFFFF}Si tienes nivel de búsqueda o estás arrestado y mueres irás a la cárcel después de recuperarte.\n\
					Cuando te arresten los policías te pueden requisar tus pertenencias ilegales {FF846A}(armas y drogas).\n\
					\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/inv{FFFFFF} o pulsa {"#SILVER_COLOR"}N {FFFFFF}para ver todo lo que llevas encima.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/estilo{FFFFFF} para cambiar el estilo de tu personaje.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_PROPERTIES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedades",

				"\
					{FFFFFF}Puedes encontrar diferentes propiedades en todo {FF846A}San Andreas,{FFFFFF} para comprarla tendrás que saber la\n\
					ID de la propiedad e ir a cualquier banco para comprarla, el dinero se descuenta de la cuenta bancaria.\n\
					\n\
					Puedes localizar tus propiedades desde la App Casas en tu télefono.\n\
					Puedes dejar pasar a cualquiera a tu propiedad, solo tiene que tocar el timbre\n\
					y tu elijes si quieres dejarlo pasar o no.\n\
					\n\
					Si quieres echar a alguien que está dentro de tu propiedad utiliza el comando {"#SILVER_COLOR"}/echar.\n\
					{FFFFFF}Dentro de la propiedad sitúate en la puerta interior y pon {"#SILVER_COLOR"}/casa,{FFFFFF} desde ahí podras\n\
					cambiar el nombre de la propiedad para así localizarla más fácilmente en el GPS.\n\
					{FFFFFF}también podrás echar a todos los huéspedes de tu propiedad.\n\
					Si tienes un MP3 podrás poner música en él y hacer que se reproduzca para toda la gente\n\
					que haya dentro de la propiedad.\n\
					\n\
					Si quieres vender tu propiedad puedes hacerlo en {"#PRIMARY_COLOR"}\"Gobierno San Andreas\"{FFFFFF}, localizaló en el GPS.\n\
					Puedes vendersela al banco al instante, pero te darán solo el 25% de lo que te costó {FF846A}(50% VIP).\n\
					{FFFFFF}también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu propiedad a un jugador puedes ponerla en {"#SILVER_COLOR"}/tienda.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_REPORT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Reportar",

				"\
					{FFFFFF}Para un reporte simple utiliza {"#SILVER_COLOR"}/reportar ID{FFFFFF} para reportar a un jugador.\n\
					\n\
					Para reportes más detallado debes publicarlos en el foro aportando imágenes.\n\
					Los reportes de fallos o bugs también deberías hacerlo en el foro junto con imágenes.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_VEHICLES:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Vehículos",

				"\
					{FF846A}GENERAL\n\
					{FFFFFF}Para arrancar o detener un vehículo presiona {"#SILVER_COLOR"}2 {FFFFFF}o utiliza {"#SILVER_COLOR"}/motor.\n\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/luces{FFFFFF} para encender o apagar las luces del vehículos.\n\
					Si tu vehículo se daña tendrás que llamar a un Mecánico desde tu móvil para que lo repare.\n\
					\n\
					Cada vehículo tiene su cantidad máxima del depósito de gasolina.\n\
					Para repostar el vehículo debes ir a cualquier gasolinera, puedes localizarlas con el GPS.\n\
					también puedes comprar un bidón de gasolina para {"#SILVER_COLOR"}/vertir{FFFFFF} gasolina en cualquier momento.\n\
					Si tienes un MP3 puedes poner una canción en el vehículo con el comando {"#SILVER_COLOR"}/vmp3.\n\
					\n\
					\n\
					{FF846A}VEHICULOS PERSONALES\n\
					{FFFFFF}Para comprarlos ve a cualquier concesionario.\n\
					El dinero para comprarlo es el de la cuenta bancaria.\n\
					Para localizar tus vehículos utiliza el GPS.\n\
					\n\
					Utiliza {"#SILVER_COLOR"}/abrir{FFFFFF} para abrir las puertes de tu vehículo, utiliza {"#SILVER_COLOR"}/cerrar{FFFFFF} para cerrarlas.\n\
					Puedes estacionar tu vehículo con el comando {"#SILVER_COLOR"}/estacionar.\n\
					{FFFFFF}Cuando tu vehículo sea destruido recibirás uno nuevo en tu último estacionamiento.\n\
					Para pintar, tunear o modificar tu vehículo tendrás que hacerlo en el Mecánico.\n\
					\n\
					Puedes guardar cosas en el maletero del vehículo con el comando {"#SILVER_COLOR"}/guardar.\n\
					{FFFFFF}Para sacar cosas del maletero puedes utilizar {"#SILVER_COLOR"}/maletero.\n\
					\n\
					{FFFFFF}Si quieres vender tu vehículo puedes hacerlo en \"Gobierno San Andreas\", localizó en el GPS.\n\
					Puedes venderselo al banco, pero te darán solo el 25% de lo que te costó (50% VIP).\n\
					también se la puedes vender a otro jugador, dentro de un rango de precio pre-establecido.\n\
					Para vender tu vehículo a un jugador puedes ponerlo en {"#SILVER_COLOR"}/tienda.\n\
					{FFFFFF}Al vender tu vehículo se venderá con todo lo que haya en el maletero.\n\
					\n\
				"
			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			new dialog[45 * sizeof work_info], line_str[45];
			for(new i = 1; i != sizeof work_info; i ++)
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}- %c%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1]);
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Trabajos", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_HELP_CREWS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Bandas",

				"\
					{FFFFFF}Utiliza {"#SILVER_COLOR"}/banda{FFFFFF} para crear una banda o administrar la tuya.\n\
					{FFFFFF}Se requieren de mínimo 3 miembros para conquitar un territorio libre.\n\
					{FFFFFF}y mínimo 5 miembros para conquistar un territorio de otra banda.\n\
					{FFFFFF}Recuerda que puedes pedir tu mapeo exclusivo mediante discord.\n\
					{FFFFFF}/abandonar para abandonar territorios.\n\
					{FFFFFF}/graffiti para pintar graffitis\n\
					\n\
					{FFFFFF}Visita {FF846A}"SERVER_WEBSITE" {FFFFFF}para más información.\n\
					\n\
				"

			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_VIPS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "VIPS",
				"\
					VIP 1\n\
					VIP 2\
				"
				, "Aceptar", "Cerrar");
		}
		case DIALOG_HELP_SU:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Membresía VIP",

				"\
					{"#SILVER_COLOR"}Puedes comprar VIP 1 por 30 días con el comando /vip.\n\
					{"#SILVER_COLOR"}Se compra con "SERVER_COIN", para ver como comprar esta moneda visita nuestra web.\n\
					\n\
					{"#PRIMARY_COLOR"}Ventajas\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_WORKS" trabajos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_VEHICLES" vehículos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_TOYS" accesorios.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_PROPERTIES" propiedades.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU_PROPERTY_OBJECTS" muebles por propiedad.\n\
					{"#SILVER_COLOR"}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{"#SILVER_COLOR"}- No pierdes chaleco al morir.\n\
					{"#SILVER_COLOR"}- Se te regalará 50g de medicamentos\n\
					{"#SILVER_COLOR"}- Al vender un vehículo o propiedad al banco recibes un 50%.\n\
					{"#SILVER_COLOR"}- Te recuperas el doble de rápido en el hospital.\n\
					{"#SILVER_COLOR"}- Al recuperarte tu vida es del 100%.\n\
					{"#SILVER_COLOR"}- Reducción de la condena a la mitad.\n\
					{"#SILVER_COLOR"}- Cuando un médico te cura vida al 50%.\n\
					{"#SILVER_COLOR"}- Pagas extras de 300$ en algunos trabajos.\n\
					\n\
					{"#SILVER_COLOR"}Visita {"#PRIMARY_COLOR"}"SERVER_WEBSITE" {"#SILVER_COLOR"}para más información.\n\
					\n\
				"

			, "Cerrar", "");
			return 1;
		}
		case DIALOG_HELP_SU2:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Membresía VIP",

				"\
					{"#SILVER_COLOR"}Puedes comprar VIP 2 por 30 días con el comando /vip.\n\
					{"#SILVER_COLOR"}Se compra con "SERVER_COIN", para ver como comprar esta moneda visita nuestra web.\n\
					\n\
					{"#PRIMARY_COLOR"}Ventajas\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU2_WORKS" trabajos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU2_VEHICLES" vehículos.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU2_TOYS" accesorios.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU2_PROPERTIES" propiedades.\n\
					{"#SILVER_COLOR"}- Tener "#MAX_SU2_PROPERTY_OBJECTS" muebles por propiedad.\n\
					{"#SILVER_COLOR"}- No pagas seguro de propiedades ni vehículos en el Payday.\n\
					{"#SILVER_COLOR"}- No pierdes chaleco al morir.\n\
					{"#SILVER_COLOR"}- Se te regalará 50g de medicamentos\n\
					{"#SILVER_COLOR"}- Al vender un vehículo o propiedad al banco recibes un 50%.\n\
					{"#SILVER_COLOR"}- Te recuperas el doble de rápido en el hospital.\n\
					{"#SILVER_COLOR"}- Al recuperarte tu vida es del 100%.\n\
					{"#SILVER_COLOR"}- Reducción de la condena a la mitad.\n\
					{"#SILVER_COLOR"}- Cuando un médico te cura vida al 50%.\n\
					{"#SILVER_COLOR"}- Pagas extras de 300$ en algunos trabajos.\n\
					{"#SILVER_COLOR"}- Acceso al sistema de /estrobos.\
					\n\
					{"#SILVER_COLOR"}Visita {"#PRIMARY_COLOR"}"SERVER_WEBSITE" {"#SILVER_COLOR"}para más información.\n\
					\n\
				"

			, "Cerrar", "");
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, pid, admin_level;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "playerid", pid);
						cache_get_value_name_int(i, "admin_level", admin_level);

						if(connected)
						{
							if(PLAYER_TEMP[pid][pt_ADMIN_SERVICE]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Duty (%d)\n", start_pos + i, name, GetNameRankAdmin(pid), pid);
							else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado (%d)\n", start_pos + i, name, GetNameRankAdmin(pid), pid);
						}
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, ADMIN_LEVELS[admin_level], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Administradores", dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, playerid, admin_level FROM player WHERE admin_level > 0 ORDER BY connected DESC, admin_level DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], admin_level;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "admin_level", admin_level);

						if(admin_level > PI[playerid][pi_ADMIN_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
						else
						{
							new caption[45], dialog[45 * sizeof(ADMIN_LEVELS)], line_str[45];
							format(caption, sizeof caption, "Admin - %s", name);
							format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Normal (eliminar)\n");

							for(new i = 1; i != sizeof ADMIN_LEVELS; i ++)
							{
								if(i > PI[playerid][pi_ADMIN_LEVEL])
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{666666}%s\n", ADMIN_LEVELS[i]);
								}
								else
								{
									if(admin_level == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", ADMIN_LEVELS[i]);
									else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", ADMIN_LEVELS[i]);
								}
								strcat(dialog, line_str);
							}

							ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
						}
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, admin_level FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", "Introduce tu contraseña actual.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nueva contraseña.\nLa contraseña debe contener entre %d-%d caracteres.", MIN_PASS_LENGTH, MAX_PASS_LENGTH);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar contraseña", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 4) return 0;

			new dialog[115 * sizeof(ac_Info) + 1], line_str[115];
			dialog = "Tipo\tEstado\tAccionar\tAcción\n";

			for(new i = 0; i != sizeof(ac_Info); i ++)
			{
				format(line_str, sizeof line_str, "%02d %s\t%s\t%d:%d\t%s\n", i, ac_Info[i][ac_Name], ac_Info[i][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[i][ac_Detections], ac_Info[i][ac_Interval], ac_Info[i][ac_Kick] ? "Kick" : "Aviso");
				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat", dialog, "» Continuar", "X");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 4) return 0;

			new caption[45], dialog[90];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado\t%s\nAccionar\t(%d:%d)\nAccion\t%s", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] ? "Activado" : "Desactivado", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] ? "Kick" : "Aviso");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			new caption[45], dialog[200];

			format(caption, sizeof caption, "ac %02d %s", PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Name]);
			format(dialog, sizeof dialog, "Estado actual de accioner en: (%d:%d)\n\nSintaxis: <detecciones>:<segundos>\nDeja segundos en 0 para que sea instantáneo.\n\nEjemplo de 2 detecciones en 10 segundos: 2:10", ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections], ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Mi anuncio", "Inserta el nuevo precio de tu artículo:\n", "» Continuar", "Atrás");
		case DIALOG_SHOP_ARTICLE_REMOVE: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar anuncio", "¿Estás seguro de que quiere eliminar este anuncio?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_SHOP_ADD:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Añadir anuncio", "{"#SILVER_COLOR"}Propiedad\n{"#SILVER_COLOR"}Vehículo\n{"#SILVER_COLOR"}Otros", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce una breve descripción para tu anuncio.\nCaracteres: 1-24 [A-Z a-z 0-9]", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Añadir anuncio", "Introduce el precio para tu anuncio.\nAl publicar tu anuncio se te cobrará 500$.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i ++) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[95 * (MAX_SU2_VEHICLES + 2)], total_vehicles;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Vehículo\t{"#BLUE_COLOR"}Matrícula\t{"#SILVER_COLOR"}Precio\n");
			for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
			{
				if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
				if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
				if(total_vehicles > MAX_SU2_VEHICLES) break;

				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][total_vehicles] = i;

					new line_str[95], veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
					format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%s$\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], number_format_thousand(veh_money));
					strcat(dialog, line_str);
					total_vehicles ++;
				}
			}
			if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}No tienes vehículos");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Selecciona el vehículo que quieres remolcar", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Banda", "No perteneces a ninguna banda.\n\n¿Quieres crear una?\nPara crear una banda necesitas ser nivel 5, además cuesta 150.000$.", "Sí", "No");
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear banda", "Introduce el nombre de tu banda.\nHasta 32 caracteres.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona un color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			new dialog[360];
			format(dialog, sizeof dialog,

					"\
						{"#SILVER_COLOR"}Nombre de la banda: %s\n\
						{"#SILVER_COLOR"}Color de la banda: {%06x}color %d\n\
						{"#SILVER_COLOR"}Costo de creación: 600.000$\n\
						\n\
						{"#SILVER_COLOR"}¿Quieres crear esta banda?\n\
						{"#SILVER_COLOR"}Una vez creada podrás crear rangos, modificarlos y mucho más.\n\
						\n\
					",
						PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME],
						RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] + 1
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Crear banda", dialog, "Crear", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new caption[64], dialog[360], listitem;
			format(caption, sizeof caption, "Mi banda -  {%06x}'%s'", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);

			format(dialog, sizeof dialog, "Ver miembros\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE;
			listitem ++;

			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME])
			{
				strcat(dialog, "Cambiar nombre de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_NAME;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS])
			{
				strcat(dialog, "Echar a un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CAST_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS])
			{
				strcat(dialog, "Cambiar rango de un miembro\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_MEMBERS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS])
			{
				strcat(dialog, "Crear rangos o modificarlos\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_MODIFY_RANKS;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR])
			{
				strcat(dialog, "Cambiar color de la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_CHANGE_COLOR;
				listitem ++;
			}
			if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE])
			{
				strcat(dialog, "Eliminar la banda\n");
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_DELETE;
				listitem ++;
			}

			strcat(dialog, "Abandonar banda\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = CREW_RANK_SIZE + 1;
			listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], caption[64], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(caption, sizeof caption, "Miembros de la banda '%s'", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						count++;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Nombre actual de la banda:\n\t\"%s\"\n\nIndica el nuevo nombre.\nMáximo 32 caracteres.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre de la banda", dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Echar a un miembro", dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Echar a un miembro", "¿Estás seguro de que quieres echar a este miembro de la banda?", "Echar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Invitar", dialog, "Invitar", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Te han ofrecio unirte a una banda.\n\nBanda: %s\nRango: %s\n", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Invitación", dialog, "Unirme", "Cerrar");
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			new dialog[64 * MAX_CREW_RANKS], line_str[64];
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID])
				{
					if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				else
				{
					if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
					else format(line_str, sizeof line_str, "{FFFFFF}%d. Slot vacío\n", i + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				}
				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Rangos", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Modificar rango", "Cambiar nombre del rango\nModificar permisos\nEliminar rango", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual del rango:\n\t\"%s\"\n\nIndica el nuevo nombre del rango.\nMáximo 32 caracteres.", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar rango", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			new caption[70];
			format(caption, sizeof caption, "Modificar permisos del rango '%s'", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);

			new dialog[64 * (CREW_RANK_SIZE + 1)], line_str[64];
			format(dialog, sizeof dialog, "Permiso\tActivado\n");

			for(new i = 0; i != CREW_RANK_SIZE; i ++)
			{
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][i]) format(line_str, sizeof line_str, "%s\t%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");
				else format(line_str, sizeof line_str, "{666666}%s\t{666666}%s\n", CREW_RANKS_PERMISSIONS[i], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] ? "Sí" : "No");

				strcat(dialog, line_str);
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Crear nuevo rango", "Indica el nombre del rango.\nMáximo 32 caracteres.", "Crear", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new dialog[64 * MAX_CREW_RANKS], line_str[64], listitem;
			for(new i = 0; i != MAX_CREW_RANKS; i ++)
			{
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;
				if(i == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]) continue;

				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
				if(i < PI[playerid][pi_CREW_RANK]) format(line_str, sizeof line_str, "{666666}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\n", listitem + 1, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
				strcat(dialog, line_str);

				listitem ++;
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Seleccionar nuevo rango", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new affected_members;
						cache_get_value_index_int(0, 0, affected_members);

						new dialog[400];
						format(dialog, sizeof dialog,

							"\
								Rango que se eliminará:\n\
									\t'%s'\n\
								\n\
								Miembros afectados: %d\n\
								El nuevo rango de estos miembros será:\n\
									\t'%s'\n\
								\n\
								¿Seguro que quieres eliminar el rango? Esta opción no se puede deshacer.\n\
								\n\
							",
								CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME],
								affected_members,
								CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar rango", dialog, "Eliminar", "Cancelar");

					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona el nuevo color para tu banda", DIALOG_CREATE_CREW_COLOR_String, "Cambiar", "Atrás");
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new affected_members, crew_territories;
						cache_get_value_index_int(0, 0, affected_members);
						cache_get_value_index_int(0, 0, crew_territories);

						new dialog[450];
						format(dialog, sizeof dialog,

							"\
								Banda: %s\n\
								Miembros: %d\n\
								Territorios: %d\n\
								\n\
								¿De verdad quieres borrar la banda?\n\
								\n\
							",
								CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME],
								affected_members,
								crew_territories
						);
						ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Eliminar banda", dialog, "Eliminar", "Cancelar");
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(player.id), COUNT(territories.id) FROM player, territories WHERE player.crew = %d AND territories.id_crew = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar banda", "¿Quieres abandonar la banda?\nEsta opción no se puede deshacer.", "Abandonar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\t{"#SILVER_COLOR"}Rango\t{"#SILVER_COLOR"}últ. conexión\n");
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					for(new i = 0; i != rows; i++)
					{
						new id, name[24], last_connection[24], connected, crew_rank;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name(i, "name", name);
						cache_get_value_name(i, "last_connection", last_connection);
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "crew_rank", crew_rank);

						if(connected) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#GREEN_COLOR"}Conectado\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME]);
						else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ crew_rank ][crew_rank_NAME], last_connection);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");
					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Modificar rango de un miembro", dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, last_connection, connected, crew_rank FROM player WHERE crew = %d ORDER BY connected DESC, crew_rank ASC LIMIT %d, %d;", PI[playerid][pi_CREW], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			inline OnCrewInfoLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], crew_rank;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "crew_rank", crew_rank);

						if(crew_rank < PI[playerid][pi_CREW_RANK]) SendNotification(playerid, "No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
						else
						{
							if(crew_rank == 0)
							{
								inline OnCountQueryLoad()
								{
									if(cache_get_row_count(rows))
									{
										if(rows)
										{
											new total;
											cache_get_value_index_int(0, 0, total);
											if(total <= 1) SendNotification(playerid, "No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
											else
											{
												new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
												format(caption, sizeof caption, "Miembro - %s", name);
												for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
												//for(new i = 0; i != CREW_RANK_SIZE; i ++)
												for(new i = 0; i != MAX_CREW_RANKS; i ++)
												{
													if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;

													if(i < PI[playerid][pi_CREW_RANK])
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													else
													{
														if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
														else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
													}
													strcat(dialog, line_str);
													PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
												}
												ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
											}
										}
									}
								}
								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
								mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
							}
							else
							{
								new caption[45], dialog[45 * CREW_RANK_SIZE], line_str[45], count;
								format(caption, sizeof caption, "Miembro - %s", name);
								for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
								for(new i = 0; i != MAX_CREW_RANKS; i ++)
								{
									if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_VALID]) continue;

									if(i < PI[playerid][pi_CREW_RANK])
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{666666}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{666666}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									else
									{
										if(crew_rank == i) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s (actual)\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
										else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\n", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i][crew_rank_NAME]);
									}
									strcat(dialog, line_str);
									PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
								}
								ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
							}
						}
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, crew_rank FROM player WHERE id = %d;",  PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres pasar esta propiedad a banda?\nEsta opción no se puede deshacer.", "» Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Abandonar territorio", "¿Estás seguro que quieres abandonar este territorio?\nEsta opción no se puede deshacer.", "» Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Propiedad de banda", "¿Estás seguro que quieres liberar esta propiedad?\nEsta opción no se puede deshacer.", "» Continuar", "Cancelar");
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El policía %s te ha puesto una multa.\nImporte: %s$\n", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]));
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Multa", dialog, "Pagar", "Cerrar");
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			new dialog[512];
			format(dialog, sizeof dialog,

				"\
					PROPIEDADES\t%.4f\n\
					VEHICULOS\t%.4f\n\
					TOYS\t%.4f\n\
					SKINS\t%.4f\n\
					ARMAS\t%.4f\n\
					VIP1\t%d "SERVER_COIN"\n\
					VIP2\t%d "SERVER_COIN"\n\
					VIP JOB EXTRA PAY\t%d\n\
					CHANGE NAME\t%d "SERVER_COIN"\n\
				",
					MULTIPLIER_PROPERITES,
					MULTIPLIER_VEHICLES,
					MULTIPLIER_TOYS,
					MULTIPLIER_SKINS,
					MULTIPLIER_WEAPONS,
					SU_SD_PRICE,
					SU_SD_PRICE2,
					SU_WORK_EXTRA_PAY,
					CHANGE_NAME_SD_PRICE
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, "Multiplicadores", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			new dialog[32];
			switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
			{
				case 0: format(dialog, sizeof dialog, "PROPIEDADES: %f", MULTIPLIER_PROPERITES);
				case 1: format(dialog, sizeof dialog, "VEHICULOS: %f", MULTIPLIER_VEHICLES);
				case 2: format(dialog, sizeof dialog, "TOYS: %f", MULTIPLIER_TOYS);
				case 3: format(dialog, sizeof dialog, "SKINS: %f", MULTIPLIER_SKINS);
				case 4: format(dialog, sizeof dialog, "ARMAS: %f", MULTIPLIER_WEAPONS);
				case 5: format(dialog, sizeof dialog, "Coste VIP1: %d "SERVER_COIN"", SU_SD_PRICE);
				case 6: format(dialog, sizeof dialog, "Coste VIP2: %d "SERVER_COIN"", SU_SD_PRICE2);
				case 7: format(dialog, sizeof dialog, "VIP JOB EXTRA PAY: %d", SU_WORK_EXTRA_PAY);
				case 8: format(dialog, sizeof dialog, "Coste cambiar nombre: %d "SERVER_COIN"", CHANGE_NAME_SD_PRICE);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Multiplicador", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VIPS:
		{
			new dialog[28];
			format(dialog, sizeof dialog, "VIP\tPrecio\nVIP 1\nVIP 2");
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "VIPS", dialog, "Aceptar", "Cerrar");
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El coste del VIP1 es de %d "SERVER_COIN"\nDuración: 30 días\n\n¿Comprar?", SU_SD_PRICE);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_SU_BUY2:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "El coste del VIP2 es de %d "SERVER_COIN"\nDuración: 30 días\n\n¿Comprar?", SU_SD_PRICE2);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Comprar", "Cerrar");
			return 1;
		}
		case DIALOG_SU:
		{
			new dialog[256], current_date[24];
			getDateTime(current_date);
			format(dialog, sizeof dialog,

				"\
					Fecha actual: %s\n\
					Fecha caducidad: %s\n\
					\n\
					Renuevalo 30 días más por %d "SERVER_COIN".\n\
					\n\
				",
					current_date,
					PI[playerid][pi_VIP_EXPIRE_DATE],
					SU_SD_PRICE
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Cerrar", "Renovar");
			return 1;
		}
		case DIALOG_SU2:
		{
			new dialog[256], current_date[24];
			getDateTime(current_date);
			format(dialog, sizeof dialog,

				"\
					Fecha actual: %s\n\
					Fecha caducidad: %s\n\
					\n\
					Renuevalo 30 días más por %d "SERVER_COIN".\n\
					\n\
				",
					current_date,
					PI[playerid][pi_VIP_EXPIRE_DATE],
					SU_SD_PRICE2
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "VIP", dialog, "Cerrar", "Renovar");
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			new caption[45];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "1. Mis objetos\n2. Comprar objeto\n3. Añadir texto (500$)\n4. Añadir bandera de país (2.000$)\n5. Añadir panel de país (2.000$)", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			new caption[45], dialog[145 * (MAX_SU2_VOBJECTS + 2)], line_str[145];
			format(caption, sizeof caption, "STC - '%s'", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);

			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Objeto\t{"#BLUE_COLOR"}Colocado\n");
			for(new i = 0; i != MAX_SU2_VOBJECTS; i ++)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_VALID])
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_ATTACHED]) format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}Sí\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
					else format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#BLUE_COLOR"}No\n", i + 1, VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_NAME]);
				}
				else format(line_str, sizeof line_str, "{666666}%d. Slot vacío\n", i + 1);
				strcat(dialog, line_str);
			}
			strcat(dialog, "{c4290d}- Eliminar todo\n");

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			new caption[45], dialog[256];
			format(caption, sizeof caption, "Objeto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Colores\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
				case VOBJECT_TYPE_TEXT:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Texto\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{666666}Texto\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
				case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL:
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED]) format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Guardar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{"#SILVER_COLOR"}Editar posición del objeto\n{"#SILVER_COLOR"}Eliminar este objeto");
					else format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Colocar este objeto\n{"#SILVER_COLOR"}Cambiar el nombre del objeto\n{666666}Editar posición del objeto\n{"#SILVER_COLOR"}Eliminar este objeto");
				}
			}

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "Nombre actual: \"%s\"\nIndica el nuevo nombre:", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Objeto - Modificar nombre", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			new caption[64];
			format(caption, sizeof caption, "Colores de '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[45 * MAX_VEHICLE_OBJECTS_INDEXS], line_str[45];
			for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
			{
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) format(line_str, sizeof line_str, "{FFFFFF}Color #%d (original)\n", i + 1);
				else format(line_str, sizeof line_str, "{%06x}Color #%d\n", ARGBToRGBA(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][i]) >>> 8, i + 1);

				strcat(dialog, line_str);
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			new dialog[145];
			format(dialog, sizeof dialog,

					"\
						Color original\n\
						{%06x}Veh Color 1\n\
						{%06x}Veh Color 2\n\
						{FFFFFF}Otro (ARGB)\n\
					",
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ] >>> 8,
					VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ] >>> 8
			);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			new caption[64];
			format(caption, sizeof caption, "Color (%d) de '%s'", PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT], VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, caption, "Introduce el color en formato AARRGGBB\nPor ejemplo: FFCCCCCC", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			new dialog[145];
			format(dialog, sizeof dialog, "¿Estás seguro que quieres borrar el siguiente objeto?\n\t\"%s\"", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar Objeto", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Objeto - Eliminar todo", "¿Estás seguro de que quiere eliminar todos los objetos de este vehículo?\nEsta opción no se puede deshacer.", "Eliminar", "Atrás");
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			new caption[64];
			format(caption, sizeof caption, "Texto '%s'", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME]);

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, caption, "Editar texto\nCambiar fuente\nTamaño de letra\nNegrita\nColor de fuente", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Texto actual:\n\"%s\"\n\nIndica el nuevo texto (1-32 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar texto", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Fuente actual:\n\"%s\"\n\nIndica la nueva fuente (1-24 caracteres)\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar fuente", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Tamaño actual: %d\n\nIndica el nuevo tamaño\n", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Modificar tamaño de letra", dialog, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona color", DIALOG_CREATE_CREW_COLOR_String, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Selecciona país",

				"\
					Alemania\n\
					Argentina\n\
					Austria\n\
					Belgica\n\
					Bolivia\n\
					Bulgaria\n\
					Chile\n\
					Colombia\n\
					El Salvador\n\
					España\n\
					Estonia\n\
					Francia\n\
					Guatemala\n\
					Holanda\n\
					Hungría\n\
					India\n\
					Indonesia\n\
					Irlanda\n\
					Italia\n\
					Lituania\n\
					Luxemburgo\n\
					Madagascar\n\
					Malta\n\
					Malí\n\
					México\n\
					Nigeria\n\
					Panamá\n\
					Paraguay\n\
					Perú\n\
					Polonia\n\
					Rumanía\n\
					Rusia\n\
					Ucrania\n\
					Venezuela\n\
				"

			, "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			new dialog[512];
			format(dialog, sizeof dialog,

				"\
					Opción\tEstado actual\n\
					Audios del servidor\t%s\n\
					Barras indicadoras (hud)\t%s\n\
					Ver sanciones, kicks, baneos\t%s\n\
					Número en guía telefónica\t%s\n\
					Sonidos del servidor\t%s\n\
					Mostrar hora del servidor\t%s\n\
					Canal de dudas\t%s\n\
					Login automático\t%s\n\
					Cleos\
				",
					(PI[playerid][pi_CONFIG_AUDIO] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_CONFIG_HUD] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_CONFIG_ADMIN] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_PHONE_VISIBLE_NUMBER] ? "{"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_CONFIG_SOUNDS] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_CONFIG_TIME] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_DOUBT_CHANNEL] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No"),
					(PI[playerid][pi_CONFIG_AUTO_LOGIN] ? "< {"#CORRECT_COLOR"}Sí" : "> {"#RED_COLOR"}No")
			);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "Panel de configuración del usuario", dialog, "Cambiar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			new caption[128];
			format(caption, sizeof caption, "Placa Nº%d | %c. %s", PI[playerid][pi_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST, caption, "Ver últimos registros a BYC\nBuscar BYC de una persona", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Búsqueda", "Introduce el nombre completo del sospechoso.\n\nUsa el guión bajo para separar nombre y apellido\nPor ejemplo: Nombre_Apellido.", "Buscar", "Cerrar");
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						cache_get_value_name_int(i, "id_player", id);
						cache_get_value_name_int(i, "id_player", id_player);
						cache_get_value_name(i, "text", text);
						cache_get_value_name(i, "date", date);
						cache_get_value_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) cache_get_value_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id ORDER BY police_history.date DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPoliceHistoryLoad);
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			inline OnPoliceHistoryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
					new dialog[256 * 15], line_str[256], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
					format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Sospechoso\t{"#SILVER_COLOR"}Añadido por\t{"#SILVER_COLOR"}Fecha\t{"#SILVER_COLOR"}Razón\n");
					for(new i = 0; i != rows; i ++)
					{
						new id, id_player, text[128], date[24], toname[24], fromname[24], bool:isnull_fromname;
						cache_get_value_name_int(i, "id", id);
						cache_get_value_name_int(i, "id_player", id_player);
						cache_get_value_name(i, "text", text);
						cache_get_value_name(i, "date", date);
						cache_get_value_name(i, "toname", toname);
						cache_is_value_name_null(i, "fromname", isnull_fromname);
						if(!isnull_fromname) cache_get_value_name(i, "fromname", fromname);

						format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, toname, fromname, date, text);
						strcat(dialog, line_str);
						PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = id;
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
					strcat(dialog, "{c9c9c9}- Siguiente\n");

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
					strcat(dialog, "{c9c9c9}- Anterior\n");
					ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, "BYC", dialog, "» Continuar", "Cerrar");
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT police_history.*, player.name AS toname, player2.name AS fromname FROM police_history INNER JOIN player ON police_history.id_player = player.id LEFT JOIN player AS player2 ON police_history.by_id = player2.id WHERE police_history.id_player = %d ORDER BY police_history.date LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID], PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPoliceHistoryLoad);
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "BYC", "¿Borrar esto del historial?", "Borrar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar nombre", "Introduce tu contraseña actual.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_NAME_NAME:
		{
			new dialog[128];
			format(dialog, sizeof dialog, "Introduce tu nuevo nombre.\nEl nombre debe respear el formato Nombre_Apellido.\n\nEl coste por el cambio de nombre es de %d "SERVER_COIN"", CHANGE_NAME_SD_PRICE);
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar nombre", dialog, "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD, "Cambiar correo electrónico", "Introduce tu contraseña actual.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_CHANGE_EMAIL_EMAIL:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "Cambiar correo electrónico", "Introduce tu nuevo correo electrónico.", "» Continuar", "Cerrar");
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET:
		{
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;

			new max_slots = MAX_CLOSET_SLOTS,
				dialog[128 * (MAX_CLOSET_SLOTS + 2)], line_str[128], listitem;

			format(dialog, sizeof dialog, "Tipo\tDescripción\n");

			for(new i = 0; i != max_slots; i ++)
			{
				if(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_VALID])
				{
					switch(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE])
					{
						case CLOSET_TYPE_WEAPON:
						{
							format(line_str, sizeof line_str, "%s\t%s (%s balas)\n", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT] ][weapon_info_NAME], number_format_thousand(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT_EXTRA]));
							strcat(dialog, line_str);
						}
						case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK:
						{
							format(line_str, sizeof line_str, "%s\t%s gramos\n", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_TYPE]), number_format_thousand(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i][property_closet_INT]));
							strcat(dialog, line_str);
						}
					}

					PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = i;
					listitem ++;
				}
			}

			new caption[64];
			format(caption, sizeof caption, "Armario (%d espacios disponibles)", max_slots - listitem);

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] = MAX_CLOSET_SLOTS + 20;
			strcat(dialog, "{c4290d}- Eliminar todo\n"); listitem ++;

			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "» Continuar", "Cerrar");
		}
		case DIALOG_PROPERTY_CLOSET_DLT_ALL: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar todo", "¿Estás seguro de que quiere eliminar todo de su armario?\nEsta opción no se puede deshacer.", "Eliminar", "Cancelar");
		case DIALOG_PROPERTY_CLOSET_OPTIONS:
		{
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Armario", "{"#SILVER_COLOR"}1. Sacar\n{"#SILVER_COLOR"}2. Eliminar", "» Continuar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DELETE:
		{
			new dialog[190];
			switch(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE])
			{
				case CLOSET_TYPE_WEAPON: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s (%s balas)\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_NAME], number_format_thousand( PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT_EXTRA] ));
				case CLOSET_TYPE_MEDICINES, CLOSET_TYPE_CANNABIS, CLOSET_TYPE_CRACK: format(dialog, sizeof dialog, "Tipo: %s\nDescripción: %s gramos\n\n¿Estás seguro de que quiere eliminar esto de tu maletero?\nEsta opción no se puede deshacer.", GetClosetTypeName(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]), number_format_thousand( PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ));
			}
			ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_MSGBOX, "Armario - Eliminar", dialog, "Eliminar", "Atrás");
			return 1;
		}
		case DIALOG_PROPERTY_OBJECTS_MENU: return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Muebles", "1. Editar mueble\n2. Ver muebles guardados\n3. Eliminar todos los muebles", "» Continuar", "Cancelar");
		default: return 0;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])//ShowPlayerDialog
{
	if(PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] || PLAYER_TEMP[playerid][pt_DIALOG_ID] != dialogid) return Y_HOOKS_BREAK_RETURN_0;
	PLAYER_TEMP[playerid][pt_DIALOG_RESPONDED] = true;
	PLAYER_TEMP[playerid][pt_DIALOG_ID] = -1;

	if(!isnull(inputtext))
	{
		for(new i = 0; i != strlen(inputtext); i ++)
		{
			if(inputtext[i] == '%') inputtext[i] = '#';
		}
	}

	switch(dialogid)
	{
		case DIALOG_PLAYER_RENUNCIO:
		{
			if(!response) return 1;
			if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

			new work = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

			if(work < 1 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido.");

			if(!PLAYER_WORKS[playerid][work][pwork_SET]) return SendFormatNotification(playerid, "No eres %s.", work_info[work][work_info_NAME]);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) return SendNotification(playerid, "Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");

			if(work == WORK_POLICE)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
			}
			else
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}
			SendFormatNotification(playerid, "Has abandonado tu trabajo de ~b~%s~w~.", work_info[work][work_info_NAME]);
			PLAYER_WORKS[playerid][work][pwork_SET] = false;
			return 1;
		}
		case DIALOG_PLAYER_COLOR:
		{
			if(!response) return 1;

			switch(listitem)
			{
				case 0: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0xFFFFFF00); //Blanco
				case 1: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x00000000); //Negro
				case 2: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0xFF000000); //Rojo
				case 3: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x00FF0000); //Lima
				case 4: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x0000FF00); //Azul
				case 5: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x80808000); //Gris
				case 6: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0xFFFF0000); //Amarillo
				case 7: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x00FFFF00); //Cian
				case 8: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0xFF00FF00); //Fucsia
				case 9: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x80000000); //Marrón
				case 10: SetPlayerColorEx(PLAYER_TEMP[playerid][pt_ID_COLOR], 0x80008000); //Púrpura
			}

			SendFormatNotification(playerid, "Le acabas de asignar un color a ~b~%s", PI[ PLAYER_TEMP[playerid][pt_ID_COLOR] ][pi_NAME]);
			return 1;
		}
		case DIALOG_PLAYER_MP3:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0: StopMP3(playerid);
				default: PlayMP3(playerid, listitem);
			}
			return 1;
		}
		case DIALOG_ACENTOS:
		{
			if(!response) return 1;
			SendFormatNotification(playerid, "Ahora tu acento es ~g~%s~w~, usa ~r~/acento~w~ para cambiarlo.", ListAcentos[listitem]);
			PI[playerid][pi_ACENTO] = listitem;
			return 1;
		}
		case DIALOG_CLEOS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: PC_EmulateCommand(playerid, "/pp");
					case 1:
					{
						if(PI[playerid][pi_DAMAGE])
						{
							PI[playerid][pi_DAMAGE] = false;
							ShowPlayerMessage(playerid, "~w~DamageInformer ~r~Desactivado", 3000);
						}
						else
						{
							PI[playerid][pi_DAMAGE] = true;
							ShowPlayerMessage(playerid, "~w~DamageInformer ~g~activado", 3000);
						}
					}
					case 2:
					{
						if(PI[playerid][pi_PING])
						{
							for(new i = 0; i < 3; i ++)
							{
								PI[playerid][pi_PING] = false;
								ShowPlayerMessage(playerid, "~w~Cleo Ping ~r~Desactivado", 3000);
								PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PING]);
								TextDrawHideForPlayer(playerid, Textdraws[textdraw_PING][i]);
							}
						}
						else
						{
							for(new i = 0; i < 3; i ++)
							{
								PI[playerid][pi_PING] = true;
								ShowPlayerMessage(playerid, "~w~Cleo Ping ~g~Activado", 3000);
								PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PING]);
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_PING][i]);
							}
						}
					}
					case 3:
					{
						if(PI[playerid][pi_ZONE_TEXT])
						{
							PI[playerid][pi_ZONE_TEXT] = false;
							ShowPlayerMessage(playerid, "~w~Cleo ZoneText ~r~Desactivado", 3000);
							PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT]);
						}
						else
						{
							PI[playerid][pi_ZONE_TEXT] = true;
							ShowPlayerMessage(playerid, "~w~Cleo ZoneText ~g~Activado", 3000);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT]);
						}
					}
					case 4:
					{
						if(PI[playerid][pi_INFO_HEALTH])
						{
							PI[playerid][pi_INFO_HEALTH] = false;
							ShowPlayerMessage(playerid, "~w~Cleo Info Health ~r~Desactivado", 3000);
							PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH]);
						}
						else
						{
							PI[playerid][pi_INFO_HEALTH] = true;
							ShowPlayerMessage(playerid, "~w~Cleo Info Health ~g~Activado", 3000);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH]);
						}
					}
				}
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_FARMACIA:
		{
			if(!response) return 1;

			switch(listitem)
			{
				case 0:
				{
					new time = PI[playerid][pi_TIME_FARMACIA] - gettime();
					if(PI[playerid][pi_TIME_FARMACIA] > gettime()) return SendFormatNotification(playerid, "Debes esperar ~r~%s ~w~para volver a comprar.", TimeConvert(time));
					if(PI[playerid][pi_CASH] < 350) return SendNotification(playerid, "Necesitas ~g~$350 ~w~para comprar este producto");

					if(QuitarDinero(playerid, 350, true))
					{
						PI[playerid][pi_TIME_FARMACIA] = gettime() + 5;
						SendNotification(playerid, "Compraste 1 medicamentos por $350");
						PI[playerid][pi_MEDICINE] += 350;
					}
				}
			}
			return 1;
		}
		case DIALOG_INFO: return 1;
		case DIALOG_REGISTER:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);
				format(PLAYER_TEMP[playerid][pt_PASSWD], 24, "%s", inputtext);

				new salt[16];
				getRandomSalt(salt);
				format(PI[playerid][pi_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], PI[playerid][pi_PASS], 64 + 1);
				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
			}
			else Kick(playerid);
			return 1;
		}
		case DIALOG_REGISTER_EMAIL:
		{
			if(!response) return Kick(playerid);

			new mail[32];
			format(mail, 32, "%s", inputtext);
			if(!IsValidEmail(mail))
			{
				SendNotification(playerid, "Correo no válido.");
				ShowDialog(playerid, DIALOG_REGISTER_EMAIL);
				return 1;
			}

			inline OnCheckEmail()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						SendNotification(playerid, "Este correo electrónico ya está en uso, use otro distinto.");
						ShowDialog(playerid, dialogid);
					}
					else
					{
						format(PI[playerid][pi_EMAIL], 32, "%s", mail);

						ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
						PLAYER_TEMP[playerid][pt_READING_GUIDE] = true;
						PLAYER_TEMP[playerid][pt_EN_INTRO] = false;
						PLAYER_TEMP[playerid][pt_GUIDE_STEP] = 0;
						SendNotification(playerid, "Lee detenidamente la guía, para pasar de concepto haz clic en siguiente.");
						SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
						SelectTextDrawEx(playerid, 0x00000050);

						TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
						TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);
					}
				}
				else Kick(playerid);
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE email = '%e';", mail);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCheckEmail);
			return 1;
		}
		case DIALOG_LOGIN:
		{
			if(!response) return Kick(playerid);
			if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

			new password[64 + 1];
			SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);
			if(!strcmp(password, PI[playerid][pi_PASS], false))
			{
				format(PLAYER_TEMP[playerid][pt_PASSWD], 24, "%s", inputtext);
				CallLocalFunction("GetPlayerCache", "i", playerid);

				PLAYER_TEMP[playerid][pt_EN_INTRO] = false;
				CancelSelectTextDraw(playerid);
				GameTextForPlayer(playerid, "~y~cargando...", 10000, 3);
			}
			else // Error
			{
				PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
				if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
				ShowDialog(playerid, dialogid);
			}
			return 1;
		}
		case DIALOG_CLOTHES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_NO_INFO) return 1;

				switch(listitem)
				{
					case 0: PC_EmulateCommand(playerid, "/ropa");
					case 1: PC_EmulateCommand(playerid, "/toys");
				}
			}
			return 1;
		}
		case DIALOG_FOOD_PIZZA:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= PIZZA_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendNotification(playerid, "¿Es que quieres reventar?");

					if(GivePlayerCash(playerid, -PIZZA_FOOD[listitem][food_PRICE], true, true))
					{
						Add_Hungry_Thirst(playerid, PIZZA_FOOD[listitem][food_HUNGRY], PIZZA_FOOD[listitem][food_THIRST]);

						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", PIZZA_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%d dólares ~w~para poder comprarlo.", PIZZA_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendFormatNotification(playerid, "Gracias por su visita a ~g~%s ~w~vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_BURGER:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= BURGER_SHOT_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendNotification(playerid, "¿Es que quieres reventar?");

					if(GivePlayerCash(playerid, -BURGER_SHOT_FOOD[listitem][food_PRICE], true, true))
					{
						Add_Hungry_Thirst(playerid, BURGER_SHOT_FOOD[listitem][food_HUNGRY], BURGER_SHOT_FOOD[listitem][food_THIRST]);

						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", BURGER_SHOT_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%d dólares ~w~para poder comprarlo.", BURGER_SHOT_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendFormatNotification(playerid, "Gracias por su visita a ~g~%s ~w~vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_FOOD_CLUCKIN:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= CLUCKIN_BELL_FOOD[listitem][food_PRICE])
				{
					if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0) return SendNotification(playerid, "¿Es que quieres reventar?");

					if(GivePlayerCash(playerid, -CLUCKIN_BELL_FOOD[listitem][food_PRICE], true, true))
					{
						Add_Hungry_Thirst(playerid, CLUCKIN_BELL_FOOD[listitem][food_HUNGRY], CLUCKIN_BELL_FOOD[listitem][food_THIRST]);

						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

						new action[64];
						format(action, sizeof action, "compra %s y lo consume.", CLUCKIN_BELL_FOOD[listitem][food_NAME]);
						Auto_SendPlayerAction(playerid, action);

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);

						ShowDialog(playerid, dialogid);
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%d dólares ~w~para poder comprarlo.", CLUCKIN_BELL_FOOD[listitem][food_PRICE] - PI[playerid][pi_CASH]);
				}
			}
			else SendFormatNotification(playerid, "Gracias por su visita a ~g~%s ~w~vuelva pronto.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
			return 1;
		}
		case DIALOG_PLAYER_TOYS:
		{
			if(response)
			{
				if(listitem == MAX_SU2_TOYS) return ShowDialog(playerid, DIALOG_PLAYER_TOY_DELETE_ALL);
				if(!PI[playerid][pi_VIP] && listitem >= MAX_NU_TOYS)
				{
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d accesorios! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_TOYS);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				else if(PI[playerid][pi_VIP] == 1 && listitem >= MAX_SU_TOYS)
				{
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d accesorios! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_TOYS);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //colocar / quitar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) // tiene accesorio puesto
						{
							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

							new action[45]; format(action, sizeof action, "se quita su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
						else // No lo tiene puesto
						{
							if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1) return ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);

							PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;
							RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

							SetPlayerAttachedObject
							(
								playerid,
								PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
								PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
							);

							new action[45]; format(action, sizeof action, "se coloca su \"%s\"", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
							Auto_SendPlayerAction(playerid, action);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_NAME);
					case 2: //Configurar
					{
						if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] == -1)
						{
							ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
							return 1;
						}
						ShowDialog(playerid, DIALOG_PLAYER_TOY_EDIT_BONE);
					}
					case 3: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_1);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_TOY_COLOR_2);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_TOY_CONFIRMDELETE);
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 24)
				{
					SendNotification(playerid, "El nombre del accesorio debe contener de 1 a 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_CONFIRMDELETE:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM ptoys WHERE id = %d;", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

				SendFormatNotification(playerid, "Accesorio ~g~\"%s\"~w~ eliminado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);

				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_VALID] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ID] = 0;
				format(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME], 24, "");
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = false;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = 0.0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] = 0;

				ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_SELECT_BONE:
		{
			if(response)
			{
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE] = listitem + 1;
				EditPlayerToy(playerid);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_EDIT_BONE:
		{
			if(response) ShowDialog(playerid, DIALOG_PLAYER_TOY_SELECT_BONE);
			else EditPlayerToy(playerid);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_1:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1] = RGBAToARGB(RandomColors[listitem]);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendNotification(playerid, "Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_COLOR_2:
		{
			if(response)
			{
				if(listitem == 0) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = 0;
				else PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2] = RGBAToARGB(RandomColors[listitem]);

				if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) UpdatePlayerToy(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
				SendNotification(playerid, "Color del accesorio actualizado.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOY_MENU);
			return 1;
		}
		case DIALOG_PLAYER_TOY_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM ptoys WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_PLAYER_TOYS[Player_Toys_Info];
				for(new i = 0; i != MAX_SU2_TOYS; i ++)
				{
					RemovePlayerAttachedObject(playerid, i);
					PLAYER_TOYS[playerid][i] = temp_PLAYER_TOYS;
				}

				SendNotification(playerid, "Has eliminado todos tus accesorios.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_TOYS);
			return 1;
		}
		case DIALOG_BBVA:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 1: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_BANK:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_BANK_WITHDRAW);
					case 1: ShowDialog(playerid, DIALOG_BANK_DEPOSIT);
					case 2: ShowDialog(playerid, DIALOG_BANK_TRANSFER);
					case 3: ShowDialog(playerid, DIALOG_BANK_TRANSACTIONS);
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
				PLAYER_TEMP[playerid][pt_TIME_PICKUP] = gettime();
			}
			return 1;
		}
		case DIALOG_BANK_WITHDRAW:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_BANK_MONEY])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendFormatNotification(playerid, "Las operaciones de más de ~r~10.000$ ~w~no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				if(GivePlayerCash(playerid, inputtext[0], true, false))
				{
					PI[playerid][pi_BANK_MONEY] -= inputtext[0];

					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_WITHDRAW, inputtext[0]);

					SendFormatNotification(playerid, "Operación realizada con éxito, has retirado ~g~%s dólares~w~.", number_format_thousand(inputtext[0]));
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				}
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_DEPOSIT:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Dinero insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendFormatNotification(playerid, "Las operaciones de más de ~r~10.000$ ~w~no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				if(GivePlayerCash(playerid, -inputtext[0], true, true))
				{
					PI[playerid][pi_BANK_MONEY] += inputtext[0];

					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_DEPOSIT, inputtext[0]);

					SendFormatNotification(playerid, "Operación realizada con éxito, has depositado ~g~%s dólares~w~.", number_format_thousand(inputtext[0]));
					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				}
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER:
		{
			if(response)
			{
				new to_bank_account;
				if(sscanf(inputtext, "d", to_bank_account))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(to_bank_account <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				inline OnBankAccountChecked()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							cache_get_value_index_int(0, 0, PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ID]);
							PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = to_bank_account;
							ShowDialog(playerid, DIALOG_BANK_TRANSFER_SEND);
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendNotification(playerid, "El número de cuenta introducido no existe o no es correcto.");
							PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE bank_account = %d;", to_bank_account);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnBankAccountChecked);
			}
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_BANK_TRANSFER_SEND:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > PI[playerid][pi_BANK_MONEY])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Saldo insuficiente.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM])
				{
					if(inputtext[0] > 10000)
					{
						PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
						SendFormatNotification(playerid, "Las operaciones de más de ~r~10.000$ ~w~no se pueden realizar desde un cajero, solo en el banco.");
						ShowDialog(playerid, dialogid);
						return 1;
					}
				}

				PI[playerid][pi_BANK_MONEY] -= inputtext[0];
				new transfer_player_id = GetPlayerIdByBankAccountId(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);

				new message[64];
				format(message, sizeof message, "Tranferencia recibida: +%s$", number_format_thousand(inputtext[0]));
				if(transfer_player_id == -1)
				{
					inline OnPhoneChecked()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new id;
								cache_get_value_index_int(0, 0, id);
								if(id) RegisterPhoneMessage(0, id, message, true);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE bank_account = %d;", PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneChecked);
				}
				else
				{
					PI[transfer_player_id][pi_BANK_MONEY] += inputtext[0];

					if(PI[transfer_player_id][pi_PHONE_NUMBER])
					{
						RegisterPhoneMessage(0, PI[transfer_player_id][pi_ID], message);
						if(PI[transfer_player_id][pi_PHONE_STATE] == PHONE_STATE_ON)
						{
							if((PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[transfer_player_id][pt_GAME_STATE] == GAME_STATE_DEAD))
							{
								SendClientMessageEx(transfer_player_id, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(transfer_player_id, 6740), message);
							}
						}
					}
				}


				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = bank_money + %d WHERE bank_account = %d;", inputtext[0], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				RegisterBankAccountTransaction(PI[playerid][pi_ID], PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ID], BANK_TRANSACTION_TRANSFER, inputtext[0]);

				SendFormatNotification(playerid, "Operación realizada con éxito, has transferido ~g~%s dólares ~w~al número de cuenta ~g~%s~w~.", number_format_thousand(inputtext[0]), number_format_thousand(PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT]));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			}
			else
			{
				PLAYER_TEMP[playerid][pt_SELECT_BANK_TRANSFER_ACCOUNT] = 0;
				ShowDialog(playerid, DIALOG_BANK_TRANSFER);
			}
			return 1;
		}
		case DIALOG_CREATE_BANK_ACCOUNT:
		{
			if(response)
			{
				if(PI[playerid][pi_CASH] >= 500)
				{
					if(GivePlayerCash(playerid, -500, true, true)) {
						PI[playerid][pi_BANK_MONEY] = 500;
						PI[playerid][pi_BANK_ACCOUNT] = getBankAccountNumber(PI[playerid][pi_ID]);
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_account = %d, bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_ACCOUNT], PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
						mysql_tquery(mysql_db, QUERY_BUFFER);

						RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_CREATE_ACCOUNT, 500);

						PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
						SendFormatNotification(playerid, "Tu cuenta bancaria ha sido creada con éxito, tu número de cuenta es ~g~%s~w~.", number_format_thousand(PI[playerid][pi_BANK_ACCOUNT]));
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente para crear la cuenta bancaria, te faltan ~r~%d dólares~w~.", 500 - PI[playerid][pi_CASH]);
				}
			}
			return 1;
		}
		case DIALOG_BANK_TRANSACTIONS:
		{
			if(response) PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
			else ShowDialog(playerid, DIALOG_BANK);
			return 1;
		}
		case DIALOG_247_LIST:
		{
			if(response)
			{
				switch(Supermarket_Product_List[listitem][product_TYPE])
				{
					case PRODUCT_TYPE_FOOD:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							new slot = GetEmptyPlayerPocketSlot(playerid);
							if(slot == -1)
							{
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								SendNotification(playerid, "No tienes más espacio entre tus alimentos, elimina algo con ~g~/alimentos~w~.");
								return 1;
							}

							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PLAYER_POCKET[playerid][slot][player_pocket_VALID] = true;
								format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "%s", Supermarket_Product_List[listitem][product_NAME]);
								PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = Supermarket_Product_List[listitem][product_HUNGRY];
								PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = Supermarket_Product_List[listitem][product_THIRST];
								PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = Supermarket_Product_List[listitem][product_DRUNK];
								RegisterNewPlayerPocketObject(playerid, slot);

								SendFormatNotification(playerid, "Has comprado ~b~%s por ~b~%d dólares~w~,para consumirlo usa ~y~/alimentos~w~.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_PHONE_NUMBER])
							{
								SendNotification(playerid, "Ya tienes un teléfono.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_PHONE_NUMBER] = getPhoneNumber(PI[playerid][pi_ID]);
								PI[playerid][pi_PHONE_STATE] = PHONE_STATE_ON;
								PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;

								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET phone_number = %d, phone_state = %d, phone_visible_number = %d WHERE id = %d;", PI[playerid][pi_PHONE_NUMBER], PI[playerid][pi_PHONE_STATE], PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_ID]);
								mysql_tquery(mysql_db, QUERY_BUFFER);

								SendFormatNotification(playerid, "Has comprado un ~b~%s ~w~por ~b~%d dólares~w~, tu número es ~y~%d~w~.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE], PI[playerid][pi_PHONE_NUMBER]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}

					}
					case PRODUCT_TYPE_AUDIFONOS:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_MP3])
							{
								SendNotification(playerid, "Ya tienes un MP3.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true))
							{
								PI[playerid][pi_MP3] = true;
								SendFormatNotification(playerid, "Has comprado un ~b~%s ~w~por ~b~%d dólares~w~, usa ~b~/MP3 ~w~para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_KITS:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_VIP])
							{
								if(PI[playerid][pi_MECANICO_KITS] >= MAX_SU_KITS_MECANICO)
								{
									SendFormatNotification(playerid, "El límite de kits que puedes tener en tu inventario es %d.", MAX_SU_KITS_MECANICO);
									PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
									return 1;
								}
							}
							else if(PI[playerid][pi_MECANICO_KITS] >= MAX_NU_KITS_MECANICO)
							{
								SendFormatNotification(playerid, "El límite de kits que puedes tener en tu inventario es %d.", MAX_NU_KITS_MECANICO);
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							if(GivePlayerCash(playerid, -2500, true, true))
							{
								PI[playerid][pi_MECANICO_KITS] += 1;
								SendNotification(playerid, "~w~Has comprado un kit de reparación, para usararlo usa ~y~/reparar ~w~cerca del vehículo que quieras reparar.");
							}

						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_SPEAKERS:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_SPEAKERS])
							{
								SendNotification(playerid, "Ya tienes altavoces.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true))
							{
								PI[playerid][pi_SPEAKERS] = true;
								SendFormatNotification(playerid, "Has comprado ~b~%s ~w~por ~b~%d dólares~w~, ~w~usa ~b~/amp3 ~w~para usarlo.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
					case PRODUCT_TYPE_PHONE_RESOLVER:
					{
						if(PI[playerid][pi_CASH] >= Supermarket_Product_List[listitem][product_PRICE])
						{
							if(PI[playerid][pi_PHONE_RESOLVER])
							{
								SendNotification(playerid, "Ya tienes una guía telefónica.");
								PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
								return 1;
							}

							if(GivePlayerCash(playerid, -Supermarket_Product_List[listitem][product_PRICE], true, true)) {
								PI[playerid][pi_PHONE_RESOLVER] = true;
								SendFormatNotification(playerid, "Has comprado una ~b~%s ~w~por ~b~%d dólares~w~, ~w~usa ~b~/guia ~w~para usarla.", Supermarket_Product_List[listitem][product_NAME], Supermarket_Product_List[listitem][product_PRICE]);
								PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
							}
						}
						else
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este producto.", number_format_thousand(Supermarket_Product_List[listitem][product_PRICE] - PI[playerid][pi_CASH]));
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET:
		{
			if(response)
			{
				if(listitem == MAX_PLAYER_POCKET_OBJECTS) return ShowDialog(playerid, DIALOG_PLAYER_POCKET_DELETE_ALL);
				if(!PLAYER_POCKET[playerid][listitem][player_pocket_VALID])
				{
					SendNotification(playerid, "Este slot está vacío.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_PLAYER_POCKET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowNearsPlayersToPlayer(playerid, NEAR_PLAYERS_WEAPON_GIVE);
					case 1: ShowNearsPlayersToPlayer(playerid, NEAR_PLAYERS_WEAPON_SELL);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE);
					case 3:
					{
						//guardar
						new command[128];
						format(command, sizeof command, "/guardar arma %d", PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT]);
						PC_EmulateCommand(playerid, command);
					}
				}
			}
		}
		case DIALOG_PLAYER_POCKET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Consumir
					{
						if(PI[playerid][pi_HUNGRY] >= 99.0 && PI[playerid][pi_THIRST] >= 99.0)
						{
							PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
							SendNotification(playerid, "¿Es que quieres reventar?");
							return 1;
						}

						Add_Hungry_Thirst(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_THIRST]);
						GivePlayerDrunkLevel(playerid, PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_DRUNK]);

						new action[64];
						format(action, sizeof action, "consume %s.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						Auto_SendPlayerAction(playerid, action);

						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;

						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 0, 0, 0, 0, 0, 0);
						ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 1000);
					}
					case 1: ShowNearsPlayersToPlayer(playerid, NEAR_PLAYERS_POCKET_GIVE);
					case 2: ShowNearsPlayersToPlayer(playerid, NEAR_PLAYERS_POCKET_SELL);
					case 3: //Eliminar
					{
						SendFormatNotification(playerid, "Has eliminado \"%s\" de tus alimentos.", PLAYER_POCKET[playerid][PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]][player_pocket_object_NAME]);
						DeletePlayerPocketObject(playerid, PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED]);
						PLAYER_TEMP[playerid][pt_POCKET_SLOT_SELECTED] = 0;
					}
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_POCKET_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pfoods WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_query(mysql_db, QUERY_BUFFER);

				new temp_PLAYER_POCKET[Player_Pocket_Enum];
				for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++) PLAYER_POCKET[playerid][i] = temp_PLAYER_POCKET;

				SendNotification(playerid, "Has eliminado todo lo que tenías en tus alimentos.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_POCKET);
			return 1;
		}
		case DIALOG_TWITTER:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!PI[playerid][pi_DOUBT_CHANNEL_TW])
						{
							PI[playerid][pi_DOUBT_CHANNEL_TW] = true;
							SendNotification(playerid, "Canal de Twitter ~g~habilitado~w~.");
							return 1;
						}
						SendNotification(playerid, "Usa /twitter o /tw para enviar un ~b~~w~TWITT~w~.");
					}
					case 1:
					{
						if(!PI[playerid][pi_DOUBT_CHANNEL_TW]) return SendNotification(playerid, "Para enviar una Twitt anónimo primero debes activar el canal de ~b~~h~Twitter~w~.");
						SendNotification(playerid, "Usa /twittera o /ta para enviar un ~b~~h~Twit ~w~anónimo.");
					}
					case 2:
					{
						if(PI[playerid][pi_DOUBT_CHANNEL_TW])
						{
							PI[playerid][pi_DOUBT_CHANNEL_TW] = false;
							SendNotification(playerid, "Canal de Twitter ~r~deshabilitado~w~.");
							return 1;
						}
						SendNotification(playerid, "Para enviar una Twitt anónimo primero debes activar el canal de ~b~~h~Twitter~w~.");
					}
				}
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_SMS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES); //Ver mensajes recibidos
					case 1: ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES); //Ver mensajes enviados
				}
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_PHONE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //Agenda
					{
						ShowDialog(playerid, DIALOG_PHONE_BOOK);
					}
					case 1: //Llamar
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "Tu teléfono está apagado, encíendelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_CALL_NUMBER);
					}
					case 2: //Enviar mensaje
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "Tu teléfono está apagado, encíendelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SMS_NUMBER);
					}
					case 3: //Ver mensajes recibidos
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "Tu teléfono está apagado, encíendelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_RECEIVED_MESSAGES);
					}
					case 4: //Ver mensajes enviados
					{
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_OFF) return SendNotification(playerid, "Tu teléfono está apagado, encíendelo para usarlo.");
						ShowDialog(playerid, DIALOG_PHONE_SENT_MESSAGES);
					}
				}
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 10) return ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PHONE_CONTACTS + 20) return ShowDialog(playerid, DIALOG_PHONE_BOOK_DELETE_ALL);

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			}
			else
			{
				ShowDialog(playerid, DIALOG_PHONE);
			}
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NUMBER:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "Introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NAME);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_ADD_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendNotification(playerid, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayerPhoneBookSlot(playerid);
				if(slot == -1) return SendNotification(playerid, "Memoria de la agenda llena.");


				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
				format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "%s", inputtext);
				PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_ADD_NUMBER];
				RegisterNewPlayerPhoneBook(playerid, slot);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "Nuevo contacto añadido a la agenda:~n~~n~~b~Nombre: ~w~%s~n~~b~Teléfono:~w~ %d.", PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_ADD_NUMBER);
			return 1;
		}
		case DIALOG_PHONE_BOOK_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "Estás en una llamada");

						new number[24];
						format(number, sizeof number, "/llamar %d", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER]);
						PC_EmulateCommand(playerid, number);
						return 1;
					}
					case 1: ShowDialog(playerid, DIALOG_PHONE_BOOK_SEND_MESSAGE);
					case 2: ShowDialog(playerid, DIALOG_PHONE_BOOK_CHANGE_NAME);
					case 3: ShowDialog(playerid, DIALOG_PHONE_BOOK_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendNotification(playerid, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "%s", inputtext);
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pbook SET name = '%e' WHERE id = %d;", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendNotification(playerid, "Contacto modificado.");
				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_CONFIRM_DELET:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pbook WHERE id = %d;", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "Contacto ~g~\"%s\" ~w~eliminado de tu agenda.", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME]);

				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_VALID] = false;
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_ID] = 0;
				format(PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_NAME], 24, "");
				PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER] = 0;

				ShowDialog(playerid, DIALOG_PHONE_BOOK);
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_BOOK_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pbook WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_PLAYER_PHONE_BOOK[Phone_Book_Enum];
				for(new i = 0; i != MAX_PHONE_CONTACTS; i ++) PLAYER_PHONE_BOOK[playerid][i] = temp_PLAYER_PHONE_BOOK;

				SendNotification(playerid, "Ha eliminado todos sus contactos.");
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK);
			return 1;
		}
		case DIALOG_PHONE_CALL_NUMBER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "Estás en una llamada");

				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendClientMessage(playerid, -1, "{FFFFFF}Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendClientMessage(playerid, -1, "{FFFFFF}El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new string[28];
				format(string, sizeof string, "/llamar %d", inputtext[0]);
				PC_EmulateCommand(playerid, string);
				return 1;
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_NUMBER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return SendNotification(playerid, "Estás en una llamada");

				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendNotification(playerid, "Número no válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0)
				{
					SendNotification(playerid, "El número destino no es válido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_PLAYER_PHONE_NUMBER_SELECTED] = inputtext[0];
				ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			}
			else ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_SMS_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new string[128];
				format(string, sizeof string, "/sms %d %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext);
				PC_EmulateCommand(playerid, string);
				return 1;
			}
			else ShowDialog(playerid, DIALOG_PHONE_SMS_MESSAGE);
			return 1;
		}
		case DIALOG_PHONE_BOOK_SEND_MESSAGE:
		{
			if(response)
			{
				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 64) return ShowDialog(playerid, dialogid);

				new string[128];
				format(string, sizeof string, "/sms %d %s", PLAYER_PHONE_BOOK[playerid][ PLAYER_TEMP[playerid][pt_PLAYER_PHONE_BOOK_SELECTED] ][phone_book_contact_PHONE_NUMBER], inputtext);
				PC_EmulateCommand(playerid, string);
				return 1;
			}
			else ShowDialog(playerid, DIALOG_PHONE_BOOK_OPTIONS);
			return 1;
		}
		case DIALOG_PHONE_SENT_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_PHONE_RECEIVED_MESSAGES:
		{
			if(!response) ShowDialog(playerid, DIALOG_PHONE);
			return 1;
		}
		case DIALOG_CONFIRM_BUY_PROPERTY:
		{
			if(response)
			{
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD]) return SendNotification(playerid, "Está propiedad ya está vendida.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL] > PI[playerid][pi_LEVEL]) return SendFormatNotification(playerid, "Necesitas ser como mínimo nivel %d para comprar esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_LEVEL]);
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE] > PI[playerid][pi_BANK_MONEY]) return SendNotification(playerid, "No.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_VIP_LEVEL] > PI[playerid][pi_VIP]) return SendNotification(playerid, "No.");
				if(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA] > PI[playerid][pi_COINS]) return SendNotification(playerid, "No.");

				if(!PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA])
				{
					if(PI[playerid][pi_PHONE_NUMBER])
					{
						new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]));
						RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
					}

					PI[playerid][pi_BANK_MONEY] -= PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE];

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);
					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_BUY_PROPERTY, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_PRICE]);
				}
				else
				{
					PI[playerid][pi_COINS] -= PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA];

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					SendFormatNotification(playerid, "Has gastado %d "SERVER_COIN" en la compra de esta propiedad.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_EXTRA]);
				}


				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_SOLD] = true;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_CREW] = false;
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_OWNER_ID] = PI[playerid][pi_ID];
				CreatePropertyInfo(PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX], PI[playerid][pi_ID], PI[playerid][pi_NAME], 0, "");
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = %d, id_territory = NULL WHERE id = %d;", PI[playerid][pi_ID], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);


				SendFormatNotification(playerid, "~g~¡Propiedad %d comprada!~n~~n~ ~w~Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con la App ~b~GPS~w~.", PROPERTY_INFO[PLAYER_TEMP[playerid][pt_BUY_HOUSE_INDEX]][property_ID]);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_WORKS);
					case 5:
					{
						if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
						else ShowPlayerGpsMap(playerid);
					}
				}
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, dialogid);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 10) return ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_ADD);
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_PLAYER_GPS_SAVES + 20) return ShowDialog(playerid, DIALOG_PLAYER_GPS_DELETE_ALL);

				PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_ADD:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendNotification(playerid, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new slot = GetEmptyPlayer_GPS_Slot(playerid);
				if(slot == -1) return SendNotification(playerid, "Memoria del GPS llena.");

				PLAYER_GPS[playerid][slot][player_gps_VALID] = true;
				format(PLAYER_GPS[playerid][slot][player_gps_NAME], 24, "%s", inputtext);
				GetPlayerPos(playerid, PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z]);
				PLAYER_GPS[playerid][slot][player_gps_WORLD] = GetPlayerVirtualWorld(playerid);
				PLAYER_GPS[playerid][slot][player_gps_INTERIOR] = GetPlayerInterior(playerid);
				RegisterNewPlayer_GPS_Site(playerid, slot);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "Nuevo sitio añadido al GPS con el nombre: ~g~%s~w~.", PLAYER_GPS[playerid][slot][player_gps_NAME]);
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PLAYER_OPTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayer_GPS_Checkpoint(playerid, PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_X], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Y], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_Z], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_WORLD], PLAYER_GPS[playerid][PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED]][player_gps_INTERIOR]);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_CHANGE_NAME);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_CONFIRM_DELET);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CHANGE_NAME:
		{
			if(response)
			{
				if(isnull(inputtext))
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(strlen(inputtext) > 24)
				{
					SendNotification(playerid, "Caracteres: 1-24.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "%s", inputtext);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pgps SET name = '%e' WHERE id = %d;", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendNotification(playerid, "Has modificado el nombre de este lugar correctamente");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_CONFIRM_DELET:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pgps WHERE id = %d;", PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_VALID] = false;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_ID] = 0;
				format(PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_NAME], 24, "");
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_X] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Y] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_Z] = 0.0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_WORLD] = 0;
				PLAYER_GPS[playerid][ PLAYER_TEMP[playerid][pt_GPS_PLAYER_SELECTED] ][player_gps_INTERIOR] = 0;

				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
				SendNotification(playerid, "Has eliminado este lugar de tu GPS.");
				ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER_OPTION);
			return 1;
		}
		case DIALOG_PLAYER_GPS_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pgps WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_PLAYER_GPS[Player_GPS_Enum];
				for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++) PLAYER_GPS[playerid][i] = temp_PLAYER_GPS;

				SendNotification(playerid, "Ha eliminado todos tus lugares guardados.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_PLAYER);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITES:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_0);
					case 1: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_1);
					case 2: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_2);
					case 3: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_3);
					case 4: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_4);
					case 5: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_5);
					case 6: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_6);
					case 7: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_7);
					case 8: SetPlayer_GPS_Checkpoint(playerid, 1480.966918, -1772.065673, 18.795755, 0, 0);
					case 9: ShowDialog(playerid, DIALOG_PLAYER_GPS_SITE_8);
					case 10: SetPlayer_GPS_Checkpoint(playerid, 263.592102, 22.960014, 2.170951, 0, 0);
					case 11: SetPlayer_GPS_Checkpoint(playerid, 1785.4174, -1722.6566, 13.5469, 0, 0);
					case 12: SetPlayer_GPS_Checkpoint(playerid, 1670.253662, 735.604919, 10.820312, 0, 0);
				}
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_WORKS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return true;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == WORK_MEDIC) SendNotification(playerid, "Este trabajo se puede conseguir en cualquier hospital.");
				else SetPlayer_GPS_Checkpoint(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0, 0);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_0: //Hospitales
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Hospital_Spawn_Positions[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][hspi_X], Hospital_Spawn_Positions[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][hspi_Y], Hospital_Spawn_Positions[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][hspi_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_1 .. DIALOG_PLAYER_GPS_SITE_4, DIALOG_PLAYER_GPS_SITE_8: //EE
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);
				SetPlayer_GPS_Checkpoint(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_X], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Y], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_Z], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_WORLD], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][ee_EXT_INTERIOR]);
			}
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_5: //Cajeros
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, ATM_BANK[listitem][atm_X], ATM_BANK[listitem][atm_Y], ATM_BANK[listitem][atm_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_6: //Gasolineras
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, Fuel_Stations[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][fs_X], Fuel_Stations[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][fs_Y], Fuel_Stations[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][fs_Z], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_PLAYER_GPS_SITE_7: //Concesionarios
		{
			if(response) SetPlayer_GPS_Checkpoint(playerid, SELL_VEHICLES_SHOPS_SPAWN[listitem][0], SELL_VEHICLES_SHOPS_SPAWN[listitem][1], SELL_VEHICLES_SHOPS_SPAWN[listitem][2], 0, 0);
			else ShowDialog(playerid, DIALOG_PLAYER_GPS_SITES);
			return 1;
		}
		case DIALOG_WORKS_TELEPORTS:
		{
			if(!response) return 1;

			if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return true;
			else SetPlayerPosEx(playerid, obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_X], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Y], obtain_work_coords[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][obtain_work_MAP_ICON_Z], 0.0, 0, 0, true, true);
			return 1;
		}
		case DIALOG_PLAYER_GPS_PROPERTIES:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem] == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				new index = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_GPS_SELECTED_PROPERTY][listitem]);
				if(index != -1) SetPlayer_GPS_Checkpoint(playerid, PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], 0, PROPERTY_INFO[index][property_EXT_INTERIOR]);
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
			}
			return 1;
		}
		case DIALOG_PLAYER_GPS_VEHICLES:
		{
			if(response)
			{
				new const vehicleid = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(vehicleid == -1) return ShowDialog(playerid, DIALOG_PLAYER_GPS);

				if(!PI[playerid][pi_VIP])
				{
					if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE]) 
						SendNotification(playerid, "No podrás usar este vehículo hasta que no consigas VIP.");
				}

				new Float:pos[3];
				GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
				SetPlayer_GPS_Checkpoint(playerid, pos[0], pos[1], pos[2], GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD], 0);
			}
			else if(PI[playerid][pi_PHONE_NUMBER])
			{
				ShowPlayeriPhone(playerid);
				ShowPlayeriPhoneApps(playerid);
				return 1;
			}
			return 1;
		}
		case DIALOG_PROPERTY_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_NAME);
					case 1:
					{
						new total;
						for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
						{
							if(IsPlayerConnected(i))
							{
								if( PI[i][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY && PI[i][pi_LOCAL_INTERIOR] == PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID])
								{
									if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_POLICE_FORCED] && (PLAYER_WORKS[i][WORK_POLICE][pwork_SET] && PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)) {
										continue;
									}

									PI[i][pi_STATE] = ROLEPLAY_STATE_NORMAL;
									PI[i][pi_LOCAL_INTERIOR] = 0;
									PLAYER_TEMP[i][pt_PROPERTY_INDEX] = -1;
									SetPlayerPosEx(i, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_ANGLE], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_FREEZE], false);
									StopAudioStreamForPlayer(i);
									SendFormatNotification(i, "~r~%s~w~ te ha echado de su propiedad.", PLAYER_TEMP[playerid][pt_RP_NAME]);
									total ++;
								}
							}
						}
						if(total == 0) SendNotification(playerid, "No hay nadie en tu propiedad.");
						else SendFormatNotification(playerid, "Has echado %d personas de tu propiedad.", total);
					}
					case 2:
					{
						if(!PI[playerid][pi_MP3]) return SendErrorNotification(playerid, "No tienes ningún MP3, puedes ir a cualquier 24/7 para comprar uno.");

						PLAYER_TEMP[playerid][pt_MUSIC_FOR_PROPERTY] = true;
						Auto_SendPlayerAction(playerid, "busca música en su MP3.");
						ShowDialog(playerid, DIALOG_PLAYER_MP3);
					}
					case 3://muebles
					{ 
						ShowDialog(playerid, DIALOG_PROPERTY_OBJECTS_MENU);
					}
					case 4:
					{
						if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_DIS_DEFAULT_INTERIOR])
						{
							SetPropertyDefaultFurniture(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED], true);
							SendNotification(playerid, "Se han vuelto a crear los muebles por defecto de esta propiedad.");
						}
						else
						{
							if(PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_EMPTY_INTERIOR]) {
								SetPropertyDefaultFurniture(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED], false);
								SendNotification(playerid, "Se han eliminado los muebles por defecto de esta propiedad.");
							}
							else SendNotification(playerid, "A esta propiedad no se le pueden eliminar los muebles por defecto.");
						}
					}
					case 5:
					{
						if(!PI[playerid][pi_CREW])
						{
							if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_GARAJE]) return 1;
							if(IsPlayerInRangeOfPoint(playerid, 30.0, 488.118377, -422.914733, 2758.268798))
							{
								new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_Z];
								if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
								SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], false, true);
								FreezePlayer(playerid);
							}
							else
							{
								SetPlayerPosEx(playerid, 492.059387, -431.994201, 2757.995849, 359.826965, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
								FreezePlayer(playerid);
							}
							return 1;
						}
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendNotification(playerid, "No tienes permiso.");

						for(new i = 0; i != MAX_TERRITORIES; i ++)
						{
							if(!TERRITORIES[i][territory_VALID]) continue;
							if(!TERRITORIES[i][territory_OCCUPIED]) continue;
							if(TERRITORIES[i][territory_CREW_ID] != PI[playerid][pi_CREW]) continue;

							if(IsPointInDynamicArea(TERRITORIES[i][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z]))
							{
								PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = i;
								ShowDialog(playerid, DIALOG_CREW_PROPERTY_CONFIRM);
								return 1;
							}
						}
						SendNotification(playerid, "Esta propiedad no está dentro de un territorio de tu banda.");
					}
					case 6:
					{
						if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_GARAJE]) return 1;
						if(IsPlayerInRangeOfPoint(playerid, 30.0, 488.118377, -422.914733, 2758.268798))
						{
							new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_Z];
							if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
							SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], false, true);
							FreezePlayer(playerid);
						}
						else
						{
							SetPlayerPosEx(playerid, 492.059387, -431.994201, 2757.995849, 359.826965, PROPERTY_INTERIORS[ PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
							FreezePlayer(playerid);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_PROPERTY_NAME:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return 1;

				if(isnull(inputtext)) return ShowDialog(playerid, dialogid);
				if(strlen(inputtext) > 24)
				{
					ShowDialog(playerid, dialogid);
					SendNotification(playerid, "{"#SILVER_COLOR"}Caracteres: 1-24.");
					return 1;
				}

				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "%s", inputtext);
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET name = '%e' WHERE id = %d;", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "Nombre de la propiedad actualizado a ~g~'%s'~w~.", inputtext);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_OPTIONS);
			return 1;
		}
		case DIALOG_BUY_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] == INVALID_VEHICLE_ID) return 1;
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;
				if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_TYPE] != VEHICLE_TYPE_SELL) return 1;
				if(!SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VALID]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_VIP_LEVEL] > PI[playerid][pi_VIP]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_LEVEL] > PI[playerid][pi_LEVEL]) return 1;
				if(PI[playerid][pi_BANK_ACCOUNT] == 0) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE] > PI[playerid][pi_BANK_MONEY]) return 1;
				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA] > PI[playerid][pi_COINS]) return 1;

				new vid = AddPersonalVehicle
				(
					playerid,
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2],
					SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_1],
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_COLOR_2],
					VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][gb_vehicle_MODELID] - 400 ][vehicle_info_MAX_GAS]
				);
				if(!vid) return SendNotification(playerid, "No se pueden añadir más vehículos.");

				if(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA])
				{
					PI[playerid][pi_COINS] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA];

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					SendFormatNotification(playerid, "Has gastado ~r~%d "SERVER_COIN"~w~ en la compra de este vehículo.", SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_EXTRA]);
				}
				else
				{
					if(PI[playerid][pi_PHONE_NUMBER])
					{
						new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]));
						RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
						if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
					}

					PI[playerid][pi_BANK_MONEY] -= SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE];
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);
					RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_BUY_VEHICLE, SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_PRICE]);
				}

				SendNotification(playerid, "~g~¡Vehículo comprado! ~n~~n~~w~Utiliza ~y~/ayuda vehiculos ~w~para ver que puedes hacer con tu vehículo.");
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				new Float:pos[4];
				pos[0] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][0];
				pos[1] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][1];
				pos[2] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][2];
				pos[3] = SELL_VEHICLES_SHOPS_SPAWN[ SELL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] ][sell_vehicle_SHOP] ][3];

				pos[0] += (2.0 * floatsin(-(pos[3] + 90.0), degrees));
				pos[1] += (2.0 * floatcos(-(pos[3] + 90.0), degrees));
				SetPlayerPosEx(playerid, pos[0], pos[1], pos[2], pos[3], 0, 0);

				if(!PI[playerid][pi_VIP]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_NOTARY:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 0;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 3:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 1;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
				}
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_PROPERTY:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] = GetPropertyIndexByID(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem]);
				if(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_PROPERTY_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_PROPERTY;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1273;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_PROPERTY_BANK_SELL:
		{
			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_VALID]) return 1;
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return 1;
				if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "Necesitas tener una cuenta bancaria para vender la propiedad.");

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]);

				DestroyDynamicPickup(PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_X], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Y], PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_Z], 0, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				new Float:price, payment;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE_BASE];
				if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
				else payment = floatround( floatmul(price, 0.25) );

				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}

				PI[playerid][pi_BANK_MONEY] += payment;
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_SOLD_PROPERTY, payment);
				SendFormatNotification(playerid, "Has vendido esta propiedad, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				new Float:price, min_price, max_price;
				price = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );

				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendNotification(playerid, "Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_PROPERTY_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
			return 1;
		}
		case DIALOG_PROPERTY_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if(!IsPlayerConnected(inputtext[0])) return SendNotification(playerid, "Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendNotification(playerid, "¿Pero como te vas a vender algo a ti mismo?");
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Error, el comprador no está disponible.");

				if(ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendNotification(playerid, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendNotification(playerid, "El comprador no está en la sala.");
				if(PI[inputtext[0]][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "El comprador no tiene cuenta bancaria.");

				new player_properties = CountPlayerProperties(inputtext[0]);
				if(player_properties >= MAX_SU2_PROPERTIES) return SendNotification(playerid, "El comprador no puede adquirir más propiedades.");
				if(PI[inputtext[0]][pi_VIP] == 1)
				{
					if(player_properties >= MAX_SU_PROPERTIES) return SendNotification(playerid, "El comprador no puede adquirir más propiedades.");
				}
				if(!PI[inputtext[0]][pi_VIP])
				{
					if(player_properties >= MAX_NU_PROPERTIES) return SendNotification(playerid, "El comprador no puede adquirir más propiedades.");
				}

				if(PI[inputtext[0]][pi_LEVEL] < 2) return SendNotification(playerid, "Error, el comprador necesita ser al menos nivel 2.");
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > PI[inputtext[0]][pi_BANK_MONEY]) return SendNotification(playerid, "Error, el comprador no tiene el dinero que pides.");

				SendNotification(playerid, "Tu oferta se ha enviado al comprador, espera para ver si la acepta.");

				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);

				PLAYER_TEMP[inputtext[0]][pt_PLAYER_PROPERTY_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_PROPERTY);
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_PROPERTY:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return SendNotification(playerid, "El vendedor se ha desconectado.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendNotification(playerid, "El vendedor ya no está.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendNotification(playerid, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendNotification(playerid, "El vendedor no está en la sala.");
				if(PI[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "El vendedor no tiene cuenta bancaria.");

				// Traspasar
				new label_str[256];
				format
				(
					label_str,
					sizeof label_str,
					"\
						{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
						{"#PRIMARY_COLOR"}·{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
						{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
					", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], PI[playerid][pi_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = PI[playerid][pi_ID];
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = %d, id_territory = NULL WHERE id = %d;", PI[playerid][pi_ID], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];

				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD COMPRADA: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PI[seller][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "PROPIEDAD VENDIDA: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[seller][pi_ID], message);
					if(PI[seller][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}

				PI[playerid][pi_BANK_MONEY] -= price;
				PI[seller][pi_BANK_MONEY] += price;
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[seller][pi_ID], BANK_TRANSACTION_TRANSFER, price);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[seller][pi_BANK_MONEY], PI[seller][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "~g~¡Propiedad %d comprada!~n~~n~~w~Ahora puedes ir a tu casa, si no sabes donde es puedes marcarla con la App ~b~GPS~w~.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				SendFormatNotification(seller, "~g~¡Propiedad %d vendida!~n~~n~~w~Has recibido ~g~%s dólares ~w~en tu cuenta bancaria.", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID], number_format_thousand(price));
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);
			}
			return 1;
		}
		case DIALOG_NOTARY_SELECT_VEHICLE:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				switch(PLAYER_TEMP[playerid][pt_NOTARY_OPTION])
				{
					case 0: ShowDialog(playerid, DIALOG_VEHICLE_BANK_SELL);
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_VEHICLE;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_1];
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_COLOR_2];
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			else
			{
				if(PLAYER_TEMP[playerid][pt_NOTARY_OPTION] == 2) ShowDialog(playerid, DIALOG_SHOP_ADD);
				else ShowDialog(playerid, DIALOG_NOTARY);
			}
			return 1;
		}
		case DIALOG_VEHICLE_BANK_SELL:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_VALID]) return 1;
				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return 1;
				if(PI[playerid][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "Necesitas tener una cuenta bancaria para vender el vehículo.");

				new Float:price, payment;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				if(PI[playerid][pi_VIP]) payment = floatround( floatmul(price, 0.50) );
				else payment = floatround( floatmul(price, 0.25) );

				//Destruir veh
				print("eliminando");
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pvehicles WHERE id = %d;", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				mysql_query(mysql_db, QUERY_BUFFER);
				print("eliminado");

				DestroyVehicleEx(PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED]);


				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(payment));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				PI[playerid][pi_BANK_MONEY] += payment;
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[playerid][pi_ID], BANK_TRANSACTION_SOLD_VEHICLE, payment);

				SendFormatNotification(playerid, "Has vendido este vehículo, has recibido %s$ en tu cuenta bancaria.", number_format_thousand(payment));
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				if(!PI[playerid][pi_VIP]) ReLockPlayerVehicles(playerid);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);

				new Float:price, min_price, max_price;
				price = VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE];
				min_price = floatround( floatmul(price, 0.15) );
				max_price = floatround( floatmul(price, 6.0) );

				if(inputtext[0] < min_price || inputtext[0] > max_price)
				{
					SendNotification(playerid, "Este precio no está dentro del rango ofrecido.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_NOTARY_PRICE] = inputtext[0];
				ShowDialog(playerid, DIALOG_VEHICLE_SELL_TO_PLAYER);
			}
			else ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
			return 1;
		}
		case DIALOG_VEHICLE_SELL_TO_PLAYER:
		{
			if(response)
			{
				if(sscanf(inputtext, "u", inputtext[0])) return ShowDialog(playerid, dialogid);

				if(!IsPlayerConnected(inputtext[0])) return SendNotification(playerid, "Error, el comprador está desconectado.");
				if(inputtext[0] == playerid) return SendNotification(playerid, "¿Pero como te vas a vender algo a ti mismo?");
				if(PLAYER_TEMP[inputtext[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Error, el comprador no está disponible.");

				if(PLAYER_TEMP[inputtext[0]][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[inputtext[0]][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendNotification(playerid, "El comprador no está en la sala.");
				if(!IsPlayerInRangeOfPoint(inputtext[0], 3.0, -474.596282, 289.679107, 2004.584960)) return SendNotification(playerid, "El comprador no está en la sala.");
				if(PI[inputtext[0]][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "El comprador no tiene cuenta bancaria.");

				new pvehicles = CountPlayerVehicles(inputtext[0]);
				if(pvehicles >= MAX_SU2_VEHICLES) return SendNotification(playerid, "El comprador no puede adquirir más vehículos.");
				if(PI[inputtext[0]][pi_VIP])
				{
					if(pvehicles >= MAX_SU_VEHICLES) return SendNotification(playerid, "El comprador no puede adquirir más vehículos.");
				}
				if(!PI[inputtext[0]][pi_VIP])
				{
					if(pvehicles >= MAX_NU_VEHICLES) return SendNotification(playerid, "El comprador no puede adquirir más vehículos.");
				}

				if(PI[inputtext[0]][pi_LEVEL] < 2) return SendNotification(playerid, "Error, el comprador necesita ser al menos nivel 2.");
				if(PLAYER_TEMP[playerid][pt_NOTARY_PRICE] > PI[inputtext[0]][pi_BANK_MONEY]) return SendNotification(playerid, "Error, el comprador no tiene el dinero que pides.");

				if(PI[inputtext[0]][pi_DRIVE_LICENSE_POINTS] == 0)
				{
					SendNotification(playerid, "Tu oferta se ha enviado al comprador, pero el no tiene licencia de conducir y no puede aceptar tu oferta.");
					SendFormatNotification(inputtext[0], "%s te ha ofrecido un vehículo, pero ~r~necesitas una licencia de conducir~w~ para aceptarlo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					return 1;
				}

				SendNotification(playerid, "Tu oferta se ha enviado al comprador, espera para ver si la acepta.");

				new action[64]; format(action, sizeof action, "quiere llegar a un acuerdo con %s.", PLAYER_TEMP[inputtext[0]][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);

				PLAYER_TEMP[inputtext[0]][pt_PLAYER_VEHICLE_SELECTED] = PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_PRICE] = PLAYER_TEMP[playerid][pt_NOTARY_PRICE];
				PLAYER_TEMP[inputtext[0]][pt_NOTARY_TO_PLAYER] = playerid;
				PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] = inputtext[0];

				ShowDialog(inputtext[0], DIALOG_SELL_CONFIRM_VEHICLE);
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_SELL_PRICE);
			return 1;
		}
		case DIALOG_SELL_CONFIRM_VEHICLE:
		{
			if(response)
			{
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER])) return SendNotification(playerid, "El vendedor se ha desconectado.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_NOTARY_TO_PLAYER] != playerid) return SendNotification(playerid, "El vendedor ya no está.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "Error, el vendedor no está disponible.");
				if(ENTER_EXIT[ PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_CITY_HALL_LS) return SendNotification(playerid, "El vendedor no está en la sala.");
				if(!IsPlayerInRangeOfPoint(PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER], 3.0, -474.596282, 289.679107, 2004.584960)) return SendNotification(playerid, "El vendedor no está en la sala.");
				if(PI[ PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER] ][pi_BANK_ACCOUNT] == 0) return SendNotification(playerid, "El vendedor no tiene cuenta bancaria.");

				// Traspasar
				PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pvehicles SET id_player = %d WHERE id = %d;", PI[playerid][pi_ID], PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][player_vehicle_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);


				// Banco
				new price = PLAYER_TEMP[playerid][pt_NOTARY_PRICE], seller = PLAYER_TEMP[playerid][pt_NOTARY_TO_PLAYER];

				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO COMPRADO: -%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 6740), message);
				}
				if(PI[seller][pi_PHONE_NUMBER])
				{
					new message[64]; format(message, sizeof message, "VEHICULO VENDIDO: +%s$", number_format_thousand(price));
					RegisterPhoneMessage(0, PI[seller][pi_ID], message);
					if(PI[seller][pi_PHONE_STATE] == PHONE_STATE_ON) SendClientMessageEx(seller, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(seller, 6740), message);
				}

				PI[playerid][pi_BANK_MONEY] -= price;
				PI[seller][pi_BANK_MONEY] += price;
				RegisterBankAccountTransaction(PI[playerid][pi_ID], PI[seller][pi_ID], BANK_TRANSACTION_TRANSFER, price);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[playerid][pi_BANK_MONEY], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET bank_money = %d WHERE id = %d;", PI[seller][pi_BANK_MONEY], PI[seller][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);


				SendFormatNotification(playerid, "~g~¡Vehículo %s comprado!~n~~n~~w~Utiliza la App ~b~Coches~w~ para localizarlo.", VEHICLE_INFO[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_VEHICLE_SELECTED] ][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);
				SendFormatNotification(seller, "~g~¡Vehículo vendido!~n~~n~~w~Has recibido ~g~%s dólares ~w~en tu cuenta bancaria.", number_format_thousand(price));
				PlayerPlaySoundEx(seller, 1058, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

				new action[64]; format(action, sizeof action, "y %s han llegado a un acuerdo.", PLAYER_TEMP[seller][pt_RP_NAME]);
				Auto_SendPlayerAction(playerid, action);

				if(!PI[seller][pi_VIP]) ReLockPlayerVehicles(seller);
				if(!PI[playerid][pi_VIP]) ReLockPlayerVehicles(playerid);
			}
			return 1;
		}
		case DIALOG_SELECT_TRUCK_TYPE:
		{
			if(response)
			{
				if(Truck_Contents[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][truck_content_EXP] > PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL])
				{
					SendFormatNotification(playerid, "Has realizado %d trabajos como camionero, necesitas %d para este viaje.", PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], Truck_Contents[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][truck_content_EXP]);
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new vehicleid = GetPlayerVehicleID(playerid);
				TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

				PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 35.0;
				UpdatePlayerLoadingTruckSize(playerid);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
				PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);

				SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}El camión se está cargando, si sales de él se cancelará el viaje.");
			}
			else
			{
				KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
				PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
				SetVehicleToRespawnEx(GetPlayerVehicleID(playerid));
			}
			return 1;
		}
		case DIALOG_TUNING_MENU_PART:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME])) return 1;

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

				format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);

				ShowDialog(playerid, DIALOG_TUNING_MENU_COMPONENT);
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_TUNING_MENU_COMPONENT:
		{
			if(response)
			{
				if(isnull(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]) || !PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]) return 1;

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

				if(PI[playerid][pi_MECANICO_PIECES] < PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES])
				{
					SendNotification(playerid, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					new vehicleid = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];

					new slot = GetVehicleComponentType( PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] );
					new current_component = GetVehicleComponentInSlot(vehicleid, slot);
					if(current_component) RemoveVehicleComponent(vehicleid, current_component);

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][slot] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];
					AddVehicleComponent(vehicleid, PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID]);

					PI[playerid][pi_MECANICO_PIECES] -= PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					SendFormatNotification(playerid, "Componente '%s' añadido, has necesitado %d piezas.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME], PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES]);
				}
				else
				{
					format(PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT], 24, "%s", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_NAME]);
					PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID];

					PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] = PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					ShowDialog(playerid, DIALOG_MECANICO_TUNING_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
			return 1;
		}
		case DIALOG_MECANICO_MENU:
		{
			if(response)
			{
				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

				new Float:Vehicle_Pos[3];
				GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

				switch(listitem)
				{
					case 0: // Reparar
					{
						if(PI[playerid][pi_MECANICO_PIECES] < 10) return SendNotification(playerid, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");

						if(gettime() < GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME] + 300)
						{
							new time = (300-(gettime()-GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_LAST_REPAIR_TIME]));
							SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a reparar este vehículo.", TimeConvert(time));
							return 1;
						}

						if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
						{
							PI[playerid][pi_MECANICO_PIECES] -= 10;
							RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], playerid);

							SendNotification(playerid, "Este es tu vehículo por lo que no se cobrará.");
							SendNotification(playerid, "Has necesitado 10 piezas para la reparacion.");
							return 1;
						}
						else
						{
							if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_VALID])
							{
								if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_DRIVER] == playerid || GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] == playerid)
								{
									PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
									PI[playerid][pi_MECANICO_PIECES] -= 10;
									RepairVehicleEx(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], playerid);

									SendNotification(playerid, "Eres el conductor o el último conductor de este vehículo por lo que no se cobrará.");
									SendNotification(playerid, "Has necesitado 10 piezas para la reparacion.");
									return 1;
								}
							}
							ShowDialog(playerid, DIALOG_MECANICO_REPAIR_PRICE);
						}
					}
					case 1:
					{
						if(PI[playerid][pi_MECANICO_PIECES] < 5)
						{
							ShowDialog(playerid, dialogid);
							SendNotification(playerid, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendNotification(playerid, "Solo los vehículos personales se pueden pintar.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECANICO_SELECT_COL_SLOT);
					}
					case 2:
					{
						if(3 > PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL])
						{
							SendFormatNotification(playerid, "Necesitas ser mínimo rango Tuneador para hacer esto.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						ShowDialog(playerid, DIALOG_MECANICO_REMOVE_COMPONEN);
					}
					case 3:
					{
						if(3 > PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL])
						{
							SendFormatNotification(playerid, "Necesitas ser mínimo rango Tuneador para hacer esto.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendNotification(playerid, "Solo los vehículos personales se pueden tunear.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_TUNING_MENU_PART);
					}
					case 4:
					{
						if(2 > PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL])
						{
							SendFormatNotification(playerid, "Necesitas ser mínimo rango Tuneador para hacer esto.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(!PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_VALID])
						{
							ShowDialog(playerid, dialogid);
							SendNotification(playerid, "Solo los vehículos personales se le pueden cambiar el paintjob.");
							return 1;
						}
						ShowDialog(playerid, DIALOG_TUNING_PAINTJOB);
					}
				}
			}
			return 1;
		}
		case DIALOG_MECANICO_REPAIR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendNotification(playerid, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2000)
				{
					SendNotification(playerid, "El rango del precio es: 0$ - 2.000$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_VALID])
				{
					new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
					if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El dueño del vehículo no está cerca.");

					new Float:mecanico_pos[3];
					GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
					if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El dueño del vehículo está demasiado lejos.");

					PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
					PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
					PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
					format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Reparación completa del vehículo");
					PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_REPAIR;
					PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = 0;
					PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
					PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = 10;
					PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

					ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);
					SendFormatNotification(playerid, "Le has ofrecido a %s reparar su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
				}
				else
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_OCCUPIED])
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El conductor del vehículo no está cerca.");

						new Float:mecanico_pos[3];
						GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El conductor del vehículo está demasiado lejos.");

						PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
						PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
						format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);
						SendFormatNotification(playerid, "Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
					}
					else
					{
						new buyer = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER];
						if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "Este vehículo no tiene conductor.");

						new Float:mecanico_pos[3];
						GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
						if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El conductor del vehículo está demasiado lejos.");

						PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
						PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
						PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
						format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Reparación completa del vehículo");
						PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_REPAIR;
						PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = 0;
						PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
						PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = 10;
						PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

						ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);
						SendFormatNotification(playerid, "Le has ofrecido a %s reparar el vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
					}
				}
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_COLOR_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendNotification(playerid, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2050)
				{
					SendNotification(playerid, "El rango del precio es: 0$ - 2.050$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El dueño del vehículo no está cerca.");

				new Float:mecanico_pos[3];
				GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;

				switch(PLAYER_TEMP[playerid][pt_MECANICO_COLOR_SLOT])
				{
					case 0:
					{
						format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Pintar color primario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_COLOR_1;
					}
					case 1:
					{
						format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Pintar color secundario {%06x}(%d)", VEHICLE_COLORS[ PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR] ] >>> 8, PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR]);
						PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_COLOR_2;
					}
				}

				PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR];
				PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = 5;
				PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);

				SendFormatNotification(playerid, "Le has ofrecido a %s pintar su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_TUNING_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendNotification(playerid, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > ((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000))
				{
					SendFormatNotification(playerid, "El rango del precio es: 0$ - %s$.", number_format_thousand((PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES] * 50) + 2000));
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El dueño del vehículo no está cerca.");

				new Float:mecanico_pos[3];
				GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
				format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "'%s' > '%s'", PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PART], PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT]);
				PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_TUNING;
				PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_COMPONENT_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = PLAYER_TEMP[playerid][pt_TUNING_SELECTED_PIECES];
				PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);

				SendFormatNotification(playerid, "Le has ofrecido a %s tunear su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_PAINTJOB_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendNotification(playerid, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2750)
				{
					SendNotification(playerid, "El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El dueño del vehículo no está cerca.");

				new Float:mecanico_pos[3];
				GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El dueño del vehículo está demasiado lejos.");

				PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
				PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
				if(PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] == 3)
					format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Eliminar Paintjob", PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID]);
				else
					format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Paintjob (%d)", PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID]);
				PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_PAINTJOB;
				PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
				PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = 15;
				PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();

				ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);

				SendFormatNotification(playerid, "Le has ofrecido a %s cambiar el paintjob de su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_REM_COM_PRICE:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				new price;
				if(sscanf(inputtext, "d", price))
				{
					SendNotification(playerid, "El precio no es correcto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(price < 0 || price > 2750)
				{
					SendNotification(playerid, "El rango del precio es: 0$ - 2.750$.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new buyer = GetPlayerIdFromAccountId(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID]);
				if(buyer == INVALID_PLAYER_ID) return SendNotification(playerid, "El dueño del vehículo no está cerca.");

				new Float:mecanico_pos[3];
				GetPlayerPos(playerid, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2]);
				if(!IsPlayerInRangeOfPoint(buyer, 10.0, mecanico_pos[0], mecanico_pos[1], mecanico_pos[2])) return SendNotification(playerid, "El dueño del vehículo está demasiado lejos.");

				inline OnComponentsInfoLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new part[24], name[24];
							cache_get_value_name(0, "part", part);
							cache_get_value_name(0, "name", name);

							PLAYER_TEMP[buyer][pt_MECANICO_PID] = playerid;
							PLAYER_TEMP[buyer][pt_MECANICO_AID] = PI[playerid][pi_ID];
							PLAYER_TEMP[buyer][pt_MECANICO_PRICE] = price;
							format(PLAYER_TEMP[buyer][pt_MECANICO_TEXT], 64, "Eliminar componente (%s > %s)", part, name);
							PLAYER_TEMP[buyer][pt_MECANICO_TYPE] = MECANICO_OPTION_REMOVE_COMPONEN;
							PLAYER_TEMP[buyer][pt_MECANICO_EXTRA] = PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COMPONENT];
							PLAYER_TEMP[buyer][pt_MECANICO_VEHICLE_ID] = PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID];
							PLAYER_TEMP[buyer][pt_MECANICO_PIECES] = PLAYER_TUNING_MENU[playerid][ PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COMPONENT] ][tuning_menu_PIECES];
							PLAYER_TEMP[buyer][pt_MECANICO_TIME] = gettime();
							ShowDialog(buyer, DIALOG_MECANICO_ACCEPT);
							SendFormatNotification(playerid, "Le has ofrecido a %s quitar un componente de su vehículo por %s$.", PLAYER_TEMP[buyer][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[buyer][pt_MECANICO_PRICE]));
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vcomponents_info WHERE id = %d;", GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][ PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COMPONENT] ][tuning_menu_ID] ]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnComponentsInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_ACCEPT:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECANICO_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECANICO_PID])) return SendNotification(playerid, "El Mecánico ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_MECANICO_AID]) return SendNotification(playerid, "El Mecánico ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_MECANICO_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El Mecánico está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El Mecánico no está disponible.");

				if(PLAYER_TEMP[playerid][pt_MECANICO_PRICE] > PI[playerid][pi_CASH])
				{
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}La persona no tiene suficiente dinero.");
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder aceptarlo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECANICO_PRICE] - PI[playerid][pi_CASH]));
					return 1;
				}
				if(PLAYER_TEMP[playerid][pt_MECANICO_PIECES] > PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES])
				{
					SendNotification(playerid, "Al Mecánico no le quedan piezas para el trabajo.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero no tienes piezas suficientes para el trabajo.");
					return 1;
				}

				if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID])
				{
					SendNotification(playerid, "El vehículo está muy lejos.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero el vehículo está muy lejos.");
					return 1;
				}
				if(GetVehicleDistanceFromPoint(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], pos[0], pos[1], pos[2]) > 10.0)
				{
					SendNotification(playerid, "El vehículo está muy lejos del Mecánico.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado pero estás muy lejos del vehículo.");
					return 1;
				}

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_MECANICO_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_MECANICO_PID], PLAYER_TEMP[playerid][pt_MECANICO_PRICE], true, false)) 
				{
					switch(PLAYER_TEMP[playerid][pt_MECANICO_TYPE])
					{
						case MECANICO_OPTION_REPAIR:
						{
							PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] -= PLAYER_TEMP[playerid][pt_MECANICO_PIECES];
							//PLAYER_WORKS[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][WORK_MECANICO][pwork_LEVEL] ++;
							AddPlayerJobPoints(PLAYER_TEMP[playerid][pt_MECANICO_PID], WORK_MECANICO);

							RepairVehicleEx(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], playerid);
							SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}Has necesitado 10 piezas para la reparacion.");
						}
						case MECANICO_OPTION_COLOR_1:
						{
							new vehicleid = PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], modelid = GetVehicleModel(vehicleid);
							PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] -= 5;
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] = PLAYER_TEMP[playerid][pt_MECANICO_EXTRA];
							ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);

							SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}Has necesitado 5 piezas para pintar el vehículo.");

							if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] >= 0 || GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] <= 255)
							{
								for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
								{
									if(IsPlayerConnected(i))
									{
										if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(i, vehicleid))
										{
											new r, g, b, a;
											HexToRGBA(VEHICLE_COLORS[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1] ], r, g, b, a);

											PlayerTextDrawBoxColor(i, PlayerTextdraws[i][pSpeedoTd][0], RGBAToHex(r, g, b, 50));
											PlayerTextDrawBoxColor(i, PlayerTextdraws[i][pSpeedoTd][4], RGBAToHex(r, g, b, 50));

											PlayerTextDrawSetPreviewModel(i, PlayerTextdraws[i][pSpeedoTd][1], modelid);
									   		PlayerTextDrawSetPreviewVehCol(i, PlayerTextdraws[i][pSpeedoTd][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
										}
									}
								}
							}
						}
						case MECANICO_OPTION_COLOR_2:
						{
							new vehicleid = PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID];
							PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] -= 5;
							GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2] = PLAYER_TEMP[playerid][pt_MECANICO_EXTRA];
							ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);

							SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}Has necesitado 5 piezas para pintar el vehículo.");
						}
						case MECANICO_OPTION_TUNING:
						{
							new slot = GetVehicleComponentType(PLAYER_TEMP[playerid][pt_MECANICO_EXTRA]);
							new current_component = GetVehicleComponentInSlot(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], slot);
							if(current_component) RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], current_component);

							GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = PLAYER_TEMP[playerid][pt_MECANICO_EXTRA];
							AddVehicleComponent(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], PLAYER_TEMP[playerid][pt_MECANICO_EXTRA]);

							PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] -= PLAYER_TEMP[playerid][pt_MECANICO_PIECES];
							SendFormatNotification(PLAYER_TEMP[playerid][pt_MECANICO_PID], "Has necesitado ~r~%d piezas~w~ para tunear el vehículo.", PLAYER_TEMP[playerid][pt_MECANICO_PIECES]);
						}
						case MECANICO_OPTION_PAINTJOB:
						{
							if(PLAYER_TEMP[playerid][pt_MECANICO_EXTRA] == 3)
							{
								PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] += 15;
								SendFormatNotification(playerid, "Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PI[playerid][pi_MECANICO_PIECES]);
							}
							else
							{
								PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] -= 15;
								SendNotification(playerid, "Has necesitado 15 piezas para el paintjob de el vehículo.");
							}
							GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = PLAYER_TEMP[playerid][pt_MECANICO_EXTRA];
							ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						}

						case MECANICO_OPTION_REMOVE_COMPONEN:
						{
							new slot = PLAYER_TUNING_MENU[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][ PLAYER_TEMP[playerid][pt_MECANICO_EXTRA] ][tuning_menu_ID];
							RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot]);
							GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][slot] = 0;

							PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] += PLAYER_TEMP[playerid][pt_MECANICO_PIECES];
							SendFormatNotification(PLAYER_TEMP[playerid][pt_MECANICO_PID], "Componente eliminado, piezas ganadas: ~g~%d~w~, piezas totales: ~g~%d~w~.", PLAYER_TEMP[playerid][pt_MECANICO_PIECES], PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES]);
						}
					}

					SendFormatNotification(playerid, "Le has pagado %s$ al Mecánico por su trabajo.", number_format_thousand(PLAYER_TEMP[playerid][pt_MECANICO_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_MECANICO_PID], "%s te ha pagado ~g~%s dólares~w~ por tu trabajo.", PLAYER_TEMP[playerid][pt_RP_NAME], number_format_thousand(PLAYER_TEMP[playerid][pt_MECANICO_PRICE]));
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_MECANICO_TIME] + 30) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_MECANICO_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_MECANICO_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_MECANICO_PID], -1, "{"#SILVER_COLOR"}La persona no aceptó lo que le ofreciste.");
			}
			return 1;
		}
		case DIALOG_MECANICO_SELECT_COL_SLOT:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				PLAYER_TEMP[playerid][pt_MECANICO_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_MECANICO_SELECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_MECANICO_SELECT_COLOR:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				if(PI[playerid][pi_MECANICO_PIECES] < 5) return SendNotification(playerid, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					PI[playerid][pi_MECANICO_PIECES] -= 5;
					switch(PLAYER_TEMP[playerid][pt_MECANICO_COLOR_SLOT])
					{
						case 0: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COLOR_1] = listitem;
						case 1: GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COLOR_2] = listitem;
					}
					ChangeVehicleColor(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COLOR_2]);

					SendNotification(playerid, "Has necesitado 5 piezas para pintar el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COLOR] = listitem;
					ShowDialog(playerid, DIALOG_MECANICO_COLOR_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECANICO_SELECT_COL_SLOT);
			return 1;
		}
		case DIALOG_MECANICO_REMOVE_COMPONEN:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				if(2 > PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL])
				{
					SendFormatNotification(playerid, "Necesitas ser mínimo rango Tuneador para hacer esto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] < 0) return ShowDialog(playerid, dialogid);

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					RemoveVehicleComponent(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ]);
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_COMPONENTS][ PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_ID] ] = 0;

					PI[playerid][pi_MECANICO_PIECES] += PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES];
					SendFormatNotification(playerid, "Componente eliminado, piezas ganadas: %d, piezas totales: %d.", PLAYER_TUNING_MENU[playerid][listitem][tuning_menu_PIECES], PI[playerid][pi_MECANICO_PIECES]);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_MECANICO_SELECTED_COMPONENT] = listitem;
					ShowDialog(playerid, DIALOG_MECANICO_REM_COM_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		case DIALOG_TUNING_PAINTJOB:
		{
			if(!GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_VALID]) return 1;

			new Float:Vehicle_Pos[3];
			GetVehiclePos(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Vehicle_Pos[0], Vehicle_Pos[1], Vehicle_Pos[2])) return SendNotification(playerid, "El vehículo está demasiado lejos.");

			if(response)
			{
				if(3 > PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL])
				{
					SendFormatNotification(playerid, "Necesitas ser mínimo rango Tuneador para hacer esto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(PI[playerid][pi_MECANICO_PIECES] < 15) return SendNotification(playerid, "No tienes suficientes piezas, puedes comprar más piezas en el taller.");

				if(listitem == 0)
				{
					if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB] == 3)
					{
						SendNotification(playerid, "El vehículo no tiene ningún paintjob.");
						return 1;
					}

					if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
					{
						GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = 3;
						ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
						PI[ PLAYER_TEMP[playerid][pt_MECANICO_PID] ][pi_MECANICO_PIECES] += 15;
						SendFormatNotification(playerid, "Paintjob eliminado, piezas ganadas: 15, piezas totales: %d.", PI[playerid][pi_MECANICO_PIECES]);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] = 3;
						ShowDialog(playerid, DIALOG_MECANICO_PAINTJOB_PRICE);
					}
					return 1;
				}

				if(PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB] = listitem - 1;
					ChangeVehiclePaintjob(PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] ][gb_vehicle_PAINTJOB]);
					PI[playerid][pi_MECANICO_PIECES] -= 15;
					SendNotification(playerid, "Has necesitado 15 piezas para el paintjob de el vehículo.");
				}
				else
				{
					PLAYER_TEMP[playerid][pt_PAINTJOB_SELECTED_ID] = listitem - 1;
					ShowDialog(playerid, DIALOG_MECANICO_PAINTJOB_PRICE);
				}
			}
			else ShowDialog(playerid, DIALOG_MECANICO_MENU);
			return 1;
		}
		/*case DIALOG_SELECT_TRASH_ROUTE:
		{
			if(response)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID)
				{
					SendNotification(playerid, "Necesitas un compañero para comenzar a recoger basura.");
					return 1;
				}

				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = listitem;
				TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
				SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], listitem);
				CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], listitem);

				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
				SendClientMessageEx(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "Ruta {42aaf4}#%d {FFFFFF}establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
			}
			return 1;
		}*/
		case DIALOG_SEED_LIST:
		{
			if(response)
			{
				if(seed_info[listitem][seed_info_EXP] > PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL]) return SendFormatNotification(playerid, "Necesitas haber plantado al menos %d plantas como agricultor para poder comprar esta semilla.", seed_info[listitem][seed_info_EXP]);

				PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] = listitem;
				ShowDialog(playerid, DIALOG_SEED_BUY);
			}
			return 1;
		}
		case DIALOG_SEED_BUY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return SendNotification(playerid, "La cantidad de semillas no es correcta.");
				if(inputtext[0] <= 0 || inputtext[0] > 100000) return SendNotification(playerid, "La cantidad de semillas no es correcta.");

				new price = seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PRICE] * inputtext[0];
				if(price > PI[playerid][pi_CASH]) return SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar las semillas.", number_format_thousand(price - PI[playerid][pi_CASH]));

				if(GivePlayerCash(playerid, -price, true, true)) {
					switch(seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_PLANT_TYPE])
					{
						case PLANT_TYPE_MEDICINE: PI[playerid][pi_SEED_MEDICINE] += inputtext[0];
						case PLANT_TYPE_CANNABIS: PI[playerid][pi_SEED_CANNABIS] += inputtext[0];
						case PLANT_TYPE_CRACK: PI[playerid][pi_SEED_CRACK] += inputtext[0];
					}

					SendFormatNotification(playerid, "Has comprado %s semillas de %s por %s$.", number_format_thousand(inputtext[0]), seed_info[ PLAYER_TEMP[playerid][pt_SELECTED_BUY_SEED_ID] ][seed_info_NAME], number_format_thousand(price));
				}
			}
			else ShowDialog(playerid, DIALOG_SEED_LIST);
			return 1;
		}
		case DIALOG_PLANT_PLANTS:
		{
			if(response)
			{
				if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

				switch(seed_info[listitem][seed_info_PLANT_TYPE])
				{
					case PLANT_TYPE_MEDICINE:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_MEDICINE])
						{
							SendNotification(playerid, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_MEDICINE] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CANNABIS:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_CANNABIS])
						{
							SendNotification(playerid, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_CANNABIS] -= plant_info[listitem][plant_info_SEEDS];
					}
					case PLANT_TYPE_CRACK:
					{
						if(plant_info[listitem][plant_info_SEEDS] > PI[playerid][pi_SEED_CRACK])
						{
							SendNotification(playerid, "No tienes las semillas necesarias para plantar esta planta.");
							return 1;
						}
						PI[playerid][pi_SEED_CRACK] -= plant_info[listitem][plant_info_SEEDS];
					}
				}

				SendFormatNotification(playerid, "Vas a plantar '%s' y vas a necesitar %d semillas.", plant_info[listitem][plant_info_NAME], plant_info[listitem][plant_info_SEEDS]);


				new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL], 10);
				if(offset > 30.0) offset = 30.0;

				PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] = listitem;
				PLAYER_TEMP[playerid][pt_PLANTING] = true;
				PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_FARMER;

				TogglePlayerControllableEx(playerid, false);
				SetCameraBehindPlayer(playerid);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, true, false, false, false, 0);
				SetPlayerKeyPress(playerid, plant_info[listitem][plant_info_SEEDS] * 7);
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][pi_LEVEL] < 3) return SendNotification(playerid, "Necesitas ser al menos nivel 3 para poder comprar armas.");

						if(!PI[playerid][pi_VIP])
						{
							if(PI[playerid][pi_CAN_BUY_BM] > gettime())
							{
								SendFormatNotification(playerid, "Tienes que esperar %s minutos para volver a comprar aquí.", TimeConvert( PI[playerid][pi_CAN_BUY_BM] - gettime() ));
								return 1;
							}
						}

						ShowDialog(playerid, DIALOG_BLACK_MARKET_WEAPONS);
					}
					case 1: ShowDialog(playerid, DIALOG_BLACK_MARKET_SELECT_WEA);
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_WEAPONS:
		{
			if(response)
			{
				if(BLACK_MARKT_WEAPONS[listitem][black_market_EXP] > PI[playerid][pi_BLACK_MARKET_LEVEL])
				{
					SendFormatNotification(playerid, "Necesitas ser un cliente más habitual para que te vendan esta arma (%d/%d).", PI[playerid][pi_BLACK_MARKET_LEVEL], BLACK_MARKT_WEAPONS[listitem][black_market_EXP]);
					return 1;
				}


				if(PI[playerid][pi_CASH] >= BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE])
				{
					new weapon_slot = WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_SLOT];
					if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0)
					{
						SendFormatNotification(playerid, "Para comprar esta arma debes deshacerte de tu \"%s (%d)\"~w~ para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);
						return 1;
					}

					PI[playerid][pi_CAN_BUY_BM] = gettime() + 1;

					if(GivePlayerCash(playerid, -BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE], true, true)) {
						PI[playerid][pi_BLACK_MARKET_LEVEL] ++;

						if(WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 50);
						else GivePlayerWeaponEx(playerid, BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID], 1);

						RegisterNewPlayerWeapon(playerid, weapon_slot);
						SendFormatNotification(playerid, "Arma ~y~\"%s\" ~w~comprada por \"%s$\"", WEAPON_INFO[ BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE]));
					}
				}
				else
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar esta arma.", number_format_thousand(BLACK_MARKT_WEAPONS[listitem][black_market_WEAPON_PRICE] - PI[playerid][pi_CASH]));
				}
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_SELECT_WEA:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendNotification(playerid, "Este tipo de arma no necesita munición.");
					return 1;
				}

				ShowDialog(playerid, DIALOG_BLACK_MARKET_AMMO);
			}
			return 1;
		}
		case DIALOG_BLACK_MARKET_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 9999) return SendNotification(playerid, "La cantidad de munición no es correcta.");

				new price = 3 * inputtext[0];
				if(price > PI[playerid][pi_CASH]) return SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$ ~w~para poder comprar la munición.", number_format_thousand(price - PI[playerid][pi_CASH]));

				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendNotification(playerid, "A esta arma no le entra tanta munición.");
					return 1;
				}

				if(GivePlayerCash(playerid, -price, true, true)) {
					GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);

					SendFormatNotification(playerid, "Has comprado ~y~%s~w~ balas para tu ~y~%s~w~ por %s dólares.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
				}
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == 13 + 20) // Eliminar todo
				{
					ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_DELETE_A);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PLAYER_WEAPONS_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE_A:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				ResetPlayerWeaponsEx(playerid);

				SendNotification(playerid, "Has eliminado todas tus armas.");
				Auto_SendPlayerAction(playerid, "tira todas sus armas al suelo.");
			}
			else ShowDialog(playerid, DIALOG_PLAYER_WEAPONS);
			return 1;
		}
		case DIALOG_PLAYER_WEAPONS_DELETE:
		{
			if(response)
			{
				new bool:in_mercado_area;
				for(new i = 0; i != sizeof MercadoSites; i ++)
					if(IsPlayerInDynamicArea(playerid, MercadoSites[i][mercado_zone_AREA_ID]))
					{
						in_mercado_area = true;
						break;
					}

				if(in_mercado_area)
				{
					SendNotification(playerid, "No puedes tirar armas en este sitio.");
					return 1;
				}

				SendFormatNotification(playerid, "Has eliminado tu ~y~'%s'~w~ de tus armas.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				new string[64];
				format(string, sizeof string, "tira su %s al suelo.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME]);
				Auto_SendPlayerAction(playerid, string);

				if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
				{
					TirarArma(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID]);
				}
				RemovePlayerSlotWeapon(playerid, PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT], true);
			}
			return 1;
		}
		case DIALOG_ANIMS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);//rendirse
					case 1: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
					case 2: ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);//rodar
					case 3: ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
					case 4: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
					case 5: ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);//apuntar
					case 6: ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
					case 7: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
					case 8: ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);//paja
					case 9: ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);//herido
					case 10: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);//cruzarbrazos
					case 11: ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
					case 12: ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
					case 13: ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
					case 14: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);//comer
					case 15: ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
					case 16: ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
					case 17: ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
					case 18: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
					case 19: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
					case 20: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
					case 21: ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
					case 22: ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
					case 23: ApplyAnimation(playerid, "ped", "phone_in", 4.000000, 0, 0, 0, 1, 4000);//llamar
					case 24: ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
					case 25: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
					case 26: ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
					case 27: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
					case 28: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
					case 29: ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
					case 30: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
					case 31: ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
					case 32: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,7,5,1,1,1);//bailar
					case 33: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
					case 34: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
					case 35: ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);//asiento
				}
				SendNotification(playerid, "Para detener la animacion utiliza ~b~/parar~w~.");
			}
			return 1;
		}
		case DIALOG_TRICKS_FOOD:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardado mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");


				new to_player_slot = GetEmptyPlayerPocketSlot(playerid);
				if(to_player_slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "No tienes espacio en tus ~r~/alimentos~w~ para comprar esto.");
					return 1;
				}

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false)) 
				{
					TransferPlayerPocketObject(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid, to_player_slot);
					SendFormatNotification(playerid, "Te has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_MEDICINE:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");


				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_MEDICINE] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
					PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_MEDICINE] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];

					SendFormatNotification(playerid, "Has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CANNABIS:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_CANNABIS] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
					PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_CANNABIS] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];

					SendFormatNotification(playerid, "Has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_CRACK:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false)) {
					PI[playerid][pi_CRACK] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
					PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_CRACK] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];

					SendFormatNotification(playerid, "Has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_SU:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");


				PI[playerid][pi_COINS] += PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];
				PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_COINS] -= PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA];

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false)) {
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID]][pi_COINS], PI[PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID]][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					SendFormatNotification(playerid, "Has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_TRICKS_WEAPON:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return SendNotification(playerid, "El vendedor ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return SendNotification(playerid, "El vendedor ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El vendedor está demasiado lejos.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "El vendedor no está disponible.");


				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Para comprar esta arma tienes que deshacerte de tu '%s' (%d) para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA] ][player_weapon_ID] ][weapon_info_NAME], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA]);
					return 1;
				}

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_PRICE], true, false))
				{
					TransferPlayerWeapon(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], PLAYER_TEMP[playerid][pt_TRICK_SELLER_EXTRA], playerid);

					SendFormatNotification(playerid, "Has gastado ~g~%s$~w~ con esta compra.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));
					SendFormatNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "Has ganado ~g~%s$~w~ con esta venta.", number_format_thousand(PLAYER_TEMP[playerid][pt_TRICK_PRICE]));

					new action[64];
					format(action, sizeof action, "y %s llegan a un acuerdo.", PLAYER_TEMP[playerid][pt_RP_NAME]);
					Auto_SendPlayerAction(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], action);
				}
			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_TRICK_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_TRICK_SELLER_AID]) return 1;

				SendNotification(PLAYER_TEMP[playerid][pt_TRICK_SELLER_PID], "El comprador no ha aceptado tu trato.");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_BOOT_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE_ALL);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			}

		}
		case DIALOG_VEHICLE_BOOT_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id_vehicle = %d;", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][player_vehicle_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
				for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][i] = temp_VEHICLE_BOOT;

				SendNotification(playerid, "Ha eliminado todo de este maletero.");
				Auto_SendPlayerAction(playerid, "tira todas las armas de su maltero");
			}
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_VALID]) return SendNotification(playerid, "No hay nada en ese slot.");

						new string[128];
						switch(VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_TYPE]) {
							case BOOT_TYPE_WEAPON: {
								new to_slot = WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_SLOT];
								if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
								{
									PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
									SendFormatNotification(playerid, "Para sacar esta arma tienes que deshacerte de tu ~r~\"%s (%d)\"~w~ para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
									return 1;
								}
								GivePlayerWeaponEx(playerid, VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT], VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT_EXTRA]);
								RegisterNewPlayerWeapon(playerid, to_slot);
								format(string, sizeof string, "saca un(a) %s del maletero de su vehículo.", WEAPON_INFO[ VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT] ][weapon_info_NAME]);
							}
							case BOOT_TYPE_MEDICINES: {
								PI[playerid][pi_MEDICINE] += VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca medicamentos del maletero de su vehículo.");
							}
							case BOOT_TYPE_CANNABIS: {
								PI[playerid][pi_CANNABIS] += VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca marihuana del maletero de su vehículo.");
							}
							case BOOT_TYPE_CRACK: {
								PI[playerid][pi_CRACK] += VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_INT];
								format(string, sizeof string, "saca crack del maletero de su vehículo.");
							}
						}

						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id = %d;", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
						mysql_tquery(mysql_db, QUERY_BUFFER);

						new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
						Auto_SendPlayerAction(playerid, string);
					}
					case 1: ShowDialog(playerid, DIALOG_VEHICLE_BOOT_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
			return 1;
		}
		case DIALOG_VEHICLE_BOOT_DELETE:
		{
			if(response)
			{
				SendNotification(playerid, "Eliminado.");

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vboot WHERE id = %d;", VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ][vehicle_boot_OBJECT_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT]; VEHICLE_BOOT[ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] ][ PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE_BOOT_SLOT] ] = temp_VEHICLE_BOOT;
			}
			else ShowDialog(playerid, DIALOG_VEHICLE_BOOT_OPTIONS);
			return 1;
		}
		case DIALOG_SELECT_WORK_SKIN:
		{
			if(!response) return 1; 

			new work = GetIDFaccionPlayer(playerid);
			if(work == -1) return SendNotification(playerid, "~r~No perteneces a una facción.");

			if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
			if(WORK_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][work_skin_RANK] > PLAYER_WORKS[playerid][work][pwork_LEVEL]) return ShowDialog(playerid, dialogid);

			PI[playerid][pi_WORK_DUTY] = WORK_SKINS[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][work_skin_SKIN];
			CallLocalFunction("StartPlayerJob", "iii", playerid, work, INVALID_VEHICLE_ID);
			return 1;
		}
		case DIALOG_WORK_RADIOS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO] = listitem;
				SendFormatNotification(playerid, "Tu radio ha sido ajustada a la frecuencia %d.", listitem + 1);
			}
			return 1;
		}
		case DIALOG_PLAYERS_WORK_LIST:
		{
			if(!response) return 1;

			new work = GetIDFaccionPlayer(playerid);

			if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
			else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
			{
				inline OnCountQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new count, pages;
							cache_get_value_index_int(0, 0, count);
							pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

							if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
							else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
							ShowDialog(playerid, dialogid);
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", work);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
			}
			else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
			{
				inline OnCountQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new count, pages;
							cache_get_value_index_int(0, 0, count);
							pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

							if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
							else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
							ShowDialog(playerid, dialogid);
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id_player) FROM pworks WHERE pworks.id_work = %d AND pworks.`set` = 1;", work);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
			}
			else
			{
				if(work == WORK_POLICE)
				{
					if(PLAYER_WORKS[playerid][work][pwork_LEVEL] >= 10)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_WORK_RANK_MODIFY);
					}
				}
				else if(work == WORK_MECANICO || work == WORK_FBI)
				{
					if(PLAYER_WORKS[playerid][work][pwork_LEVEL] >= 4)
					{
						PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
						ShowDialog(playerid, DIALOG_WORK_RANK_MODIFY);
					}
				}
			}
			return 1;
		}
		case DIALOG_WORK_RANK_MODIFY:
		{
			if(!response) return ShowDialog(playerid, DIALOG_PLAYERS_WORK_LIST);

			new work = GetIDFaccionPlayer(playerid);
			if(work == -1) return 1;

			if(listitem > PLAYER_WORKS[playerid][work][pwork_LEVEL]) return SendNotification(playerid, "El rango que has seleccionado es superior al tuyo.");

			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new level, name[24], connected, pid;
						cache_get_value_name_int(0, "level", level);
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);

						if(level > PLAYER_WORKS[playerid][work][pwork_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de esta persona porque es un rango superior al tuyo.");
						else
						{
							if(work == WORK_POLICE) SendFormatNotification(playerid, "El nuevo rango de %s es: '%s'.", name, POLICE_RANKS[listitem]);
							else if(work == WORK_MECANICO) SendFormatNotification(playerid, "El nuevo rango de %s es: '%s'.", name, MECANICO_RANKS[listitem]);
							else if(work == WORK_FBI) SendFormatNotification(playerid, "El nuevo rango de %s es: '%s'.", name, FBI_RANKS[listitem]);

							if(listitem == 0)
							{
								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], work);
								mysql_tquery(mysql_db, QUERY_BUFFER);

								if(connected)
								{
									if(PLAYER_TEMP[pid][pt_WORKING_IN] == work) CallLocalFunction("EndPlayerJob", "iib", pid, PLAYER_TEMP[pid][pt_WORKING_IN], true);

									if(work == WORK_POLICE) SendFormatNotification(pid, "El %s %s te ha expulsado de %s.", POLICE_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME]);
									else if(work == WORK_MECANICO) SendFormatNotification(pid, "El %s %s te ha expulsado de %s.", MECANICO_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME]);
									else if(work == WORK_FBI) SendFormatNotification(pid, "El %s %s te ha expulsado de %s.", FBI_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME]);

									PLAYER_WORKS[pid][work][pwork_SET] = 0;
									PLAYER_WORKS[pid][work][pwork_LEVEL] = 0;
								}
							}
							else
							{
								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], work);
								mysql_tquery(mysql_db, QUERY_BUFFER);

								if(connected)
								{
									PLAYER_WORKS[pid][work][pwork_LEVEL] = listitem;
									if(work == WORK_POLICE) SendFormatNotification(pid, "{"#SILVER_COLOR"}El %s %s ha modificado tu rango de %s a '%s'.", MECANICO_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME], POLICE_RANKS[listitem]);
									else if(work == WORK_MECANICO) SendFormatNotification(pid, "{"#SILVER_COLOR"}El %s %s ha modificado tu rango de %s a '%s'.", MECANICO_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME], MECANICO_RANKS[listitem]);
									else if(work == WORK_FBI) SendFormatNotification(pid, "{"#SILVER_COLOR"}El %s %s ha modificado tu rango de %s a '%s'.", MECANICO_RANKS[ PLAYER_WORKS[playerid][work][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], work_info[work][work_info_NAME], FBI_RANKS[listitem]);
								}
							}
						}
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT pworks.level, player.name, player.connected, player.playerid FROM pworks INNER JOIN player ON pworks.id_player = player.id WHERE pworks.id_player = %d AND pworks.id_work = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID], work);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_WORK_WEAPON_SHOP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_WORK_WEAPONS); // Comprar armas
					case 1: ShowDialog(playerid, DIALOG_WORK_SELECT_WEAPON); // Comrpar munición
					case 2: ShowDialog(playerid, DIALOG_WORK_ARMOUR); // Comprar chaleco antibalas
				}
			}
			return 1;
		}
		case DIALOG_WORK_SELECT_WEAPON:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(!WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_AMMO])
				{
					SendNotification(playerid, "Este tipo de arma no necesita munición.");
					return 1;
				}

				ShowDialog(playerid, DIALOG_WORK_AMMO);
			}
			return 1;
		}
		case DIALOG_WORK_AMMO:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0])) return ShowDialog(playerid, dialogid);
				if(inputtext[0] <= 0 || inputtext[0] > 1500) return SendNotification(playerid, "La cantidad de munición no es correcta.");

				new price = 2 * inputtext[0];
				if(price > PI[playerid][pi_CASH]) return SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar la munición.", number_format_thousand(price - PI[playerid][pi_CASH]));

				if(PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_AMMO] + inputtext[0] > 9999)
				{
					SendNotification(playerid, "A esta arma no le entra tanta municion.");
					return 1;
				}

				if(GivePlayerCash(playerid, -price, true, true)) {
					GivePlayerWeaponEx(playerid, PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID], inputtext[0]);

					SendFormatNotification(playerid, "Has comprado ~y~\"%s\"~w~ balas para tu ~y~\"%s\"~w~ por ~g~\"%s$\"~w~.", number_format_thousand(inputtext[0]), WEAPON_INFO[ PLAYER_WEAPONS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_DIALOG_WEAPON_SLOT] ][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(price));
				}
			}
			return 1;
		}
		case DIALOG_WORK_ARMOUR:
		{
			if(!response) return 1;

			if(300 > PI[playerid][pi_CASH]) return SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar la munición.", number_format_thousand(300 - PI[playerid][pi_CASH]));

			GetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
			if(PI[playerid][pi_ARMOUR] > 99.5) return SendNotification(playerid, "Ya tienes un chaleco antibalas");

			if(GivePlayerCash(playerid, -300, true, true)) 
			{
				SetPlayerArmourEx(playerid, 100.0);
				SetPlayerHealthEx(playerid, 100.0);
				SendNotification(playerid, "Has comprado un ~b~chaleco antibalas~w~ por 300 dólares.");
			}
			return 1;
		}
		case DIALOG_WORK_WEAPONS:
		{
			if(!response) return 1;

			new work = GetIDFaccionPlayer(playerid);

			if(WORK_SHOP_WEAPONS[listitem][work_shop_RANK] > PLAYER_WORKS[playerid][work][pwork_LEVEL])
			{	
				switch(work)
				{ 
					case WORK_POLICE: SendFormatNotification(playerid, "Necesitas el rango ~r~%s~w~ para poder comprar esta arma.", POLICE_RANKS[ WORK_SHOP_WEAPONS[listitem][work_shop_RANK] ]);
					case WORK_FBI: SendFormatNotification(playerid, "Necesitas el rango ~r~%s~w~ para poder comprar esta arma.", FBI_RANKS[ WORK_SHOP_WEAPONS[listitem][work_shop_RANK] ]);
				}
				return 1;
			}

			if(PI[playerid][pi_CASH] < WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_PRICE]) return 
				SendFormatNotification(playerid, "No tienes suficiente dinero, te faltan ~r~\"%s\"~w~ para comprar esta arma.", number_format_thousand(WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_PRICE] - PI[playerid][pi_CASH]));


			new weapon_slot = WEAPON_INFO[ WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_ID] ][weapon_info_SLOT];
			if(PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] != 0) return 
				SendFormatNotification(playerid, "Para comprar esta arma debes deshacerte de tu ~r~\"%s (%d)\" de tu inventario.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID] ][weapon_info_NAME], weapon_slot);

			if(GivePlayerCash(playerid, -WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_PRICE], true, true)) 
			{
				if(WEAPON_INFO[ WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_ID] ][weapon_info_AMMO]) GivePlayerWeaponEx(playerid, WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_ID], 50);
				else GivePlayerWeaponEx(playerid, WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_ID], 1);

				RegisterNewPlayerWeapon(playerid, weapon_slot);
				SendFormatNotification(playerid, "Arma ~y~\"%s\"~w~ comprada por ~g~\"%s$\"~w~.", WEAPON_INFO[ WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_ID] ][weapon_info_NAME], number_format_thousand(WORK_SHOP_WEAPONS[listitem][work_shop_WEAPON_PRICE]));
			}
			return 1;
		}
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_HELP_GENERAL);
					case 1: ShowDialog(playerid, DIALOG_HELP_INFO);
					case 2: ShowDialog(playerid, DIALOG_HELP_CHARACTER);
					case 3: ShowDialog(playerid, DIALOG_HELP_PROPERTIES);
					case 4: ShowDialog(playerid, DIALOG_HELP_REPORT);
					case 5: ShowDialog(playerid, DIALOG_HELP_WORKS);
					case 6: ShowDialog(playerid, DIALOG_HELP_VEHICLES);
					case 7: ShowDialog(playerid, DIALOG_HELP_CREWS);
					case 8: ShowDialog(playerid, DIALOG_HELP_VIPS);
				}
			}
			return 1;
		}
		case DIALOG_HELP_WORKS:
		{
			if(response)
			{
				new caption[45], dialog[1800], work = listitem + 1;
				format(caption, sizeof caption, "Trabajo - %c%s", toupper(work_info[work][work_info_NAME][0]), work_info[work][work_info_NAME][1]);

				new header[350];
				if(work_info[work][work_info_TYPE] != WORK_TYPE_FAMILY)
				{
					if(work_info[work][work_info_EXTRA_PAY] > 0 && work_info[work][work_info_EXTRA_PAY_EXP] > 0) // con paga extra
					{
						if(!work_info[work][work_info_EXTRA_PAY_LIMIT]) // sin limite
						{
							format(header, sizeof header,

								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY])
							);
						}
						else // con limite
						{
							format(header, sizeof header,

								"\
									Trabajo: %s\n\
									Tipo: %s\n\
									Nivel necesario: %d\n\
									Paga extra: por cada %s trabajos realizados recibes %s$ extra con un límite de %s$.\n\
									Puedes localizar donde adquirir este trabajo desde el GPS.\n\
								",
									work_info[work][work_info_NAME],
									(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
									work_info[work][work_info_LEVEL],
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_EXP]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY]),
									number_format_thousand(work_info[work][work_info_EXTRA_PAY_LIMIT])
							);
						}
					}
					else
					{
						format(header, sizeof header,

							"\
								Trabajo: %s\n\
								Tipo: %s\n\
								Nivel necesario: %d\n\
								Puedes localizar donde adquirir este trabajo desde el GPS.\n\
							",
								work_info[work][work_info_NAME],
								(work_info[work][work_info_TYPE] == WORK_TYPE_NORMAL) ? ("normal") : ("complementario"),
								work_info[work][work_info_LEVEL]
						);
					}
				}

				switch(work)
				{
					case WORK_TAXI:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Solo súbete a un taxi y empieza a trabajar, recibirás las llamadas de los clientes.\n\
							Las personas que hayan llamado a la central de taxi aparecerán marcados de color amarillo.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un taxi.\n\
							\n\
							El taxímetro se pondrá en marcha para el primer pasajero que se suba al taxi, el precio se\n\
							mide en precio por km, puedes ajustarlo con el comando /tarifa.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRUCK:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a cualquier camión de la empresa y ve a cargarlo en cualquier punto de carga.\n\
							Según tu experiencia en el trabajo podrás transportar diferentes productos de más valor.\n\
							\n\
							",
								header
						);
					}
					case WORK_MECANICO:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para empezar a trabajar ve al taller y utiliza /mecanico para empezar a trabajar o dejar de trabajar.\n\
							Con este trabajo podrás reparar los vehículos dañados en el taller o ir a arreglarlos por San Andreas.\n\
							Las personas que hayan llamado al Mecánico aparecerán marcados en el mapa.\n\
							Si tienes un GPS puedes utilizar /mapa para ver las personas que necesitan un Mecánico.\n\
							Para reparar o tunear un vehículo usa /vmenu tras elegir una opción se le ofrecerá al dueño del vehículo\n\
							en caso de ser un vehículo personal, si no se le ofrecerá al conductor o el último conductor del vehículo.\n\
							\n\
							Puedes utilizar los vehículos de tu trabajo o tu vehículo personal.\n\
							Para cualquier reparación o modificación necesitarás piezas que puedes comprar en el taller.\n\
							Para reparar o modificar un vehículo utiliza cerca del vehículo el comando /vmenu.\n\
							\n\
							Si el vehículo no está en el Mecánico y se puede remolcar tendrás que remolcarlo hasta el Mecánico\n\
							para repararlo, se usa el comando /remolcar.\n\
							\n\
							En el taller también podrás pintar los vehículos.\n\
							Para tunearlos o remover componentes tienes que ser mínimo Tuneador.\n\
							\n\
							",
								header
						);
					}
					case WORK_HARVESTER:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a una cosechadora y empieza a cosechar.\n\
							\n\
							",
								header
						);
					}
					case WORK_FUMIGATOR:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a un avión y empieza a fumigar.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRASH:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para este trabajo se necesitan 2 personas, uno que conduzca el camión y otro que recoja la basura.\n\
							Para empezar a trabajar sube a alguien a un camión y selecciona la ruta que queráis realizar.\n\
							\n\
							Dependiendo de tu experiencia recogerás más rápido la basura.\n\
							\n\
							",
								header
						);
					}
					case WORK_LUMBERJACK:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para empezar a trabajar ve a los Árboles asignados y empieza a talar.\n\
							Dependiendo de tu experiencia tu velocidad talando irá aumentando.\n\
							\n\
							",
								header
						);
					}
					case WORK_FARMER:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Necesitarás semillas para poder plantar que puedes comprar en la granja.\n\
							Dependiendo de tu experiencia tu velocidad plantando irá aumentando.\n\
							\n\
							Después de que la planta crezca tienes 5 minutos para recogerla si no la planta se secará y se destruirá.\n\
							Cuando termines de plantar espera a que la planta termine de crecer, para recogerla.\n\
							Una vez recogida puedes vender el producto adquirido o usarlo para consumo propio.\n\
							\n\
							Cuida tus plantas, la gente puede destuirlas si le disparan.\n\
							\n\
							",
								header
						);
					}
					case WORK_POLICE:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Los policías en servicio aparecerán de color azul.\n\
							Utiliza /policias para ver la lista de policías, los rangos altos podrán desde aquí\n\
							bajar, subir el rango de los policías, también pueden expulsarlos del cuerpo.\n\
							\n\
							Para asignar un BYC una persona utiliza el comando /abyc.\n\
							Para acceder a las camaras usa /camm [ID CAM] y para salir usa /offcam\n\
							Usa /byc para ver los BYC de todos o de una persona, también para eliminarlos.\n\
							Utiliza /esposar para esposar o desesposar a alguien que tenga nivel de búsqueda.\n\
							Utiliza /revisar para ver las pertenencias del jugador esposado, utiliza /requisar para requisar las pertenencias ilegales.\n\
							Utiliza /arrestar en tu vehículo personal para detener a alguien que está esposado.\n\
							Utiliza /ref para pedir refuerzos.\n\
							Para utiliza el megáfono utiliza /m dentro de un vehículo policial.\n\
							Para entregar a alguien tiene que estar arrestado en un vehículo policial\n\
							y llevarlo a cualquiera de las 3 comisarías de San Andreas al parking y utilizar /entregar.\n\
							\n\
							Usa /control para añadir objetos como barreras etc.\n\
							Usa /allanar para entrar a una casa.\n\
							Usa /cepo para multar a un vehículo mal aparcado.\n\
							Usa /patrullat para asignar un texto a la patrulla.\n\
							\n\
							Para ponerte de servicio ve a cualquier comisaría y busca el vestuario para /policia.\n\
							Los policías pueden equiparse en la comisaría.\n\
							Para utilizar la radio debes estar de servicio, puedes seleccionar la frecuencia con /frecuencias, uso: !texto.\n\
							Puedes abrir cualquier puerta de la comisaría pulsando la tecla F cerca de la puerta.\n\
							Los policías recibirán la paga en el payday, su paga dependerá de su rango.\n\
							\n\
							",
								header
						);
					}
					case WORK_PIZZA:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a una moto y empieza a repartir pizzas.\n\
							\n\
							",
								header
						);
					}
					case WORK_MEDIC:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Ponte de servicio en cualquier hospital, tras esto verás a las personas que necesiten un médico\n\
							marcadas en el mapa, ve rápido hasta ellas para poder salvarlos a tiempo.\n\
							Para salvar la vida a alguien que este herido usa /curar.\n\
							\n\
							Cuando estás de servicio solo puedes conducir ambulancias.\n\
							\n\
							",
								header
						);
					}
					case WORK_WAREHOUSE:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Para empezar sube a la planta de arriba donde puedes ver los pedidos en espera.\n\
							Selecciona uno de estos pedidos y coge todos los productos para llevarlos a la cinta transportadora.\n\
							\n\
							",
								header
						);
					}
					case WORK_DELIVERYMAN:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Súbete a cualquier furgoneta de la empresa y ve a cargarla en cualquier punto de carga.\n\
							Según tu experiencia en el trabajo ganarás más dinero por cada reparto.\n\
							\n\
							",
								header
						);
					}
					case WORK_TRAILERO:
					{
						format(dialog, sizeof dialog,

							"\
							%s\
							\n\
							Primero necesitas contar con cualquiera de estos 3 camiones, o puedes conseguirla alquilada por otro usuario:\n\
							- Linerunner\n\
							- Tanker\n\
							- Roadtrain\n\
							Estos vehículos los puedes adquirir en el concesionario de San Francisco > Downtown\n\
							\n\
							-El objetivo de este trabajo es transportar trailers y llevarlos a su destino.\n\
							-Según tu experiencia en el trabajo recibirás más pago.\n\
							",
								header
						);
					}
				}

				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
			}
			return 1;
		}
		case DIALOG_HELP_VIPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_HELP_SU);
					case 1: ShowDialog(playerid, DIALOG_HELP_SU2);
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_LIST:
		{
			if(!response) return 1;

			if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
			else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
			{
				inline OnCountQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new count, pages;
							cache_get_value_index_int(0, 0, count);
							pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

							if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
							else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
							ShowDialog(playerid, dialogid);
						}
					}
				}
				mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM player WHERE admin_level > 0;", using inline OnCountQueryLoad);
			}
			else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
			{
				inline OnCountQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new count, pages;
							cache_get_value_index_int(0, 0, count);
							pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

							if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
							else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
							ShowDialog(playerid, dialogid);
						}
					}
				}
				mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM player WHERE admin_level > 0;", using inline OnCountQueryLoad);
			}
			else
			{
				if(PI[playerid][pi_ADMIN_LEVEL] >= 4)
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_ADMIN_MODIFY);
				}
			}
			return 1;
		}
		case DIALOG_ADMIN_MODIFY:
		{
			if(!response) return ShowDialog(playerid, DIALOG_ADMIN_LIST);

			if(listitem > PI[playerid][pi_ADMIN_LEVEL])
			{
				SendNotification(playerid, "El rango que has seleccionado es superior al tuyo.");
				return 1;
			}

			inline OnDialogQueryLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					if(rows)
					{
						new name[24], connected, pid, admin_level;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);
						cache_get_value_name_int(0, "admin_level", admin_level);

						if(admin_level > PI[playerid][pi_ADMIN_LEVEL]) SendNotification(playerid, "No puedes modificar el rango de este admin porque es un rango superior al tuyo.");
						else
						{
							mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", listitem, PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
							mysql_tquery(mysql_db, QUERY_BUFFER);
							SendFormatNotification(playerid, "El nuevo rango de %s es: '%s'.", name, ADMIN_LEVELS[listitem]);
							if(connected)
							{
								PI[pid][pi_ADMIN_LEVEL] = listitem;
								SendFormatNotification(pid, "%s cambió tu rango administrativo a: %s.", PI[playerid][pi_NAME], GetNameRankAdmin(pid));
							}
						}
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, admin_level FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);

				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_PASSWORD_PASS);
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
					if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendFormatNotification(playerid, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_PASSWORD_PASS:
		{
			if(response)
			{
				if(strlen(inputtext) < MIN_PASS_LENGTH || strlen(inputtext) > MAX_PASS_LENGTH) return ShowDialog(playerid, dialogid);

				new salt[16];
				getRandomSalt(salt);
				format(PI[playerid][pi_SALT], 16, "%s", salt);
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], PI[playerid][pi_PASS], 64 + 1);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET salt = '%e', pass = '%e' WHERE id = %d;", PI[playerid][pi_SALT], PI[playerid][pi_PASS], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendNotification(playerid, "Tu contraseña ha sido cambiada correctamente.");
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 4) return 1;

			if(response)
			{
				PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] = listitem;
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 4) return 1;

			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Enabled] = true;
					}
					case 1: return ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY_DETECT);
					case 2:
					{
						if(ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick]) ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = false;
						else ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Kick] = true;
					}
				}
				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT);
			return 1;
		}
		case DIALOG_ANTI_CHEAT_MODIFY_DETECT:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 4) return 1;

			if(response)
			{
				new detections, seconds;
				if(sscanf(inputtext, "p<:>dd", detections, seconds))
				{
					SendNotification(playerid, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(detections < 1 || detections > 99999)
				{
					SendNotification(playerid, "El número de detecciones debe ser 1 o mayor.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(seconds < 0 || seconds > 99999)
				{
					SendNotification(playerid, "Los segundos no pueden ser un valor negativo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Detections] = detections;
				ac_Info[ PLAYER_TEMP[playerid][pt_SELECTED_AC_LISTITEM] ][ac_Interval] = seconds;

				WriteAnticheatRules();
				ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			}
			else ShowDialog(playerid, DIALOG_ANTI_CHEAT_MODIFY);
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_MODIFY:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendNotification(playerid, "Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendNotification(playerid, "Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendNotification(playerid, "El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				inline OnShopUpdated()
				{
					UpdatePlayerShop(playerid);
					SendNotification(playerid, "El precio de tu artículo ha sido actualizado.");
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE shop SET price = %d WHERE id = %d;", inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopUpdated);
			}
			return 1;
		}
		case DIALOG_SHOP_ARTICLE_REMOVE:
		{
			if(response)
			{
				inline OnShopUpdated()
				{
					if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
					SendNotification(playerid, "Tu producto se ha eliminado.");
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM shop WHERE id = %d;", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopUpdated);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_PROPERTY);
					}
					case 1:
					{
						PLAYER_TEMP[playerid][pt_NOTARY_OPTION] = 2;
						ShowDialog(playerid, DIALOG_NOTARY_SELECT_VEHICLE);
					}
					case 2:
					{
						PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE] = SHOP_ARTICLE_TYPE_OTHER;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID] = 1314;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1] = 0;
						PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2] = 0;
						ShowDialog(playerid, DIALOG_SHOP_ADD_TEXT);
					}
				}
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) > 24) return ShowDialog(playerid, dialogid);
				new text[24];
				if(sscanf(inputtext, "s[24]", text)) return ShowDialog(playerid, dialogid);
				if(!td_str_legal(text)) return ShowDialog(playerid, dialogid);

				format(PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], 24, "%s", inputtext);
				ShowDialog(playerid, DIALOG_SHOP_ADD_PRICE);
			}
			return 1;
		}
		case DIALOG_SHOP_ADD_PRICE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendNotification(playerid, "Por favor introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] < 0)
				{
					SendNotification(playerid, "Por favor introduce un valor positivo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] > 1000000000)
				{
					SendNotification(playerid, "El precio es demasiado alto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(500 > PI[playerid][pi_CASH]) return SendNotification(playerid, "Necesitas 500$ para poner el anuncio.");

				if(GivePlayerCash(playerid, -500, true, true)) {
					AddNewAd(playerid, PLAYER_TEMP[playerid][pt_SHOP_ADD_TYPE], inputtext[0], PLAYER_TEMP[playerid][pt_SHOP_ADD_TEXT], PLAYER_TEMP[playerid][pt_SHOP_ADD_MODELID], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL1], PLAYER_TEMP[playerid][pt_SHOP_ADD_VCOL2]);
					SendNotification(playerid, "Tu anuncio se ha publicado correctamente.");
				}
			}
			return 1;
		}
		case DIALOG_CRANE_SELECT_VEHICLE:
		{
			if(response)
			{
				new const vehicleid = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

				if(vehicleid == -1) return 1;

				new veh_money = (VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100) + 350;
				if(veh_money > PI[playerid][pi_CASH])
				{
					SendFormatNotification(playerid, "Necesitas %s$ para remolcar este vehículo al depósito municipal.", veh_money);
					return 1;
				}

				if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
				{
					SendNotification(playerid, "No podemos remolcar tu vehículo porque hay alguien conduciéndolo.");
					return 1;
				}

				if(GivePlayerCash(playerid, -veh_money, true, true))
				{
					new crane_point = random(sizeof(CRANE_POINTS[]));
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = CRANE_POINTS[crane_point][0];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = CRANE_POINTS[crane_point][1];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = CRANE_POINTS[crane_point][2];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = CRANE_POINTS[crane_point][3];
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = 0;

					GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;

					ApagarEstrobos(vehicleid);
					UpdateVehicleParams(vehicleid);
					SetVehicleToRespawnEx(vehicleid);

					SendFormatNotification(playerid, "Tu vehículo %s ha sido remolcado hasta el depósito municipal.", VEHICLE_INFO[GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);
				}
			}
			return 1;
		}
		case DIALOG_CREATE_CREW:
		{
			if(!response) return 1;

			if(PI[playerid][pi_LEVEL] < 5) return SendNotification(playerid, "Necesitas ser nivel 5 para poder crear una banda.");
			ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_NAME:
		{
			if(!response) return 1;

			if(strlen(inputtext) >= 32)
			{
				SendNotification(playerid, "Como máximo puedes introducir un nombre de 32 caracteres.");
				ShowDialog(playerid, dialogid);
				return 1;
			}

			new crew_name[32];
			if(sscanf(inputtext, "s[32]", crew_name))
			{
				SendNotification(playerid, "Introduce un nombre para tu banda.");
				ShowDialog(playerid, dialogid);
				return 1;
			}

			format(PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME], 32, "%s", crew_name);
			ShowDialog(playerid, DIALOG_CREATE_CREW_COLOR);
			return 1;
		}
		case DIALOG_CREATE_CREW_COLOR:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] = listitem;
				ShowDialog(playerid, DIALOG_CREATE_CREW_CONFIRM);
			}
			else ShowDialog(playerid, DIALOG_CREATE_CREW_NAME);
			return 1;
		}
		case DIALOG_CREATE_CREW_CONFIRM:
		{
			if(response)
			{
				new index = GetAvaibleCrewIndex();
				if(index == -1)
				{
					SendFormatNotification(playerid, "No se puede crear la banda porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);
					return 1;
				}

				if(150000 > PI[playerid][pi_CASH])
				{
					SendNotification(playerid, "Necesitas 150.000$ para crear la banda.");
					return 1;
				}

				if(GivePlayerCash(playerid, -150000, true, true))
				{
					CREW_INFO[index][crew_VALID] = true;
					format(CREW_INFO[index][crew_NAME], 32, "%s", PLAYER_TEMP[playerid][pt_CREATE_CREW_NAME]);
					CREW_INFO[index][crew_COLOR] = RandomColors[ PLAYER_TEMP[playerid][pt_CREATE_CREW_COLOR] ];

					CREW_RANK_INFO[index][0][crew_rank_VALID] = true;
					format(CREW_RANK_INFO[index][0][crew_rank_NAME], 32, "Fundador");

					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_INVITE] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_DELETE] =
					CREW_RANK_INFO[index][0][crew_rank_PERMISSION][CREW_RANK_GRAFFITI] = 1;

					NewCrewRegister(index, playerid);
					SetPlayerGangZones(playerid);
					SendFormatNotification(playerid, "La banda ~g~'%s' ~w~se ha creado correctamente, usa ~g~/banda ~w~para administrarla.", CREW_INFO[index][crew_NAME]);

					DCC_SendChannelMessage(dc_channel[2], "Se rumora por las calles que una nueva banda esta por llegar a invadir San Andreas :eyes:");
				}
			}
			return 1;
		}
		case DIALOG_CREW_MENU:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				switch(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem])
				{
					case CREW_RANK_SIZE: //Lista de miembros
					{
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST);
					}
					case CREW_RANK_CHANGE_NAME: //Cambiar nombre de la banda
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendNotification(playerid, "No tienes permiso.");
						if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No se puede cambiar el nombre de la banda cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_CHANGE_NAME);
					}
					case CREW_RANK_CAST_MEMBERS: //Echar miembros
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
					}

					case CREW_RANK_MODIFY_RANKS: //Crear/Modificar rangos
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

						ShowDialog(playerid, DIALOG_CREW_RANKS);
					}
					case CREW_RANK_CHANGE_COLOR: //Crear/modificar rangos
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendNotification(playerid, "No tienes permiso.");

						if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No se puede cambiar el color cuando la banda está en combate.");
						ShowDialog(playerid, DIALOG_CREW_MODIFY_COLOR);
					}
					case CREW_RANK_DELETE:
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendNotification(playerid, "No tienes permiso.");

						ShowDialog(playerid, DIALOG_CREW_DELETE);
					}
					case CREW_RANK_MODIFY_MEMBERS:
					{
						if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
					}
					case CREW_RANK_SIZE + 1: //Abandonar banda
					{
						if(PI[playerid][pi_CREW_RANK] == 0)
						{
							inline OnCrewInfoLoad()
							{
								new rows;
								if(cache_get_row_count(rows))
								{
									new total;
									cache_get_value_index_int(0, 0, total);
									if(total <= 1) SendNotification(playerid, "No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
									else ShowDialog(playerid, DIALOG_CREW_LEAVE);
								}
							}
							mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
							mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
						}
						else ShowDialog(playerid, DIALOG_CREW_LEAVE);
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CHANGE_NAME:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No se puede cambiar el nombre de la banda cuando la banda está en combate.");
				if(strlen(inputtext) >= 32)
				{
					SendNotification(playerid, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new crew_name[32];
				if(sscanf(inputtext, "s[32]", crew_name))
				{
					SendNotification(playerid, "Introduce un nombre para tu banda.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME], 32, "%s", crew_name);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crews SET name = '%e' WHERE id = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				//actualizar nombre casas pickups


				new message[145], label_str[256];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) cambió el nombre de la banda a '%s'.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);


				for(new i = 0; i != MAX_PROPIEDADES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PI[playerid][pi_CREW]) continue;

					format
					(
						label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{"#PRIMARY_COLOR"}·{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
							{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}

				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MEMBER_LIST_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];

					inline OnCrewInfoLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new name[24], crew_rank;
								cache_get_value_index(0, 0, name);
								cache_get_value_index_int(0, 1, crew_rank);

								if(crew_rank < PI[playerid][pi_CREW_RANK]) SendNotification(playerid, "No puedes echar a este miembro porque es un rango superior al tuyo.");
								else
								{
									if(crew_rank == 0)
									{
										inline OnCountQueryLoad()
										{
											if(cache_get_row_count(rows))
											{
												if(rows)
												{
													new total;
													cache_get_value_index_int(0, 0, total);
													if(total <= 1) SendNotification(playerid, "No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
													else ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
												}
											}
										}
										mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
										mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
									}
									else ShowDialog(playerid, DIALOG_CREW_CAST_MEMBER_CONFIRM);
								}
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, crew_rank FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_CAST_MEMBER_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				inline OnCrewInfoLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						new name[24], connected, pid, crew_rank;
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name_int(0, "playerid", pid);
						cache_get_value_name_int(0, "crew_rank", crew_rank);
						if(crew_rank < PI[playerid][pi_CREW_RANK]) SendNotification(playerid, "No puedes echar a este miembro porque es un rango superior al tuyo.");
						else
						{
							if(crew_rank == 0)
							{
								inline OnCountQueryLoad()
								{
									if(cache_get_row_count(rows))
									{
										if(rows)
										{
											new total;
											cache_get_value_index_int(0, 0, total);
											if(total <= 1) SendNotification(playerid, "No se puede echar a este miembro ya que es el único miembro con el rango fundador.");
											else
											{
												new message[145];
												format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], name);
												SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);

												mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
												mysql_tquery(mysql_db, QUERY_BUFFER);

												CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_MEMBERS] --;
												if(connected)
												{
													CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
													SetPlayerNormalColor(pid);
													if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
													{
														TextDrawHideForPlayer(pid, Textdraws[textdraw_TERRITORY_BOX]);
														TextDrawHideForPlayer(pid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
													}

													PI[pid][pi_CREW] = 0;
													PI[pid][pi_CREW_RANK] = 0;
													PLAYER_TEMP[pid][pt_CREW_INDEX] = 0;
													HidePlayerGangZones(pid);
												}
											}
										}
									}
								}
								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
								mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
							}
							else
							{
								new message[145];
								format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha echado a %s de la banda.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], name);
								SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);

								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
								mysql_tquery(mysql_db, QUERY_BUFFER);

								CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_MEMBERS] --;
								if(connected)
								{
									CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
									SetPlayerNormalColor(pid);
									if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
									{
										TextDrawHideForPlayer(pid, Textdraws[textdraw_TERRITORY_BOX]);
										TextDrawHideForPlayer(pid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
									}

									PI[pid][pi_CREW] = 0;
									PI[pid][pi_CREW_RANK] = 0;
									PLAYER_TEMP[pid][pt_CREW_INDEX] = 0;
									HidePlayerGangZones(pid);
								}
							}
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, crew_rank FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_CREW_MEMBER_LIST_DELETE);
			return 1;
		}
		case DIALOG_CREW_INVITE_RANK:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendNotification(playerid, "No puedes invitar con este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID])) return SendNotification(playerid, "El jugador está desconectado.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
				if(PLAYER_WORKS[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Esta persona es policía y no puede tener banda.");
				if(PI[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pi_CREW]) return SendNotification(playerid, "Esta persona pertenece a otra banda.");
				if(PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes invitar a este jugador ahora.");
				if(PI[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_CREW_INVITE_AID]) return SendNotification(playerid, "El jugador está desconectado.");

				SendFormatNotification(playerid, "Has ofrecido a ~g~%s~w~ unirse a la banda con el rango ~g~%s~w~.", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);

				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][0] = PI[playerid][pi_CREW];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][1] = PLAYER_TEMP[playerid][pt_CREW_INDEX];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][2] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] ][pt_CREW_INVITE_INFO][3] = gettime();
				ShowDialog(PLAYER_TEMP[playerid][pt_CREW_INVITE_PID], DIALOG_CREW_INVITE_ACCEPT);
			}
			return 1;
		}
		case DIALOG_CREW_INVITE_ACCEPT:
		{
			if(response)
			{
				if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_VALID]) return SendNotification(playerid, "Esta banda ya no existe.");
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2] ][crew_rank_VALID]) return SendNotification(playerid, "El rango que te han ofrecio ya no existe.");
				if(gettime() > PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][3] + 20) return SendNotification(playerid, "Has tardado mucho en aceptar.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes unirte a la banda cuando la banda está en combate.");

				PI[playerid][pi_CREW] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][0];
				PI[playerid][pi_CREW_RANK] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][2];
				PLAYER_TEMP[playerid][pt_CREW_INDEX] = PLAYER_TEMP[playerid][pt_CREW_INVITE_INFO][1];
				CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_MEMBERS] ++;
				CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] ++;
				PLAYER_TEMP[playerid][pt_LAST_GOT_CREW] = gettime();
				SetPlayerGangZones(playerid);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[playerid][pi_CREW], PI[playerid][pi_CREW_RANK], PI[playerid][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s se ha unido a la banda con el rango %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_RANKS:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(listitem < PI[playerid][pi_CREW_RANK])
				{
					if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][listitem][crew_rank_VALID]) SendNotification(playerid, "No puedes modificar este rango porque es un rango superior al tuyo.");
					else SendNotification(playerid, "No puedes crear un rango en este puesto porque es superior al tuyo.");
					return 1;
				}

				PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] = listitem;
				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][listitem][crew_rank_VALID]) ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
				else ShowDialog(playerid, DIALOG_CREW_RANK_CREATE);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_NAME);
					case 1:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendNotification(playerid, "No se pueden modificar los permisos de este rango porque es el rango fundador.");
							return 1;
						}

						ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY_PERMISS);
					}
					case 2:
					{
						if(PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] == 0)
						{
							SendNotification(playerid, "No se puede eliminar este rango porque es el rango fundador.");
							return 1;
						}

						SendFormatNotification(playerid, "~r~[Atención] ~w~Selecciona el nuevo rango para los miembros que actualmente tienen el rango ~r~'%s'.", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);
						ShowDialog(playerid, DIALOG_CREW_RANK_DELETE);
					}
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_NAME:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendNotification(playerid, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendNotification(playerid, "Introduce el nuevo nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				SendFormatNotification(playerid, "Has modificado el nombre del rango '%s' a '%s'.", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], rank_name);
				format(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crew_ranks SET rank_name = '%e' WHERE id = %d;",  CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_CREATE:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendNotification(playerid, "Como máximo puedes introducir un nombre de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				new rank_name[32];
				if(sscanf(inputtext, "s[32]", rank_name))
				{
					SendNotification(playerid, "Introduce un nombre para el rango.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID])
				{
					SendNotification(playerid, "Parece que alguien ya ha creado un rango en este espacio.");
					return 1;
				}


				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = true;
				format(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME], 32, "%s", rank_name);

				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_NAME] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CAST_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY] =
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE] = 0;
				RegisterNewCrewRank(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);

				SendFormatNotification(playerid, "El rango '%s' ha sido creado, ahora puedes editarlo y darle permisos.", rank_name);
				ShowDialog(playerid, DIALOG_CREW_RANKS);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_RANK_MODIFY_PERMISS:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][listitem])
				{
					SendNotification(playerid, "No puedes cambiar este permiso porque tu no tienes este permiso.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem]) CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = false;
				else CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem] = true;

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crew_ranks SET permission%d = %d WHERE id = %d;", listitem, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][listitem], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				ShowDialog(playerid, dialogid);
			}
			else ShowDialog(playerid, DIALOG_CREW_RANK_MODIFY);
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendNotification(playerid, "No puedes seleccionar este rango porque es superior al tuyo.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_CREW_RANK_DELETE_CONFIRM);
			}
			return 1;
		}
		case DIALOG_CREW_RANK_DELETE_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_RANKS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE crew = %d AND crew_rank = %d;", PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK], PI[playerid][pi_CREW], PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM crew_ranks WHERE id = %d;", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "Has eliminado el rango '%s'.", CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME]);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s{FFFFFF}) cambió tu rango al rango '%s{FFFFFF}'.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK] ][crew_rank_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							if(PI[i][pi_CREW] == PI[playerid][pi_CREW])
							{
								if(PI[i][pi_CREW_RANK] == PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK])
								{
									PI[i][pi_CREW_RANK] = PLAYER_TEMP[playerid][pt_CREW_SELECTED_NEW_RANK];
									SendClientMessage(i, -1, message);
								}
							}
						}
					}
				}

				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_VALID] = false;
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_ID] = 0;
				CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_NAME][0] = EOS;
				for(new i = 0; i != CREW_RANK_SIZE; i ++) CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_CREW_SELECTED_RANK] ][crew_rank_PERMISSION][i] = 0;

			}
			else ShowDialog(playerid, DIALOG_CREW_RANKS);
			return 1;
		}
		case DIALOG_CREW_MODIFY_COLOR:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_CHANGE_COLOR]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No se puede cambiar el color cuando la banda está en combate.");

				for(new i = 0; i != MAX_CREWS; i ++)
				{
					if(!CREW_INFO[i][crew_VALID]) continue;
					if(CREW_INFO[i][crew_COLOR] == RandomColors[listitem]) return SendNotification(playerid, "El color ya está siendo utilizada por otra banda.");
				}

				CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] = RandomColors[listitem];

				new r, g, b, a,		new_territory_color;
				HexToRGBA(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
				new_territory_color = RGBAToHex(r, g, b, 135);

				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[i][territory_VALID]) continue;
					if(!TERRITORIES[i][territory_OCCUPIED]) continue;

					if(TERRITORIES[i][territory_CREW_ID] == PI[playerid][pi_CREW])
					{
						TERRITORIES[i][territory_COLOR] = new_territory_color;
						UpdateGangZoneColor(i);
					}
				}

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE crews SET color = %d WHERE id = %d;", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendNotification(playerid, "El color de la banda se ha cambiado.");
				ShowDialog(playerid, DIALOG_CREW_MENU);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_DELETE:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No se puede borrar la banda cuando está en combate.");

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha eliminado la banda.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);

				new tmp_crew_id = PI[playerid][pi_CREW];
				new tmp_CREW_INFO[enum_CREW_INFO], old_crew_id = PI[playerid][pi_CREW];
				CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ] = tmp_CREW_INFO;

				new tmp_CREW_RANK_INFO[enum_CREW_RANK_INFO];
				for(new i = 0; i != MAX_CREW_RANKS; i ++) CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][i] = tmp_CREW_RANK_INFO;

				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							if(PI[i][pi_CREW] == PI[playerid][pi_CREW])
							{
								SetPlayerNormalColor(i);
								HidePlayerGangZones(i);
								if(PLAYER_TEMP[i][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
								{
									TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
									TextDrawHideForPlayer(i, TERRITORIES[ PLAYER_TEMP[i][pt_LAST_TERRITORY] ][territory_TEXTDRAW]);
								}
								PI[i][pi_CREW] = 0;
								PI[i][pi_CREW_RANK] = 0;
								PLAYER_TEMP[i][pt_CREW_INDEX] = 0;
								SendClientMessage(i, -1, message);
							}
						}
					}
				}

				for(new i = 0; i != MAX_TERRITORIES; i ++)
				{
					if(!TERRITORIES[ i ][territory_VALID]) continue;
					if(!TERRITORIES[ i ][territory_OCCUPIED]) continue;
					if(TERRITORIES[ i ][territory_CREW_ID] != old_crew_id) continue;

					TERRITORIES[ i ][territory_OCCUPIED] = false;
					TERRITORIES[ i ][territory_CREW_ID] = 0;
					TERRITORIES[ i ][territory_CREW_INDEX] = 0;
					TERRITORIES[ i ][territory_COLOR] = 0xCCCCCC55;
					UpdateGangZoneColor(i);
				}

				for(new i = 0; i != MAX_PROPIEDADES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != old_crew_id) continue;

					PROPERTY_INFO[ i ][property_SOLD] = false;
					PROPERTY_INFO[ i ][property_CREW] = false;
					PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
					PROPERTY_INFO[ i ][property_CREW_ID] = 0;
					format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);

					new info[3];
					UpdateUnnocupiedPropertyLabel(i);

					DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

					PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
					info[0] = PICKUP_TYPE_PROPERTY;
					info[1] = i; // Index
					info[2] = 2; // Pickup Exterior
					Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[i][property_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);
				}

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM crews WHERE id = %d;", tmp_crew_id);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				CallLocalFunction("OnCrewDeleted", "i", tmp_crew_id);
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_LEAVE:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");

			if(response)
			{
				if(PI[playerid][pi_CREW_RANK] == 0)
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new total;
								cache_get_value_index_int(0, 0, total);
								if(total <= 1) SendNotification(playerid, "No puedes abandonar la banda porque eres el único miembro con el rango fundador.");
								else
								{
									new message[145];
									format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
									SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);

									mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PI[playerid][pi_ID]);
									mysql_tquery(mysql_db, QUERY_BUFFER);

									SetPlayerNormalColor(playerid);
									CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_MEMBERS] --;
									CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
									HidePlayerGangZones(playerid);

									PI[playerid][pi_CREW] = 0;
									PI[playerid][pi_CREW_RANK] = 0;
									PLAYER_TEMP[playerid][pt_CREW_INDEX] = 0;
								}
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					new message[145];
					format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha abandonado la banda.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
					SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);

					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					SetPlayerNormalColor(playerid);
					CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_MEMBERS] --;
					CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
					HidePlayerGangZones(playerid);

					PI[playerid][pi_CREW] = 0;
					PI[playerid][pi_CREW_RANK] = 0;
					PLAYER_TEMP[playerid][pt_CREW_INDEX] = 0;
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBERS:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d", PI[playerid][pi_CREW]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBER);
				}
			}
			else ShowDialog(playerid, DIALOG_CREW_MENU);
			return 1;
		}
		case DIALOG_CREW_MODIFY_MEMBER:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_MODIFY_MEMBERS]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;

				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] < PI[playerid][pi_CREW_RANK])
				{
					SendNotification(playerid, "No puedes dar este rango porque es un rango superior al tuyo.");
					return 1;
				}

				inline OnCrewInfoLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new name[24], connected, pid, crew_rank;
							cache_get_value_name(0, "name", name);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);
							cache_get_value_name_int(0, "crew_rank", crew_rank);

							if(crew_rank < PI[playerid][pi_CREW_RANK]) SendNotification(playerid, "No puedes modificar el rango de este miembro porque es un rango superior al tuyo.");
							else
							{
								if(crew_rank == 0)
								{
									inline OnCountQueryLoad()
									{
										if(cache_get_row_count(rows))
										{
											if(rows)
											{
												new total;
												cache_get_value_index_int(0, 0, total);
												if(total <= 1) SendNotification(playerid, "No se puede modificar el rango de este miembro ya que es el único miembro con el rango fundador.");
												else
												{
													mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE id = %d;", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
													mysql_tquery(mysql_db, QUERY_BUFFER);

													new message[145];
													if(connected)
													{
														PI[pid][pi_CREW_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
														format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s{FFFFFF}) cambió tu rango al rango '%s{FFFFFF}'.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
														SendClientMessage(pid, -1, message);
													}
													format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
													SendClientMessage(playerid, -1, message);
												}
											}
										}
									}
									mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d AND crew_rank = 0;", PI[playerid][pi_CREW]);
									mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
								}
								else
								{
									mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew_rank = %d WHERE id = %d;", PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem], PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
									mysql_tquery(mysql_db, QUERY_BUFFER);

									new message[145];
									if(connected)
									{
										PI[pid][pi_CREW_RANK] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
										format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s{FFFFFF}) cambió tu rango al rango '%s{FFFFFF}'.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
										SendClientMessage(pid, -1, message);
									}
									format(message, sizeof message, "Has modificado el rango de '%s' al rango '%s'.", name, CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] ][crew_rank_NAME]);
									SendClientMessage(playerid, -1, message);
								}
							}
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name, connected, playerid, crew_rank FROM player WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_DB_AC_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
			}
			else ShowDialog(playerid, DIALOG_CREW_MODIFY_MEMBERS);
			return 1;
		}
		case DIALOG_CREW_PROPERTY_CONFIRM:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_ADD_PROPERTIES]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_VALID]) return SendNotification(playerid, "La propiedad no está dentro de un territorio de tu banda.");
				if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED]) return SendNotification(playerid, "La propiedad no está dentro de un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendNotification(playerid, "La propiedad no está dentro de un territorio de tu banda.");
				if(!IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z])) return SendNotification(playerid, "La propiedad no está dentro de un territorio de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Esta no es tu propiedad.");


				new index = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED];
				PROPERTY_INFO[ index ][property_CREW] = true;
				PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ index ][property_CREW_ID] = PI[playerid][pi_CREW];
				format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

				new label_str[256];
				format
				(
					label_str,
					sizeof label_str,
					"\
						{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
						{"#PRIMARY_COLOR"}·{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
						{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
					", PROPERTY_INFO[index][property_ID], CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]
				);
				UpdateDynamic3DTextLabelText(PROPERTY_INFO[ index ][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = %d WHERE id = %d;", TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID], PROPERTY_INFO[index][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new message[145];
				format(message, sizeof message, "{%06x}[Banda] {FFFFFF}%s (%s) ha añadido una nueva propiedad en %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				SendMessageToCrewMembers(PI[playerid][pi_CREW], -1, message);
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_TERRITORY:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA])) return SendNotification(playerid, "No estás en un territorio de tu banda.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendNotification(playerid, "No estás en un territorio de tu banda.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes abandonar territorios mientras tu banda está en combate.");
				if(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_WAR]) return SendNotification(playerid, "No se puede abandonar este territorio cuando está siendo conquistado.");

				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_OCCUPIED] = false;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_ID] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_CREW_INDEX] = 0;
				TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_COLOR] = 0xCCCCCC55;
				UpdateGangZoneColor(PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO]);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = NULL WHERE id = %d;", TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				CallLocalFunction("OnCrewLeftTerritory", "iiii", PI[playerid][pi_CREW], PLAYER_TEMP[playerid][pt_CREW_INDEX], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_ID], PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO]);

				for(new i = 0; i != MAX_PROPIEDADES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_CREW]) continue;
					if(PROPERTY_INFO[i][property_CREW_ID] != PI[playerid][pi_CREW]) continue;

					if(IsPointInDynamicArea(TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
					{
						PROPERTY_INFO[ i ][property_SOLD] = false;
						PROPERTY_INFO[ i ][property_CREW] = false;
						PROPERTY_INFO[ i ][property_OWNER_ID] = 0;
						PROPERTY_INFO[ i ][property_CREW_ID] = 0;
						format(PROPERTY_INFO[ i ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ i ][property_ID]);

						new info[3];
						UpdateUnnocupiedPropertyLabel(i);

						DestroyDynamicPickup(PROPERTY_INFO[ i ][property_EXT_PICKUP_ID]);
						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

						PROPERTY_INFO[ i ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ i ][property_EXT_X], PROPERTY_INFO[ i ][property_EXT_Y], PROPERTY_INFO[ i ][property_EXT_Z], 0, PROPERTY_INFO[ i ][property_EXT_INTERIOR]);
						info[0] = PICKUP_TYPE_PROPERTY;
						info[1] = i; // Index
						info[2] = 2; // Pickup Exterior
						Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ i ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ i ][property_ID]);
						mysql_tquery(mysql_db, QUERY_BUFFER);
					}
				}

				new message[145];
				format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' ha abandonado un territorio en %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PI[i][pi_CREW])
						{
							SendClientMessage(i, -1, message);

							format(message, sizeof message, "[BANDAS] La banda '%s' ha abandonado un territorio en %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME], TERRITORIES[ PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] ][territory_NAME]);
							DCC_SendChannelMessage(dc_channel[2], message);
						}
					}
				}
			}
			return 1;
		}
		case DIALOG_CREW_LEAVE_PROPERTY:
		{
			if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
			if(!CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_VALID]) return SendNotification(playerid, "La banda ya no existe.");
			if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_DELETE_PROPERTIES]) return SendNotification(playerid, "No tienes permiso.");

			if(response)
			{
				if(!PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW]) return SendNotification(playerid, "Esta no es una propiedad de tu banda.");
				if(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] != PI[playerid][pi_CREW]) return SendNotification(playerid, "Esta no es una propiedad de tu banda.");
				if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes liberar una propiedad cuando tu banda está en combate.");

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_SOLD] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW] = false;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_OWNER_ID] = 0;
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_CREW_ID] = 0;
				format(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);

				new info[3];
				UpdateUnnocupiedPropertyLabel(PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]);

				DestroyDynamicPickup(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID]);
				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

				PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_X], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Y], PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_Z], 0, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_INTERIOR]);
				info[0] = PICKUP_TYPE_PROPERTY;
				info[1] = PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED]; // Index
				info[2] = 2; // Pickup Exterior
				Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PLAYER_PROPERTY_SELECTED] ][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendNotification(playerid, "La propiedad ha sido liberada.");
			}
			return 1;
		}
		case DIALOG_POLICE_PENALTY:
		{
			if(response)
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_POLICE_PEN_TIME] + 20) return SendNotification(playerid, "Has tardardo mucho en aceptarlo.");
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID])) return SendNotification(playerid, "El policía ya no está en el servidor.");
				if(PI[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_POLICE_PEN_AID]) return SendNotification(playerid, "El policía ya no está en el servidor.");

				new Float:pos[3]; GetPlayerPos(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], pos[0], pos[1], pos[2]);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "El policía no está cerca tuya.");

				if(PLAYER_TEMP[playerid][pt_POLICE_PEN_IM] > PI[playerid][pi_CASH])
				{
					SendNotification(playerid, "No tienes dinero para pagar la multa.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona ha aceptado la multa pero no tiene dinero para pagarla.");
					return 1;
				}

				if(GivePlayerCash(playerid, -PLAYER_TEMP[playerid][pt_POLICE_PEN_IM], true, true) && GivePlayerCash(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], PLAYER_TEMP[playerid][pt_POLICE_PEN_IM]/2, true, false)) {
					SetPlayerWantedLevelEx(playerid, 0);

					SendNotification(playerid, "La multa ha sido pagada.");
					SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona ha pagado la multa, la mitad del importe es para ti.");
				}

			}
			else
			{
				if(gettime() > PLAYER_TEMP[playerid][pt_POLICE_PEN_TIME] + 20) return 1;
				if(!IsPlayerConnected(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID])) return 1;
				if(PI[ PLAYER_TEMP[playerid][pt_POLICE_PEN_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_POLICE_PEN_AID]) return 1;

				SendClientMessage(PLAYER_TEMP[playerid][pt_POLICE_PEN_PID], -1, "{"#SILVER_COLOR"}La persona se ha negado a pagar la multa.");
				if(PI[playerid][pi_WANTED_LEVEL] < 6) SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL] + 1);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED] = listitem;
				ShowDialog(playerid, DIALOG_SERVER_ECO_MODIFY);
			}
			return 1;
		}
		case DIALOG_SERVER_ECO_MODIFY:
		{
			if(PI[playerid][pi_ADMIN_LEVEL] < 5) return 1;

			if(response)
			{
				new Float:multiplier;
				if(sscanf(inputtext, "f", multiplier))
				{
					SendNotification(playerid, "Sintaxis no válida.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				switch(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED])
				{
					case 0: MULTIPLIER_PROPERITES = multiplier;
					case 1: MULTIPLIER_VEHICLES = multiplier;
					case 2: MULTIPLIER_TOYS = multiplier;
					case 3: MULTIPLIER_SKINS = multiplier;
					case 4: MULTIPLIER_WEAPONS = multiplier;
					case 5: SU_SD_PRICE = floatround(multiplier);
					case 6: SU_SD_PRICE2 = floatround(multiplier);
					case 7: SU_WORK_EXTRA_PAY = floatround(multiplier);
					case 8: CHANGE_NAME_SD_PRICE = floatround(multiplier);
				}

				WriteEconomyMultipliers();
				UpdateEconomy(PLAYER_TEMP[playerid][pt_DIALOG_ECO_SELECTED]);
				ShowDialog(playerid, DIALOG_SERVER_ECO);
			}
			else ShowDialog(playerid, DIALOG_SERVER_ECO);
			return 1;
		}
		case DIALOG_VIPS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_SU_BUY);
					case 1: ShowDialog(playerid, DIALOG_SU_BUY2);
				}
			}
			return 1;
		}
		case DIALOG_SU_BUY:
		{
			if(response)
			{
				if(SU_SD_PRICE > PI[playerid][pi_COINS])
				{
					SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder comprar VIP1.", SU_SD_PRICE - PI[playerid][pi_COINS]);
					return 1;
				}

				SetPlayerVip(playerid, 1, SU_SD_PRICE, 30);
			}
			return 1;
		}
		case DIALOG_SU_BUY2:
		{
			if(response)
			{
				if(SU_SD_PRICE2 > PI[playerid][pi_COINS])
				{
					SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder comprar VIP2.", SU_SD_PRICE2 - PI[playerid][pi_COINS]);
					return 1;
				}

				SetPlayerVip(playerid, 2, SU_SD_PRICE2, 30);
			}
			return 1;
		}
		case DIALOG_SU:
		{
			if(!response)
			{
				if(SU_SD_PRICE > PI[playerid][pi_COINS]) return SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder comprar VIP 1.", SU_SD_PRICE - PI[playerid][pi_COINS]);

				PI[playerid][pi_COINS] -= SU_SD_PRICE;
				inline OnInfoQueryLoad()
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								cache_get_value_index(0, 0, PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessageEx(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has renovado tu VIP (%d) por 30 días, fecha de caducidad: %s.", PI[playerid][pi_VIP], PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_VIP], PI[playerid][pi_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
			}
			return 1;
		}
		case DIALOG_SU2:
		{
			if(!response)
			{
				if(SU_SD_PRICE2 > PI[playerid][pi_COINS])
				{
					SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder comprar VIP 2.", SU_SD_PRICE2 - PI[playerid][pi_COINS]);
					return 1;
				}

				PI[playerid][pi_COINS] -= SU_SD_PRICE2;
				inline OnInfoQueryLoad()
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								cache_get_value_index(0, 0, PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessageEx(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has renovado tu VIP (%d) por 30 días, fecha de caducidad: %s.", PI[playerid][pi_VIP], PI[playerid][pi_VIP_EXPIRE_DATE]);
								SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL 30 DAY) WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_VIP], PI[playerid][pi_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
			}
			return 1;
		}
		case DIALOG_VOBJECT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
					case 1: //Comprar
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = true;

						new Float:p[6];
						GetPlayerCameraPos(playerid, p[0], p[1], p[2]);
						GetPlayerCameraLookAt(playerid, p[3], p[4], p[5]);
						InterpolateCameraPos(playerid, p[0], p[1], p[2], 265.3348, 14.0199, 3.6937, 2000);
						InterpolateCameraLookAt(playerid, p[3], p[4], p[5], 268.2404, 11.4559, 2.2, 2000);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
						//PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;

						UpdateTuningShop(playerid);

						SendNotification(playerid, "Pulsa ~r~'ESCAPE' ~w~para dejar de comprar objetos.");
						SelectTextDrawEx(playerid, 0xe8d08fFF);
					}
					case 2:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(500 > PI[playerid][pi_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(500 - PI[playerid][pi_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(GivePlayerCash(playerid, -500, true, true))
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_TEXT;
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19327;
							format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Texto");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;

							format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_TEXT], 32, "Mi texto");
							format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT], 24, "Arial");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_SIZE] = 24;
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_BOLD] = false;
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_text_FONT_COLOR] = 0xFF000000;

							RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);

							SendNotification(playerid, "El objeto de texto ha sido añadido.");
							PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else ShowDialog(playerid, dialogid);
					}
					case 3:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(2000 > PI[playerid][pi_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(2000 - PI[playerid][pi_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 0;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
					case 4:
					{
						new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
						if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
							ShowDialog(playerid, dialogid);
							return 1;
						}
						if(slot == -1)
						{
							SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						if(2000 > PI[playerid][pi_CASH])
						{
							PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
							SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(2000 - PI[playerid][pi_CASH]));
							ShowDialog(playerid, dialogid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] = 1;
						ShowDialog(playerid, DIALOG_VOBJECT_COUNTRY);
					}
				}
			}
			else
			{
				PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = false;
				SetVehicleVirtualWorldEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetVehiclePosEx(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 246.551910, 17.474195, 3.363841);
				SetVehicleZAngle(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0.0);

				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_PARAMS_ENGINE] = 1;
				UpdateVehicleParams(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);

				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], 0);

				ShowPlayerSpeedoMeter(playerid); ////AQUII
				//ShowPlayerVelocimetro(playerid);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		case DIALOG_VOBJECT_COUNTRY:
		{
			if(response)
			{
				new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
				if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}
				if(slot == -1)
				{
					SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				if(2000 > PI[playerid][pi_CASH])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(2000 - PI[playerid][pi_CASH]));
					ShowDialog(playerid, DIALOG_VOBJECT_MENU);
					return 1;
				}

				if(GivePlayerCash(playerid, -2000, true, true))
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
					if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 0)
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_FLAG;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 19307;
					}
					else if(PLAYER_TEMP[playerid][pt_COUNTRY_TYPE] == 1)
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_COUNTRY_PANEL;
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = 2661;
					}
					format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "Pais");
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_COLORS][0] = listitem;

					RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot, true);

					SendNotification(playerid, "El objeto ha sido añadido.");
					PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECTS:
		{
			if(response)
			{
				if(listitem == MAX_SU2_VOBJECTS) return ShowDialog(playerid, DIALOG_VOBJECT_DELETE_ALL);
				if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][listitem][vobject_VALID])
				{
					SendNotification(playerid, "Este slot está vacío, aquí puedes comprar un nuevo objeto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendNotification(playerid, "Objeto guardado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = false;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
						else
						{
							SendNotification(playerid, "Objeto colocado.");
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
							UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
							ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
						}
					}
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CNAME);
					case 2:
					{
						if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
						{
							SendNotification(playerid, "Debes colocar el objeto primero.");
							ShowDialog(playerid, dialogid);
							return 1;
						}

						EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					}
					case 3:
					{
						switch(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_TYPE])
						{
							case VOBJECT_TYPE_OBJECT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendNotification(playerid, "Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
							}
							case VOBJECT_TYPE_TEXT:
							{
								if(!VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED])
								{
									SendNotification(playerid, "Debes colocar el objeto primero.");
									ShowDialog(playerid, dialogid);
									return 1;
								}
								ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
							}
							case VOBJECT_TYPE_COUNTRY_FLAG, VOBJECT_TYPE_COUNTRY_PANEL: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
						}
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_CDELETE);
				}

			}
			else
			{
				UpdateVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CNAME:
		{
			if(response)
			{
				if(!strlen(inputtext) || strlen(inputtext) > 32)
				{
					SendNotification(playerid, "El nombre del objeto debe contener de 1 a 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_NAME], 32, "%s", inputtext);
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLORS:
		{
			if(response)
			{
				PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] = listitem;
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = 0;
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendNotification(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 1:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_1] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendNotification(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 2:
					{
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = RGBAToARGB(VEHICLE_COLORS[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_COLOR_2] ]);
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						SendNotification(playerid, "Color actualizado.");
						ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
					}
					case 3: ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR_HEX);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_COLOR_HEX:
		{
			if(response)
			{
				if(strlen(inputtext) < 8) return ShowDialog(playerid, dialogid);

				new hexcolor;
				if(sscanf(inputtext, "h", hexcolor))
				{
					ShowDialog(playerid, dialogid);
					return 1;
				}

				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_COLORS][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_COLOR_SLOT] ] = hexcolor;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendNotification(playerid, "Color actualizado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLORS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT_COLOR);
			return 1;
		}
		case DIALOG_VOBJECT_OBJECT_CDELETE:
		{
			if(response)
			{
				if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
				{
					DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID]);
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
				}

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vobjects WHERE id = %d;", VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ] = temp_VEHICLE_OBJECTS;

				SendNotification(playerid, "Objeto eliminado.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_DELETE_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM vobjects WHERE id_vehicle = %d;", PLAYER_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][player_vehicle_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
				for(new i = 0; i != MAX_SU2_VOBJECTS; i ++)
				{
					if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
					{
						DestroyDynamicObject(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID]);
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][i] = temp_VEHICLE_OBJECTS;
				}

				SendNotification(playerid, "Todos los objetos de este vehículo han sido eliminados.");
				ShowDialog(playerid, DIALOG_VOBJECT_OBJECTS);
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_MENU:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_TEXT);
					case 1: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT);
					case 2: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_SIZE);
					case 3:
					{
						if(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD])
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = false;
							SendNotification(playerid, "Negrita deshabilitada.");
						}
						else
						{
							VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_BOLD] = true;
							SendNotification(playerid, "Negrita habilitada.");
						}
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
						ShowDialog(playerid, dialogid);
					}
					case 4: ShowDialog(playerid, DIALOG_VOBJECT_TEXT_FONT_COLOR);
				}
			}
			else ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_TEXT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 32)
				{
					SendNotification(playerid, "Como máximo puedes introducir un texto de 32 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(sscanf(inputtext, "s[32]", inputtext))
				{
					SendNotification(playerid, "Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_TEXT], 32, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendNotification(playerid, "Texto actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT:
		{
			if(response)
			{
				if(strlen(inputtext) >= 24)
				{
					SendNotification(playerid, "Como máximo puedes introducir una fuente de 24 caracteres.");
					ShowDialog(playerid, dialogid);
					return 1;
				}

				if(sscanf(inputtext, "s[24]", inputtext))
				{
					SendNotification(playerid, "Introduce un texto.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT], 24, "%s", inputtext);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendNotification(playerid, "Fuente actualizada.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_SIZE:
		{
			if(response)
			{
				if(sscanf(inputtext, "d", inputtext[0]))
				{
					SendNotification(playerid, "Introduce un valor numérico.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				if(inputtext[0] <= 0 || inputtext[0] >= 255)
				{
					SendNotification(playerid, "Introduce un valor entre 1 y 255.");
					ShowDialog(playerid, dialogid);
					return 1;
				}
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_SIZE] = inputtext[0];
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendNotification(playerid, "Tamaño de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_VOBJECT_TEXT_FONT_COLOR:
		{
			if(response)
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_text_FONT_COLOR] = RGBAToARGB(RandomColors[listitem]);
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT], true);
				SendNotification(playerid, "Color de letra actualizado.");
			}
			ShowDialog(playerid, DIALOG_VOBJECT_TEXT_MENU);
			return 1;
		}
		case DIALOG_PLAYER_CONFIG:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PI[playerid][pi_CONFIG_AUDIO])
						{
							PI[playerid][pi_CONFIG_AUDIO] = false;
							StopAudioStreamForPlayer(playerid);
						}
						else PI[playerid][pi_CONFIG_AUDIO] = true;
						ShowDialog(playerid, dialogid);
					}
					case 1:
					{
						if(PI[playerid][pi_CONFIG_HUD])
						{
							PI[playerid][pi_CONFIG_HUD] = false;
							for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++)
							{
								TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][i]);
							}

							for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++)
							 {
								PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
							}
						}
						else
						{
							PI[playerid][pi_CONFIG_HUD] = true;
							for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++)
							{
								TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][i]);
							}

							for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++)
							{
								PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
							}
						}
						ShowDialog(playerid, dialogid);
					}
					case 2:
					{
						if(PI[playerid][pi_CONFIG_ADMIN]) PI[playerid][pi_CONFIG_ADMIN] = false;
						else PI[playerid][pi_CONFIG_ADMIN] = true;
						ShowDialog(playerid, dialogid);
					}
					case 3:
					{
						if(PI[playerid][pi_PHONE_VISIBLE_NUMBER]) PI[playerid][pi_PHONE_VISIBLE_NUMBER] = false;
						else PI[playerid][pi_PHONE_VISIBLE_NUMBER] = true;
						ShowDialog(playerid, dialogid);
					}
					case 4:
					{
						if(PI[playerid][pi_CONFIG_SOUNDS]) PI[playerid][pi_CONFIG_SOUNDS] = false;
						else PI[playerid][pi_CONFIG_SOUNDS] = true;
						ShowDialog(playerid, dialogid);
					}
					case 5:
					{
						if(PI[playerid][pi_CONFIG_TIME])
						{
							PI[playerid][pi_CONFIG_TIME] = false;
							PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME]);
						}
						else
						{
							PI[playerid][pi_CONFIG_TIME] = true;
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME]);
						}
						ShowDialog(playerid, dialogid);
					}
					case 6:
					{
						if(PI[playerid][pi_DOUBT_CHANNEL]) PI[playerid][pi_DOUBT_CHANNEL] = false;
						else PI[playerid][pi_DOUBT_CHANNEL] = true;
						ShowDialog(playerid, dialogid);
					}
					case 7:
					{
						if(PI[playerid][pi_CONFIG_AUTO_LOGIN]) PI[playerid][pi_CONFIG_AUTO_LOGIN] = false;
						else
						{
							PI[playerid][pi_CONFIG_AUTO_LOGIN] = true;
							SendNotification(playerid, "Ahora vas a ingresar al servidor ~r~automáticamente ~w~solo si tu ip es igual a la anterior.");
						}
						ShowDialog(playerid, dialogid);
					}
					case 8:
					{
						ShowDialog(playerid, DIALOG_CLEOS);
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
						PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
						ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_ALL);
					}
					case 1: ShowDialog(playerid, DIALOG_POLICE_BYC_NAME_FIND);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_NAME_FIND:
		{
			if(response)
			{
				new name[24];
				if(sscanf(inputtext, "s[24]", name)) return ShowDialog(playerid, dialogid);

				inline OnDialogQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							cache_get_value_index_int(0, 0, PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID]);
							PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
							PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
							ShowDialog(playerid, DIALOG_POLICE_BYC_LAST_PLAYER);
						}
						else SendNotification(playerid, "No se ha encontrado a esa persona.");
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", name);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_ALL:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM police_history;", using inline OnCountQueryLoad);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM police_history;", using inline OnCountQueryLoad);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_BYC_LAST_PLAYER:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -2) // Siguiente
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM police_history WHERE id_player = %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -3) //Anterior
				{
					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								ShowDialog(playerid, dialogid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM police_history WHERE id_player = %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_USER_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				else
				{
					PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
					ShowDialog(playerid, DIALOG_POLICE_DELETE_BYC);
				}
			}
			return 1;
		}
		case DIALOG_POLICE_DELETE_BYC:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM police_history WHERE id = %d;", PLAYER_TEMP[playerid][pt_SELECTED_BYC_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				SendNotification(playerid, "Registro borrado del historial policial.");
			}
			return 1;
		}
		case DIALOG_CHANGE_NAME:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);

				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_NAME_NAME);
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
					if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendFormatNotification(playerid, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_NAME_NAME:
		{
			if(response)
			{
				new length = strlen(inputtext);
				if(length < 3 || length > 20) return ShowDialog(playerid, dialogid);

				new name[24];
				format(name, 24, "%s", inputtext);
				if(!IsValidRPName(name)) return SendFormatNotification(playerid, "El nombre '%s' no cumple con el formato Nombre_Apellido.", name);

				inline OnDialogQueryLoad(newName[])
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows) SendFormatNotification(playerid, "El nombre '%s' está en uso.", newName);
						else
						{
							printf("/cname: %d, '%s'", PI[playerid][pi_ID], newName);
							if(SetPlayerName(playerid, newName) == 1) {
								format(PLAYER_TEMP[playerid][pt_NAME], 24, "%s", newName);
								format(PI[playerid][pi_NAME], 24, "%s", newName);
								PLAYER_TEMP[playerid][pt_RP_NAME] = RP_GetPlayerName(playerid);

								for(new i = 0; i != MAX_PROPIEDADES; i ++)
								{
									if(!PROPERTY_INFO[i][property_VALID]) continue;
									if(PROPERTY_INFO[i][property_OWNER_ID] != PI[playerid][pi_ID]) continue;

									new label_str[256];
									format
									(
										label_str,
										sizeof label_str,
										"\
											{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
											{"#PRIMARY_COLOR"}·{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
											{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
										", PROPERTY_INFO[i][property_ID], PI[playerid][pi_NAME]
									);
									UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
								}

								PI[playerid][pi_COINS] -= CHANGE_NAME_SD_PRICE;

								mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e', coins = %d WHERE id = %d;", PI[playerid][pi_NAME], PI[playerid][pi_COINS], PI[playerid][pi_ID]);
								printf(QUERY_BUFFER);
								mysql_tquery(mysql_db, QUERY_BUFFER);
								SendFormatNotification(playerid, "Tu nombre ha sido cambiado a '%s' por %d "SERVER_COIN"", name, CHANGE_NAME_SD_PRICE);
							}
							else SendNotification(playerid, "No se ha podido cambiar tu nombre.");
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", name);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad, "s", name);
			}
			return 1;
		}
		case DIALOG_CHANGE_EMAIL:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowDialog(playerid, dialogid);

				new password[64 + 1];
				SHA256_PassHash(inputtext, PI[playerid][pi_SALT], password, sizeof password);

				if(!strcmp(password, PI[playerid][pi_PASS], false))
				{
					ShowDialog(playerid, DIALOG_CHANGE_EMAIL_EMAIL);
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
				}
				else // Error
				{
					PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] ++;
					if(PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] > MAX_BAD_LOGIN_ATTEMPS) return Kick(playerid);
					SendFormatNotification(playerid, "Contraseña incorrecta, aviso %d/%d.", PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP], MAX_BAD_LOGIN_ATTEMPS);
				}
			}
			return 1;
		}
		case DIALOG_CHANGE_EMAIL_EMAIL:
		{
			if(response)
			{
				new length = strlen(inputtext);
				if(length > 32) return ShowDialog(playerid, dialogid);

				new email[32];
				format(email, 32, "%s", inputtext);
				if(!IsValidEmail(email)) return SendNotification(playerid, "Correo no válido.");

				inline OnDialogQueryLoad(newEmail[])
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows) SendNotification(playerid, "El correo electrónico introducido está en uso.");
						else
						{
							format(PI[playerid][pi_EMAIL], 32, "%s", newEmail);

							mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET email = '%e' WHERE id = %d;", PI[playerid][pi_EMAIL], PI[playerid][pi_ID]);
							mysql_tquery(mysql_db, QUERY_BUFFER);
							SendNotification(playerid, "Tu correo electrónico ha sido cambiado correctamente.");
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE email = '%e';", email);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad, "s", email);
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET:
		{
			if(response)
			{
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == -1) return 1;
				if(PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem] == MAX_CLOSET_SLOTS + 20)
				{
					ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_DLT_ALL);
					return 1;
				}

				PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] = PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][listitem];
				ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_OPTIONS);
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DLT_ALL:
		{
			if(response)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id_property = %d;", PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][property_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
				for(new i = 0; i != MAX_CLOSET_SLOTS; i ++) PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][i] = tmp_PROPERTY_CLOSET;

				SendNotification(playerid, "Ha eliminado todo de este armario.");
				Auto_SendPlayerAction(playerid, "tira todas las armas de su armario");
			}
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_OPTIONS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(!PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_VALID]) return SendNotification(playerid, "No hay nada en ese slot.");

						new string[128];
						switch(PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_TYPE]) {
							case BOOT_TYPE_WEAPON: {
								new to_slot = WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_SLOT];
								if(PLAYER_WEAPONS[playerid][to_slot][player_weapon_VALID])
								{
									PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
									SendFormatNotification(playerid, "Para sacar esta arma tienes que deshacerte de tu ~r~\"%s (%d\"~w~ para tener espacio.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][ to_slot ][player_weapon_ID] ][weapon_info_NAME], to_slot);
									return 1;
								}
								GivePlayerWeaponEx(playerid, PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT], PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT_EXTRA]);
								RegisterNewPlayerWeapon(playerid, to_slot);
								format(string, sizeof string, "saca un(a) %s del armario.", WEAPON_INFO[ PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT] ][weapon_info_NAME]);
							}
							case BOOT_TYPE_MEDICINES: {
								PI[playerid][pi_MEDICINE] += PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca medicamentos del armario.");
							}
							case BOOT_TYPE_CANNABIS: {
								PI[playerid][pi_CANNABIS] += PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca marihuana del armario.");
							}
							case BOOT_TYPE_CRACK: {
								PI[playerid][pi_CRACK] += PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_INT];
								format(string, sizeof string, "saca crack del armario.");
							}
						}

						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id = %d;", PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_OBJECT_ID]);
						mysql_tquery(mysql_db, QUERY_BUFFER);

						new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
						PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ] = tmp_PROPERTY_CLOSET;
						Auto_SendPlayerAction(playerid, string);
					}
					case 1: ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_DELETE);
				}
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_CLOSET);
			return 1;
		}
		case DIALOG_PROPERTY_CLOSET_DELETE:
		{
			if(response)
			{
				SendNotification(playerid, "Eliminado.");

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM property_closet WHERE id = %d;", PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ][property_closet_OBJECT_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				new tmp_PROPERTY_CLOSET[enum_PROPERTY_CLOSET];
				PROPERTY_CLOSET[ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY] ][ PLAYER_TEMP[playerid][pt_DIALOG_CLOSET_PROPERTY_SLOT] ] = tmp_PROPERTY_CLOSET;
			}
			else ShowDialog(playerid, DIALOG_PROPERTY_CLOSET_OPTIONS);
			return 1;
		}
	}
	return 0;
}

GetDatabasePages(count, limit)
{
	return floatround(floatdiv(count, limit), floatround_ceil);
}

AddNewAd(playerid, type, price, text[], modelid, vcol1 = 0, vcol2 = 0)
{
	new Float:rots[4], date[24];
	getDateTime(date);
	switch(type)
	{
		case SHOP_ARTICLE_TYPE_PROPERTY: rots = Float:{345.0, 0.0, 30.0, 1.20};
		case SHOP_ARTICLE_TYPE_VEHICLE: rots = Float:{345.0, 0.0, 330.0, 1.0};
		case SHOP_ARTICLE_TYPE_OTHER: rots = Float:{0.0, 0.0, 330.0, 1.20};
	}

	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO shop (id_player, type, price, text, modelid, rx, ry, rz, zoom, vcol1, vcol2, date)\
			VALUES (%d, %d, %d, '%e', %d, %f, %f, %f, %f, %d, %d, '%e');\
		",
			PI[playerid][pi_ID], type, price, text, modelid, rots[0], rots[1], rots[2], rots[3], vcol1, vcol2, date
	);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}

GetEmptyPlayer_GPS_Slot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_GPS_SAVES; i ++)
	{
		if(!PLAYER_GPS[playerid][i][player_gps_VALID]) return i;
	}
	return -1;
}

SetPlayer_GPS_Checkpoint(playerid, Float:x, Float:y, Float:z, world, interior)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, playerid, 9999999999.0);

	new info[1];
	info[0] = CHECKPOINT_TYPE_GPS;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	Streamer_Update(playerid, STREAMER_TYPE_CP);

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID])
		{
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TAXI)
			{
				if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
				{
					if(IsPlayerConnected(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]))
					{
						if(IsValidDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]))
						{
							DestroyDynamicCP(PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT]);
							PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
						}
						PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT] = CreateDynamicCP(x, y, z, 5.0, world, interior, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], 9999999999.0);

						new taxi_info[1];
						taxi_info[0] = CHECKPOINT_TYPE_GPS;
						Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][pt_GPS_CHECKPOINT], E_STREAMER_EXTRA_ID, taxi_info);

						Streamer_Update(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], STREAMER_TYPE_CP);
						Auto_SendPlayerAction(playerid, "configura su GPS y se lo muestra al taxista.");
						return 1;
					}
				}
			}
		}
	}
	Auto_SendPlayerAction(playerid, "configura su GPS.");
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	PLAYER_TEMP[playerid][pt_LAST_PICKUP_ID] = pickupid;

	new info[3];
	new speed = GetPlayerSpeed(playerid);
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
		case PICKUP_TYPE_ENTER_EXIT:
		{
			if(speed > 0)
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

				if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;
					SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_EXT_X], ENTER_EXIT[info[1]][ee_EXT_Y], ENTER_EXIT[info[1]][ee_EXT_Z], ENTER_EXIT[info[1]][ee_EXT_ANGLE], ENTER_EXIT[info[1]][ee_EXT_INTERIOR], ENTER_EXIT[info[1]][ee_EXT_WORLD], false, true);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					//StopAudioStreamForPlayer(playerid);
					FreezePlayer(playerid);
					CallLocalFunction("OnPlayerExitInterior", "ii", playerid, info[1]);
				}
				else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
				{
					if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == 0 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == 0) // 24 horas
					{
						PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
						PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
						PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
						SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false, true);
						FreezePlayer(playerid);
						CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);
					}
					else
					{
						if(is_open(GetMyWorldHour(), ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]))
						{
							PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
							PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[info[1]][ee_ID];
							PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = info[1];
							SetPlayerPosEx(playerid, ENTER_EXIT[info[1]][ee_INT_X], ENTER_EXIT[info[1]][ee_INT_Y], ENTER_EXIT[info[1]][ee_INT_Z], ENTER_EXIT[info[1]][ee_INT_ANGLE], ENTER_EXIT[info[1]][ee_INT_INTERIOR], ENTER_EXIT[info[1]][ee_INT_WORLD], false, true);
							FreezePlayer(playerid);
							CallLocalFunction("OnPlayerEnterInterior", "ii", playerid, info[1]);

							if(ENTER_EXIT[info[1]][ee_INTERIOR_TYPE] == INTERIOR_CLUB) PlayAudioStreamForPlayerEx(playerid, "https://www.dropbox.com/s/yeuwio26i7y00ly/striptease.mp3?dl=1");
						}
						else
						{
							if(ENTER_EXIT[info[1]][ee_TIME_OPEN] == -1 && ENTER_EXIT[info[1]][ee_TIME_CLOSE] == -1) SendFormatNotification(playerid, "~r~%s ~w~abrirá próximamente.", ENTER_EXIT[info[1]][ee_NAME]);
							else SendFormatNotification(playerid, "~r~%s ~w~está cerrado, su horario es: ~r~%02d:00h ~w~- ~r~%02d:00h~w~.", ENTER_EXIT[info[1]][ee_NAME], ENTER_EXIT[info[1]][ee_TIME_OPEN], ENTER_EXIT[info[1]][ee_TIME_CLOSE]);
						}
					}
				}
			}
		}
		case PICKUP_TYPE_PROPERTY:
		{
			if(speed > 0)
			{
				PLAYER_TEMP[playerid][pt_HOSPITAL] = GetNearestHospitalForPlayer(playerid);

				if(info[2] == 1) // Está en el Pickup Interior y quiere ir al exterior
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
					SetPlayerPosEx(playerid, PROPERTY_INFO[info[1]][property_EXT_X], PROPERTY_INFO[info[1]][property_EXT_Y], PROPERTY_INFO[info[1]][property_EXT_Z], PROPERTY_INFO[info[1]][property_EXT_ANGLE], PROPERTY_INFO[info[1]][property_EXT_INTERIOR], 0, false, true);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					if(PLAYER_TEMP[playerid][pt_MUSIC_PLAYER] != 0)
					{
						if(PROPERTY_INFO[info[1]][property_EMISORA_ID] != 0) StopAudioStreamForPlayer(playerid);
					}
					FreezePlayer(playerid);
				}
				else if(info[2] == 2) // Está en el Pickup Exterior y quiere ir al interior
				{
					if(PROPERTY_INFO[info[1]][property_POLICE_FORCED] && (PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE))
					{
						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
						return 1;
					}
					if(!PROPERTY_INFO[info[1]][property_SOLD]) return SendNotification(playerid, "Esta propiedad está en venta.");
					if(PROPERTY_INFO[info[1]][property_CREW])
					{
						if(!PI[playerid][pi_CREW]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");
						if(PI[playerid][pi_CREW] != PROPERTY_INFO[info[1]][property_CREW_ID]) return SendFormatNotification(playerid, "Solo miembros de la banda pueden entrar.");

						PI[playerid][pi_STATE] = ROLEPLAY_STATE_GUEST_PROPERTY;
						PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
						FreezePlayer(playerid);
					}
					else
					{
						if(PROPERTY_INFO[info[1]][property_OWNER_ID] == PI[playerid][pi_ID])
						{
							PI[playerid][pi_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
							PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[info[1]][property_ID];
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = info[1];

							new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Z];
							if(PROPERTY_INFO[info[1]][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
							SetPlayerPosEx(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_ANGLE], PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_INTERIOR], PROPERTY_INFO[info[1]][property_ID], false /*PROPERTY_INTERIORS[ PROPERTY_INFO[info[1]][property_ID_INTERIOR] ][property_INT_FREEZE]*/, true);
							FreezePlayer(playerid);
						}
						else
						{
							if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] + 10) return SendNotification(playerid, "Espera para volver a tocar, si no te quieren abrir, vete.");

							new owner_playerid = GetOwnerIntProperty(PROPERTY_INFO[info[1]][property_ID]);
							if(owner_playerid == -1) return SendNotification(playerid, "Esta no es tu propiedad y el dueño no está dentro para dejarte entrar.");

							PLAYER_TEMP[playerid][pt_ANTIFLOOD_KNOCK_PROPERTY] = gettime();
							PLAYER_TEMP[owner_playerid][pt_KNOCK_PLAYER_ID] = playerid;
							SendFormatNotification(owner_playerid, "~b~%s ~w~está tocando la puerta, para dejarle entrar ve a la puerta y usa ~b~/puerta~w~.", PLAYER_TEMP[playerid][pt_RP_NAME]);
							SendNotification(playerid, "Has tocado en la puerta, espera para que te abran o vete.");
						}
					}
				}
			}
		}
		case PICKUP_TYPE_ATM:
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_TIME_PICKUP] + 2) return 0;
			if(speed > 0)
			{
				PLAYER_TEMP[playerid][pt_TIME_PICKUP] = gettime();
				PC_EmulateCommand(playerid, "/cajero");
				return 1;
			}
		}
		case PICKUP_TYPE_HOTDOG:
		{
			if(gettime() < PLAYER_TEMP[playerid][pt_TIME_PICKUP] + 2) return 0;
			if(speed > 0)
			{
				PLAYER_TEMP[playerid][pt_TIME_PICKUP] = gettime();
				PC_EmulateCommand(playerid, "/comida");
				return 1;
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	PLAYER_TEMP[playerid][pt_LAST_AREA_ID] = areaid;

	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);
	switch(info[0])
	{
		case AREA_TYPE_ZONA_SEGURA:
		{
			GameTextForPlayer(playerid, "~g~ZONA SEGURA~n~~r~ARMAS PROHIBIDAS", 4000, 4);

			new r, g, b, a;
			HexToRGBA(0x43F75BFF, r, g, b, a);
			new color_zone = RGBAToHex(r, g, b, 100);

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], "Zona Segura");
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI], color_zone);

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1]);
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if(TERRITORIES[index][territory_VALID])
			{
				PLAYER_TEMP[playerid][pt_LAST_TERRITORY] = index;
				if(PI[playerid][pi_CREW])
				{
					if(TERRITORIES[index][territory_WAR])
					{
						SendFormatNotification(playerid, "Este territorio está siendo atacado por la banda ~r~'%s'~w~.", CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

						new r, g, b, a;
						HexToRGBA(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
						SetPlayerColorEx(playerid, RGBAToHex(r, g, b, 0));

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawShowForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
					}
				}
				if(TERRITORIES[index][territory_OCCUPIED])
				{
					new name_crew[28], r, g, b, a;
					HexToRGBA(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);

					format(name_crew, sizeof name_crew, "%s", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME]);
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], name_crew);
					PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI], RGBAToHex(r, g, b, 100));

					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0]);
					PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1]);
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new info[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case AREA_TYPE_NONE:
		{
			if(areaid == Lumberjack_Area)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					SendNotification(playerid, "Has abandonado el trabajo de leñador porque te has alejado demasiado de la zona.");
					CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				}
			}
			else if(areaid == Harvest_Area)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_HARVESTER)
					{
						SendNotification(playerid, "Has abandonado tu trabajo de cosechador porque te has alejado demasiado de la zona.");
						CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
					}
				}
			}

			if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL)
			{
				if(areaid == Jail_Areas[0] || areaid == Jail_Areas[1] || areaid == Jail_Areas[2] || areaid == Jail_Areas[3] )
				{
					SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);
				}
			}
		}
		case AREA_TYPE_GANGZONE:
		{
			new index = info[1];

			if(TERRITORIES[index][territory_VALID])
			{
				if(PI[playerid][pi_CREW])
				{
					SetPlayerNormalColor(playerid);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawHideForPlayer(playerid, TERRITORIES[index][territory_TEXTDRAW]);
				}
			}
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1]);
		}
		case AREA_TYPE_ZONA_SEGURA:
		{
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1]);

			GameTextForPlayer(playerid, "_", 500, 4);
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_GPS:
		{
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT] = INVALID_STREAMER_ID;
		}
		case CHECKPOINT_TYPE_UNLOAD_TRAILER:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRAILERO][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRAILERO) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			new cargaid = GetVehicleTrailer(vehicleid);

			if(GLOBAL_VEHICLES[cargaid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[cargaid][work_vehicle_WORK] != WORK_TRAILERO) return 1;

			if(TRAILER_VEHICLE[cargaid][trailer_vehicle_DELIVERED]) return 1;
			if(TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING]) return 1;
			if(TRAILER_VEHICLE[cargaid][trailer_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo aceptaremos la carga del conductor de este camión.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
			Congelar(playerid);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING] = true;

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

			PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TrailerUnLoadUp", 1000, false, "ii", playerid, cargaid);
			GameTextForPlayer(playerid,"~r~~<~~r~ DESCARGANDO TRAILER ~r~~>~", 5000, 3);
			Congelar(playerid);
			//HidePlayerVelocimetro(playerid);
			HidePlayerSpeedoMeter(playerid); //AQUII
		}
		case CHECKPOINT_TYPE_UNLOAD_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo aceptaremos la carga del conductor de este camión.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
			UpdateVehicleParams(vehicleid);

			TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = true;
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], "");
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

			PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 40.0;
			UpdatePlayerLoadingTruckSize(playerid);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
			PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		}
		case CHECKPOINT_TYPE_FINISH_TRAILER:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRAILERO][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRAILERO) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			new cargaid = GetVehicleTrailer(vehicleid);

			if(GLOBAL_VEHICLES[cargaid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[cargaid][work_vehicle_WORK] != WORK_TRAILERO) return 1;
			if(!TRAILER_VEHICLE[cargaid][trailer_vehicle_DELIVERED]) return 1;
			if(TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING]) return 1;
			if(TRAILER_VEHICLE[cargaid][trailer_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo le pagaremos al conductor que entregó la mercancía.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			new work_extra_payment;
			if(work_info[WORK_TRAILERO][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRAILERO][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRAILERO][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRAILERO][pwork_LEVEL], work_info[WORK_TRAILERO][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRAILERO][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRAILERO][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRAILERO][work_info_EXTRA_PAY_LIMIT];

				if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			if(DarDinero(playerid, Trailero_Contents[ TRAILER_VEHICLE[cargaid][trailer_vehicle_POINT] ][trailero_content_MONEY] + work_extra_payment, true))
			{
				PLAYER_WORKS[playerid][WORK_TRAILERO][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_TRAILERO);

				new Float:Cpos;

				DetachTrailerFromVehicle(vehicleid);
				GetVehicleZAngle(cargaid, Cpos);
				SetVehicleZAngle(cargaid, Cpos+20);

				SetVehicleToRespawnEx(cargaid);
			}
			CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		}
		case CHECKPOINT_TYPE_FINISH_TRUCK:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRUCK][pwork_SET]) return 1;
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRUCK) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_WORK) return 1;
			if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_TRUCK) return 1;
			if(!TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return 1;
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo le pagaremos al conductor que entregó la mercancía.");

			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
			PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;

			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

			new work_extra_payment;
			if(work_info[WORK_TRUCK][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_TRUCK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL], work_info[WORK_TRUCK][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TRUCK][work_info_EXTRA_PAY_LIMIT];

				if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			if(DarDinero(playerid, Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_MONEY] + work_extra_payment, true))
			{
				PLAYER_WORKS[playerid][WORK_TRUCK][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_TRUCK);

				SetVehicleToRespawnEx(vehicleid);
			}
		}
		case CHECKPOINT_TYPE_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;

			new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
			SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");

			new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
			if(offset > 30.0) offset = 30.0;

			PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
			UpdatePlayerTrashRecycleSize(playerid);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);

			TogglePlayerControllableEx(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
			PLAYER_TEMP[playerid][pt_TIMERS][8] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		}
		case CHECKPOINT_TYPE_FINISH_TRASH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
			if(!PLAYER_TEMP[playerid][pt_TRASH_DRIVER]) return 1;

			new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
			new money = TRASH_OBJECTS[route][trash_route_MONEY];

			new driver_work_extra_payment, passenger_work_extra_payment;
			if(work_info[WORK_TRASH][work_info_EXTRA_PAY] > 0 && work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP] > 0)
			{
				driver_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(driver_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) driver_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(PI[playerid][pi_VIP]) driver_work_extra_payment += SU_WORK_EXTRA_PAY;

				passenger_work_extra_payment = (work_info[WORK_TRASH][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL], work_info[WORK_TRASH][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT] != 0) if(passenger_work_extra_payment > work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT]) passenger_work_extra_payment = work_info[WORK_TRASH][work_info_EXTRA_PAY_LIMIT];
				if(PI[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][pi_VIP]) passenger_work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			DarDinero(playerid, money + driver_work_extra_payment, true);
			SendFormatNotification(playerid, "Trabajo finalizado, has ganado ~g~%s dólares~w~.", number_format_thousand(money + driver_work_extra_payment));
			PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL] ++;
			AddPlayerJobPoints(playerid, WORK_TRASH);

			DarDinero(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], money + passenger_work_extra_payment, true);
			SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Trabajo finalizado, has ganado ~g~%s dólares~w~.", number_format_thousand(money + passenger_work_extra_payment));
			PLAYER_WORKS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] ][WORK_TRASH][pwork_LEVEL] ++;
			AddPlayerJobPoints(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], WORK_TRASH);

			CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
		}
		case CHECKPOINT_TYPE_LUMBERJACK:
		{
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 8);
				PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
				ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

				new work_extra_payment;
				if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] > 0 && work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL], work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_LUMBERJACK][work_info_EXTRA_PAY_LIMIT];

					if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_LUMBERJACK);

				new amount = minrand(40, 50) + work_extra_payment;
				DarDinero(playerid, amount, true);
			}
			else
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case CHECKPOINT_TYPE_PIZZA_DEL:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
			DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
			PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
			PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;

			SendNotification(playerid, "Genial, vuelve a subir a la moto para continuar.");
		}
		case CHECKPOINT_TYPE_PIZZA_FINISH:
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

			new vehicleid = GetPlayerVehicleID(playerid);
			if(!PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED]) return 1;
			if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo le pagaremos al conductor que realizó el trabajo.");

			new work_extra_payment;
			if(work_info[WORK_PIZZA][work_info_EXTRA_PAY] > 0 && work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP] > 0)
			{
				work_extra_payment = (work_info[WORK_PIZZA][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL], work_info[WORK_PIZZA][work_info_EXTRA_PAY_EXP])));
				if(work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_PIZZA][work_info_EXTRA_PAY_LIMIT];

				if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
			}

			PLAYER_WORKS[playerid][WORK_PIZZA][pwork_LEVEL] ++;
			new money = (PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] * 200) + work_extra_payment;
			GivePlayerCash(playerid, money, true, false);
			SendFormatNotification(playerid, "Gracias por tu trabajo, has repartido %d pizzas y has ganado ~g~%s dólares~w~.", PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS], number_format_thousand(money));

			CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		}
		default: return 1;
	}
	return 1;
}

RegisterNewPlayer_GPS_Site(playerid, slot)
{
	inline OnPgpsInserted()
	{
		PLAYER_GPS[playerid][slot][player_gps_ID] = cache_insert_id();
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pgps (id_player, name, x, y, z, world, interior) VALUES(%d, '%e', %f, %f, %f, %d, %d);", PI[playerid][pi_ID], PLAYER_GPS[playerid][slot][player_gps_NAME], PLAYER_GPS[playerid][slot][player_gps_X], PLAYER_GPS[playerid][slot][player_gps_Y], PLAYER_GPS[playerid][slot][player_gps_Z], PLAYER_GPS[playerid][slot][player_gps_WORLD], PLAYER_GPS[playerid][slot][player_gps_INTERIOR]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPgpsInserted);
	return 1;
}

SetPlayerToys(playerid)
{
	for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);

	for(new i = 0; i != MAX_SU2_TOYS; i ++)
	{
		if(i >= MAX_NU_TOYS && !PI[playerid][pi_VIP]) break;

		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			if(PLAYER_TOYS[playerid][i][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					i,
					PLAYER_TOYS[playerid][ i ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ i ][player_toy_BONE],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ i ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ i ][player_toy_COLOR_2]
				);
			}
		}
	}

	return 1;
}

UpdatePlayerToy(playerid, index)
{
	RemovePlayerAttachedObject(playerid, index);
	SetPlayerAttachedObject
	(
		playerid,
		index,
		PLAYER_TOYS[playerid][ index ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ index ][player_toy_BONE],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ index ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ index ][player_toy_COLOR_2]
	);
	return 1;
}

EditPlayerToy(playerid)
{
	if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);

	SetPlayerAttachedObject
	(
		playerid,
		PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
	);

	SendNotification(playerid, "Ajusta el accesorio y haz clic en el icono de guardar, si pulsas ~r~'ESCAPE' ~w~no se guardará la configuración.");
	SendNotification(playerid, "~w~Mantén presionado ~r~'ESPACIO' ~w~para mover la cámara.");
	EditAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(index != PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]) return 0;

	if(response)
	{
		if(fScaleX >= 1.5 || fScaleY >= 1.5 || fScaleZ >= 1.5)
		{
			SendNotification(playerid, "El tamaño del accesorio es demasiado grande.");

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
		}
		if((fOffsetX >= 0.6 || -0.6 >= fOffsetX) || (fOffsetY >= 0.6 || -0.6 >= fOffsetY) || (fOffsetZ >= 0.6 || -0.6 >= fOffsetZ))
		{
			SendNotification(playerid, "La posición del objeto está demasiado lejos de ti.");

			RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
			if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
			{
				SetPlayerAttachedObject
				(
					playerid,
					PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
					PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
				);
			}
			return 1;
		}

		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X] = fOffsetX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y] = fOffsetY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z] = fOffsetZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X] = fRotX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y] = fRotY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z] = fRotZ;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X] = fScaleX;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y] = fScaleY;
		PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z] = fScaleZ;

		if(!PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED]) PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED] = true;

		SendFormatNotification(playerid, "Accesorio ~b~'%s' ~w~actualizado.", PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_NAME]);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT]);
		if(PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ATTACHED])
		{
			SetPlayerAttachedObject
			(
				playerid,
				PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_MODELID],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_BONE],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_OFFSET_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_ROT_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_X],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Y],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_SCALE_Z],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_1],
				PLAYER_TOYS[playerid][ PLAYER_TEMP[playerid][pt_SELECTED_TOY_SLOT] ][player_toy_COLOR_2]
			);
		}

		SendNotification(playerid, "Has cancelado la edición.");
	}
	return 1;
}

forward OnDatabaseConnected();
forward OnDatabaseConnected_Timer();
public OnDatabaseConnected_Timer()
{
	CallLocalFunction("OnDatabaseConnected", "");
}

CargarRuedaDeChicago()
{
   	FerrisWheelObjects[10]=CreateObject(18877,389.7734,-2028.4688,22,0,0,90,300);
	FerrisWheelObjects[11]=CreateObject(18878,389.7734,-2028.4688,22,0,0,90,300);
	forEx((sizeof FerrisWheelObjects)-2,x)
	{
		FerrisWheelObjects[x]=CreateObject(18879,389.7734,-2028.4688,22,0,0,90,300);
		AttachObjectToObject(FerrisWheelObjects[x], FerrisWheelObjects[10],gFerrisCageOffsets[x][0],gFerrisCageOffsets[x][1],gFerrisCageOffsets[x][2],0.0, 0.0, 90, 0 );
	}
	SetTimer("RotateFerrisWheel",FERRIS_WHEEL_WAIT_TIME,false);
	forEx(MAX_PLAYERS,playerid) { }
	return 1;
}

ConnectDatabase()
{
	//mysql
	print("-------------------------------------------------");
	print("[MySQL] Conectando a la base de datos...");
	mysql_log(ERROR | WARNING);
	//mysql_log(NONE);

	//mysql_db
	mysql_db = mysql_connect_file("mysql_db.ini");
	if(mysql_db == MYSQL_INVALID_HANDLE || mysql_errno(mysql_db) != 0)
	{
		printf("[MySQL] No se pudo conectar con la base de datos (mysql_db) (%d)", mysql_errno(mysql_db));
		print("-------------------------------------------------");
		SendRconCommand("exit");
	}
	else
	{
		mysql_tquery(mysql_db, "UPDATE player SET connected = 0, playerid = 0;");
		printf("[MySQL] Base de datos conectada (mysql_db) (%d)", _:mysql_db);
		print("-------------------------------------------------");
		SetTimer("OnDatabaseConnected_Timer", 1000, false);
	}
	return 1;
}

public OnDatabaseConnected()
{
	SanAndreas();
	LoadServerInfo();
	UpdateEconomy();
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR: printf("[MySQL] [ERROR]: Se ha perdido la conexión con el servidor (%d)", _:handle);
		case ER_SYNTAX_ERROR: printf("[MySQL] [ERROR]: Syntax error, query: %s (%d)", query, _:handle);
		default: printf("[MySQL] [ERROR] errorid: %d, error: %s, callback: %s, query: %s, handle: %d", errorid, error, callback, query, _:handle);
	}
	return 1;
}

ClearPlayerChat(playerid)
{
	for(new i = 0; i != 32; i++) SendClientMessage(playerid, -1, " ");
	return 1;
}

RegisterBankAccountTransaction(from_id, to_id, transaction_type, amount)
{
	new date[24];
	getDateTime(date);
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bank_movements (date, type, from_id, to_id, amount) VALUES('%e', %d, %d, %d, %d);", date, transaction_type, from_id, to_id, amount);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}

RegisterNewPlayer(playerid)
{
	if(PLAYER_TEMP[playerid][pt_USER_EXIST]) return 0;

	inline OnPlayerInserted()
	{
		PI[playerid][pi_ID] = cache_insert_id();
		if(PI[playerid][pi_ID])
		{
			PLAYER_TEMP[playerid][pt_USER_EXIST] = true;
			PI[playerid][pi_PHONE_NUMBER] = getPhoneNumber(PI[playerid][pi_ID]);
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET phone_number = %d WHERE id = %d;", PI[playerid][pi_PHONE_NUMBER], PI[playerid][pi_ID]);
			mysql_tquery(mysql_db, QUERY_BUFFER);
			CreateDefaultContacts(playerid);
			CallLocalFunction("OnPlayerRegister", "i", playerid);
		}
		else Kick(playerid);
		return 1;
	}

	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO player\
			(\
				name,\
				ip,\
				email,\
				salt,\
				pass,\
				reg_date,\
				last_connection,\
				last_connection_timestamp,\
				level,\
				rep,\
				connected,\
				playerid,\
				time_for_rep,\
				skin,\
				cash,\
				pos_x,\
				pos_y,\
				pos_z,\
				angle,\
				state,\
				fight_style,\
				health,\
				hungry,\
				thirst,\
				config_sounds,\
				config_audio,\
				config_time,\
				config_hud,\
				config_admin,\
				config_auto_login,\
				phone_visible_number,\
				doubt_channel,\
				doubt_channel_tw\
			) \
			VALUES\
			(\
				'%e', '%e', '%e', '%e', '%e', '%e', '%e', %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %d, %d, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d, %d, %d\
			);\
		",
			PI[playerid][pi_NAME], PI[playerid][pi_IP], PI[playerid][pi_EMAIL], PI[playerid][pi_SALT],
			PI[playerid][pi_PASS], PI[playerid][pi_REG_DATE], PI[playerid][pi_LAST_CONNECTION], PI[playerid][pi_LAST_CONNECTION_TIMESTAMP],
			PI[playerid][pi_LEVEL], PI[playerid][pi_REP], PI[playerid][pi_CONNECTED], PI[playerid][pi_PLAYERID],
			PI[playerid][pi_TIME_FOR_REP], PI[playerid][pi_SKIN], PI[playerid][pi_CASH],
			PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_STATE],
			PI[playerid][pi_FIGHT_STYLE], PI[playerid][pi_HEALTH], PI[playerid][pi_HUNGRY], PI[playerid][pi_THIRST],
			PI[playerid][pi_CONFIG_SOUNDS], PI[playerid][pi_CONFIG_AUDIO], PI[playerid][pi_CONFIG_TIME],
			PI[playerid][pi_CONFIG_HUD], PI[playerid][pi_CONFIG_ADMIN], PI[playerid][pi_CONFIG_AUTO_LOGIN],
			PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_DOUBT_CHANNEL], PI[playerid][pi_DOUBT_CHANNEL_TW]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerInserted);
	return 1;
}

CreateDefaultContacts(playerid)
{
	new slot;
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Policia");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 911;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Banco");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 6740;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Aseguradora");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 38350;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;

	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_VALID] = true;
	format(PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], 24, "Taxi");
	PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER] = 450;
	RegisterNewPlayerPhoneBook(playerid, slot);
	slot ++;
	return 1;
}
SendClientMessageEx(playerid, colour, message[], {Float, _}:...)
{
	new out[145];
	format(out, sizeof(out), message, ___(3));
	return SendClientMessage(playerid, colour, out);
}
Congelar(playerid)
{
	return TogglePlayerControllableEx(playerid, false);
}
Descongelar(playerid)
{
	return TogglePlayerControllableEx(playerid, true);
}
stock ShowPlayerMessage(playerid, text[], time)
{
	KillTimer(PLAYER_TEMP[playerid][pt_InfoTimer]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText]);
	FixTextDrawString(text);

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], text);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText]);
	InfoTextShowing[playerid] = 1;
	PLAYER_TEMP[playerid][pt_InfoTimer] = SetTimerEx("HideInfoForPlayer", time, false, "i", playerid);
	return 1;
}
forward HideInfoForPlayer(playerid);
public HideInfoForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText]);
	InfoTextShowing[playerid] = 0;
	return 1;
}
stock TimeConvert(seconds)
{
	new tmp[16];
 	new minutes = floatround(seconds/60);
  	seconds -= minutes*60;
   	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
   	return tmp;
}

stock TimeConvertEx(sec, &days, &hours, &minutes, &seconds)
{
	days = floatround(sec / 86400);
	hours = floatround((sec - (days * 86400)) / 3600);
	minutes = floatround((sec - (days * 86400) - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

stock TimeConvertExAsText(sec, bool:lastMinute = false)
{
	new string[128] = "", auxString[32];

	if(lastMinute && sec < 60)
	{
		string = "menos de 1 minuto";
		return string;
	}

	if(sec <= 0)
	{
		string = "nada";
		return string;
	}

	new days, hours, minutes, seconds;
	TimeConvertEx(sec, days, hours, minutes, seconds);

	if(days)
	{
		format(auxString, sizeof auxString, "%d días", days);
		strcat(string, auxString);
	}

	if(hours)
	{
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d horas", hours);
		strcat(string, auxString);
	}

	if(minutes)
	{
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d minutos", minutes);
		strcat(string, auxString);
	}

	if(seconds)
	{
		if(strlen(string) > 0) strcat(string, " ");
		format(auxString, sizeof auxString, "%d segundos", seconds);
		strcat(string, auxString);
	}
   	return string;
}

ProxDetector(playerid, Float:radi, string[], col1, col2, col3, col4, col5, div = 0)
{
	new line1_str[165], line2_str[165], bool:line2_used;

	if(div)
	{
		format(line1_str, div + 1, "%s", string);
		if(strlen(string) > div)
		{
			format(line2_str, sizeof line2_str, " %s", string[div]);
			line2_used = true;
		}
	}
	else format(line1_str, sizeof line1_str, "%s", string);

	new Float:oldposx, Float:oldposy, Float:oldposz, current_vw = GetPlayerVirtualWorld(playerid), current_int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;

		if(IsPlayerInRangeOfPoint(i, radi/16, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col1, line1_str);
			if(div && line2_used) SendClientMessage(i, col1, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/8, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col2, line1_str);
			if(div && line2_used) SendClientMessage(i, col2, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/4, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col3, line1_str);
			if(div && line2_used) SendClientMessage(i, col3, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi/2, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col4, line1_str);
			if(div && line2_used) SendClientMessage(i, col4, line2_str);
		}
		else if(IsPlayerInRangeOfPoint(i, radi, oldposx, oldposy, oldposz))
		{
			SendClientMessage(i, col5, line1_str);
			if(div && line2_used) SendClientMessage(i, col5, line2_str);
		}
	}
	return 1;
}

NearbyMessage(Float:pos_x, Float:pos_y, Float:pos_z, current_int, current_vw, Float:radi, col, string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!PLAYER_TEMP[i][pt_USER_LOGGED]) continue;
		if(GetPlayerVirtualWorld(i) != current_vw) continue;
		if(GetPlayerInterior(i) != current_int) continue;

		if(IsPlayerInRangeOfPoint(i, radi, pos_x, pos_y, pos_z)) SendClientMessage(i, col, string);
	}
	return 1;
}

IsValidRPName(const string[])
{
	new Regex:reg_exp = Regex_New("[A-Z][a-z]+_[A-Z][a-z]{1,3}[A-Z]?[a-z]*");
	new result = Regex_Check(string, reg_exp);
	Regex_Delete(reg_exp);
	return result;
}

IsValidEmail(const string[])
{
	new Regex:reg_exp = Regex_New("[a-zA-Z0-9_\\.]+@([a-zA-Z0-9\\-]+\\.)+[a-zA-Z]{2,4}");
	new result = Regex_Check(string, reg_exp);
	Regex_Delete(reg_exp);
	return result;
}

/*
IsValidName(name[])
{
	for(new c = 0; c < strlen(name); c++)
	{
		switch(name[c])
		{
			case 'A' .. 'Z', 'a' .. 'z', '_': continue;
			default: return false;
		}
	}
	return true;
}
*/
forward PaydayDado(playerid);
public PaydayDado(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_PAYDAY_DADO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY]);
	return 1;
}

KickEx(playerid, time = 0)
{
	PLAYER_TEMP[playerid][pt_KICKED] = true;
	if(!time) Kick(playerid);
	else
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][0]);
		PLAYER_TEMP[playerid][pt_TIMERS][0] = SetTimerEx("KickPlayer", time, false, "i", playerid);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	return Kick(playerid);
}

SetRolePlayNames(playerid)
{
	if(isnull(PLAYER_TEMP[playerid][pt_NAME])) return 0;

	new name[24], bool:underscore;
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	format(PLAYER_TEMP[playerid][pt_RP_NAME], 24, "%s", name);
	for(new i = 0; i < 24; i++)
	{
		if(name[i] == '_')
		{
			PLAYER_TEMP[playerid][pt_RP_NAME][i] = ' ';
			if(!underscore)
			{
				strmid(PLAYER_TEMP[playerid][pt_FIRST_NAME], name, 0, i);
				strmid(PLAYER_TEMP[playerid][pt_SUB_NAME], name, i + 1, 24);
				underscore = true;
			}
		}
	}
	return 1;
}

RP_GetPlayerName(playerid)
{
	new name[24];
	format(name, 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	for(new i = 0; i < 24; i++) 
	{
		if(name[i] == '_') name[i] = ' ';
	}

	return name;
}

LoadPlayerPhoneBook(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPhoneBookLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], number;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "number", number);

				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID] = true;
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_ID] = id;
				format(PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME], 24, "%s", name);
				PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER] = number;
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pbook WHERE id_player = %d LIMIT %d;", PI[playerid][pi_ID], MAX_PHONE_CONTACTS);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPhoneBookLoad);
	return 1;
}

RegisterNewPlayerPhoneBook(playerid, slot)
{
	inline OnContactInserted()
	{
		PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_ID] = cache_insert_id();
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pbook (id_player, name, number) VALUES (%d, '%e', %d);", PI[playerid][pi_ID], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_NAME], PLAYER_PHONE_BOOK[playerid][slot][phone_book_contact_PHONE_NUMBER]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnContactInserted);
	return 1;
}

RegisterPhoneMessage(from_id, to_id, message[], offline = 0)
{
	new date[24], from_id_insert[24] = "NULL", to_id_insert[24] = "NULL";
	getDateTime(date);
	if(from_id) format(from_id_insert, 24, "%d", from_id);
	if(to_id) format(to_id_insert, 24, "%d", to_id);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pmessages (from_id, to_id, message, date, offline) VALUES (%s, %s, '%e', '%e', %d);", from_id_insert, to_id_insert, message, date, offline);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}


forward NoCallResponse(playerid);
public NoCallResponse(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] != CALL_STATE_WAITING_RESPONSE) return 0;

	EndPhoneCall(playerid);
	return 1;
}

EndPhoneCall(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) return 0;

	if(PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] || PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION])
	{
		PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_NAME] = false;
		PLAYER_TEMP[playerid][pt_POLICE_CALL_DESCRIPTION] = false;
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] == INVALID_PLAYER_ID) return 0;
	if(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] == CALL_GAME_STATE_NONE) return 0;

	new to_playerid = PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID];
	switch(PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE])
	{
		case CALL_STATE_WAITING_RESPONSE:
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][5]);

			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_INCOMING_CALL:
		{
			SendClientMessage(to_playerid, -1, "{"#SILVER_COLOR"}No respondieron el teléfono...");
			KillTimer(PLAYER_TEMP[to_playerid][pt_TIMERS][5]);

			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
		}
		case CALL_STATE_ESTABLISHED:
		{
			SendClientMessage(to_playerid, -1, "{"#PRIMARY_COLOR"}Llamada finalizada.");
			PLAYER_TEMP[to_playerid][pt_PLAYER_IN_CALL] = false;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
			PLAYER_TEMP[to_playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(to_playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}

	PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_STATE] = CALL_GAME_STATE_NONE;
	PLAYER_TEMP[playerid][pt_PLAYER_PHONE_CALL_PLAYERID] = INVALID_PLAYER_ID;
	return 1;
}

convertPhoneNumber(playerid, number)
{
	new f_string[24], bool:exists;
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) continue;
		if(number == PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_PHONE_NUMBER])
		{
			exists = true;
			format(f_string, sizeof f_string, "%s", PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_NAME]);
			break;
		}
	}

	if(!exists) format(f_string, sizeof f_string, "%d", number);
	return f_string;
}

GetEmptyPlayerPhoneBookSlot(playerid)
{
	for(new i = 0; i != MAX_PHONE_CONTACTS; i ++)
	{
		if(!PLAYER_PHONE_BOOK[playerid][i][phone_book_contact_VALID]) return i;
	}
	return -1;
}

RegisterNewPlayerPocketObject(playerid, slot)
{
	inline OnPfoodInserted()
	{
		PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = cache_insert_id();
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pfoods (id_player, name, hungry, thirst, drunk) VALUES (%d, '%e', %f, %f, %d);", PI[playerid][pi_ID], PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY], PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST], PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPfoodInserted);
	return 1;
}

LoadPlayerPocketData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPfoodsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_POCKET[playerid][i][player_pocket_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_POCKET[playerid][i][player_pocket_object_ID]);
				cache_get_value_name(i, "name", PLAYER_POCKET[playerid][i][player_pocket_object_NAME]);
				cache_get_value_name_float(i, "hungry", PLAYER_POCKET[playerid][i][player_pocket_object_HUNGRY]);
				cache_get_value_name_float(i, "thirst", PLAYER_POCKET[playerid][i][player_pocket_object_THIRST]);
				cache_get_value_name_int(i, "drunk", PLAYER_POCKET[playerid][i][player_pocket_object_DRUNK]);
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pfoods WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPfoodsLoad);
	return 1;
}

TransferPlayerPocketObject(from_playerid, from_slot, to_playerid, to_slot)
{
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pfoods SET id_player = %d WHERE id = %d;", PI[to_playerid][pi_ID], PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PLAYER_POCKET[to_playerid][to_slot][player_pocket_VALID] = true;
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_ID] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID];
	format(PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_NAME], 24, "%s", PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME]);
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_HUNGRY] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_THIRST] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST];
	PLAYER_POCKET[to_playerid][to_slot][player_pocket_object_DRUNK] = PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK];

	PLAYER_POCKET[from_playerid][from_slot][player_pocket_VALID] = false;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[from_playerid][from_slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

DeletePlayerPocketObject(playerid, slot)
{
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pfoods WHERE id = %d;", PLAYER_POCKET[playerid][slot][player_pocket_object_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PLAYER_POCKET[playerid][slot][player_pocket_VALID] = false;
	PLAYER_POCKET[playerid][slot][player_pocket_object_ID] = 0;
	format(PLAYER_POCKET[playerid][slot][player_pocket_object_NAME], 24, "");
	PLAYER_POCKET[playerid][slot][player_pocket_object_HUNGRY] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_THIRST] = 0.0;
	PLAYER_POCKET[playerid][slot][player_pocket_object_DRUNK] = 0;
	return 1;
}

GetEmptyPlayerPocketSlot(playerid)
{
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(!PLAYER_POCKET[playerid][i][player_pocket_VALID]) return i;
	}
	return -1;
}

LoadPlayerGPSData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPgpsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				PLAYER_GPS[playerid][i][player_gps_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_GPS[playerid][i][player_gps_ID]);
				cache_get_value_name(i, "name", PLAYER_GPS[playerid][i][player_gps_NAME]);
				cache_get_value_name_float(i, "x", PLAYER_GPS[playerid][i][player_gps_X]);
				cache_get_value_name_float(i, "y", PLAYER_GPS[playerid][i][player_gps_Y]);
				cache_get_value_name_float(i, "z", PLAYER_GPS[playerid][i][player_gps_Z]);
				cache_get_value_name_int(i, "world", PLAYER_GPS[playerid][i][player_gps_WORLD]);
				cache_get_value_name_int(i, "interior", PLAYER_GPS[playerid][i][player_gps_INTERIOR]);

			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pgps WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPgpsLoad);
	return 1;
}

LoadPlayerToys(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPlayerToysLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU2_TOYS)
				{
					printf("---> MAX_SU2_TOYS superado al cargar de base de datos.");
					break;
				}

				PLAYER_TOYS[playerid][i][player_toy_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_TOYS[playerid][i][player_toy_ID]);
				cache_get_value_name(i, "name", PLAYER_TOYS[playerid][i][player_toy_NAME]);
				cache_get_value_name_int(i, "attached", PLAYER_TOYS[playerid][i][player_toy_ATTACHED]);
				cache_get_value_name_int(i, "modelid", PLAYER_TOYS[playerid][i][player_toy_MODELID]);
				cache_get_value_name_int(i, "bone", PLAYER_TOYS[playerid][i][player_toy_BONE]);
				cache_get_value_name_float(i, "offset_x", PLAYER_TOYS[playerid][i][player_toy_OFFSET_X]);
				cache_get_value_name_float(i, "offset_y", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y]);
				cache_get_value_name_float(i, "offset_z", PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z]);
				cache_get_value_name_float(i, "rot_x", PLAYER_TOYS[playerid][i][player_toy_ROT_X]);
				cache_get_value_name_float(i, "rot_y", PLAYER_TOYS[playerid][i][player_toy_ROT_Y]);
				cache_get_value_name_float(i, "rot_z", PLAYER_TOYS[playerid][i][player_toy_ROT_Z]);
				cache_get_value_name_float(i, "scale_x", PLAYER_TOYS[playerid][i][player_toy_SCALE_X]);
				cache_get_value_name_float(i, "scale_y", PLAYER_TOYS[playerid][i][player_toy_SCALE_Y]);
				cache_get_value_name_float(i, "scale_z", PLAYER_TOYS[playerid][i][player_toy_SCALE_Z]);
				cache_get_value_name_int(i, "color1", PLAYER_TOYS[playerid][i][player_toy_COLOR_1]);
				cache_get_value_name_int(i, "color2", PLAYER_TOYS[playerid][i][player_toy_COLOR_2]);
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM ptoys WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerToysLoad);
	return 1;
}

SavePlayerToys(playerid)
{
	if(!PI[playerid][pi_ID]) return 0;

	for(new i = 0; i != MAX_SU2_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) continue;
		mysql_format
		(
			mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
			"\
				UPDATE ptoys SET \
					name = '%e',\
					attached = %d,\
					modelid = %d,\
					bone = %d,\
					offset_x = %f,\
					offset_y = %f,\
					offset_z = %f,\
					rot_x = %f,\
					rot_y = %f,\
					rot_z = %f,\
					scale_x = %f,\
					scale_y = %f,\
					scale_z = %f,\
					color1 = %d,\
					color2 = %d \
				WHERE id = %d;\
			",
			PLAYER_TOYS[playerid][i][player_toy_NAME], PLAYER_TOYS[playerid][i][player_toy_ATTACHED], PLAYER_TOYS[playerid][i][player_toy_MODELID],
			PLAYER_TOYS[playerid][i][player_toy_BONE], PLAYER_TOYS[playerid][i][player_toy_OFFSET_X], PLAYER_TOYS[playerid][i][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][i][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][i][player_toy_ROT_X], PLAYER_TOYS[playerid][i][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][i][player_toy_ROT_Z], PLAYER_TOYS[playerid][i][player_toy_SCALE_X], PLAYER_TOYS[playerid][i][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][i][player_toy_SCALE_Z], PLAYER_TOYS[playerid][i][player_toy_COLOR_1], PLAYER_TOYS[playerid][i][player_toy_COLOR_2],
			PLAYER_TOYS[playerid][i][player_toy_ID]
		);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	return 1;
}

GetEmptyPlayerToySlot(playerid)
{
	for(new i = 0; i != MAX_SU2_TOYS; i ++)
	{
		if(!PLAYER_TOYS[playerid][i][player_toy_VALID]) return i;
	}
	return -1;
}

stock minrand(min, max)
{
	return random(max - min) + min;
}

stock ConvertTime_SecondsToHours(sec, &hours, &minutes, &seconds)
{
	hours = floatround(sec / 3600);
	minutes = floatround((sec - (hours * 3600)) / 60);
	seconds = sec % 60;
   	return 1;
}

CreatePlayerTextdraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++) PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;

	if(PLAYER_TEMP[playerid][pt_Plataforma]) //ANDROID
	{
	    PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM] = CreatePlayerTextDraw(playerid, 320.0, 20.0, "~w~?? TV EN VIVO ~n~~g~CANAL ACTIVO");
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 1);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 0xFFFFFFAA);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 0x000000AA);
		PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], true);
		PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 0x00000066);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 2);
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 0.4, 1.3);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM], 1);
	
		PlayerTextdraws[playerid][ptextdraw_SERVER_TIME] = CreatePlayerTextDraw(playerid, 535.000000, 20.000000, "00:00");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 0.585666, 2.189037);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], -1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 2);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 3);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 1);

		PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT] = CreatePlayerTextDraw(playerid, 52.097808, 132.183731, "Ganton");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 0.330000, 1.250000);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], -1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);

		PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH] = CreatePlayerTextDraw(playerid, 537.740966, 63.566943, "100~r~~n~95");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 0.257001, 1.090000);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 0xFF0000FF);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
	}
	else //PC
	{
		PlayerTextdraws[playerid][ptextdraw_SERVER_TIME] = CreatePlayerTextDraw(playerid, 578.000000, 20.000000, "00:00");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 0.585666, 2.189037);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], -1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 2);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 3);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME], 1);

		PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT] = CreatePlayerTextDraw(playerid, 88.262763, 425.716857, "Ganton");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 0.330000, 1.250000);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], -1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT], 1);

		PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH] = CreatePlayerTextDraw(playerid, 578.740966, 44.366943, "100~r~~n~95");
		PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 0.257001, 1.090000);
		PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 2);
		PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], -1);
		PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 0);
		PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
		PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 255);
		PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
		PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], 1);
	}
	
	PlayerTextdraws[playerid][pSpeedoTd][0] = CreatePlayerTextDraw(playerid, 552.500000, 344.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0.000000, 8.133330);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 150);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0);

	PlayerTextdraws[playerid][pSpeedoTd][1] = CreatePlayerTextDraw(playerid, 552.500000, 344.000000, "Velocimetro");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0.198999, 1.015113);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0x6e657cff);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);

	PlayerTextdraws[playerid][pSpeedoTd][2] = CreatePlayerTextDraw(playerid, 503.000000, 359.000000, "Vehiculo:_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 0.244666, 1.234962);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 0);

	PlayerTextdraws[playerid][pSpeedoTd][3] = CreatePlayerTextDraw(playerid, 503.000000, 369.000000, "Gasolina:_0.0_Litros");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 0.244666, 1.234962);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 0);

	PlayerTextdraws[playerid][pSpeedoTd][4] = CreatePlayerTextDraw(playerid, 503.000000, 390.000000, "Velocidad:_0_Km/h");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 0.244666, 1.234962);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 0);

	PlayerTextdraws[playerid][pSpeedoTd][5] = CreatePlayerTextDraw(playerid, 503.000000, 401.000000, "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 0.244666, 1.234962);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 0);

	/*PlayerTextdraws[playerid][pSpeedoTd][0] = CreatePlayerTextDraw(playerid, 319.956085, 363.435211, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0.001338, 6.565605);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], -1.109997, 176.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], -192);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][0], 1);

	PlayerTextdraws[playerid][pSpeedoTd][1] = CreatePlayerTextDraw(playerid, 340.468872, 360.900421, "infernus");
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 411);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 0.000000, 0.000000, -35.000000, 1.299998);
	PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][pSpeedoTd][1], 1, 1);

	PlayerTextdraws[playerid][pSpeedoTd][2] = CreatePlayerTextDraw(playerid, 321.101898, 395.969696, "50.0_Litros");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 0.249440, 1.553332);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][2], 1);

	PlayerTextdraws[playerid][pSpeedoTd][3] = CreatePlayerTextDraw(playerid, 320.201843, 372.268249, "12_KM/H");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 0.366000, 1.659999);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][3], 1);

	PlayerTextdraws[playerid][pSpeedoTd][4] = CreatePlayerTextDraw(playerid, 232.011367, 332.502044, "_IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 0.403897, 2.384998);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 407.628875, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], -176);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][4], 1);

	PlayerTextdraws[playerid][pSpeedoTd][5] = CreatePlayerTextDraw(playerid, 258.477478, 372.816986, "~g~~h~Motor");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 0.301999, 1.560000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 57.890018, 47.260459);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][5], 1);

	PlayerTextdraws[playerid][pSpeedoTd][6] = CreatePlayerTextDraw(playerid, 258.525695, 398.150177, "~g~~h~Abierto");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 0.254001, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 0.000000, 46.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][6], 1);

	PlayerTextdraws[playerid][pSpeedoTd][7] = CreatePlayerTextDraw(playerid, 383.446777, 374.400299, "~g~~h~Luces");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 0.287999, 1.380000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 0.000000, 41.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][pSpeedoTd][7], 1);*/

	PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0] = CreatePlayerTextDraw(playerid, 1.859441, 169.683898, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 0.000000, 1.385409);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 5.639990, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], -2139094785);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0], 1);

	PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1] = CreatePlayerTextDraw(playerid, 9.783569, 169.617156, "En_servicio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 0.350104, 1.379999);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 71.319213, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1], 1);

	PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0] = CreatePlayerTextDraw(playerid, 1.859442, 146.082458, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 0.000000, 1.385410);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 5.639991, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][0], 1);

	PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1] = CreatePlayerTextDraw(playerid, 9.783569, 146.015716, "Olor_a_culo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 0.350105, 1.380000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], floatadd(7.000000, 107.0), 1.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 50);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_TERRI][1], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][0] = CreatePlayerTextDraw(playerid, 528.356018, 187.312973, "hud:radar_catalinapink");//agenda
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 14.169981, 13.429986);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 16711935);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][0], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][1] = CreatePlayerTextDraw(playerid, 548.300170, 184.262878, "hud:radar_impound");//coches
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 12.379982, 15.689990);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][1], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][2] = CreatePlayerTextDraw(playerid, 565.646972, 188.613021, "hud:arrow");//gps
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][2], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][3] = CreatePlayerTextDraw(playerid, 582.568298, 189.397293, "hud:radar_cash");//BVVA
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 10.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][3], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][4] = CreatePlayerTextDraw(playerid, 529.377075, 221.396881, "hud:radar_police");//911
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][4], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][5] = CreatePlayerTextDraw(playerid, 547.272705, 221.796905, "hud:radar_modgarage");//Meca
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][5], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][6] = CreatePlayerTextDraw(playerid, 564.137207, 221.796905, "hud:radar_toreno");//Taxis
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 10.260097, 16.180049);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][6], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][7] = CreatePlayerTextDraw(playerid, 581.135253, 223.279174, "hud:radar_hostpital");//Medic
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 9.864932, 14.276806);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][7], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][8] = CreatePlayerTextDraw(playerid, 534.197814, 258.868377, "SMS");//MSJ
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 0.199097, 1.889165);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], -5963521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 3);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][8], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][9] = CreatePlayerTextDraw(playerid, 548.472412, 259.499206, "hud:radar_dateDisco");//CONFIG
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][9], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][10] = CreatePlayerTextDraw(playerid, 566.667968, 258.599151, "hud:radar_enemyAttack");//Mapa
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][10], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][11] = CreatePlayerTextDraw(playerid, 582.864013, 258.599151, "hud:radar_propertyg");//Casas
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][11], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][12] = CreatePlayerTextDraw(playerid, 528.515258, 293.599243, "hud:radar_qmark");//Help
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][12], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][13] = CreatePlayerTextDraw(playerid, 550.860717, 292.816558, "M");//Market
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 0.428460, 2.209166);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][13], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][14] = CreatePlayerTextDraw(playerid, 529.178466, 335.113708, "hud:radar_woozie");//WSP
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 16711935);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][14], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][15] = CreatePlayerTextDraw(playerid, 553.152282, 334.186431, "TW");//Twitter
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 0.205374, 1.695001);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 10289151);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 3);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][15], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][16] = CreatePlayerTextDraw(playerid, 566.796936, 336.983520, "hud:radar_sweet");//Spotify
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 9.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 16711935);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][16], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][17] = CreatePlayerTextDraw(playerid, 582.064025, 334.365966, "hud:radar_light");//OFF
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 9.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][17], true);

	PlayerTextdraws[playerid][ptextdraw_iPhone][18] = CreatePlayerTextDraw(playerid, 527.005676, 202.316604, "AGEND_COCHES__GPS__BBVA");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 0.148403, 1.156664);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][18], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][19] = CreatePlayerTextDraw(playerid, 528.523315, 239.700027, "911__MECA__TAXIS_MEDIC");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 0.166262, 1.117498);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][19], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][20] = CreatePlayerTextDraw(playerid, 527.123657, 277.233428, "MSJ__CONFI_MAPA_CASAS");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 0.166262, 1.117498);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][20], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][21] = CreatePlayerTextDraw(playerid, 528.523315, 350.533355, "WSP__TWITT__SPT__OFF");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 0.166262, 1.117498);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][21], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][22] = CreatePlayerTextDraw(playerid, 527.123657, 311.535522, "HELP_MARKET");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 0.166262, 1.117498);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][22], 1);

	PlayerTextdraws[playerid][ptextdraw_iPhone][23] = CreatePlayerTextDraw(playerid, 560.903503, 342.434112, "Pulsa ~y~Y~w~ para desbloquear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 0.155522, 1.080833);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 60.666652, 66.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 80);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], 1);

	PlayerTextdraws[playerid][ptextdraw_PING] = CreatePlayerTextDraw(playerid, 18.000000, 396.000000, "Ping");
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 1);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 0.380000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PING], -1);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PING], 0);

	PlayerTextdraws[playerid][ptextdraw_InfoText] = CreatePlayerTextDraw(playerid, 316.000000, 384.000000, "_");
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 70);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 1);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 0.290000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], -1);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_InfoText], 1);
	InfoTextShowing[playerid] = 0;

	PlayerTextdraws[playerid][ptextdraw_PAYDAY] = CreatePlayerTextDraw(playerid, 637.642944, 183.583389, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 0.252884, 1.588332);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], 1);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0.000000, 100.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 368.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1], 0);

	PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2] = CreatePlayerTextDraw(playerid, 272.000000, 382.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0.400000, 1.127111);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], -16777123);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 27.410259, 5.897183);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 145);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0.361666, 1.400889);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 90);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "COMPRAR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -201); // Money = 9306312   ,  -1459617611  No money
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "SIGUIENTE");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "ANTERIOR");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0.193666, 0.915556);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 10.000000, 34.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], -132);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4], true);

	PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Precio:_0$~n~Ropa:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0.171666, 0.782815);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], -86);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], 0);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0] = CreatePlayerTextDraw(playerid, 320.000000, 298.000000, "l");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 33.579376, 12.750882);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], -16777104);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 336860210);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0], 1);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1] = CreatePlayerTextDraw(playerid, 319.399963, 307.499481, "Ropa_del_personaje");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0.455998, 1.749999);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1], 1);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2] = CreatePlayerTextDraw(playerid, 290.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -94);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], 1);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3] = CreatePlayerTextDraw(playerid, 290.000000, 342.000000, "hombre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0.221999, 1.147850);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4] = CreatePlayerTextDraw(playerid, 350.000000, 340.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.221999, 1.558518);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -94);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], 1);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5] = CreatePlayerTextDraw(playerid, 350.000000, 342.000000, "mujer");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0.221999, 1.147850);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 13.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "Continuar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0.221999, 1.147850);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6], true);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7] = CreatePlayerTextDraw(playerid, 401.083923, 347.153350, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], true);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 19133);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7], 0.000000, 90.000000, 90.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8] = CreatePlayerTextDraw(playerid, 141.445999, 347.053344, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 90.000000, 90.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], true);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 19133);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8], 0.000000, -90.000000, 90.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9] = CreatePlayerTextDraw(playerid, 320.000000, 380.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0.158000, 0.770370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], -171);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], 1);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0] = CreatePlayerTextDraw(playerid, 320.000000, 159.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 15.033352);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1869574143);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1] = CreatePlayerTextDraw(playerid, 320.000000, 156.000000, "Tienda");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2] = CreatePlayerTextDraw(playerid, 215.000000, 184.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 80.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], -19201);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 18864);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3] = CreatePlayerTextDraw(playerid, 217.000000, 186.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 76.000000, 81.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], -926365441);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 5);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[0][shop_toy_model]);
	PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], 344.000000, 0.000000, 109.000000, 1.000000);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4] = CreatePlayerTextDraw(playerid, 311.000000, 207.000000, "Modelo:__~n~Precio:__$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0.219000, 1.081481);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5] = CreatePlayerTextDraw(playerid, 363.000000, 233.000000, "Comprar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 13.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775); // sin dinero color = -900267777
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6] = CreatePlayerTextDraw(playerid, 404.000000, 233.000000, ">>");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7] = CreatePlayerTextDraw(playerid, 322.000000, 233.000000, "<<");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0.188333, 1.189333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 13.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], -1094795521);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 2);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7], true);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8] = CreatePlayerTextDraw(playerid, 255.000000, 271.000000, "0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0.163666, 0.832593);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], -66);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], 0);

	PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9] = CreatePlayerTextDraw(playerid, 320.000000, 284.000000, "Accesorios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0.000000, 240.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], -1633916417);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0] = CreatePlayerTextDraw(playerid, 553.000000, 176.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 8.766664);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0.000000, 108.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][0], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1] = CreatePlayerTextDraw(playerid, 505.000000, 181.000000, "Interior:_0/0");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0.300000, 1.438221);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], 0);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2] = CreatePlayerTextDraw(playerid, 505.000000, 206.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 546.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3] = CreatePlayerTextDraw(playerid, 555.000000, 206.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 600.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4] = CreatePlayerTextDraw(playerid, 505.000000, 230.000000, "Crear");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 533.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4], true);

	PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5] = CreatePlayerTextDraw(playerid, 542.000000, 230.000000, "Cancelar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0.300000, 1.438221);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 583.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1684301055);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5], true);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0] = CreatePlayerTextDraw(playerid, 320.000000, 317.000000, "Cargando_camión...");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0.255666, 1.176888);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1] = CreatePlayerTextDraw(playerid, 250.000000, 332.000000, "Borde");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0.000000, 3.766666);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 390.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Abajo");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 387.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], -594542436);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3] = CreatePlayerTextDraw(playerid, 253.000000, 336.000000, "Sellena");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0.000000, 2.866667);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 250.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], -594542357);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0] = CreatePlayerTextDraw(playerid, 320.000000, 315.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0.298999, 1.483852);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], -161);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0.000000, 130.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 2021161125);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1], 0);

	PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2] = CreatePlayerTextDraw(playerid, 320.000000, 333.000000, "box");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.766669);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1988896255);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0);

	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0] = CreatePlayerTextDraw(playerid, 604.000000, 126.000000, "]]]]]]");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0.491999, 1.960886);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 95);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0], 0);

	PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1] = CreatePlayerTextDraw(playerid, 604.000000, 126.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0.491999, 1.960886);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], -336860171);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0] = CreatePlayerTextDraw(playerid, 275.000000, 325.000000, "+_Publicar_anuncio");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1] = CreatePlayerTextDraw(playerid, 365.000000, 325.000000, "-_Mis_anuncios");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 10.000000, 80.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2] = CreatePlayerTextDraw(playerid, 320.000000, 307.000000, "Cerrar");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3] = CreatePlayerTextDraw(playerid, 380.000000, 307.000000, "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4] = CreatePlayerTextDraw(playerid, 260.000000, 307.000000, "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0.223666, 1.139557);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 10.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 190);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], true);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE] = CreatePlayerTextDraw(playerid, 320.000000, 134.000000, "-_0/0_-");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0.169000, 0.766222);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER] = CreatePlayerTextDraw(playerid, 320.000000, 152.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0.214666, 0.936296);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], 0);

	PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO] = CreatePlayerTextDraw(playerid, 321.000000, 181.000000, "");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0.259333, 1.181036);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], -36);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], 0);

	PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "Objeto:_0/0~n~Precio:_0$");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0.200333, 1.098074);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], -121);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], 0);


	PlayerTextdraws[playerid][ptextdraw_MESSAGE] = CreatePlayerTextDraw(playerid, 320.000000, 365.000000, "_");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0.298333, 1.376000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], 0);

	PlayerTextdraws[playerid][ptextdraw_DAMAGE][0] = CreatePlayerTextDraw(playerid, 443.206420, 361.783081, "_");//AGREDIDO
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 0.191088, 1.535832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], -16776961);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], 1);

	PlayerTextdraws[playerid][ptextdraw_DAMAGE][1] = CreatePlayerTextDraw(playerid, 156.939971, 361.783081, "_");//ATACANTE
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 0.191088, 1.535832);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 16711935);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1], 1);

	PlayerTextdraws[playerid][ptextdraw_HUD][0] = CreatePlayerTextDraw(playerid, 0.000000, 446.000000, "barraReputacion");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.000000, 0.500000);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0xCC46DCFF);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][1] = CreatePlayerTextDraw(playerid, 500.699981, 104.000000, "barraHambre");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0.000000, 0.238333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 500.699981, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0xE612B9FF);//1923088639
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][2] = CreatePlayerTextDraw(playerid, 557.699981, 104.000000, "barraSed");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0.000000, 0.238333);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 557.699981, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], -1);
	PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0x1DF5EBFF);//12124080
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], 0);

	PlayerTextdraws[playerid][ptextdraw_HUD][3] = CreatePlayerTextDraw(playerid, 320.000000, 433.000000, "Siguiente_nivel:");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0.169666, 0.832592);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], 1);
	return 1;
}

DestroyPlayerTextdraws(playerid)
{
	for(new i; i < sizeof(PlayerTextdraws[]); i++)
	{
		if(PlayerTextdraws[playerid][Player_Textdraws_Enum:i] == INVALID_TEXT_DRAW) continue;
		PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][Player_Textdraws_Enum:i]);
		PlayerTextdraws[playerid][Player_Textdraws_Enum:i] = INVALID_TEXT_DRAW;
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float: fX, Float: fY, Float: fZ)
{
 	if(PI[playerid][pi_ADMIN_LEVEL] > 3 && PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehiclePosEx(vehicleid, fX, fY, fZ);
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		}
		else SetPlayerPos(playerid, fX, fY, fZ);
		SendNotification(playerid, "Te has teletransportado.");
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;

		if(PLAYER_TEMP[playerid][pt_EN_INTRO])
		{
			if(PLAYER_TEMP[playerid][pt_USER_EXIST])
			{
				if(PI[playerid][pi_CONFIG_AUTO_LOGIN] && PLAYER_TEMP[playerid][pt_AUTO_LOGGED])
				{
					CallLocalFunction("GetPlayerCache", "i", playerid);

					PLAYER_TEMP[playerid][pt_EN_INTRO] = false;
					CancelSelectTextDrawEx(playerid);
					GameTextForPlayer(playerid, "~y~cargando...", 10000, 3);
					return 1;
				}
				else
				{
					TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
					TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][1]);

					TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][2]);
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][3]);

					ShowDialog(playerid, DIALOG_LOGIN);
				}
				return 1;
			}
			else ShowDialog(playerid, DIALOG_REGISTER);
			return 1;
		}

		if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
		{
			SendNotification(playerid, "Antes de continuar debes leer el tutorial de conceptos.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}

		if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
		{
			SendNotification(playerid, "Antes de continuar debes elegir tu sexo y tu ropa.");
			SelectTextDrawEx(playerid, 0xe8d08fFF);
			return 1;
		}

		if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}

		if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
		{
			HidePlayeriPhone(playerid);
			HidePlayeriPhoneApps(playerid);
		}

		if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1) // Tiene abierto el menú de ropa
		{
			ClosePlayerClothingMenu(playerid);
			ExitPlayerWardrobe(playerid);
		}

		if(PLAYER_TEMP[playerid][pt_TOYS_SHOP]) ClosePlayerToysMenu(playerid);

		if(PLAYER_TEMP[playerid][pt_SHOP]) HidePlayerShop(playerid);

		if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
		{
			CancelPlayerTuningShop(playerid);
			ShowDialog(playerid, DIALOG_VOBJECT_MENU);
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_EN_INTRO])
	{
		if(clickedid == Textdraws[textdraw_LOAD_SCREEN][3]) CancelSelectTextDrawEx(playerid);
	}

	if(PLAYER_TEMP[playerid][pt_SHOP] && (PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_ALL || PLAYER_TEMP[playerid][pt_SHOP_STATE] == PLAYER_SHOP_STATE_MY_ADS))
	{
		for(new i = 0; i != 6; i ++)
		{
			if(clickedid == Textdraws[textdraw_SHOP_ARTICLES_BOX][i])
			{
				if(!PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]) return SendNotification(playerid, "Este anuncio ya no está disponible.");

				inline OnShopChecked()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID] = PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i];
							PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_AD;
							UpdatePlayerShop(playerid);
						}
						else SendNotification(playerid, "Este anuncio ya no está disponible.");
					}
					else SendNotification(playerid, "Este anuncio ya no está disponible.");
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopChecked);
				break;
			}
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP])
	{
		if(clickedid == Textdraws[textdraw_SHOP_TUNING][2]) //Comprar
		{
			new slot = GetVehicleFreeObjectSlot(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID]);
			if(!PI[playerid][pi_VIP] && slot >= MAX_NU_VOBJECTS)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
				return 1;
			}
			if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_VOBJECTS)
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d objetos en vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP.", MAX_SU2_VOBJECTS);
				return 1;
			}
			if(slot == -1)
			{
				SendNotification(playerid, "No hay más espacio para objetos en este vehículo.");
				return 1;
			}

			if(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] > PI[playerid][pi_CASH])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar este objeto.", number_format_thousand(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] - PI[playerid][pi_CASH]));
				return 1;
			}

			if(GivePlayerCash(playerid, -Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE], true, true))
			{
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_VALID] = true;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_TYPE] = VOBJECT_TYPE_OBJECT;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ID] = 0;
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_MODELID] = Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID];
				format(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_NAME], 32, "%s", Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_NAME]);
				VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][slot][vobject_ATTACHED] = true;
				UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);

				RegisterNewVehicleObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
				CancelPlayerTuningShop(playerid);

				SendNotification(playerid, "Ajusta el objeto y haz clic en el icono de guardar, si pulsas ~r~'ESCAPE' ~w~no se guardará la configuración.");
				SendNotification(playerid, "Mantén presionado ~r~'W' ~w~para mover la cámara.");
				EditVehicleObject(playerid, PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], slot);
			}
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][3]) //Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == (sizeof(Tuning_Shop_Objects) - 1)) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = 0;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ++;
			UpdateTuningShop(playerid);
			return 1;
		}
		else if(clickedid == Textdraws[textdraw_SHOP_TUNING][4]) //Anterior
		{
			if(PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] == 0) PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] = sizeof(Tuning_Shop_Objects) - 1;
			else PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] --;
			UpdateTuningShop(playerid);
			return 1;
		}
		return 1;
	}

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][2]) //Anterior
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == 0) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = sizeof(PROPERTY_INTERIORS) - 1;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] --;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][3]) //Siguiente
		{
			if(PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] == (sizeof(PROPERTY_INTERIORS) - 1)) PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] = 0;
			else PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ++;
			UpdatePlayerPropertyContructor(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][4]) //Crear
		{
			Create_PlayerPropertyConstructo(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][5]) //Cancelar
		{
			ExitPlayerPropertyConstructor(playerid);
			return 1;
		}
	}

	if(PLAYER_TEMP[playerid][pt_READING_GUIDE])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][2]) // Siguiente
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1 >= sizeof(Server_Rules) )
			{
				PLAYER_TEMP[playerid][pt_READING_GUIDE] = false;
				PLAYER_TEMP[playerid][pt_GUIDE_STEP] = 0;
				DestroyPlayerRulesTextDraw(playerid);

				for(new i = 0; i < LOAD_SCREEN_TEXTDRAWS_SIZE; i ++)
				{
					TextDrawHideForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][i]);
				}

				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
				PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);

				PI[playerid][pi_GENERO] = -1;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = true;
				PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;

				new td_str[64];
				format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
				PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);

				SendNotification(playerid, "Elige tu personaje, presionar 'continuar' para finalizar.");

				SetPlayerVirtualWorld(playerid, playerid + 10);

				InterpolateCameraPos(playerid, 395.3699, -1342.0594, 26.1456, 395.3699, -1342.0594, 26.1456, 4000);
				InterpolateCameraLookAt(playerid, 395.7656, -1341.1426, 26.3606, 395.7656, -1341.1426, 26.3606, 4000);
				return 1;
			}

			PLAYER_TEMP[playerid][pt_GUIDE_STEP] ++;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_GUIDE][3]) // Anterior
		{
			if(PLAYER_TEMP[playerid][pt_GUIDE_STEP] <= 0) return 1;

			PLAYER_TEMP[playerid][pt_GUIDE_STEP] --;
			SetPlayerRulesTextDraw(playerid, Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Title], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Info], Server_Rules[ PLAYER_TEMP[playerid][pt_GUIDE_STEP] ][Rule_Pages], PLAYER_TEMP[playerid][pt_GUIDE_STEP] + 1, sizeof(Server_Rules) );
			return 1;
		}
	}

	if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]) // Hombre
		{
			PI[playerid][pi_GENERO] = 0;

			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);

			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][pi_GENERO]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]) // Mujer
		{
			PI[playerid][pi_GENERO] = 1;

			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2], -256);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4], -94);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);

			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][pi_GENERO]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]) // Continuar
		{
			if(PI[playerid][pi_GENERO] == -1)
			{
				SendNotification(playerid, "Antes de continuar debes optar por un género para tu personaje.");
				SelectTextDrawEx(playerid, 0xe8d08fFF);
				return 1;
			}

			TextDrawShowForPlayer(playerid, Textdraws[textdraw_LOAD_SCREEN][0]);
			PI[playerid][pi_SKIN] = Intro_Skins[PI[playerid][pi_GENERO]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]];

			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][0]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][1]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][2]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][3]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][4]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][5]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][6]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9]);

			PLAYER_TEMP[playerid][pt_REGISTER_SELECTING_SKIN] = false;
			PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;

			CancelSelectTextDrawEx(playerid);
			DestroyActor(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			PLAYER_TEMP[playerid][pt_REGISTER_ACTOR] = INVALID_ACTOR_ID;

			// Spawn
			SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
			PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
			PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME_TW] = gettime();
			PLAYER_TEMP[playerid][pt_TIME_SECUESTRO] = gettime();
			ResetPlayerWeapons(playerid);
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
			SetPlayerFightingStyle(playerid, PI[playerid][pi_FIGHT_STYLE]);
			SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
			SetPlayerArmourEx(playerid, PI[playerid][pi_ARMOUR]);
			SetPlayerVirtualWorld(playerid, 0);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
			SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);

			//
			RegisterNewPlayer(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][7]) // Siguiente ropa
		{
			if(PI[playerid][pi_GENERO] == -1) return SendNotification(playerid, "Debes optar por un género antes de cambiar de ropa.");

			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == (sizeof(Intro_Skins[]) - 1)) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = 0;
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] ++;

			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);

			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][pi_GENERO]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][8]) // Anterior ropa
		{
			if(PI[playerid][pi_GENERO] == -1) return SendNotification(playerid, "Debes optar por un género antes de cambiar de ropa.");

			if(PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] = sizeof(Intro_Skins[]) - 1;
			else PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] --;

			new td_str[64];
			format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN] + 1, sizeof(Intro_Skins[]));
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_REGISTER_SKIN][9], td_str);

			SetActorSkin(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], Intro_Skins[PI[playerid][pi_GENERO]][PLAYER_TEMP[playerid][pt_REGISTER_SELECTED_SKIN]], PLAYER_TEMP[playerid][pt_REGISTER_ACTOR]);
			ApplyActorAnimation(PLAYER_TEMP[playerid][pt_REGISTER_ACTOR], "INT_SHOP", "shop_loop", 4.1, 1, 1, 1, 0, 0);
			return 1;
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 0;

	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][0]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/agenda"); }//agenda
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][1]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_PLAYER_GPS_VEHICLES);  }//Coches
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][2]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/gps"); }//GPS
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][3]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_BBVA); } //BBVA
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][4]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/llamar policia"); }//911
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][5]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/llamar mecanico"); }//MECA
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][6]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/llamar taxi"); }//TAXI
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][7]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/llamar medico"); }//MEDICO
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][8]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_SMS); }//MSJ
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][9]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/config"); }//CONFIG
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][10]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/mapa"); }//MAPA
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][11]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_PLAYER_GPS_PROPERTIES); }//CASAS
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][12]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/ayuda"); }//HELP
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][13]) { HidePlayeriPhone(playerid); HidePlayeriPhoneApps(playerid); ShowPlayerShop(playerid); }//MARKET
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][14]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_PHONE); }//WSP
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][15]) { CancelSelectTextDrawEx(playerid); ShowDialog(playerid, DIALOG_TWITTER); }//TWITTER
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][16]) { CancelSelectTextDrawEx(playerid); PC_EmulateCommand(playerid, "/mp3"); }//SPT
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_iPhone][17]) //Apagar iPhone
		{
			CancelSelectTextDrawEx(playerid);
			if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
			PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_OFF;
			SendNotification(playerid, "Has apagado tu iPhone, ahora no recibirás llamadas.");
		}
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]) // Comprar
		{
			new clothe_info[3];
			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO: clothe_info = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
						case SEXO_FEMENINO: clothe_info = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]];
					}
				}
			}

			if(PI[playerid][pi_CASH] >= clothe_info[2])
			{
				if(GivePlayerCash(playerid, -clothe_info[2], true, true))
				{
					PI[playerid][pi_SKIN] = clothe_info[0];

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Gracias por comprar ropa en ~g~%s~w~, vuelva pronto.", Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);

					ClosePlayerClothingMenu(playerid);
					ExitPlayerWardrobe(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar esta ropa.", number_format_thousand(clothe_info[2] - PI[playerid][pi_CASH]));
			}
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);

			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Binco_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Suburban_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Prolaps_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Didier_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Victim_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Male_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == (sizeof(Zip_Shop_Female_Skins) - 1)) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] ++;
						}
					}
				}
			}
			UpdateClothingShop(playerid);
			return 1;
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);

			switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
			{
				case INTERIOR_BINCO:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Binco_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_SUBURBAN:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Suburban_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_PROLAPS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Prolaps_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_DIDIER_SACHS:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Didier_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_VICTIM:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Victim_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
				case INTERIOR_ZIP:
				{
					switch(PI[playerid][pi_GENERO])
					{
						case SEXO_MASCULINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Male_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
						case SEXO_FEMENINO:
						{
							if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] == 0) PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = sizeof(Zip_Shop_Female_Skins) - 1;
							else PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] --;
						}
					}
				}
			}
			UpdateClothingShop(playerid);
			return 1;
		}
	}

	if(PLAYER_TEMP[playerid][pt_TOYS_SHOP])
	{
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]) //Comprar
		{
			if(PI[playerid][pi_CASH] >= Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price])
			{
				new slot = GetEmptyPlayerToySlot(playerid);
				if(!PI[playerid][pi_VIP] && slot >= MAX_NU_TOYS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d accesorios! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU2_TOYS);
					return 1;
				}
				if(PI[playerid][pi_VIP] == 1 && slot >= MAX_SU_TOYS)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "¡Los jugadores ~y~VIP 2 ~w~pueden tener hasta %d accesorios! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU2_TOYS);
					return 1;
				}
				if(slot == -1)
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "No tienes más espacio para accesorios, elimina alguno si quieres comprar otro.");
					ClosePlayerToysMenu(playerid);
					return 1;
				}

				if(GivePlayerCash(playerid, -Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price], true, true))
				{
					GivePlayerToy(playerid, Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
					RegisterNewPlayerToy(playerid, slot);

					PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
					SendFormatNotification(playerid, "Gracias por comprar accesorios en ~g~%s~w~, para ponertelo usa ~g~/accesorios~w~.", ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);

					ClosePlayerToysMenu(playerid);
				}
			}
			else
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendFormatNotification(playerid, "No tienes dinero suficiente, te faltan ~r~%s$~w~ para poder comprar esta ropa.", number_format_thousand(Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] - PI[playerid][pi_CASH]));
			}

		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]) // Siguiente
		{
			PlayerPlaySoundEx(playerid, 1052, 0.0, 0.0, 0.0);

			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == (sizeof(Toys_Shop) - 1)) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ++;

			UpdateToysShop(playerid);
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]) // Anterior
		{
			PlayerPlaySoundEx(playerid, 1053, 0.0, 0.0, 0.0);

			if(PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] == 0) PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = sizeof(Toys_Shop) - 1;
			else PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] --;

			UpdateToysShop(playerid);
		}

	}

	if(PLAYER_TEMP[playerid][pt_SHOP])
	{
		HidePlayerDialog(playerid);
		if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					if(PI[playerid][pi_LEVEL] < 2) return SendNotification(playerid, "Debes ser al menos nivel 2 para publicar anuncios.");

					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnShopChecked()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new total_ads;
								cache_get_value_index_int(0, 0, total_ads);

								if(total_ads >= MAX_ADS_PER_PLAYER) SendFormatNotification(playerid, "No puedes publicar más de %d anuncios, borra alguno.", MAX_ADS_PER_PLAYER);
								else
								{
									HidePlayerShop(playerid);
									ShowDialog(playerid, DIALOG_SHOP_ADD);
								}
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopChecked);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL:
				{
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = true;
					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
					UpdatePlayerShop(playerid);
				}
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: HidePlayerShop(playerid);
				case PLAYER_SHOP_STATE_MY_ADS: // Atras
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
					PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					UpdatePlayerShop(playerid);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_MODIFY);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Siguiente
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] >= pages - 1) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] ++;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_AD: ShowDialog(playerid, DIALOG_SHOP_ARTICLE_REMOVE);
			}
		}
		else if(playertextid == PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4])
		{
			switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
			{
				case PLAYER_SHOP_STATE_ALL: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_MY_ADS: // Anterior
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP]);
					if(interval < 500) return SendNotification(playerid, "Cálmate.");
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_SHOP] = GetTickCount();

					inline OnCountQueryLoad()
					{
						new rows;
						if(cache_get_row_count(rows))
						{
							if(rows)
							{
								new count, pages;
								cache_get_value_index_int(0, 0, count);
								pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

								if(PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] <= 0) PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = pages - 1;
								else PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] --;
								UpdatePlayerShop(playerid);
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
				}
				case PLAYER_SHOP_STATE_AD: // Atrás
				{
					if(PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS])
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_MY_ADS;
						UpdatePlayerShop(playerid);
					}
					else
					{
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
						UpdatePlayerShop(playerid);
					}
				}
			}
		}
	}
	return 1;
}

UpdateReputationTextDraws(playerid)
{
	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER, str[64];
	if(PI[playerid][pi_REP] >= neccessary_rep)
	{
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], 640.0, 0.0);
		if(PI[playerid][pi_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "Nivel_%d__(/comprarnivel)", PI[playerid][pi_LEVEL]);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	else
	{
		new Float:sizeX = floatmul(floatdiv(PI[playerid][pi_REP], neccessary_rep), 640.0);
		PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0], sizeX, 0.0);
		if(PI[playerid][pi_CONFIG_HUD]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][0]);
		format(str, sizeof str, "Nivel_%d__(%d/%d)", PI[playerid][pi_LEVEL], PI[playerid][pi_REP], neccessary_rep);
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][3], str);
	}
	return 1;
}

forward AddPlayerReputation(playerid);
public AddPlayerReputation(playerid)
{
	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[playerid][pi_REP] < neccessary_rep)
	{
		PI[playerid][pi_REP] ++;
		UpdateReputationTextDraws(playerid);

		if(PI[playerid][pi_REP] >= neccessary_rep) SendNotification(playerid, "Escribe ~g~/comprarnivel ~w~para subir de nivel.");

		PI[playerid][pi_PAYDAY_REP] ++;
		if(PI[playerid][pi_PAYDAY_REP] >= REP_FOR_PAYDAY)
		{
			PlayerPayday(playerid);
			PI[playerid][pi_PAYDAY_REP] = 0;
		}

		PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP], TIME_FOR_REP, PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][1]);
		PLAYER_TEMP[playerid][pt_TIMERS][1] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
		return 1;
	}
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][1]);
	return 0;
}

CMD:comprarnivel(playerid, params[])
{
	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[playerid][pi_REP] < neccessary_rep) return SendNotification(playerid, "Aún no tienes la suficiente reputación para subir de nivel.");
	if(PI[playerid][pi_LEVEL] * 150 > PI[playerid][pi_CASH]) return SendFormatNotification(playerid, "No tienes suficiente dinero para subir de nivel, te faltan ~g~%s dólares~w~ para poder comprarlo.", number_format_thousand((PI[playerid][pi_LEVEL] * 150) - PI[playerid][pi_CASH]));

	if(GivePlayerCash(playerid, -(PI[playerid][pi_LEVEL] * 150), true, true))
	{
		PI[playerid][pi_REP] = 1;
		PI[playerid][pi_LEVEL] ++;
		UpdateReputationTextDraws(playerid);
		SetPlayerSkillLevels(playerid);

		SendFormatNotification(playerid, "~g~¡Felicidades! ~w~Has subido al nivel %d. Pagaste ~g~%d dólares~w~ por él.", PI[playerid][pi_LEVEL], PI[playerid][pi_LEVEL] * 150);
		SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
		PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);

		PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP], TIME_FOR_REP, PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][1]);
		PLAYER_TEMP[playerid][pt_TIMERS][1] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
	}
	return 1;
}

stock SetPlayerCash(playerid, amount, bool:update = true)
{
	PI[playerid][pi_CASH] = amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);

	if(update)
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET cash = %d WHERE id = %d;", PI[playerid][pi_CASH], PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	return 1;
}

DarDinero(playerid, cantidad, bool:update)
{
	return GivePlayerCash(playerid, cantidad, update, false);
}

QuitarDinero(playerid, cantidad, bool:update)
{
	return GivePlayerCash(playerid, -cantidad, update, true);
}

GivePlayerCash(playerid, amount, bool:update = true, bool:negative = false)
{
	if(amount == 0) return 1;
	if(!negative && amount < 0) return 0;
	if(negative && amount > 0) return 0;
	if(negative && (PI[playerid][pi_CASH] + amount) < 0) return 0;
	if(!negative)
	{
		new string[16];
		format(string, sizeof string,"~g~+$%d", amount);
		GameTextForPlayer(playerid, string, 5000, 1);
	}
	else
	{
		new string[16];
		format(string, sizeof string,"~r~$%d", amount);
		GameTextForPlayer(playerid, string, 5000, 1);
	}

	PI[playerid][pi_CASH] += amount;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);

	if(update)
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET cash = %d WHERE id = %d;", PI[playerid][pi_CASH], PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	return 1;
}

LoadEnterExits()
{
	new total_enterexits, label_str[256], info[3];

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		ENTER_EXIT[total_enterexits][ee_ID] = total_enterexits + 1;

		if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == 0 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n·Acercate {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME]);
		else if(ENTER_EXIT[total_enterexits][ee_TIME_OPEN] == -1 && ENTER_EXIT[total_enterexits][ee_TIME_CLOSE] == -1) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{"#SILVER_COLOR"}PRÓXIMA APERTURA", ENTER_EXIT[total_enterexits][ee_NAME]);
		else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n\n{FFFFFF}Horario de trabajo: {"#PRIMARY_COLOR"}%02d:00h {FFFFFF}- {"#PRIMARY_COLOR"}%02d:00h\n\n·Acercate {FFFFFF}para entrar", ENTER_EXIT[total_enterexits][ee_NAME], ENTER_EXIT[total_enterexits][ee_TIME_OPEN], ENTER_EXIT[total_enterexits][ee_TIME_CLOSE]);

		ENTER_EXIT[total_enterexits][ee_INT_LABEL_ID] = CreateDynamic3DTextLabel("{"#RED_COLOR"}SALIDA\n{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para salir", 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_INT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] + 0.25, 10.0, .testlos = true, .worldid = ENTER_EXIT[total_enterexits][ee_EXT_WORLD], .interiorid = ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		if(ENTER_EXIT[total_enterexits][ee_INT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_INT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z], ENTER_EXIT[total_enterexits][ee_INT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		if(ENTER_EXIT[total_enterexits][ee_EXT_MAPICON] != -1) ENTER_EXIT[total_enterexits][ee_EXT_MAPICON_ID] = CreateDynamicMapIcon(ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z], ENTER_EXIT[total_enterexits][ee_EXT_MAPICON], -1, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID] = CreateDynamicPickup(19605, 1, ENTER_EXIT[total_enterexits][ee_INT_X], ENTER_EXIT[total_enterexits][ee_INT_Y], ENTER_EXIT[total_enterexits][ee_INT_Z] - 0.25, ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);
		ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID] = CreateDynamicPickup(19135, 1, ENTER_EXIT[total_enterexits][ee_EXT_X], ENTER_EXIT[total_enterexits][ee_EXT_Y], ENTER_EXIT[total_enterexits][ee_EXT_Z] - 0.25, ENTER_EXIT[total_enterexits][ee_EXT_WORLD], ENTER_EXIT[total_enterexits][ee_EXT_INTERIOR]);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 1; // Pickup Interior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

		info[0] = PICKUP_TYPE_ENTER_EXIT;
		info[1] = total_enterexits; // Index
		info[2] = 2; // Pickup Exterior
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, ENTER_EXIT[total_enterexits][ee_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
		ENTER_EXIT[total_enterexits][ee_MAIN_ACTOR] = CreateInteriorActor(ENTER_EXIT[total_enterexits][ee_INTERIOR_TYPE], ENTER_EXIT[total_enterexits][ee_INT_WORLD], ENTER_EXIT[total_enterexits][ee_INT_INTERIOR]);

		//textdraw intimidación
		if(ENTER_EXIT[total_enterexits][ee_ROBBABLE])
		{
			ENTER_EXIT[total_enterexits][ee_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Robando:_0.00%%");
			TextDrawLetterSize(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0.286000, 1.276444);
			TextDrawAlignment(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 2);
			TextDrawColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], -76);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawSetOutline(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
			TextDrawBackgroundColor(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 255);
			TextDrawFont(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetProportional(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 1);
			TextDrawSetShadow(ENTER_EXIT[total_enterexits][ee_TEXTDRAW], 0);
		}

		total_enterexits ++;
	}
	return 1;
}

CreateGarajeInfo(i)
{
	if(GARAJE_INFO[i][garaje_EXT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(GARAJE_INFO[i][garaje_EXT_LABEL_ID]);
		GARAJE_INFO[i][garaje_EXT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(GARAJE_INFO[i][garaje_INT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(GARAJE_INFO[i][garaje_INT_LABEL_ID]);
		GARAJE_INFO[i][garaje_INT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	new string[128];
	format(string, sizeof string, "Garaje {"#PRIMARY_COLOR"}#%d\n·{FFFFFF}Toca el {"#PRIMARY_COLOR"}claxón {FFFFFF}para ingresar al garaje.", GARAJE_INFO[i][garaje_PROPERTY]);
	GARAJE_INFO[i][garaje_EXT_LABEL_ID] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, GARAJE_INFO[i][garaje_EXT_X], GARAJE_INFO[i][garaje_EXT_Y], GARAJE_INFO[i][garaje_EXT_Z] + 0.25, 7.0, .testlos = true, .worldid = 0, .interiorid = GARAJE_INFO[i][garaje_EXT_INTERIOR]);

	GARAJE_INFO[i][garaje_INT_LABEL_ID] = CreateDynamic3DTextLabel("Toca el {"#PRIMARY_COLOR"}claxón {FFFFFF}para salir del garaje.", 0xFFFFFFFF, 483.396270, -437.546813, 2758.268798 + 0.25, 5.0, .testlos = true, .worldid = GARAJE_INFO[i][garaje_PROPERTY], .interiorid = PROPERTY_INFO[ GARAJE_INFO[i][garaje_PROPERTY] ][property_ID_INTERIOR]);
	return 1;
}

CreatePropertyInfo(i, pid, pname[], cid, cname[])
{
	if(PROPERTY_INFO[i][property_EXT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_EXT_LABEL_ID]);
		PROPERTY_INFO[i][property_EXT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_LABEL_ID] != Text3D:INVALID_STREAMER_ID)
	{
		DestroyDynamic3DTextLabel(PROPERTY_INFO[i][property_INT_LABEL_ID]);
		PROPERTY_INFO[i][property_INT_LABEL_ID] = Text3D:INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_EXT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
		PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;
	}
	if(PROPERTY_INFO[i][property_INT_PICKUP_ID] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PROPERTY_INFO[i][property_INT_PICKUP_ID]);
		PROPERTY_INFO[i][property_INT_PICKUP_ID] = INVALID_STREAMER_ID;
	}

	new info[3], label_str[256], pickup_modelid;
	if(pid)
	{
		pickup_modelid = 1272;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = pid;
		PROPERTY_INFO[i][property_CREW_ID] = 0;
		format
		(
			label_str,
			sizeof label_str,
			"\
				{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
				{"#PRIMARY_COLOR"}·{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
				{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
			", PROPERTY_INFO[i][property_ID], pname
		);
	}
	else if(cid)
	{
		pickup_modelid = 1313;
		PROPERTY_INFO[i][property_SOLD] = true;
		PROPERTY_INFO[i][property_CREW] = true;
		PROPERTY_INFO[i][property_CREW_ID] = cid;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad %d", PROPERTY_INFO[i][property_ID]);
		format
		(
			label_str,
			sizeof label_str,
			"\
				{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
				{"#PRIMARY_COLOR"}·{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
				{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
			", PROPERTY_INFO[i][property_ID], cname
		);
	}
	else
	{
		pickup_modelid = 1273;
		PROPERTY_INFO[i][property_SOLD] = false;
		PROPERTY_INFO[i][property_OWNER_ID] = 0;
		format(PROPERTY_INFO[i][property_NAME], 24, "Propiedad %d", PROPERTY_INFO[i][property_ID]);
		if(PROPERTY_INFO[i][property_VIP_LEVEL])
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Membresía VIP requerida\n\n{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
		else
		{
			if(PROPERTY_INFO[i][property_EXTRA]) format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], PROPERTY_INFO[i][property_EXTRA], PROPERTY_INFO[i][property_LEVEL]);
			else format(label_str, sizeof label_str, "{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\nInterior: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]);
		}
	}

	PROPERTY_INFO[i][property_EXT_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z] + 0.25, 5.0, .testlos = true, .worldid = 0, .interiorid = PROPERTY_INFO[i][property_EXT_INTERIOR]);

	new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Z];
	if(PROPERTY_INFO[i][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
	PROPERTY_INFO[i][property_INT_LABEL_ID] = CreateDynamic3DTextLabel("Presiona {"#PRIMARY_COLOR"}Y {FFFFFF}para salir\n\nEscribe {"#PRIMARY_COLOR"}/casa {FFFFFF}para más opciones", 0xFFFFFFFF, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], z_pos + 0.25, 3.0, .testlos = true, .worldid = PROPERTY_INFO[i][property_ID], .interiorid = PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);

	PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(pickup_modelid, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
	PROPERTY_INFO[i][property_INT_PICKUP_ID] = CreateDynamicPickup(0, 1, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_X], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_Y], z_pos, PROPERTY_INFO[i][property_ID], PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 1; // Pickup Interior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_INT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = i; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	PROPERTY_INFO[i][property_POLICE_FORCING] = false;
	PROPERTY_INFO[i][property_POLICE_FORCED] = false;
	PROPERTY_INFO[i][property_POLICE_FORCE_TIMER] = -1;
	return 1;
}

forward OnPropertiesLoaded();
CargarPropiedades()
{
	inline OnPropertiesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_PROPIEDADES)
				{
					printf("---> Límite superado en array 'PROPERTY_INFO' al intentar cargar de la base de datos.");
					break;
				}

				TOTAL_PROPIEDADES_CARGADAS ++;

				new bool:isnull_name;
				PROPERTY_INFO[i][property_VALID] = true;
				cache_get_value_name_int(i, "id", PROPERTY_INFO[i][property_ID]);
				cache_is_value_name_null(i, "name", isnull_name);
				if(!isnull_name) cache_get_value_name(i, "name", PROPERTY_INFO[i][property_NAME]);
				cache_get_value_name_float(i, "ext_x", PROPERTY_INFO[i][property_EXT_X]);
				cache_get_value_name_float(i, "ext_y", PROPERTY_INFO[i][property_EXT_Y]);
				cache_get_value_name_float(i, "ext_z", PROPERTY_INFO[i][property_EXT_Z]);
				cache_get_value_name_float(i, "ext_angle", PROPERTY_INFO[i][property_EXT_ANGLE]);
				cache_get_value_name_int(i, "ext_interior", PROPERTY_INFO[i][property_EXT_INTERIOR]);
				cache_get_value_name_int(i, "ext_freeze", PROPERTY_INFO[i][property_EXT_FREEZE]);
				cache_get_value_name_int(i, "id_interior", PROPERTY_INFO[i][property_ID_INTERIOR]);
				cache_get_value_name_int(i, "price", PROPERTY_INFO[i][property_PRICE]);
				PROPERTY_INFO[i][property_PRICE_BASE] = PROPERTY_INFO[i][property_PRICE];
				cache_get_value_name_int(i, "level", PROPERTY_INFO[i][property_LEVEL]);
				cache_get_value_name_int(i, "extra", PROPERTY_INFO[i][property_EXTRA]);
				cache_get_value_name_int(i, "vip_level", PROPERTY_INFO[i][property_VIP_LEVEL]);
				cache_get_value_name_int(i, "dis_default_interior", PROPERTY_INFO[i][property_DIS_DEFAULT_INTERIOR]);

				if(PROPERTY_INFO[i][property_EXTRA]) PROPERTY_INFO[i][property_PRICE] = 0;
				if(PROPERTY_INFO[i][property_VIP_LEVEL]) PROPERTY_INFO[i][property_LEVEL] = 1;

				new id_player, pname[24], tid, bool:isnull_id_player, bool:isnull_pname, bool:isnull_tid;
				cache_is_value_name_null(i, "id_player", isnull_id_player);
				if(!isnull_id_player) cache_get_value_name_int(i, "id_player", id_player);
				cache_is_value_name_null(i, "pname", isnull_pname);
				if(!isnull_pname) cache_get_value_name(i, "pname", pname);
				cache_is_value_name_null(i, "tid", isnull_tid);
				if(!isnull_tid) cache_get_value_name_int(i, "tid", tid);
				if(id_player) CreatePropertyInfo(i, id_player, pname, 0, "");
				else if(tid)
				{
					inline OnCrewInfoLoad()
					{
						new crows;
						if(cache_get_row_count(crows))
						{
							if(crows)
							{
								new cid, cname[24];
								cache_get_value_index_int(0, 0, cid);
								cache_get_value_index(0, 1, cname);
								if(cid) CreatePropertyInfo(i, 0, "", cid, cname);
								else CreatePropertyInfo(i, 0, "", 0, "");
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT crews.id, crews.name FROM territories INNER JOIN crews ON territories.id_crew = crews.id WHERE territories.id = %d;", tid);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInfoLoad);
				}
				else CreatePropertyInfo(i, 0, "", 0, "");

				inline OnPropertyClosetLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							PROPERTY_CLOSET[i][x][property_closet_VALID] = true;
							cache_get_value_name_int(x, "id", PROPERTY_CLOSET[i][x][property_closet_OBJECT_ID]);
							cache_get_value_name_int(x, "type", PROPERTY_CLOSET[i][x][property_closet_TYPE]);
							cache_get_value_name_int(x, "int", PROPERTY_CLOSET[i][x][property_closet_INT]);
							cache_get_value_name_int(x, "int_extra", PROPERTY_CLOSET[i][x][property_closet_INT_EXTRA]);
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM property_closet WHERE id_property = %d LIMIT %d;", PROPERTY_INFO[i][property_ID], MAX_CLOSET_SLOTS);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPropertyClosetLoad);

				//garajes
				inline OnGarajesLoad()
				{
					new grows;
					if(cache_get_row_count(grows))
					{
						for(new x = 0; x != grows; x ++)
						{
							new bool:isnull_propertie;
							GARAJE_INFO[x][garaje_VALID] = true;
							cache_get_value_name_int(x, "id", GARAJE_INFO[x][garaje_ID]);
							cache_get_value_name_float(x, "ext_x", GARAJE_INFO[x][garaje_EXT_X]);
							cache_get_value_name_float(x, "ext_y", GARAJE_INFO[x][garaje_EXT_Y]);
							cache_get_value_name_float(x, "ext_z", GARAJE_INFO[x][garaje_EXT_Z]);
							cache_get_value_name_float(x, "ext_angle", GARAJE_INFO[x][garaje_EXT_ANGLE]);
							cache_get_value_name_int(x, "ext_interior", GARAJE_INFO[x][garaje_EXT_INTERIOR]);
							cache_is_value_name_null(x, "casa_id", isnull_propertie);
							if(!isnull_propertie) cache_get_value_name_int(x, "casa_id", GARAJE_INFO[x][garaje_PROPERTY]);

							if(GARAJE_INFO[x][garaje_PROPERTY] == PROPERTY_INFO[i][property_ID]) cache_get_value_name_int(x, "id", PROPERTY_INFO[i][property_GARAJE]);

							CreateGarajeInfo(x);
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM garajes LIMIT %d;", MAX_PROPIEDADES);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnGarajesLoad);
			}
			CallLocalFunction("OnPropertiesLoaded", "");
			LoadCrews();
			printf("[PROPIEDADES]: %d", TOTAL_PROPIEDADES_CARGADAS);
		}
	}
	mysql_tquery_inline(mysql_db, "SELECT properties.*, player.id AS pid, player.name AS pname, territories.id AS tid FROM properties LEFT JOIN player ON properties.id_player = player.id LEFT JOIN territories ON properties.id_territory = territories.id;", using inline OnPropertiesLoad);
	return 1;
}

GetOwnerIntProperty(id_house)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
			{
				if(PI[i][pi_LOCAL_INTERIOR] == id_house)
				{
					return i;
				}
			}
		}
	}
	return -1;
}

LoadCrews()
{
	inline OnCrewsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_CREWS)
				{
					printf("---> Límite superado en array 'CREW_INFO' al intentar cargar de la base de datos.");
					break;
				}

				CREW_INFO[i][crew_VALID] = true;
				cache_get_value_name_int(i, "id", CREW_INFO[i][crew_ID]);
				cache_get_value_name(i, "name", CREW_INFO[i][crew_NAME]);
				cache_get_value_name_int(i, "color", CREW_INFO[i][crew_COLOR]);
				CREW_INFO[i][crew_ONLINE_MEMBERS] = 0;

				//count
				inline OnCountQueryLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						if(crows)
						{
							cache_get_value_index_int(0, 0, CREW_INFO[i][crew_MEMBERS]);
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", CREW_INFO[i][crew_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);

				//ranks
				inline OnCrewRanksLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						for(new x = 0; x != crows; x ++)
						{
							new rank_pos;
							cache_get_value_name_int(x, "rank_pos", rank_pos);
							if(rank_pos < 0 || rank_pos > MAX_CREW_RANKS) continue;

							CREW_RANK_INFO[i][rank_pos][crew_rank_VALID] = true;
							cache_get_value_name_int(x, "id", CREW_RANK_INFO[i][rank_pos][crew_rank_ID]);
							cache_get_value_name(x, "rank_name", CREW_RANK_INFO[i][rank_pos][crew_rank_NAME]);
							cache_get_value_name_int(x, "permission0", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][0]);
							cache_get_value_name_int(x, "permission1", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][1]);
							cache_get_value_name_int(x, "permission2", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][2]);
							cache_get_value_name_int(x, "permission3", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][3]);
							cache_get_value_name_int(x, "permission4", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][4]);
							cache_get_value_name_int(x, "permission5", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][5]);
							cache_get_value_name_int(x, "permission6", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][6]);
							cache_get_value_name_int(x, "permission7", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][7]);
							cache_get_value_name_int(x, "permission8", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][8]);
							cache_get_value_name_int(x, "permission9", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][9]);
							cache_get_value_name_int(x, "permission10", CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][10]);

							if(rank_pos == 0)
							{
								for(new j = 0; j < CREW_RANK_SIZE; j ++)
								CREW_RANK_INFO[i][rank_pos][crew_rank_PERMISSION][j] = 1;
							}
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM crew_ranks WHERE id_crew = %d;", CREW_INFO[i][crew_ID]);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewRanksLoad);
			}
			LoadGangZones();
		}
	}
	mysql_tquery_inline(mysql_db, "SELECT * FROM crews;", using inline OnCrewsLoad);
	return 1;
}


LoadGangZones()
{
	inline OnSaZonesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			new territorios;
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_TERRITORIES)
				{
					printf("---> Límite superado en array 'TERRITORIES' al intentar cargar de la base de datos.");
					break;
				}

				new crewid, color, bool:isnull_crewid;
				TERRITORIES[i][territory_VALID] = true;
				cache_get_value_name_int(i, "id", TERRITORIES[i][territory_ID]);
				cache_get_value_name(i, "name", TERRITORIES[i][territory_NAME]);
				cache_get_value_name_float(i, "min_x", TERRITORIES[i][territory_MIN_X]);
				cache_get_value_name_float(i, "min_y", TERRITORIES[i][territory_MIN_Y]);
				cache_get_value_name_float(i, "min_z", TERRITORIES[i][territory_MIN_Z]);
				cache_get_value_name_float(i, "max_x", TERRITORIES[i][territory_MAX_X]);
				cache_get_value_name_float(i, "max_y", TERRITORIES[i][territory_MAX_Y]);
				cache_get_value_name_float(i, "max_z", TERRITORIES[i][territory_MAX_Z]);
				cache_is_value_name_null(i, "id_crew", isnull_crewid);
				if(!isnull_crewid)
				{
					cache_get_value_name_int(i, "id_crew", crewid);
					cache_get_value_name_int(i, "color", color);
				}
				TERRITORIES[i][territory_WAR] = false;
				TERRITORIES[i][territory_ATTACKER_CREW_INDEX] = 0;

				if(crewid)
				{
					TERRITORIES[i][territory_OCCUPIED] = true;
					TERRITORIES[i][territory_CREW_ID] = crewid;

					new r, g, b, a;
					HexToRGBA(color, r, g, b, a);
					TERRITORIES[i][territory_COLOR] = RGBAToHex(r, g, b, 135);
					TERRITORIES[i][territory_CREW_INDEX] = GetCrewIndexById(crewid);
				}
				else
				{
					TERRITORIES[i][territory_OCCUPIED] = false;
					TERRITORIES[i][territory_CREW_ID] = 0;
					TERRITORIES[i][territory_CREW_INDEX] = 0;
					TERRITORIES[i][territory_COLOR] = 0xCCCCCC55;
				}

				TERRITORIES[i][territory_AREA] = CreateDynamicCube(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MIN_Z], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y], TERRITORIES[i][territory_MAX_Z], 0, 0);

				new info[2];
				info[0] = AREA_TYPE_GANGZONE;
				info[1] = i;
				Streamer_SetArrayData(STREAMER_TYPE_AREA, TERRITORIES[i][territory_AREA], E_STREAMER_EXTRA_ID, info);
				TERRITORIES[i][territory_GANG_ZONE] = GangZoneCreate(TERRITORIES[i][territory_MIN_X], TERRITORIES[i][territory_MIN_Y], TERRITORIES[i][territory_MAX_X], TERRITORIES[i][territory_MAX_Y]);

				TERRITORIES[i][territory_TEXTDRAW] = TextDrawCreate(320.000000, 406.000000, "Conquista:_0");
				TextDrawLetterSize(TERRITORIES[i][territory_TEXTDRAW], 0.286000, 1.276444);
				TextDrawAlignment(TERRITORIES[i][territory_TEXTDRAW], 2);
				TextDrawColor(TERRITORIES[i][territory_TEXTDRAW], -76);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawSetOutline(TERRITORIES[i][territory_TEXTDRAW], 0);
				TextDrawBackgroundColor(TERRITORIES[i][territory_TEXTDRAW], 255);
				TextDrawFont(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetProportional(TERRITORIES[i][territory_TEXTDRAW], 1);
				TextDrawSetShadow(TERRITORIES[i][territory_TEXTDRAW], 0);
				territorios ++;

			}
			printf("[TERRITORIOS]: %d", territorios);
			CallLocalFunction("OnTerritoriesLoaded", "");
			SetTimerEx("server_loaded_request", 1000, false, "b", true);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT territories.*, crews.id AS crewid, crews.color FROM territories LEFT JOIN crews ON territories.id_crew = crews.id WHERE territories.gangzone = 1 LIMIT %d;", MAX_TERRITORIES);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnSaZonesLoad);
	return 1;
}

forward server_loaded_request(bool:toggle);
public server_loaded_request(bool:toggle)
{
	server_loaded = toggle;
	if(toggle)
	{
		SendRconCommand(NombreServidor[random(sizeof(NombreServidor))]);
	}
}

GetCrewIndexById(id)
{
	for(new x = 0; x != MAX_CREWS; x ++)
	{
		if(!CREW_INFO[x][crew_VALID]) continue;

		if(CREW_INFO[x][crew_ID] == id)
		{
			return x;
		}
	}
	return -1;
}

hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return 1;

	if(newkeys &  KEY_CTRL_BACK)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 2119.059814, -2001.701904, 7.984375)) return PC_EmulateCommand(playerid, "/mercado");
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1371.0985, -1761.4934, 13.6050)) return ShowDialog(playerid, DIALOG_FARMACIA);
        if(IsPlayerInRangeOfPoint(playerid, 1.0, 2315.2271, 595.9661, 7.8641)) return ShowDialog(playerid, DIALOG_FARMACIA);

		if(GetPlayerInterior(playerid) != 0)
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
			{
				switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
				{
					case INTERIOR_CITY_HALL_LS: 
					{
						if(IsPlayerInRangeOfPoint(playerid, 1.0, -474.596282, 289.679107, 2004.584960)) return PC_EmulateCommand(playerid, "/pvender"); 
						if(IsPlayerInRangeOfPoint(playerid, 1.0, -508.645385, 322.147644, 2004.585937)) return PC_EmulateCommand(playerid, "/grua");
					}
					case INTERIOR_247: if(IsPlayerInRangeOfPoint(playerid, 1.0, -27.964675, -89.948631, 1003.546875)) return PC_EmulateCommand(playerid, "/productos");
					case INTERIOR_CLUB: if(IsPlayerInRangeOfPoint(playerid, 1.5, 1207.234375, -29.231435, 1000.953125)) return PC_EmulateCommand(playerid, "/bebida");
				}
			}

			new indexx = GetPlayerFastFoodIndex(playerid);
			if(indexx != -10) return PC_EmulateCommand(playerid, "/pedir");
		}

		for(new i = 0; i != E_WORKS; i ++)
		{
			if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

			if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
				{
					PC_EmulateCommand(playerid, "/trabajar");
					return 1;
				}
			}
		}

		new work = GetIDFaccionPlayer(playerid);
		if(work != -1)
		{
			for(new i; i != sizeof StartWorkingCoords; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, StartWorkingCoords[i][start_pos_X], StartWorkingCoords[i][start_pos_Y], StartWorkingCoords[i][start_pos_Z]))
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != work) return SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);

					if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_WORK_SKIN);
					else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
					return 1;
				}
			}
			for(new i; i != sizeof WeaponShopWorkCoords; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, WeaponShopWorkCoords[i][shop_pos_X], WeaponShopWorkCoords[i][shop_pos_Y], WeaponShopWorkCoords[i][shop_pos_Z]))
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != work) return SendFormatNotification(playerid, "Tienes que estar en servicio como %s.", work_info[work][work_info_NAME]);
					ShowDialog(playerid, DIALOG_WORK_WEAPON_SHOP);
					return 1;
				}
			}
		}

		for(new i = 0; i != MAX_PLANTS; i ++)
		{
			new Float:pos[3];
			GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);

			if(IsPlayerInRangeOfPoint(playerid, 1.5, pos[0], pos[1], pos[2])) return PC_EmulateCommand(playerid, "/recoger");
		}

		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			new index = GetBankLocalIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(index != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Bank_Interior_Positions[index][bank_X], Bank_Interior_Positions[index][bank_Y], Bank_Interior_Positions[index][bank_Z]))
				{
					PC_EmulateCommand(playerid, "/banco");
					return 1;
				}
			}
		}

		if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1 && ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_NO_INFO)
		{
			PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = GetClothingShopIndexByIntType(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE]);
			if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z]))
				{
					ShowDialog(playerid, DIALOG_CLOTHES);
					return 1;
				}
			}
		}
	}
	else if(newkeys & KEY_FIRE)
	{
		if(PI[playerid][pi_LEVEL] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE) ApplyAnimation(playerid, "PED", "IDLE_tired", 4.1, false, false, false, false, 0);

		if(PLAYER_TEMP[playerid][pt_PLAYER_SECUESTRANDO]) ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
		return 1;
	}
	else if(newkeys & KEY_CROUCH)
	{
		if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				/*if(WORK_VEHICLES[ GetPlayerVehicleID(playerid) ][work_vehicle_WORK] == WORK_POLICE && GLOBAL_VEHICLES[ GetPlayerVehicleID(playerid) ][gb_vehicle_MODELID] == 411)
				{

				}*/
				for(new i = 0; i != MAX_PROPIEDADES; i ++)//Está en el exterior y quiere ir al interior
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(!PROPERTY_INFO[i][property_SOLD]) continue;
					if(PROPERTY_INFO[i][property_OWNER_ID] != PI[playerid][pi_ID]) continue;
					if(PROPERTY_INFO[i][property_GARAJE])
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new index = GetGarajeIndexByID(PROPERTY_INFO[i][property_GARAJE]);
						if(IsPlayerInRangeOfPoint(playerid, 5.0, GARAJE_INFO[ index ][garaje_EXT_X], GARAJE_INFO[ index ][garaje_EXT_Y], GARAJE_INFO[ index ][garaje_EXT_Z]))
						{
							if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este vehículo no te pertenece.");
							if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este vehículo no te pertenece.");
							if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "Este vehículo no se puede guardar en el garaje.");

							PI[playerid][pi_STATE] = ROLEPLAY_STATE_OWN_PROPERTY;
							PI[playerid][pi_LOCAL_INTERIOR] = PROPERTY_INFO[i][property_ID];
							PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = i;

							SetPlayerInterior(playerid, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);
							SetPlayerVirtualWorld(playerid, PROPERTY_INFO[i][property_ID]);

							LinkVehicleToInteriorEx(vehicleid, PROPERTY_INTERIORS[ PROPERTY_INFO[i][property_ID_INTERIOR] ][property_INT_INTERIOR]);
							SetVehicleVirtualWorldEx(vehicleid, PROPERTY_INFO[i][property_ID]);
							SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
							SetVehiclePosEx(vehicleid, 492.059387, -431.994201, 2757.995849);
							SetVehicleZAngle(vehicleid, 359.826965);
							break;
						}
					}
				}
				if(PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] != -1)
				{
					if(IsPlayerInRangeOfPoint(playerid, 5.0, 483.396270, -437.546813, 2758.268798))//Está en el interior y quiere ir al exterior
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new index = GetGarajeIndexByID(PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_GARAJE]);
						if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este vehículo no te pertenece.");
						if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este vehículo no te pertenece.");

						SetPlayerInterior(playerid, GARAJE_INFO[ index ][garaje_EXT_INTERIOR]);
						SetPlayerVirtualWorld(playerid, 0);

						LinkVehicleToInteriorEx(vehicleid, GARAJE_INFO[ index ][garaje_EXT_INTERIOR]);
						SetVehicleVirtualWorldEx(vehicleid, 0);
						SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);

						new Float:gPos[2], Float:Size[3];
						GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, Size[0], Size[1], Size[2]);

						gPos[0] = GARAJE_INFO[ index ][garaje_EXT_X] - (floatsqroot(Size[1] + Size[1] + Size[1]) * floatsin(-GARAJE_INFO[ index ][garaje_EXT_ANGLE], degrees));
						gPos[1] = GARAJE_INFO[ index ][garaje_EXT_Y] - (floatsqroot(Size[1] + Size[1] + Size[1]) * floatcos(-GARAJE_INFO[ index ][garaje_EXT_ANGLE], degrees));

						SetVehiclePosEx(vehicleid, gPos[0], gPos[1], GARAJE_INFO[ index ][garaje_EXT_Z]);
						SetVehicleZAngle(vehicleid, GARAJE_INFO[ index ][garaje_EXT_ANGLE] + 180);

						PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][pi_LOCAL_INTERIOR] = 0;
						PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
					}
				}
				for(new i = 0; i != sizeof San_Andreas_Barriers; i ++)
				{
					if(IsPlayerInRangeOfPoint(playerid, San_Andreas_Barriers[i][barrier_DISTANCE], San_Andreas_Barriers[i][barrier_PLAYER_X], San_Andreas_Barriers[i][barrier_PLAYER_Y], San_Andreas_Barriers[i][barrier_PLAYER_Z]))
					{
						if(GetPlayerInterior(playerid) == San_Andreas_Barriers[i][barrier_INTERIOR] && GetPlayerVirtualWorld(playerid) == San_Andreas_Barriers[i][barrier_WORLD])
						{
							if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE] == VEHICLE_TYPE_WORK)
							{
								if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
								{
									if(San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] != WORK_NONE)
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET] && !PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN2] ][pwork_SET]) break;
									}
									else
									{
										if(!PLAYER_WORKS[playerid][ San_Andreas_Barriers[i][barrier_VEHICLE_TYPE_IN] ][pwork_SET]) break;
									}
								}
							}
							if(IsDynamicObjectMoving(San_Andreas_Barriers[i][barrier_OBJECT_ID]) && !San_Andreas_Barriers[i][barrier_CLOSING]) break;
							if(San_Andreas_Barriers[i][barrier_PRICE] > 0)
							{
								if(GivePlayerCash(playerid, -San_Andreas_Barriers[i][barrier_PRICE], false, true))
								{
									SendFormatNotification(playerid, "Has pagado el peaje por ~y~%s ~w~dólares.", number_format_thousand(San_Andreas_Barriers[i][barrier_PRICE]));
								}
								else
								{
									SendNotification(playerid, "No tienes suficiente dinero para pagar el peaje.");
									break;
								}
							}

							KillTimer(San_Andreas_Barriers[i][barrier_TIMER]);
							San_Andreas_Barriers[i][barrier_TIMER] = SetTimerEx("CloseBarrier", 5000, false, "i", i);
							MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967 + 0.01, 0.0065, 0.0, 0.0, San_Andreas_Barriers[i][barrier_ROTATION]);
							San_Andreas_Barriers[i][barrier_CLOSING] = false;
							break;
						}
						else break;
					}
				}
			}
			if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
			{
				for(new i = 0; i != sizeof WORK_GARAGE_DOORS; i ++)
				{
					if(PLAYER_WORKS[playerid][ WORK_GARAGE_DOORS[i][type_gdoor_WORK] ][pwork_SET])
					{
						if(IsPlayerInRangeOfPoint(playerid, 20.0, WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_X], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_Y], WORK_GARAGE_DOORS[i][work_gdoor_CLOSED_Z]))
						{
							if(IsDynamicObjectMoving(WORK_GARAGE_DOORS[i][work_gdoor_OBJECT_ID]) && !WORK_GARAGE_DOORS[i][work_gdoor_CLOSING]) break;

							if(WORK_GARAGE_DOORS[i][type_gdoor_WORK] == WORK_MECANICO)
							{
								if(WORK_GARAGE_DOORS[i][work_gdoor_CLOSING])
								{
									MoveDynamicObject(WORK_GARAGE_DOORS[i][work_gdoor_OBJECT_ID], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_X], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_Y], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_Z], WORK_GARAGE_DOORS[i][work_gdoor_MOVE_SPEED], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RX], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RY], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RZ]);
									WORK_GARAGE_DOORS[i][work_gdoor_CLOSING] = false;
									break;
								}
								else
								{
									KillTimer(WORK_GARAGE_DOORS[i][work_gdoor_TIMER]);
									WORK_GARAGE_DOORS[i][work_gdoor_TIMER] = SetTimerEx("CloseWorkGarageDoor", 5000, false, "i", i);
									break;
								}
							}
							else
							{
								KillTimer(WORK_GARAGE_DOORS[i][work_gdoor_TIMER]);
								WORK_GARAGE_DOORS[i][work_gdoor_TIMER] = SetTimerEx("CloseWorkGarageDoor", 5000, false, "i", i);
								MoveDynamicObject(WORK_GARAGE_DOORS[i][work_gdoor_OBJECT_ID], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_X], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_Y], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_Z], WORK_GARAGE_DOORS[i][work_gdoor_MOVE_SPEED], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RX], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RY], WORK_GARAGE_DOORS[i][work_gdoor_OPENED_RZ]);
								WORK_GARAGE_DOORS[i][work_gdoor_CLOSING] = false;
								break;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] != -1)
			{
				if(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] == INTERIOR_CLUB)
				{
					if(IsPlayerInRangeOfPoint(playerid, 1.5, 1208.744140, -34.261119, 1000.953125) || IsPlayerInRangeOfPoint(playerid, 1.5, 1213.738037, -33.667881, 1000.953125))
					{
						if(PI[playerid][pi_CASH] <= 25) return SendNotification(playerid, "Digamos que no tienes mucho dinero como para estar gastándotelo en esto...");

						if(GivePlayerCash(playerid, -random(25), false, true))
							ApplyAnimation(playerid, "STRIP", RandomPayStripAnimations[random(sizeof(RandomPayStripAnimations))], 4.1, 0, 0, 0, 0, 0);

						return 1;
					}
				}
			}


			for(new i = 0; i != sizeof WORK_DOORS; i ++)
			{
				if(GetPlayerInterior(playerid) != WORK_DOORS[i][work_door_INTERIOR] || GetPlayerVirtualWorld(playerid) != WORK_DOORS[i][work_door_WORLD]) continue;
				if(IsDynamicObjectMoving(WORK_DOORS[i][work_door_OBJECT_ID]) || !WORK_DOORS[i][work_door_CLOSED]) continue;

				if(PLAYER_WORKS[playerid][ WORK_DOORS[i][type_door_WORK] ][pwork_SET])
				{
					new Float:pos[4];

					pos[0] = WORK_DOORS[i][work_door_X] + (1.0 * floatsin(-WORK_DOORS[i][work_door_RZ], degrees));
					pos[1] = WORK_DOORS[i][work_door_Y] + (1.0 * floatcos(-WORK_DOORS[i][work_door_RZ], degrees));
					pos[2] = WORK_DOORS[i][work_door_X] + (-1.0 * floatsin(-WORK_DOORS[i][work_door_RZ], degrees));
					pos[3] = WORK_DOORS[i][work_door_Y] + (-1.0 * floatcos(-WORK_DOORS[i][work_door_RZ], degrees));

					if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[0], pos[1], WORK_DOORS[i][work_door_Z]))
					{
						KillTimer(WORK_DOORS[i][work_door_TIMER]);
						WORK_DOORS[i][work_door_TIMER] = SetTimerEx("CloseWorkDoor", 3000, false, "i", i);
						MoveDynamicObject(WORK_DOORS[i][work_door_OBJECT_ID], WORK_DOORS[i][work_door_X], WORK_DOORS[i][work_door_Y], WORK_DOORS[i][work_door_Z] + 0.01, 0.0125, 0.0, 0.0, WORK_DOORS[i][work_door_RZ] - 85.0);
						WORK_DOORS[i][work_door_CLOSED] = false;
						break;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.8, pos[2], pos[3], WORK_DOORS[i][work_door_Z]))
					{
						KillTimer(WORK_DOORS[i][work_door_TIMER]);
						WORK_DOORS[i][work_door_TIMER] = SetTimerEx("CloseWorkDoor", 3000, false, "i", i);
						MoveDynamicObject(WORK_DOORS[i][work_door_OBJECT_ID], WORK_DOORS[i][work_door_X], WORK_DOORS[i][work_door_Y], WORK_DOORS[i][work_door_Z] + 0.01, 0.0125, 0.0, 0.0, WORK_DOORS[i][work_door_RZ] + 85.0);
						WORK_DOORS[i][work_door_CLOSED] = false;
						break;
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys & KEY_NO)
	{
		if(IsPlayerInDynamicArea(playerid, Lumberjack_Area))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_LUMBERJACK)
				{
					if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] == -1)
					{
						if(PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE]) return SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Lleva la leña cortada al punto marcado para talar más Árboles.");

						for(new i = 0; i != sizeof LUMBER_TREES; i ++)
						{
							if(IsPlayerInRangeOfPoint(playerid, 2.0, LUMBER_TREES[i][lumber_tree_X], LUMBER_TREES[i][lumber_tree_Y], LUMBER_TREES[i][lumber_tree_Z]))
							{
								if(LUMBER_TREES[i][lumber_tree_STATE] == LUMBER_TREE_STATE_NORMAL)
								{
									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, true, false, false, false, 0);
									LUMBER_TREES[i][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTING;
									PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = i;

									RemovePlayerAttachedObject(playerid, 9);
									SetPlayerAttachedObject(playerid, 9, 341, 6);
									SetPlayerArmedWeapon(playerid, 0);

									new label_str[256];
									format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE], 0.0);
									UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
									SetPlayerKeyPress(playerid, minrand(30, 50));
								}
								return Y_HOOKS_BREAK_RETURN_1;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	else if(newkeys == KEY_YES)
	{
		if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE] && PLAYER_TEMP[playerid][pt_LOCK_IPHONE])
		{
			HidePlayeriPhone(playerid);
			ShowPlayeriPhone(playerid);
			PLAYER_TEMP[playerid][pt_LOCK_IPHONE] = false;
			ShowPlayeriPhoneApps(playerid);
		}
		else if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE] && PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
		{
			PLAYER_PHONE[playerid][player_phone_STATE] = PHONE_STATE_ON;
			HidePlayeriPhone(playerid);
			PLAYER_TEMP[playerid][pt_LOCK_IPHONE] = true;
			ShowPlayeriPhone(playerid);
		}
		return 1;
	}
	else if(newkeys == KEY_LOOK_BEHIND)
	{
		switch(GetPlayerState(playerid))
		{
			case PLAYER_STATE_DRIVER: if(!IsBici(GetPlayerVehicleID(playerid))) return PC_EmulateCommand(playerid, "/motor");
		}
		return 1;
	}
	return 1;
}

forward CloseWorkDoor(i);
public CloseWorkDoor(i)
{
	WORK_DOORS[i][work_door_CLOSED] = true;
	MoveDynamicObject(WORK_DOORS[i][work_door_OBJECT_ID], WORK_DOORS[i][work_door_X], WORK_DOORS[i][work_door_Y], WORK_DOORS[i][work_door_Z], 0.0125, 0.0, 0.0, WORK_DOORS[i][work_door_RZ]);
	return 1;
}

forward CloseWorkGarageDoor(index);
public CloseWorkGarageDoor(index)
{
	WORK_GARAGE_DOORS[index][work_gdoor_CLOSING] = true;
	MoveDynamicObject(WORK_GARAGE_DOORS[index][work_gdoor_OBJECT_ID], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_X], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_Y], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_Z], WORK_GARAGE_DOORS[index][work_gdoor_MOVE_SPEED], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_RX], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_RY], WORK_GARAGE_DOORS[index][work_gdoor_CLOSED_RZ]);
	return 1;
}

forward CloseBarrier(i);
public CloseBarrier(i)
{
	San_Andreas_Barriers[i][barrier_CLOSING] = true;
	MoveDynamicObject(San_Andreas_Barriers[i][barrier_OBJECT_ID], San_Andreas_Barriers[i][barrier_X], San_Andreas_Barriers[i][barrier_Y], San_Andreas_Barriers[i][barrier_Z] + 0.72967, 0.0065, 0.0, -90.0, San_Andreas_Barriers[i][barrier_ROTATION]);
	return 1;
}
/*==BETAS SERVICIOS SEXUALES==
new bool:Infected[MAX_PLAYERS];
new bool:HasCondom[MAX_PLAYERS];
new bool:InService[MAX_PLAYERS];*/

// Variables temporales
new bool:Deslizando[MAX_PLAYERS];

Float:GetGroundZ()
{
    return 0.0; // Simple, puedes cambiar si usas MapAndreas
}

public OnPlayerUpdate(playerid)
{
    if (Deslizando[playerid])
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);

        z -= 0.3; // Velocidad de bajada

        if (z <= GetGroundZ())
        {
            Deslizando[playerid] = false;

            // Parar animaciones y desbloquear completamente
            ClearAnimations(playerid);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            TogglePlayerControllable(playerid, true);

            SetPlayerPos(playerid, x, y, GetGroundZ());

            SendClientMessage(playerid, 0x00FF00FF, "¡Has aterrizado y puedes moverte normalmente!");
        }
        else
        {
            SetPlayerPos(playerid, x, y, z);
        }
    }

/*	if (Infected[playerid])
    {
        if (random(1000) < 2) // Probabilidad muy baja para evitar bajadas constantes
        {
            new Float:health;
			GetPlayerHealth(playerid, health);
			SetPlayerHealth(playerid, health - 1.0);
            GameTextForPlayer(playerid, "~r~Te sientes mal...", 1000, 3);
        }
    }*/

	PLAYER_TEMP[playerid][pt_TIME_PAUSE] = gettime();

	if(PLAYER_TEMP[playerid][pt_KICKED] || PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PI[playerid][pi_ID] <= 0 || PI[playerid][pi_LEVEL] <= 0) return 0;

	new player_state = GetPlayerState(playerid);
	if(player_state == PLAYER_STATE_SPAWNED || player_state == PLAYER_STATE_SPECTATING) return 1;

	new player_action = GetPlayerSpecialAction(playerid), Float:player_health, Float:player_armour, player_weapon = GetPlayerWeapon(playerid), current_gettime = gettime();
	GetPlayerHealth(playerid, player_health);
	GetPlayerArmour(playerid, player_armour);
	if(player_weapon) CheckWeaponAndAmmo(playerid, player_weapon);

	if(ac_Info[CHEAT_PLAYER_HEALTH][ac_Enabled])
	{
		if(player_health > PI[playerid][pi_HEALTH] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_HEALTH);
				}
			}
		}
	}

	if(ac_Info[CHEAT_PLAYER_ARMOUR][ac_Enabled])
	{
		if(player_armour > PI[playerid][pi_ARMOUR] + 5.0)
		{
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_ARMOUR][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_ARMOUR][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_ARMOUR);
				}
			}
		}
	}

	if(ac_Info[CHEAT_JETPACK][ac_Enabled])
	{
		if(player_action == SPECIAL_ACTION_USEJETPACK)
		{
			if(!PI[playerid][pi_JETPACK])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_JETPACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_JETPACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_JETPACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_JETPACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_JETPACK);
					}
				}
			}
		}
	}

	new Float:dis, Float:vehicle_health, vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) dis = GetPlayerDistanceFromPoint(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	else
	{
		dis = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GetVehicleHealth(vehicleid, vehicle_health);
	}

	if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled] && vehicleid && player_state == PLAYER_STATE_PASSENGER)
	{
		if(floatabs(dis) > 20.0)
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID)
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = current_gettime + 5;
			}
		}
	}

	if(ac_Info[CHEAT_HIGH_POS][ac_Enabled])
	{
		if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
		{
			if(floatabs(dis) > 80.0 && PI[playerid][pi_POS_Z] > -97.0)
			{
				if(player_state != PLAYER_STATE_PASSENGER)
				{
					if(!ac_Info[CHEAT_HIGH_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					else
					{
						if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_HIGH_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_LAST_DETECTION] = current_gettime;
						if(PLAYER_AC_INFO[playerid][CHEAT_HIGH_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_HIGH_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_HIGH_POS, dis);
					}
				}
			}
		}
	}

	switch(player_state)
	{
		case PLAYER_STATE_ONFOOT:
		{
			if(ac_Info[CHEAT_PLAYER_SPEED][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_IMMUNITY])
				{
					if(!GetPlayerSurfingVehicleID(playerid))
					{
						new speed = GetPlayerSpeed(playerid);
						if(speed > 1000.0) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
						else if(speed > TEST_SPEED_PLAYER && (GetPlayerAnimationIndex(playerid) == 1231))
						{
							if(!ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
							else
							{
								if((gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_SPEED][ac_Interval]))
			   				 	{
									ClearAnimations(playerid);
									ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
								}
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_SPEED][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_SPEED][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_SPEED, speed);
							}
						}
					}
				}
			}

			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && player_action != SPECIAL_ACTION_ENTER_VEHICLE && player_action != SPECIAL_ACTION_EXIT_VEHICLE)
					{
						if(floatabs(dis) > 6.0 && PI[playerid][pi_POS_Z] > -97.0)
						{
							if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
							}
						}
					}
				}
			}
		}
		case PLAYER_STATE_DRIVER:
		{
			new Float:vspeed = GetVehicleSpeed(vehicleid);

			if(ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Enabled]) //Vehicle speed
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_IMMUNITY])
				{
					if(vspeed > 1000.0)
					{
						if(!ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_SPEED_HACK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_SPEED_HACK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_SPEED_HACK);
						}
					}
				}
			}

			if(ac_Info[CHEAT_VEHICLE_HEALTH][ac_Enabled]) //Vehicle Health
			{
				if(vehicle_health > (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 20.0))
				{
					if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH, (GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] + 5.0) - vehicle_health);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_HEALTH][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_HEALTH][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_HEALTH);
						}
					}
				}
			}

			if(ac_Info[CHEAT_POS][ac_Enabled])
			{
				if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY])
				{
					if(vspeed < 20.0 && floatabs(dis) >= 10.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0)
					{
						if(!ac_Info[CHEAT_POS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						else
						{
							if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_POS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_LAST_DETECTION] = current_gettime;
							if(PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_POS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_POS, dis);
						}
					}
				}
			}

			if(ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Enabled])
			{
				new Keys, ud, lr;
				GetPlayerKeys(playerid, Keys, ud, lr);
				if(Keys == KEY_SPRINT)
				{
					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] && vspeed > 60.0 && GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] > -97.0 && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
					{
						if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							else
							{
								if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_LAST_DETECTION] = current_gettime;
								if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_NOFUEL][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_NOFUEL);
							}
						}
					}
				}
			}
		}
	}

	PI[playerid][pi_HEALTH] = player_health;
	PI[playerid][pi_ARMOUR] = player_armour;
	if(!PLAYER_TEMP[playerid][pt_SPECTANDO]) GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
	if(vehicleid)
	{
		GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = vehicle_health;
	}
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, Float:angle, interior, world, freeze = 0, addoffset = 0)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY] = gettime() + 5;

	if(addoffset)
	{
		x += (1.5 * floatsin(-angle, degrees));
		y += (1.5 * floatcos(-angle, degrees));
	}
	if(PLAYER_TEMP[playerid][pt_SPECTEADO])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PLAYER_TEMP[i][pt_ID_SPEC] == playerid)
			{
				SetPlayerInterior(i, interior);
				SetPlayerVirtualWorld(i, world);
			}
		}
	}

	PI[playerid][pi_POS_X] = x;
	PI[playerid][pi_POS_Y] = y;
	PI[playerid][pi_POS_Z] = z;
	PI[playerid][pi_ANGLE] = angle;

	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);
	SetCameraBehindPlayer(playerid);

	if(freeze)
	{
		TogglePlayerControllableEx(playerid, false);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
		PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);
	}
	return 1;
}

forward TogglePlayerControl(playerid, bool:controlable);
public TogglePlayerControl(playerid, bool:controlable)
{
	return TogglePlayerControllableEx(playerid, controlable);
}

GetNearestHospitalForPlayer(playerid)
{
	new Float:distance = 99999.0,
		Float:tmp_distance,
		closest = -1;

	for(new i = 0; i < sizeof Hospital_Spawn_Positions; i++)
	{
		tmp_distance = GetPlayerDistanceFromPoint(playerid, Hospital_Spawn_Positions[i][hspi_X], Hospital_Spawn_Positions[i][hspi_Y], Hospital_Spawn_Positions[i][hspi_Z]);
		if (tmp_distance < distance)
		{
			distance = tmp_distance;
			closest = i;
		}
	}

	if(closest == -1) closest = 1;
	return closest;
}

GetHospitalSpawnPosition(hospital, &Float:x, &Float:y, &Float:z, &Float:angle, &interior, &local_interior, &rp_state)
{
	x = Hospital_Spawn_Positions[hospital][hspi_X];
	y = Hospital_Spawn_Positions[hospital][hspi_Y];
	z = Hospital_Spawn_Positions[hospital][hspi_Z];
	angle = Hospital_Spawn_Positions[hospital][hspi_ANGLE];
	interior = 0;
	local_interior = 0;
	rp_state = ROLEPLAY_STATE_NORMAL;
	return 1;
}

UpdateHospitalSizeTextdrawLife(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2], 270.0 + ( PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] * 0.98), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
	return 1;
}

forward HealthUp(playerid);
public HealthUp(playerid)
{
	if(PI[playerid][pi_STATE] != ROLEPLAY_STATE_HOSPITAL) return 1;

	if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] < 100.0)
	{
		if(PI[playerid][pi_VIP]) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 10.0;
		else PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] += 5.0;

		if(PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] > 100.0) PLAYER_TEMP[playerid][pt_HOSPITAL_LIFE] = 100.0;
		UpdateHospitalSizeTextdrawLife(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][3]);
		PLAYER_TEMP[playerid][pt_TIMERS][3] = SetTimerEx("HealthUp", 1000, false, "i", playerid);
	}
	else
	{
		if(PI[playerid][pi_VIP]) PI[playerid][pi_HEALTH] = 100.0;
		else PI[playerid][pi_HEALTH] = 50.0;

		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);

		ClearPlayerChat(playerid);
		SendNotification(playerid, "Te has recuperado.");
		new price = PI[playerid][pi_LEVEL] * 200;
		if(price > 1200) price = 1200;
		price += minrand(100, 200);

		if(price > PI[playerid][pi_CASH])
		{
			price = PI[playerid][pi_CASH];
			if(price < 0) price = 0;
		}

		SendFormatNotification(playerid, "El coste de los servicios médicos ofrecidos es de ~r~%s dólares~w~.", number_format_thousand(price));
		GivePlayerCash(playerid, -price, false, true);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][1]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HOSPITAL][2]);
		PI[playerid][pi_LOCAL_INTERIOR] = 0;
		PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = -1;

		if(PI[playerid][pi_WANTED_LEVEL] > 0 || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
		{
			PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;
			if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
			else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
			PI[playerid][pi_WANTED_LEVEL] = 0;
			PI[playerid][pi_POLICE_JAIL_ID] = 0;
			PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], 0, 0, 0, 0, 0, 0);
			PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
			SetPlayerVirtualWorld(playerid, 0);

			new time = PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]);
			SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert(time));
		}
		else
		{
			GetHospitalSpawnPosition(PLAYER_TEMP[playerid][pt_HOSPITAL], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], PI[playerid][pi_LOCAL_INTERIOR], PI[playerid][pi_STATE]);
			SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
		}
		PLAYER_TEMP[playerid][pt_PLAYER_FINISH_HOSPITAL] = true;
		TogglePlayerSpectatingEx(playerid, false);
	}
	return 1;
}

TogglePlayerSpectatingEx(playerid, bool:spectate)
{
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_TEMP[playerid][pt_SPECTANDO] = spectate;

	return TogglePlayerSpectating(playerid, spectate);
}

#define MAX_INTERIOR_ACTORS 10
enum Interior_Actor_Enum
{
	bool:ia_VALID,
	ia_SKIN,
	Float:ia_POS_X,
	Float:ia_POS_Y,
	Float:ia_POS_Z,
	Float:ia_POS_A,
}

CreateInteriorActor(interior_type, world, interior)
{
	if(interior_type == INTERIOR_NO_INFO) return INVALID_ACTOR_ID;

	new InteriorActorInfo[MAX_INTERIOR_ACTORS][Interior_Actor_Enum];

	switch(interior_type)
	{
		/*case INTERIOR_GENERAL_HOSPITAL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 308;
			InteriorActorInfo[0][ia_POS_X]	= 1969.236572;
			InteriorActorInfo[0][ia_POS_Y]	= 1169.541259;
			InteriorActorInfo[0][ia_POS_Z]	= -5.208700;
			InteriorActorInfo[0][ia_POS_A]	= 178.0;
		}*/
		case INTERIOR_BINCO:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 119;
			InteriorActorInfo[0][ia_POS_X]	= 208.376373;
			InteriorActorInfo[0][ia_POS_Y]	= -98.703956;
			InteriorActorInfo[0][ia_POS_Z]	= 1005.257812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_SUBURBAN:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 191;
			InteriorActorInfo[0][ia_POS_X]	= 203.826187;
			InteriorActorInfo[0][ia_POS_Y]	= -41.667518;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_PROLAPS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 190;
			InteriorActorInfo[0][ia_POS_X]	= 207.139907;
			InteriorActorInfo[0][ia_POS_Y]	= -127.805473;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_DIDIER_SACHS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 169;
			InteriorActorInfo[0][ia_POS_X]	= 204.275909;
			InteriorActorInfo[0][ia_POS_Y]	= -157.829010;
			InteriorActorInfo[0][ia_POS_Z]	= 1000.523437;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_VICTIM:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 217;
			InteriorActorInfo[0][ia_POS_X]	= 204.853225;
			InteriorActorInfo[0][ia_POS_Y]	= -8.764448;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.210937;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		case INTERIOR_ZIP:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 211;
			InteriorActorInfo[0][ia_POS_X]	= 162.226135;
			InteriorActorInfo[0][ia_POS_Y]	= -81.191978;
			InteriorActorInfo[0][ia_POS_Z]	= 1001.804687;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_247:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X]	= -27.483411;
			InteriorActorInfo[0][ia_POS_Y]	= -91.628837;
			InteriorActorInfo[0][ia_POS_Z]	= 1003.546875;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_PIZZA:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 155;
			InteriorActorInfo[0][ia_POS_X] 	= 375.114501;
			InteriorActorInfo[0][ia_POS_Y] 	= -117.272621;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.492187;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_CLUCKIN_BELL:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 167;
			InteriorActorInfo[0][ia_POS_X] 	= 368.652679;
			InteriorActorInfo[0][ia_POS_Y] 	= -4.492218;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.851562;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BURGER_SHOT:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 205;
			InteriorActorInfo[0][ia_POS_X] 	= 376.114227;
			InteriorActorInfo[0][ia_POS_Y] 	= -65.848991;
			InteriorActorInfo[0][ia_POS_Z] 	= 1001.507812;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1407.526489;
			InteriorActorInfo[0][ia_POS_Y] 	= 1321.833496;
			InteriorActorInfo[0][ia_POS_Z] 	= 1501.091918;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_SF:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 1104.802001;
			InteriorActorInfo[0][ia_POS_Y] 	= 1531.275634;
			InteriorActorInfo[0][ia_POS_Z] 	= 1452.475097;
			InteriorActorInfo[0][ia_POS_A]	= 180.0;
		}
		case INTERIOR_BANK_LV:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 59;
			InteriorActorInfo[0][ia_POS_X] 	= 2692.497558;
			InteriorActorInfo[0][ia_POS_Y] 	= -610.933593;
			InteriorActorInfo[0][ia_POS_Z] 	= -71.658203;
			InteriorActorInfo[0][ia_POS_A]	= 90.0;
		}
		case INTERIOR_CITY_HALL_LS:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 186;
			InteriorActorInfo[0][ia_POS_X] 	= -474.572387;
			InteriorActorInfo[0][ia_POS_Y] 	= 287.982879;
			InteriorActorInfo[0][ia_POS_Z] 	= 2004.584960;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_UNITY_STATION:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 184;
			InteriorActorInfo[0][ia_POS_X] 	= 1489.038818;
			InteriorActorInfo[0][ia_POS_Y] 	= 1305.631591;
			InteriorActorInfo[0][ia_POS_Z] 	= 1093.296386;
			InteriorActorInfo[0][ia_POS_A]	= 270.0;
		}
		case INTERIOR_TRUCK:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 127;
			InteriorActorInfo[0][ia_POS_X] 	= 1297.120117;
			InteriorActorInfo[0][ia_POS_Y] 	= -66.351226;
			InteriorActorInfo[0][ia_POS_Z] 	= 1002.497375;
			InteriorActorInfo[0][ia_POS_A]	= 0.0;
		}
		case INTERIOR_TRAILERO:
		{
			InteriorActorInfo[0][ia_VALID]	= true;
			InteriorActorInfo[0][ia_SKIN]	= 44;
			InteriorActorInfo[0][ia_POS_X] 	= 1357.6198;
			InteriorActorInfo[0][ia_POS_Y] 	= 1547.1622;
			InteriorActorInfo[0][ia_POS_Z] 	= 3001.0859;
			InteriorActorInfo[0][ia_POS_A]	= 87.6692;
		}
		
		default: return INVALID_ACTOR_ID;
	}

	new mainActor = INVALID_ACTOR_ID;
	for(new i; i != sizeof InteriorActorInfo; i++)
	{
		if(InteriorActorInfo[i][ia_VALID])
		{
			new tmp = CreateDynamicActor(InteriorActorInfo[i][ia_SKIN], InteriorActorInfo[i][ia_POS_X], InteriorActorInfo[i][ia_POS_Y], InteriorActorInfo[i][ia_POS_Z], InteriorActorInfo[i][ia_POS_A], true, 100.0, world, interior);
			if(i == 0)
			{
				mainActor = tmp;
			}
		}
	}

	return mainActor;
}

GetBuyPropertySiteIndexByIntTyp(interior_type)
{
	for(new i = 0; i != sizeof BUY_PROPERTIES_SITES; i ++)
	{
		if(BUY_PROPERTIES_SITES[i][site_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetBankLocalIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Bank_Interior_Positions; i ++)
	{
		if(Bank_Interior_Positions[i][bank_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

GetPlayerFastFoodIndex(playerid)
{
	for(new i = 0; i != sizeof Fast_Food_Positions; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Fast_Food_Positions[i][fast_food_X], Fast_Food_Positions[i][fast_food_Y], Fast_Food_Positions[i][fast_food_Z]))
		{
			return i;
		}
	}
	return -10;
}

GetClothingShopIndexByIntType(interior_type)
{
	for(new i = 0; i != sizeof Clothing_Shop_Positions; i ++)
	{
		if(Clothing_Shop_Positions[i][clothing_shop_INTERIOR_TYPE] == interior_type) return i;
	}
	return -1;
}

ShowToysShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

HideToysShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][6]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][7]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][9]);
	return 1;
}

ClosePlayerToysMenu(playerid)
{
	SetPlayerVirtualWorld(playerid, ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD] );
	TogglePlayerControllableEx(playerid, true);

	HideToysShopTextdraws(playerid);
	//PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] = 0;
	PLAYER_TEMP[playerid][pt_TOYS_SHOP] = false;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

GetNewIDPlayerToy(playerid)
{
	new ID = -1;
	for(new i = 0; i < MAX_SU2_TOYS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_MODELID] == 0)
		{
			ID = i;
			break;
		}
	}
	return ID;
}

GetNameObjeto(ID)
{
	new name[32] = "Desconocido";
	for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
	{
		if(OBJETOS_INFO[i][obj_ID] == ID)
		{
			format(name, sizeof name, "%s", OBJETOS_INFO[i][obj_NAME]);
			break;
		}
	}
	return name;
}

GetBoneObjeto(ID)
{
	new ID_BONE = 2;
	for(new i = 0; i < (sizeof OBJETOS_INFO); i ++)
	{
		if(OBJETOS_INFO[i][obj_ID] == ID)
		{
			ID_BONE = OBJETOS_INFO[i][obj_BONE];
			break;
		}
	}
	return ID_BONE;
}

GivePlayerToy(playerid, modelid)
{
	new slot = GetNewIDPlayerToy(playerid);
	if(slot == -1) return 1;

	PLAYER_TOYS[playerid][slot][player_toy_VALID] = true;
	PLAYER_TOYS[playerid][slot][player_toy_MODELID] = modelid;
	format(PLAYER_TOYS[playerid][slot][player_toy_NAME], 24, "%s", GetNameObjeto(modelid));
	PLAYER_TOYS[playerid][slot][player_toy_BONE] = GetBoneObjeto(modelid);
	PLAYER_TOYS[playerid][slot][player_toy_ATTACHED] = false;
	PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X] = 0.085;
	PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y] = 0.017999;
	PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z] = 0.000999;
	PLAYER_TOYS[playerid][slot][player_toy_ROT_X] = 87.2;
	PLAYER_TOYS[playerid][slot][player_toy_ROT_Y] = 88.1;
	PLAYER_TOYS[playerid][slot][player_toy_ROT_Z] = -7.5;
	PLAYER_TOYS[playerid][slot][player_toy_SCALE_X] = 1;
	PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y] = 1;
	PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z] = 1;
 	PLAYER_TOYS[playerid][slot][player_toy_COLOR_1] = -1;
 	PLAYER_TOYS[playerid][slot][player_toy_COLOR_2] = -1;
 	RegisterNewPlayerToy(playerid, slot);

 	PlayerPlaySoundEx(playerid, 1058, 0.0, 0.0, 0.0);
	return 1;
}

RegisterNewPlayerToy(playerid, slot)
{
	inline OnPlayerToyInserted()
	{
		PLAYER_TOYS[playerid][slot][player_toy_ID] = cache_insert_id();
	}

	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO ptoys(id_player, name, attached, modelid, bone, offset_x, offset_y, offset_z, rot_x, rot_y, rot_z, scale_x, scale_y, scale_z, color1, color2)\
			VALUES(%d, '%e', %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d);\
		",
			PI[playerid][pi_ID], PLAYER_TOYS[playerid][slot][player_toy_NAME], PLAYER_TOYS[playerid][slot][player_toy_ATTACHED], PLAYER_TOYS[playerid][slot][player_toy_MODELID],
			PLAYER_TOYS[playerid][slot][player_toy_BONE], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_X], PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Y],
			PLAYER_TOYS[playerid][slot][player_toy_OFFSET_Z], PLAYER_TOYS[playerid][slot][player_toy_ROT_X], PLAYER_TOYS[playerid][slot][player_toy_ROT_Y],
			PLAYER_TOYS[playerid][slot][player_toy_ROT_Z], PLAYER_TOYS[playerid][slot][player_toy_SCALE_X], PLAYER_TOYS[playerid][slot][player_toy_SCALE_Y],
			PLAYER_TOYS[playerid][slot][player_toy_SCALE_Z], PLAYER_TOYS[playerid][slot][player_toy_COLOR_1], PLAYER_TOYS[playerid][slot][player_toy_COLOR_2]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerToyInserted);
	return 1;
}


UpdateToysShop(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_TOYS_SHOP]) return 0;

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][1], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_NAME]);
	PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3], Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_modelid]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][3]);

	new td_str[128]; format(td_str, sizeof td_str, "Modelo:_%s~n~Precio:_%s$", Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_model], number_format_thousand( Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price] ));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][4], td_str);


	if(PI[playerid][pi_CASH] < Toys_Shop[ PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] ][shop_toy_price]) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], -900267777);
	else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5], 1855979775);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][5]);

	format(td_str, sizeof td_str, "%d/%d", PLAYER_TEMP[playerid][pt_TOYS_SHOP_TOY_SELECTED] + 1, sizeof(Toys_Shop));
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TOYS_SHOP][8], td_str);
	return 1;
}


ShowClothingShopTextdraws(playerid)
{
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

HideClothingShopTextdraws(playerid)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][3]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5]);
	return 1;
}

ClosePlayerClothingMenu(playerid)
{
	PI[playerid][pi_POS_X] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_X];
	PI[playerid][pi_POS_Y] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Y];
	PI[playerid][pi_POS_Z] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_Z];
	PI[playerid][pi_ANGLE] = Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_ANGLE];
	SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
	TogglePlayerControllableEx(playerid, true);

	HideClothingShopTextdraws(playerid);
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] = 0;
	PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] = -1;
	CancelSelectTextDrawEx(playerid);
	return 1;
}

ExitPlayerWardrobe(playerid)
{
	SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_INTERIOR], ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INT_WORLD], false, true);
	return 1;
}

UpdateClothingShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_CLOTHING_SHOP] == -1) return 0;

	new cost, textdraw_str[128];
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][1], Clothing_Shop_Positions[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP]][clothing_shop_NAME]);

	switch(ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE])
	{
		case INTERIOR_BINCO:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Binco_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Binco_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_SUBURBAN:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Suburban_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Suburban_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_PROLAPS:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Prolaps_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Prolaps_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_DIDIER_SACHS:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Didier_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Didier_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_VICTIM:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Victim_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Victim_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
		case INTERIOR_ZIP:
		{
			switch(PI[playerid][pi_GENERO])
			{
				case SEXO_MASCULINO:
				{
					SetPlayerSkin(playerid, Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Male_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Male_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
				case SEXO_FEMENINO:
				{
					SetPlayerSkin(playerid, Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][0]);
					cost = Zip_Shop_Female_Skins[PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN]][2];

					if(PI[playerid][pi_CASH] < cost) PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], -1459617611);
					else PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2], 9306312);

					format(textdraw_str, sizeof textdraw_str, "Precio:_%s$~n~Ropa:_%d/%d", number_format_thousand(cost), PLAYER_TEMP[playerid][pt_CLOTHING_SHOP_SELECTED_SKIN] + 1, sizeof(Zip_Shop_Female_Skins));
					PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][5], textdraw_str);
				}
			}
		}
	}
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_CLOTHING_SHOP][2]);
	return 1;
}

stock number_format_thousand(e_number)
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, ".", numbers);
	}

	if(negative) strins(f_string, "-", 0);
	return f_string;
}

stock number_format_dash(e_number)
{
	new f_string[24], bool:negative;
	format(f_string, sizeof f_string, "%d", e_number);
	if(e_number < 0)
	{
		negative = true;
		strdel(f_string, 0, 1);
	}

	new numbers = strlen(f_string);
	while(numbers > 3)
	{
		numbers -= 3;
		strins(f_string, "-", numbers);
	}

	if(negative) strins(f_string, "- ", 0);
	return f_string;
}

SelectTextDrawEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = true;
	return SelectTextDraw(playerid, color);
}

CancelSelectTextDrawEx(playerid)
{
	PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW] = false;
	return CancelSelectTextDraw(playerid);
}

UpdatePlayerHud(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return 0;

	new Float:size;
	size = 500.699981 + (PI[playerid][pi_HUNGRY] * 0.46030121);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1], size, 0.000000);

	size = 557.699981 + (PI[playerid][pi_THIRST] * 0.46030121);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2], size, 0.000000);

	if(PI[playerid][pi_CONFIG_HUD])
	{
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][1]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][2]);
	}
	return 1;
}

#define INTERVAL_HUNGRY_THIRST_DOWN	2 // 2 segundos de timer
#define THIRST_HOURS_STOPPED	9 // 9 horas parado si agua esta a 100 va a 0
#define HUNGRY_HOURS_STOPPED	12 // 12 horas parado si alimentacion esta a 100 va a 0

forward HungryThirstDown(playerid);
public HungryThirstDown(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL) return HidePlayerHud(playerid);
	if(!PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS]) return HidePlayerHud(playerid);

	new current_gettime = gettime();

	if(PI[playerid][pi_VIP])
	{
		if(current_gettime - PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] > 300)
		{
			CheckPlayerSuperUser(playerid);
		}
	}

	if(PI[playerid][pi_WANTED_LEVEL] > 0 && PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL && !PLAYER_TEMP[playerid][pt_CUFFED])
	{
		if(gettime() - PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] > 300)
		{
			if(PI[playerid][pi_WANTED_LEVEL] == 1)
			{
				SendFormatNotification(playerid, "Has perdido de vista a la policía.");
				SetPlayerWantedLevelEx(playerid, 0);
			}
			else SetPlayerWantedLevelEx(playerid, PI[playerid][pi_WANTED_LEVEL] - 1);
		}
	}

	PI[playerid][pi_THIRST] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(THIRST_HOURS_STOPPED, 36));
	PI[playerid][pi_HUNGRY] -= floatdiv(float(INTERVAL_HUNGRY_THIRST_DOWN), floatmul(HUNGRY_HOURS_STOPPED, 36));

	if(PI[playerid][pi_THIRST] <= 0.5) PI[playerid][pi_THIRST] = 0.5;
	if(PI[playerid][pi_HUNGRY] <= 0.5) PI[playerid][pi_HUNGRY] = 0.5;
	if(PI[playerid][pi_THIRST] < 1.0)
	{
		PI[playerid][pi_HEALTH] -= 0.2;

		if(PI[playerid][pi_THIRST] <= 1.0 || PI[playerid][pi_HEALTH] <= 0.5)
		{
			SendNotification(playerid, "Te has desmayado por deshidratación.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][pi_THIRST] = 75.0;
			return 1;
		}

		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);

		if(!PLAYER_TEMP[playerid][pt_THIRST_MESSAGE])
		{
			SendNotification(playerid, "Tienes sed, si no bebes agua pronto acabarás muriendo.");
			PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = true;
		}
	}

	if(PI[playerid][pi_HUNGRY] < 1.0)
	{
		PI[playerid][pi_HEALTH] -= 0.2;

		if(PI[playerid][pi_HUNGRY] <= 1.0 || PI[playerid][pi_HEALTH] <= 0.5)
		{
			SendNotification(playerid, "Te has desmayado por hambre.");
			SetPlayerHealthEx(playerid, 0.0);
			PI[playerid][pi_HUNGRY] = 55.0;
			return 1;
		}

		SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);

		if(!PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE])
		{
			SendNotification(playerid, "Tienes hambre, si no comes nada pronto acabarás muriendo.");
			PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = true;
		}
	}

	UpdatePlayerHud(playerid);
	return 1;
}

SetPlayerHud(playerid)
{
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = true;
	UpdatePlayerHud(playerid);
	UpdateReputationTextDraws(playerid);

	if(PI[playerid][pi_CONFIG_TIME]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME]);

	if(PI[playerid][pi_CONFIG_HUD])
	{
		for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++)
		{
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_HUD][i]);
		}
		for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++)
		{
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
		}
	}

	if(PI[playerid][pi_PING])
	{
		for(new i = 0; i < 3; i ++)
		{
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PING]);
			TextDrawShowForPlayer(playerid, Textdraws[textdraw_PING][i]);
		}
	}
	if(PI[playerid][pi_ZONE_TEXT]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT]);
	if(PI[playerid][pi_INFO_HEALTH]) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH]);


	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
	PLAYER_TEMP[playerid][pt_TIMERS][4] = SetTimerEx("HungryThirstDown", INTERVAL_HUNGRY_THIRST_DOWN * 1000, true, "i", playerid);
	return 1;
}

HidePlayerHud(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][4]);
	PLAYER_TEMP[playerid][pt_HUD_TEXTDRAWS] = false;

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SERVER_TIME]);


	for(new i = 0; i < HUD_TEXTDRAWS_SIZE; i ++)
	{
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_HUD][i]);
	}

	for(new i = 0; i < HUD_PTEXTDRAWS_SIZE; i ++)
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_HUD][i]);
	}

	for(new i = 0; i < 3; i ++)
	{
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PING]);
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_PING][i]);
	}

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_ZONE_TEXT]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH]);

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	return 1;
}

is_open(hour, open, close)
{
	if(open < 0 || close < 0) return false;
	if(open > close)
	{
		if( ( (hour >= open) && (hour < 24) ) || ( (hour >= 0) && (hour < close) ) )
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else if(open < close)
	{
		if((hour >= open) && (hour < close))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
}

Add_Hungry_Thirst(playerid, Float:hungry, Float:thirst)
{
	PI[playerid][pi_HUNGRY] += hungry;
	if(PI[playerid][pi_HUNGRY] > 30.0) PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	if(PI[playerid][pi_HUNGRY] > 100.0) PI[playerid][pi_HUNGRY] = 100.0;

	PI[playerid][pi_THIRST] += thirst;
	if(PI[playerid][pi_THIRST] > 30.0) PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	if(PI[playerid][pi_THIRST] > 100.0) PI[playerid][pi_THIRST] = 100.0;

	UpdatePlayerHud(playerid);
	return 1;
}

SetActorSkin(actorid, skin, &actor)
{
	actor = INVALID_ACTOR_ID;

	new Float:x, Float:y, Float:z, Float:a, vw;
	GetActorPos(actorid, x, y, z);
	GetActorFacingAngle(actorid, a);
	vw = GetActorVirtualWorld(actorid);
	DestroyActor(actorid);
	actor = CreateActor(skin, x, y, z, a);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

stock SetActorFacingAngleEx(actorid, skin, Float:angle, &actor)
{
	actor = INVALID_ACTOR_ID;

	new Float:x, Float:y, Float:z, vw;
	GetActorPos(actorid, x, y, z);
	vw = GetActorVirtualWorld(actorid);
	DestroyActor(actorid);
	actor = CreateActor(skin, x, y, z, angle);
	SetActorVirtualWorld(actor, vw);
	return 1;
}

GetPlayerIdByBankAccountId(account_id)
{
	for(new i = 0; i != sizeof(PI); i ++)
	{
		if(PI[i][pi_BANK_ACCOUNT] == 0) continue;
		if(PI[i][pi_BANK_ACCOUNT] == account_id) return i;
	}
	return -1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(newstate != PLAYER_STATE_SPAWNED && oldstate != PLAYER_STATE_SPAWNED)
		{
			if(ac_Info[CHEAT_STATE_SPAMMER][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY])
				{
					new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE]);

					if(interval < 50)
					{
						if(!ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_STATE_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_STATE_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_STATE_SPAMMER, float(interval));
						}
					}
					PLAYER_TEMP[playerid][pt_ANTIFLOOD_STATE] = GetTickCount();
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_TEMP[playerid][pt_SPECTEADO])
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(PLAYER_TEMP[i][pt_ID_SPEC] == playerid) PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PLAYER_TEMP[i][pt_ID_SPEC] == playerid) PlayerSpectatePlayer(i, playerid);
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(ac_Info[CHEAT_CAR_JACKING][ac_Enabled])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_CAR_JACKING][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_JACKING][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_CAR_JACKING][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_JACKING][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_JACKING);
					}

					PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = INVALID_VEHICLE_ID;
					return 1;
				}
			}
		}

		UpdateVehicleParams(vehicleid);
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = playerid;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = true;
		if(PI[playerid][pi_DRIVE_LICENSE_POINTS] == 0 && !PLAYER_TEMP[playerid][pt_DL_EXAM] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO])
		{
			SendNotification(playerid, "Estás conduciendo sin licencia de conducción, la policía podría multarte.");
		}
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_DRIVER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_NONE:
			{
				if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_ENGINE])
				{
					GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
					UpdateVehicleParams(vehicleid);
				}
			}
			case VEHICLE_TYPE_DRIVING_SCHOOL:
			{
				if(PLAYER_TEMP[playerid][pt_DL_EXAM])
				{
					SendNotification(playerid, "Sigue los puntos de control para completar el examen.");
					SetPlayerDrivingSchoolCP(playerid);
				}
			}
			case VEHICLE_TYPE_SELL:
			{
				PLAYER_TEMP[playerid][pt_SELECTED_BUY_VEHICLE_ID] = vehicleid;
				new pvehicles = CountPlayerVehicles(playerid);
				if(pvehicles >= MAX_SU2_VEHICLES) return SendFormatNotification(playerid, "No puedes comprar más vehículos, el límite es %d.", MAX_SU2_VEHICLES);
				if(PI[playerid][pi_VIP] == 1)
				{
					if(pvehicles >= MAX_SU_VEHICLES)
					{
						SendFormatNotification(playerid, "No puedes comprar más vehículos, el límite es %d, puedes comprar ~y~VIP2 ~w~para adquirir hasta %d vehículos.", MAX_SU_VEHICLES, MAX_SU2_VEHICLES);
						return 1;
					}
				}
				if(!PI[playerid][pi_VIP])
				{
					if(pvehicles >= MAX_NU_VEHICLES)
					{
						SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_VEHICLES);
						return 1;
					}
				}

				ShowDialog(playerid, DIALOG_BUY_VEHICLE);
				return 1;
			}
			case VEHICLE_TYPE_WORK:
			{
				if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}

				if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
				{
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
					{
						if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
						{
							if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
							{
								if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								else
								{
									if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
									else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

									PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
									if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
								}
							}
						}
						return 1;
					}
				}

				if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
				{
					if(ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Enabled])
					{
						if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_IMMUNITY])
						{
							if(!ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							else
							{
								if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] = 0;
								else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] ++;

								PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_LAST_DETECTION] = gettime();
								if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_WORK][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_WORK][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_WORK);
							}
						}
					}
					return 1;
				}
				switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR: CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					case WORK_TRUCK, WORK_DELIVERYMAN:
					{
						if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
						{
							if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DRIVER_USER_ID] != PI[playerid][pi_ID])
							{
								SendNotification(playerid, "No eres el conductor de este vehículo.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}
							else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
						}
						else CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_VEHICLES[vehicleid][work_vehicle_WORK], vehicleid);
					}
					case WORK_TRASH:
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
						{
							if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] != playerid)
							{
								SendNotification(playerid, "No eres el conductor de este camión.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							SetPlayerTrashCheckpoint(playerid, vehicleid);
						}
						else
						{
							if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
							{
								SendNotification(playerid, "Ya estás trabajando con otro compañero.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = true;
							PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
							TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = playerid;

							if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] == INVALID_PLAYER_ID) SendNotification(playerid, "Necesitas un compañero para empezar con el trabajo.");
							else
							{
								new route = random(MAX_ROUTES);
								while(!TRASH_OBJECTS[route][trash_route_VALID])
								{
									route = random(MAX_ROUTES);
								}

								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
								TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
								SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
								CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);

								SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
								SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

							}
						}
					}
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED])
						{
							if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] != PI[playerid][pi_ID])
							{
								if(GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]) < 20.0)
								{
									SetVehicleToRespawnEx(vehicleid);
								}

								SendNotification(playerid, "No eres el conductor de esta moto.");
								RemovePlayerFromVehicle(playerid);
								return 1;
							}

							if(!PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								SendNotification(playerid, "Ya has repartido todas las pizzas, vuelve a la pizzería para cobrar.");
								SetPlayer_Pizza_Checkpoint(playerid, -1);
							}
							else
							{
								SendFormatNotification(playerid, "Te quedan %d pizzas por repartir.", PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS]);
								if(PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI])
								{
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = randomEx(sizeof(PIZZA_DELIVERY_POINT), PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
									PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
								}
								SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
							}
						}
						else
						{
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_STARTED] = true;
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_DRIVER_AID] = PI[playerid][pi_ID];
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS] = minrand(3, 6);
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT] = random( sizeof(PIZZA_DELIVERY_POINT) );
							PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT_DELI] = false;
							PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS];
							PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;

							SendFormatNotification(playerid, "Esta moto tiene %d pizzas, repartelas todas y vuelve a la pizzería para cobrar.", PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZAS]);
							SetPlayer_Pizza_Checkpoint(playerid, PIZZA_VEHICLE[vehicleid][pizza_vehicle_PIZZA_POINT]);
						}
					}
				}
			}
		}

		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerJobMark(playerid, WORK_TAXI);

				SendNotification(playerid, "Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;

		new vehicleid = GetPlayerVehicleID(playerid);
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] = vehicleid;

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] && VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_PASSENGER_DOOR]) //cerrado
		{
			if(gettime() - GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] > 5) // Si el tiempo que paso desde que cerro es mayor a 5
			{
				if(ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Enabled])
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_PLAYER_VEHICLE_DOORS][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_PLAYER_VEHICLE_DOORS);
						}
					}
				}
			}
		}

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				case WORK_TAXI:
				{
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == INVALID_PLAYER_ID) return 1;
					if(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED])
					{
						if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
						{
							PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
							DisablePlayerJobMark(playerid, WORK_TAXI);
						}
						return 1;
					}

					ShowPlayerTaxiMeter(playerid);
					if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
					{
						PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
						DisablePlayerJobMark(playerid, WORK_TAXI);
					}

					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
					GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
					KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
					TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], playerid);
				}
				case WORK_TRASH:
				{
					if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
					{
						SendFormatNotification(playerid, "Necesitas ser %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH)
					{
						SendNotification(playerid, "No estás de servicio como basurero, ve a vestirte en el puesto de la entrada del vertedero.");
						RemovePlayerFromVehicle(playerid);
						return 1;
					}

					if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] != playerid)
						{
							SendNotification(playerid, "No eres el acompañante de este camión.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						SetPlayerTrashCheckpoint(playerid, vehicleid);
					}
					else
					{
						if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER] || PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
						{
							SendNotification(playerid, "Ya estás trabajando con otro compañero.");
							RemovePlayerFromVehicle(playerid);
							return 1;
						}

						PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = true;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = vehicleid;
						TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = playerid;

						if(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] == INVALID_PLAYER_ID) SendNotification(playerid, "Necesitas un compañero para empezar con el trabajo.");
						else
						{
							new route = random(MAX_ROUTES);
							while(!TRASH_OBJECTS[route][trash_route_VALID])
							{
								route = random(MAX_ROUTES);
							}

							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED] = true;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] = route;
							TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] = 0;

							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
							SetPlayerTrashCheckpoint(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], route);
							CreatePlayerTrashRouteObjects(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], route);

							SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);
							SendFormatNotification(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], "Ruta ~y~#%d ~w~establecida, pueden comenzar.", TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] + 1);

						}
					}
				}
			}
		}

		if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
		{
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_NORMAL)
			{
				PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
				DisablePlayerJobMark(playerid, WORK_TAXI);

				SendNotification(playerid, "Tu taxi se ha cancelado porque te has subido a un vehículo.");
			}
		}
	}
	else if(newstate == PLAYER_STATE_SPECTATING)
	{
		if(!PLAYER_TEMP[playerid][pt_SPECTANDO])
		{
			if(ac_Info[CHEAT_SPECTATE][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_IMMUNITY])
				{
					if(!ac_Info[CHEAT_SPECTATE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_SPECTATE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_SPECTATE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_SPECTATE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_SPECTATE);
					}
				}
			}
		}
	}

	if(oldstate == PLAYER_STATE_DRIVER)
	{
		PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
		{
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);

			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
				PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
			}

			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
			{
				if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
				{
					PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] ][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;
				}
				GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
				DetachTrailerFromVehicle(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}

			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_LAST_DRIVER] = playerid;
			GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_OCCUPIED] = false;

			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
			{
				switch(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK])
				{
					case WORK_TAXI, WORK_HARVESTER, WORK_FUMIGATOR, WORK_TRUCK: CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
					case WORK_PIZZA:
					{
						if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_STARTED])
						{
							if(PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS])
							{
								new Float:distance =	GetPlayerDistanceFromPoint
																(
																	playerid,
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][0],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][1],
																	PIZZA_DELIVERY_POINT[ PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT] ][2]
																);

								if(distance > 20.0)
								{
									SendNotification(playerid, "Vuelve a subir a la moto, aún estás muy lejos del cliente.");
									if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
									{
										DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
										PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
									}
									if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
									}
								}
								else
								{
									if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
									{
										PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] --;
										PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] ++;
										RemovePlayerAttachedObject(playerid, 9);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										ApplyDynamicActorAnimation(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR], "FOOD", "EAT_Pizza", 4.1, false, true, true, false, 0);
										DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
										PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
										PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_PIZZA_POINT_DELI] = true;
										SendNotification(playerid, "Genial, vuelve a subir a la moto para continuar.");
									}
									else
									{
										SetPlayerArmedWeapon(playerid, 0);
										SetPlayerAttachedObject(playerid, 9, 1582, 6, 0.094, 0.077999, -0.165999, 72.0, 8.799999, 9.899992, 0.73, 0.774999, 1.0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
									}
								}
							}
							else
							{
								if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
								{
									DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
									PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
								}
								if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
								{
									DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
									PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
								}
								SendNotification(playerid, "Vuelve a subir a la moto y ve a la pizzería para cobrar.");
							}
						}
					}
				}
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
			{
				if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] == playerid) SendNotification(playerid, "Si quieres dejar de trabajar ve al vertedero y ponte tu ropa.");
					}
					else
					{
						TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
						PLAYER_TEMP[playerid][pt_TRASH_DRIVER] = false;
						PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
					}
				}
			}
		}
	}
	else if(oldstate == PLAYER_STATE_PASSENGER)
	{
		if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
		{
			new driver = GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER];

			if(driver != INVALID_PLAYER_ID)
			{
				new work_extra_payment;
				if(work_info[WORK_TAXI][work_info_EXTRA_PAY] > 0 && work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_TAXI][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[ driver ][WORK_TAXI][pwork_LEVEL], work_info[WORK_TAXI][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_TAXI][work_info_EXTRA_PAY_LIMIT];

					if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}
				PLAYER_WORKS[driver][WORK_TAXI][pwork_LEVEL] ++;

				SendFormatNotification(driver, "Has ganado ~g~%s dólares~w~ con este viaje.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment));
				GivePlayerCash(driver, TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT] + work_extra_payment, true, false);
				GivePlayerCash(playerid, -TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT], true, true);

				SendFormatNotification(playerid, "El taxi te costó %s$.", number_format_thousand(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_PAYMENT]));
				ResetVehicleTaxiMeter(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
				HidePlayerTaxiMeter(playerid);
				UpdatePlayerTaxiMeterTextdraws(driver);
			}

			new passenger = GetVehicleFirstPassenger( PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] );
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerJobMark(passenger, WORK_TAXI);
				}

				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_DRIVER], passenger);
			}
		}
		if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] == PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID])
		{
			if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] == playerid)
					{
						if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS]) SendNotification(playerid, "Sube al camión para volver al vertedero y recibir la paga.");
						else
						{
							new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
							new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];
							new Float:distance =	GetPlayerDistanceFromPoint
													(
														playerid,
														TRASH_OBJECTS[ route ][trash_object_X][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
														TRASH_OBJECTS[ route ][trash_object_Z][ cp ]
													);

							if(distance > 10.0) SendNotification(playerid, "Vuelve a subir al camión, aún estás demasiado lejos del punto de recogida.");
							else
							{
								if(IsPlayerInDynamicCP(playerid, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
								{
									if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return DestroyPlayerTrashCheckpoint(playerid);
									if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return DestroyPlayerTrashCheckpoint(playerid);
									if(!PLAYER_TEMP[playerid][pt_TRASH_PASSENGER]) return 1;

									new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
									SendClientMessage(driver, -1, "{"#SILVER_COLOR"}Espera mientras tu compañero recoge la basura.");

									new Float:offset = floatdiv(PLAYER_WORKS[playerid][WORK_TRASH][pwork_LEVEL], 10);
									if(offset > 30.0) offset = 30.0;

									PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 10.0 + offset;
									UpdatePlayerTrashRecycleSize(playerid);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
									PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);

									TogglePlayerControllableEx(playerid, false);
									SetCameraBehindPlayer(playerid);
									ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);

									KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
									PLAYER_TEMP[playerid][pt_TIMERS][8] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
									return 1;
								}
								SendNotification(playerid, "Recoge la basura y vuelve al camión para continuar.");
							}
						}
					}
				}
				else
				{
					TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
					PLAYER_TEMP[playerid][pt_TRASH_PASSENGER] = false;
					PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;
				}
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	return 1;
}

const CRASHER_PACKET = 228;
IPacket:CRASHER_PACKET(playerid, BitStream:bs)
{
	printf("[ADVERTENCIA] Packet 228 recibido!");
	KickEx(playerid);
}


forward ResyncPlayer(playerid);
public ResyncPlayer(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;
	GetPlayerFacingAngle(playerid, angle);

	new BitStream:bsr = BS_New();
	new BitStream:bsa = BS_New();

	BS_WriteValue(bsr, PR_UINT16, playerid);

	BS_WriteValue(
		bsa,
		PR_UINT16, playerid,
		PR_UINT8, NO_TEAM,
		PR_UINT32, GetPlayerSkin(playerid),
		PR_FLOAT, x,
		PR_FLOAT, y,
		PR_FLOAT, z,
		PR_FLOAT, angle,
		PR_UINT32, PLAYER_TEMP[playerid][pt_PLAYER_COLOR],
		PR_UINT8, GetPlayerFightingStyle(playerid)
	);

	for(new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerStreamedIn(playerid, i))
		{
			BS_RPC(bsr, i, 163); // RPC_WorldPlayerRemove
			BS_RPC(bsa, i, 32); // RPC_WorldPlayerAdd
		}
	}

	BS_Delete(bsr);
	BS_Delete(bsa);
}

hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		if(ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_IMMUNITY])
			{
				new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE]);

				if(interval < 50)
				{
					if(!ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_ENTER_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_VEHICLE_ENTER_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_VEHICLE_ENTER_SPAMMER, float(interval));
					}
				}
				PLAYER_TEMP[playerid][pt_ANTIFLOOD_ENTER_VEHICLE] = GetTickCount();
			}
		}
	}

	new Float:sx, Float:sy, Float:sz;
	GetPlayerPos(playerid, sx, sy, sz);

	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_MEDIC)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_MEDIC)
		{
			SendNotification(playerid, "~r~Estando de servicio como médico solo puedes llevar ambulancias.");
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);
			return 1;
		}
	}

	if(!ispassenger)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED])
		{
			if(PLAYER_TEMP[playerid][pt_CJ_WARNINGS] >= 5)
			{
				KickEx(playerid);
				return 1;
			}
			PLAYER_TEMP[playerid][pt_CJ_WARNINGS] ++;
			SendFormatNotification(playerid, "~w~No puedes robar vehículos así, congelado 5 segundos, aviso ~r~%d/5~w~.", PLAYER_TEMP[playerid][pt_CJ_WARNINGS]);
			RemovePlayerFromVehicle(playerid);
			SetPlayerPos(playerid, sx, sy, sz);

			TogglePlayerControllableEx(playerid, false);
			KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][16]);
			PLAYER_TEMP[playerid][pt_TIMERS][16] = SetTimerEx("CarJackingFinish", 5000, false, "i", playerid);

			SetTimerEx("ResyncPlayer", 0, false, "d", playerid);
			return 1;
		}

		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(!PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_SET])
			{
				SendFormatNotification(playerid, "Necesitas ser ~r~%s~w~ para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VIP] && !PI[playerid][pi_VIP])
			{
				SendNotification(playerid, "Necesitas adquirir membresía VIP para usar este vehículo. (/ayuda > membresía VIP)");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendFormatNotification(playerid, "Tienes que dejar de estar de servicio de ~r~%s~w~.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(WORK_VEHICLES[vehicleid][work_vehicle_NEED_DUTY])
			{
				if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
				{
					SendFormatNotification(playerid, "Necesitas estar de servicio de ~r~%s~w~ para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos(playerid, sx, sy, sz);
					return 1;
				}
			}

			if(WORK_VEHICLES[vehicleid][work_vehicle_EXP] > PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL])
			{
				SendFormatNotification(playerid, "Necesitas más experiencia en este trabajo para llevar este vehículo. ~r~(%d/%d)", PLAYER_WORKS[playerid][ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][pwork_LEVEL], WORK_VEHICLES[vehicleid][work_vehicle_EXP]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
		else if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_DRIVING_SCHOOL)
		{
			if(!PLAYER_TEMP[playerid][pt_DL_EXAM])
			{
				SendNotification(playerid, "~r~Necesitas estar haciendo el examen de conducir.");
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	else
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_VALID] && WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET])
			{
				SendFormatNotification(playerid, "Necesitas ser %s para poder entrar a este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}

			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_VEHICLES[vehicleid][work_vehicle_WORK])
			{
				SendFormatNotification(playerid, "Necesitas estar de servicio como %s para poder conducir este vehículo.", work_info[ WORK_VEHICLES[vehicleid][work_vehicle_WORK] ][work_info_NAME]);
				RemovePlayerFromVehicle(playerid);
				SetPlayerPos(playerid, sx, sy, sz);
				return 1;
			}
		}
	}
	return 1;
}

AddTestVehicle(bool:static_veh, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, interior = 0, world = 0)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	if(static_veh) vehicle_id = AddStaticVehicleEx(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);
	else vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1, false);

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_TEST;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "Test Vehicle");
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = VEHICLE_INFO[modelid - 400][vehicle_info_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = world;
	SetVehicleVirtualWorldEx(vehicle_id, world);
	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

AddPersonalVehicle(playerid, modelid, Float:X, Float:Y, Float:Z, Float:Angle, Color1, Color2, Float:max_gas)
{
	new vehicle_id = INVALID_VEHICLE_ID;
	vehicle_id = CreateVehicle(modelid, X, Y, Z, Angle, Color1, Color2, -1);

	if(vehicle_id == INVALID_VEHICLE_ID) return false;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = X;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = Y;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = Z;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = Angle;

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];

	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = 1000.0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = Color1;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = Color2;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = 3; // No paintjob
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = max_gas;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = 0;
	GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = 0;

	PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
	PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
	RegisterNewPlayerVehicle(playerid, vehicle_id);

	SetVehicleToRespawnEx(vehicle_id);
	return vehicle_id;
}

RegisterNewPlayerVehicle(playerid, vehicleid)
{
	inline OnVehicleInserted()
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_ID] = cache_insert_id();
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_ID])
		{
			format(GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], 32, "%04d %c%c%c", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], getRandomLetter(), getRandomLetter(), getRandomLetter());
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pvehicles SET plate = '%e' WHERE id = %d;", GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE], PLAYER_VEHICLES[vehicleid][player_vehicle_ID]);
			mysql_tquery(mysql_db, QUERY_BUFFER);
		}
	}

	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO pvehicles (id_player, modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, gas, max_gas)\
			VALUES(%d, %d, %f, %f, %f, %f, %d, %d, %f, %f);\
		",
			PI[playerid][pi_ID],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS],
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnVehicleInserted);
	return 1;
}

LoadPlayerVehicles(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPlayerVehiclesLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU2_VEHICLES)
				{
					printf("---> MAX_SU2_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new id, plate[32], modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:spawn_angle,
					Float:health, engine, lights, bonnet, boot, damage_panels, damage_doors, damage_lights, 
					damage_tires, color1, color2, paintjob, Float:gas, Float:max_gas, closed, interior, eworld, 
					veh_state, components[MAX_VEHICLE_COMPONENTS], vClamp,
					bool:isnull_plate;

				cache_get_value_name_int(i, "id", id);
				cache_is_value_name_null(i, "plate", isnull_plate);
				if(!isnull_plate) cache_get_value_name(i, "plate", plate, 32);
				cache_get_value_name_int(i, "modelid", modelid);
				cache_get_value_name_float(i, "spawn_x", spawn_x);
				cache_get_value_name_float(i, "spawn_y", spawn_y);
				cache_get_value_name_float(i, "spawn_z", spawn_z);
				cache_get_value_name_float(i, "spawn_angle", spawn_angle);
				cache_get_value_name_float(i, "health", health);
				cache_get_value_name_int(i, "engine", engine);
				cache_get_value_name_int(i, "lights", lights);
				cache_get_value_name_int(i, "bonnet", bonnet);
				cache_get_value_name_int(i, "boot", boot);
				cache_get_value_name_int(i, "damage_panels", damage_panels);
				cache_get_value_name_int(i, "damage_doors", damage_doors);
				cache_get_value_name_int(i, "damage_lights", damage_lights);
				cache_get_value_name_int(i, "damage_tires", damage_tires);
				cache_get_value_name_int(i, "color1", color1);
				cache_get_value_name_int(i, "color2", color2);
				cache_get_value_name_int(i, "paintjob", paintjob);
				cache_get_value_name_float(i, "gas", gas);
				cache_get_value_name_float(i, "max_gas", max_gas);
				cache_get_value_name_int(i, "closed", closed);
				cache_get_value_name_int(i, "interior", interior);
				cache_get_value_name_int(i, "world", eworld);
				cache_get_value_name_int(i, "state", veh_state);
				cache_get_value_name_int(i, "slot0", components[0]);
				cache_get_value_name_int(i, "slot1", components[1]);
				cache_get_value_name_int(i, "slot2", components[2]);
				cache_get_value_name_int(i, "slot3", components[3]);
				cache_get_value_name_int(i, "slot4", components[4]);
				cache_get_value_name_int(i, "slot5", components[5]);
				cache_get_value_name_int(i, "slot6", components[6]);
				cache_get_value_name_int(i, "slot7", components[7]);
				cache_get_value_name_int(i, "slot8", components[8]);
				cache_get_value_name_int(i, "slot9", components[9]);
				cache_get_value_name_int(i, "slot10", components[10]);
				cache_get_value_name_int(i, "slot11", components[11]);
				cache_get_value_name_int(i, "slot12", components[12]);
				cache_get_value_name_int(i, "slot13", components[13]);
				cache_get_value_name_int(i, "clamp", vClamp);

				new vehicle_id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, spawn_angle, color1, color2, -1);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_VALID] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_OWNER_ID] = PI[playerid][pi_ID];
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ID] = id;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					PLAYER_VEHICLES[vehicle_id][player_vehicle_CLAMP] = vClamp;

					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_VALID] = true;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_TYPE] = VEHICLE_TYPE_PERSONAL;
					format(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_NUMBER_PLATE], 32, "%s", plate);
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] = modelid;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X] = spawn_x;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y] = spawn_y;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z] = spawn_z;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_ANGLE] = spawn_angle;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][0] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_X];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][1] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Y];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_POS][2] = GLOBAL_VEHICLES[vehicle_id][gb_vehicle_SPAWN_Z];
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_HEALTH] = health;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_PANELS] = damage_panels;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_DOORS] = damage_doors;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_LIGHTS] = damage_lights;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DAMAGE_TIRES] = damage_tires;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_1] = color1;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COLOR_2] = color2;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PAINTJOB] = paintjob;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MAX_GAS] = max_gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_GAS] = gas;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = closed;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_STATE] = veh_state;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_INTERIOR] = interior;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_WORLD] = eworld;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_COMPONENTS] = components;
					GLOBAL_VEHICLES[vehicle_id][gb_vehicle_LAST_REPAIR_TIME] = gettime();

					if(PI[playerid][pi_VIP] == 1)
					{
						if(i >= MAX_SU_VEHICLES)
						{
							GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
							PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						}
					}
					else if(!PI[playerid][pi_VIP])
					{
						if(i >= MAX_NU_VEHICLES)
						{
							GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
							PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;
						}
					}

					//vboot
					inline OnVbootLoad()
					{
						new vb_rows;
						if(cache_get_row_count(vb_rows))
						{
							for(new x = 0; x != vb_rows; x ++)
							{
								new vboot_id, type, int, int_extra;
								cache_get_value_name_int(x, "id", vboot_id);
								cache_get_value_name_int(x, "type", type);
								cache_get_value_name_int(x, "int", int);
								cache_get_value_name_int(x, "int_extra", int_extra);

								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_VALID] = true;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_OBJECT_ID] = vboot_id;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_TYPE] = type;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT] = int;
								VEHICLE_BOOT[vehicle_id][x][vehicle_boot_INT_EXTRA] = int_extra;
							}
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vboot WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], VEHICLE_INFO[GLOBAL_VEHICLES[vehicle_id][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS]);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnVbootLoad);

					//vobjects
					inline OnVobjectsLoad()
					{
						new vo_rows;
						if(cache_get_row_count(vo_rows))
						{
							for(new x = 0; x != vo_rows; x ++)
							{
								new vobject_id, type, name[32], vobject_modelid, Float:off_x, Float:off_y, Float:off_z,
									Float:rot_x, Float:rot_y, Float:rot_z, attached, vobject_color0, vobject_color1,
									vobject_color2, vobject_color3, vobject_color4, text[32], font[24], fontsize, fontbold, fontcolor,
									bool:isnull_text, bool:isnull_font;

								cache_get_value_name_int(x, "id", vobject_id);
								cache_get_value_name_int(x, "type", type);
								cache_get_value_name(x, "name", name);
								cache_get_value_name_int(x, "modelid", vobject_modelid);
								cache_get_value_name_float(x, "off_x", off_x);
								cache_get_value_name_float(x, "off_y", off_y);
								cache_get_value_name_float(x, "off_z", off_z);
								cache_get_value_name_float(x, "rot_x", rot_x);
								cache_get_value_name_float(x, "rot_y", rot_y);
								cache_get_value_name_float(x, "rot_z", rot_z);
								cache_get_value_name_int(x, "attached", attached);
								cache_get_value_name_int(x, "color0", vobject_color0);
								cache_get_value_name_int(x, "color1", vobject_color1);
								cache_get_value_name_int(x, "color2", vobject_color2);
								cache_get_value_name_int(x, "color3", vobject_color3);
								cache_get_value_name_int(x, "color4", vobject_color4);
								cache_is_value_name_null(x, "text", isnull_text);
								if(!isnull_text) cache_get_value_name(x, "text", text);
								cache_is_value_name_null(x, "font", isnull_font);
								if(!isnull_font) cache_get_value_name(x, "font", font);
								cache_get_value_name_int(x, "fontsize", fontsize);
								cache_get_value_name_int(x, "fontbold", fontbold);
								cache_get_value_name_int(x, "fontcolor", fontcolor);

								//ok
								VEHICLE_OBJECTS[vehicle_id][x][vobject_VALID] = true;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ID] = vobject_id;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_TYPE] = type;
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_NAME], 32, "%s", name);
								VEHICLE_OBJECTS[vehicle_id][x][vobject_MODELID] = vobject_modelid;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][0] = off_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][1] = off_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_OFFSET][2] = off_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][0] = rot_x;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][1] = rot_y;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ROT][2] = rot_z;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_ATTACHED] = attached;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][0] = vobject_color0;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][1] = vobject_color1;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][2] = vobject_color2;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][3] = vobject_color3;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_COLORS][4] = vobject_color4;
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_text_TEXT], 32, "%s", text);
								format(VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT], 24, "%s", font);
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT_SIZE] = fontsize;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_BOLD] = fontbold;
								VEHICLE_OBJECTS[vehicle_id][x][vobject_text_FONT_COLOR] = fontcolor;
								UpdateVehicleAttachedObject(vehicle_id, x, true);
							}
							//loaded
							SetVehicleToRespawnEx(vehicle_id);
							//loaded
						}
					}
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM vobjects WHERE id_vehicle = %d LIMIT %d;", PLAYER_VEHICLES[vehicle_id][player_vehicle_ID], MAX_SU2_VOBJECTS);
					mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnVobjectsLoad);
				}
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pvehicles WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerVehiclesLoad);
	return 1;
}

SavePlayerVehicles(playerid, destroy = false)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) continue;

		GetVehiclePos(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z]);
		GetVehicleZAngle(i, GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE]);
		GetVehicleHealth(i, GLOBAL_VEHICLES[i][gb_vehicle_HEALTH]);
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] > 1000.0) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = 1000.0;
		if(GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[i][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
		GetVehicleDamageStatus(i, GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES]);
		GLOBAL_VEHICLES[i][gb_vehicle_WORLD] = GetVehicleVirtualWorld(i);

		mysql_format
		(
			mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
			"\
				UPDATE pvehicles SET \
					id_player = %d,\
					plate = '%e',\
					modelid = %d,\
					spawn_x = %f,\
					spawn_y = %f,\
					spawn_z = %f,\
					spawn_angle = %f,\
					health = %f,\
					damage_panels = %d,\
					damage_doors = %d,\
					damage_lights = %d,\
					damage_tires = %d,\
					color1 = %d,\
					color2 = %d,\
					paintjob = %d,\
					gas = %f,\
					max_gas = %f,\
					closed = %d,\
					interior = %d,\
					world = %d,\
					state = %d,\
					slot0 = %d,\
					slot1 = %d,\
					slot2 = %d,\
					slot3 = %d,\
					slot4 = %d,\
					slot5 = %d,\
					slot6 = %d,\
					slot7 = %d,\
					slot8 = %d,\
					slot9 = %d,\
					slot10 = %d,\
					slot11 = %d,\
					slot12 = %d,\
					slot13 = %d,\
					clamp = %d \
				WHERE id = %d;\
			",
				PLAYER_VEHICLES[i][player_vehicle_OWNER_ID], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], GLOBAL_VEHICLES[i][gb_vehicle_MODELID], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_X],
				GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_Z], GLOBAL_VEHICLES[i][gb_vehicle_SPAWN_ANGLE], GLOBAL_VEHICLES[i][gb_vehicle_HEALTH],
				GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[i][gb_vehicle_DAMAGE_TIRES],
				GLOBAL_VEHICLES[i][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[i][gb_vehicle_COLOR_2], GLOBAL_VEHICLES[i][gb_vehicle_PAINTJOB], GLOBAL_VEHICLES[i][gb_vehicle_GAS], GLOBAL_VEHICLES[i][gb_vehicle_MAX_GAS],
				GLOBAL_VEHICLES[i][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[i][gb_vehicle_INTERIOR], GLOBAL_VEHICLES[i][gb_vehicle_WORLD], GLOBAL_VEHICLES[i][gb_vehicle_STATE],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][0], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][1], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][2], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][3],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][4], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][5], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][6], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][7],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][8], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][9], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][10], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][11],
				GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][12], GLOBAL_VEHICLES[i][gb_vehicle_COMPONENTS][13], PLAYER_VEHICLES[i][player_vehicle_CLAMP],

				PLAYER_VEHICLES[i][player_vehicle_ID]
		);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		if(destroy) DestroyVehicleEx(i);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = true;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] < MIN_VEHICLE_HEALTH) GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;

	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
	{
		if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] == WORK_TRASH)
		{
			if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED])
			{
				CancelTrashWork(TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID], TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID], vehicleid);
			}
		}

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
		else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;

		switch(WORK_VEHICLES[vehicleid][work_vehicle_WORK])
		{
			case WORK_TAXI: ResetVehicleTaxiMeter(vehicleid);
			case WORK_TRUCK, WORK_DELIVERYMAN: ResetTruckInfo(vehicleid);
			case WORK_TRAILERO: ResetTrailerInfo(vehicleid);
			case WORK_TRASH: ResetTrashInfo(vehicleid);
			case WORK_PIZZA: ResetPizzaInfo(vehicleid);
		}
	}
	SetVehicleNumberPlate(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_NUMBER_PLATE]);
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	UpdateVehicleDamageStatus(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES]);
	ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
	ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
	SetVehiclePosEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
	SetVehicleZAngle(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE]);
	LinkVehicleToInteriorEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR]);
	SetVehicleVirtualWorldEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	AddVehicleComponents(vehicleid);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM] = 0;
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_EMISORA_ID] = 0;

	ApagarEstrobos(vehicleid);
	UpdateVehicleParams(vehicleid);
	SetClampVehicleLabel(vehicleid);
	return 1;
}

SetClampVehicleLabel(vehicleid)
{
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID])
	{
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0)
		{
			new string[256];
			format(string, sizeof string, "Cepo\nUsa {"#PRIMARY_COLOR"}/pagar {FFFFFF}para pagar la multa por %s$", number_format_thousand(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP]));

			new Float:wX, Float:wY, Float:wZ;
			GetVehicleModelInfo(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_WHEELSREAR, wX, wY, wZ);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(string, -1, wX, wY, wZ, 20.0, .attachedvehicle = vehicleid);
		}
	}
}

ApagarEstrobos(vehicleid)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ESTROBOS])
	{
		KillTimer(TimerLuces[vehicleid]);
		KillTimer(TimerLuces2[vehicleid]);

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ESTROBOS] = 0;
		UpdateVehicleParams(vehicleid);
	}
	return 1;
}

UpdateVehicleParams(vehicleid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(IsPlayerInVehicle(i, vehicleid))
				{
					new td_str[24];
					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) { format(td_str, 24, "~g~~h~Motor"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][5], td_str); }
					else { format(td_str, 24, "~r~Motor"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][5], td_str); }

					if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) { format(td_str, 24, "~g~~h~Abierto"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][6], td_str); }
					else { format(td_str, 24, "~r~Cerrado"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][6], td_str); }

					if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS]) { format(td_str, 24, "~g~~h~Luces"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][7], td_str); }
					else { format(td_str, 24, "~r~Luces"); PlayerTextDrawSetString(i, PlayerTextdraws[i][pSpeedoTd][7], td_str); }
				}
			}
		}
	}
	return SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
}

SetVehicleHealthEx(vehicleid, Float:health, forplayerid = INVALID_PLAYER_ID)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	SetVehicleHealth(vehicleid, health);
	return 1;
}

RepairVehicleEx(vehicleid, forplayerid = INVALID_PLAYER_ID, Float:health = 1000.0)
{
	if(forplayerid != INVALID_PLAYER_ID) PLAYER_AC_INFO[forplayerid][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_REPAIR_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = health;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
	SetVehicleHealthEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH]);
	if(health >= 1000.0) RepairVehicle(vehicleid);
	return 1;
}

SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] = x;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] = y;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] = z;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehiclePos(vehicleid, x, y, z);
}

LinkVehicleToInteriorEx(vehicleid, interior)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_INTERIOR] = interior;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return LinkVehicleToInterior(vehicleid, interior);
}

SetVehicleToRespawnEx(vehicleid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
	return SetVehicleToRespawn(vehicleid);
}

public OnVehicleDeath(vehicleid, killerid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_DRIVER] = INVALID_PLAYER_ID;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_OCCUPIED] = false;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;

	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}

	switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
	{
		case VEHICLE_TYPE_TEST: DestroyVehicleEx(vehicleid);
		case VEHICLE_TYPE_PERSONAL:
		{
			if(VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO])
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_DAMAGED;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = MIN_VEHICLE_HEALTH;
			}
			else
			{
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
				GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			}

			new playerid = GetPlayerIdFromAccountId(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID]);
			if(playerid != INVALID_PLAYER_ID)
			{
				if(PI[playerid][pi_PHONE_NUMBER])
				{
					new message[164]; format(message, sizeof message, "Tu %s fue entregado en últ. estacionamiento.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME]);//format(message, sizeof message, "Vehículo de sustitución entregado en últ. estacionamiento.");
					RegisterPhoneMessage(0, PI[playerid][pi_ID], message);
					if(PI[playerid][pi_PHONE_STATE] == PHONE_STATE_ON)
					{
						if((PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD))
						{
							SendClientMessageEx(playerid, -1, "{"#WHATSAPP_COLOR"}[Nuevo WhatsApp recibido] {"#SILVER_COLOR"}Remitente: {FFFFFF}%s {"#SILVER_COLOR"}Mensaje: {FFFFFF}%s", convertPhoneNumber(playerid, 38350), message);
						}
					}
				}
			}
			SetVehicleToRespawnEx(vehicleid);
		}
		default:
		{
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] = VEHICLE_STATE_NORMAL;
			if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = 0.0;
			else GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = frandom(GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] / 3, 2);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_HEALTH] = 1000.0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_PANELS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_DOORS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_LIGHTS] = 0;
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_DAMAGE_TIRES] = 0;
		}
	}
	return 1;
}

public OnTrailerUpdate(playerid, vehicleid)
{
	new towing_vehicle;
	towing_vehicle = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != towing_vehicle)
	{
		if(ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_FAKE_TRAILER_SYNC][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_FAKE_TRAILER_SYNC, vehicleid);
					return 0;
				}
			}
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID])
	{
		if(ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Enabled])
		{
			if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;

			new Float:veh_x, Float:veh_y, Float:veh_z, Float:veh_dis;
			GetVehiclePos(vehicleid, veh_x, veh_y, veh_z);
			veh_dis = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);

			if(gettime() > GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWNED])
			{
				if(veh_dis > 20.0 && veh_z > -70.0)
				{
					if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_IMMUNITY])
					{
						if(!ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_UNOCCUPIED_VEHICLE_TP][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNOCCUPIED_VEHICLE_TP][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNOCCUPIED_VEHICLE_TP, veh_dis);
						}
					}
					SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
					return 0;
				}
			}
		}

		new Float:spawn_distance = GetVehicleDistanceFromPoint(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y], GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z]);
		switch(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE])
		{
			case VEHICLE_TYPE_SELL:
			{
				if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
			}
			case VEHICLE_TYPE_WORK:
			{
				if(TRASH_VEHICLES[vehicleid][trash_vehicle_JOB_STARTED]) return 1;
				if(spawn_distance < 25.0)
				{
					if(spawn_distance > 10.0) SetVehicleToRespawnEx(vehicleid);
				}
			}
		}
	}
	return 1;
}

GetPlayerIdFromAccountId(accountid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_ID] == accountid)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

#define NECESSARY_TIME_BETWEEN_WORKS	600 //segundos
CMD:trabajar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Debes estar a pie.");
	if(PI[playerid][pi_WANTED_LEVEL] > 0) return SendNotification(playerid, "No puedes obtener un trabajo cuando estás en búsqueda.");

	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] + NECESSARY_TIME_BETWEEN_WORKS)
	{
		new time = NECESSARY_TIME_BETWEEN_WORKS - (gettime() - PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME]);
		SendFormatNotification(playerid, "Debes de esperar %s minutos para conseguir otro trabajo.", TimeConvert(time));
		return 1;
	}

	new player_jobs = CountPlayerJobs(playerid);
	if(PI[playerid][pi_VIP])
	{
		if(player_jobs >= MAX_SU_WORKS)
		{
			SendFormatNotification(playerid, "Actualmente tienes ~r~%d trabajos~w~, usa /renunciar para dejar un trabajo.", player_jobs);
			return 1;
		}
	}
	else
	{
		if(player_jobs >= MAX_NU_WORKS)
		{
			SendFormatNotification(playerid, "Actualmente tienes ~r~%d trabajos~w~, usa /renunciar para dejar un trabajo.", player_jobs);
			SendFormatNotification(playerid, "¡Los jugadores ~y~VIP~w~ pueden tener hasta %d trabajos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU_WORKS);
			return 1;
		}
	}

	for(new i = 0; i != E_WORKS; i ++)
	{
		if(work_info[i][work_info_TYPE] == WORK_TYPE_FAMILY) continue;

		if(GetPlayerInterior(playerid) == obtain_work_coords[i][obtain_work_INTERIOR])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, obtain_work_coords[i][obtain_work_X], obtain_work_coords[i][obtain_work_Y], obtain_work_coords[i][obtain_work_Z]))
			{
				if(work_info[i][work_info_LEVEL] > PI[playerid][pi_LEVEL])
				{
					SendFormatNotification(playerid, "Necesitas ser al menos nivel %d para obtener este trabajo.", work_info[i][work_info_LEVEL]);
					return 1;
				}

				if(PLAYER_WORKS[playerid][i][pwork_SET])
				{
					SendFormatNotification(playerid, "Ya eres %s.", work_info[i][work_info_NAME]);
					return 1;
				}

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", PI[playerid][pi_ID], i);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				PLAYER_WORKS[playerid][i][pwork_SET] = true;
				PLAYER_TEMP[playerid][pt_LAST_GOT_WORK_TIME] = gettime();
				CallLocalFunction("OnPlayerObtainWork", "ii", playerid, i);
				return 1;
			}
		}
	}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:renunciar(playerid, params[])
{
	new player_jobs = CountPlayerJobs(playerid);
	if(!player_jobs) return SendNotification(playerid, "No tienes ningún trabajo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	ShowDialog(playerid, DIALOG_PLAYER_RENUNCIO);

	/*new work;
	if(sscanf(params, "d", work))
	{
		new works[32 * sizeof(work_info)], line_str[32], count;
		for(new i = 1; i != sizeof(work_info); i ++)
		{
			if(PLAYER_WORKS[playerid][i][pwork_SET])
			{
				if(count > 0) strcat(works, "~w~, ");

				format(line_str, sizeof line_str, "~b~%s (%d)", work_info[i][work_info_NAME], i);
				strcat(works, line_str);

				count ++;
			}
		}
		SendFormatNotification(playerid, "Tus trabajos: ~b~%s", works);
		SendNotification(playerid, "Utiliza ~b~/renunciar~w~ <id del trabajo> para renunciar a un trabajo.");
		return 1;
	}

	if(work < 1 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido.");

	if(!PLAYER_WORKS[playerid][work][pwork_SET]) return SendFormatNotification(playerid, "No eres %s.", work_info[work][work_info_NAME]);
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] == work) return SendNotification(playerid, "Ahora mismo estás de servicio en ese trabajo, deja de trabajar para abandonar el trabajo.");

	if(work == WORK_POLICE)
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
		mysql_tquery(mysql_db, QUERY_BUFFER);
		PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
	}
	else
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	SendFormatNotification(playerid, "Has abandonado tu trabajo de ~b~%s~w~.", work_info[work][work_info_NAME]);
	PLAYER_WORKS[playerid][work][pwork_SET] = false;*/
	return 1;
}
alias:renunciar("dimitir");

CMD:pagar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] || PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] <= 0) return SendNotification(playerid, "Este vehículo no tiene ninguna multa.");

	if(GivePlayerCash(playerid, -PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP], true, true))
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SendNotification(playerid, "Has pagado la multa y se ha quitado el cepo.");
		SetClampVehicleLabel(vehicleid);
	}
	else SendNotification(playerid, "No tienes suficiente dinero para pagar la multa.");
	return 1;
}

CMD:cepo(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 1) return SendFormatNotification(playerid, "Tienes que ser %s para poder hacer esto.", POLICE_RANKS[1]);

	new price;
	if(sscanf(params, "d", price)) return SendNotification(playerid, "~r~Modo de uso: ~w~/cepo [multa]");
	if(price < 0 || price > 2000) return SendNotification(playerid, "El precio de la multa no es válido.");

	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de un vehículo.");

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "No puedes multar a este vehículo.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "No puedes multar a este vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price != 0) return SendNotification(playerid, "Este vehículo ya tiene una multa.");

	if(PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0 && price == 0)
	{
		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = 0;
		SetClampVehicleLabel(vehicleid);

		SendNotification(playerid, "Se ha quitado la multa a este vehículo.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	else {
		if(price == 0) return SendNotification(playerid, "El precio de la multa no es válido.");
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) return SendNotification(playerid, "No puedes multar a un vehículo si hay un conductor en él.");

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(vehicleid);

		PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] = price;
		SetClampVehicleLabel(vehicleid);

		SendNotification(playerid, "Vehículo multado.");
		Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	return 1;
}
CMD:abrir(playerid, params[])
{
	new vehicleid = EstaCercaDeSuVehiculo(playerid);
	if(vehicleid == -1) return SendNotification(playerid, "No estás en tu vehículo o cerca de él para abrirlo.");

	if(!PI[playerid][pi_VIP] && !PLAYER_VEHICLES[vehicleid][player_vehicle_ACCESSIBLE])
	{
		SendNotification(playerid, "Este vehículo está bloqueado, desbloquealo con VIP.");
		SendFormatNotification(playerid, "¡Los jugadores ~y~VIP ~w~pueden tener hasta %d vehículos! Usa ~y~/ayuda ~w~si quieres ser ~y~VIP~w~.", MAX_SU2_VEHICLES);
		return 1;
	}

   	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendNotification(playerid, "Las puertas de tu vehículo ya están abiertas.");

   	new Float:p[3];
   	GetVehiclePos(vehicleid, p[0], p[1], p[2]);
   	PlayerPlaySoundEx(playerid, 1145, p[0], p[1], p[2]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 0;
	UpdateVehicleParams(vehicleid);

	SendNotification(playerid, "Has ~g~abierto~w~ las puertas de tu vehículo.");
	Auto_SendPlayerAction(playerid, "ha abierto las puertas de su vehículo.");
	return 1;
}

CMD:cerrar(playerid, params[])
{
	new vehicleid = EstaCercaDeSuVehiculo(playerid);
	if(vehicleid == -1) return SendNotification(playerid, "No estás en tu vehículo o cerca de él para abrirlo.");

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS]) return SendNotification(playerid, "Las puertas de tu vehículo ya están cerradas.");

	new Float:p[3];
	GetVehiclePos(vehicleid, p[0], p[1], p[2]);
   	PlayerPlaySoundEx(playerid, 1145, p[0], p[1], p[2]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;
	UpdateVehicleParams(vehicleid);

	SendNotification(playerid, "Has ~r~cerrado~w~ las puertas de tu vehículo.");
	Auto_SendPlayerAction(playerid, "ha cerrado las puertas de su vehículo.");
	return 1;
}


CMD:aparcar(playerid, params[])
{
	new vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);

	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás en tu vehículo para aparcarlo.");
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este no es tú vehículo.");

	new Float:pos[3], Float:angle;
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
	GetVehicleZAngle(vehicleid, angle);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_X] = pos[0];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Y] = pos[1];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_Z] = pos[2];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_SPAWN_ANGLE] = angle;

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LAST_CLOSED_TIME] = gettime();
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS] = 1;

	ApagarEstrobos(vehicleid);
	UpdateVehicleParams(vehicleid);
	SendNotification(playerid, "Has estacionado tu vehículo, cuando sea destruido volverá a aparecer aquí.");
	return 1;
}
alias:aparcar("estacionar");

CMD:luces(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	if(IsBici(GetPlayerVehicleID(playerid))) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS])
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 0;
		UpdateVehicleParams(vehicleid);

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha apagado las luces de su vehículo.");
		else Auto_SendPlayerAction(playerid, "ha apagado las luces de el vehículo.");
	}
	else
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_LIGHTS] = 1;
		UpdateVehicleParams(vehicleid);

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha encendido las luces de su vehículo.");
		else Auto_SendPlayerAction(playerid, "ha encendido las luces de el vehículo.");
	}
	return 1;
}

CMD:estrobos(playerid, params[])
{
	if(PI[playerid][pi_VIP] != 2) return SendNotification(playerid, "Necesitas membresía VIP 2 para usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	if(IsBici(GetPlayerVehicleID(playerid))) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ESTROBOS])
	{
		ApagarEstrobos(vehicleid);
		UpdateVehicleParams(vehicleid);

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha apagado los estrobos de su vehículo.");
		else Auto_SendPlayerAction(playerid, "ha apagado los estrobos de el vehículo.");
	}
	else
	{
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ESTROBOS] = 1;
		TimerLuces[vehicleid] = SetTimerEx("TimerLucesIntermitentes", 200, false, "d", vehicleid);

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha encendido los estrobos de su vehículo.");
		else Auto_SendPlayerAction(playerid, "ha encendido los estrobos de el vehículo.");
	}
	return 1;
}

CMD:motor(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");
	if(IsBici(GetPlayerVehicleID(playerid))) return SendNotification(playerid, "No estás conduciendo ningún vehículo.");

	new vehicleid = GetPlayerVehicleID(playerid);
	new cargaid = GetVehicleTrailer(vehicleid);

	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] == VEHICLE_TYPE_WORK)
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING]) return SendNotification(playerid, "Debes esperar a que se cargue el camión para arrancar.");
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING]) return SendNotification(playerid, "Debes esperar a que se descargue el camión para arrancar.");
		}

		if(TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADING]) return SendNotification(playerid, "Debes esperar a que se cargue el trailer para arrancar.");
		if(TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING]) return SendNotification(playerid, "Debes espera a que se descargue el trailer para arrancar.");

		if(PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE]) return SendNotification(playerid, "Termina primero.");
	}

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][6]);
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE])
	{
		PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
		UpdateVehicleParams(vehicleid);

		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha detenido su vehículo.");
		else Auto_SendPlayerAction(playerid, "ha detenido el vehículo.");

		SendNotification(playerid, "~r~Apagado");
	}
	else
	{
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_CLAMP] > 0)
		{
			SendNotification(playerid, "El vehículo tiene un cepo y no puede arrancar.");
			return 1;
		}
		SendNotification(playerid, "Encendiendo...");
		PLAYER_TEMP[playerid][pt_TIMERS][6] = SetTimerEx("StartVehicleEngine", 1000, false, "ii", playerid, vehicleid);
	}
	return 1;
}
alias:motor("arrancar");

forward StartVehicleEngine(playerid, vehicleid);
public StartVehicleEngine(playerid, vehicleid)
{
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] == VEHICLE_STATE_DAMAGED) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero el motor está dañado.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] <= 0.1) return Auto_SendPlayerAction(playerid, "intentó arrancar el vehículo pero no tiene gasolina.");

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] != INVALID_VEHICLE_ID)
	{
		if(GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
			PLAYER_AC_INFO[ GLOBAL_VEHICLES[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] ][gb_vehicle_DRIVER] ][CHEAT_FAKE_TRAILER_SYNC][p_ac_info_IMMUNITY] = gettime() + 5;

		GLOBAL_VEHICLES[vehicleid][gb_vehicle_ATTACHED_TO] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(vehicleid);
	}

	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) Auto_SendPlayerAction(playerid, "ha arrancado su vehículo.");
	else Auto_SendPlayerAction(playerid, "ha arrancado el vehículo.");

	SendNotification(playerid, "~h~~g~Encendido");
	return 1;
}

AddVehicleComponents(vehicleid)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		RemoveVehicleComponent(vehicleid, i);

		AddVehicleComponent(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i]);
	}

	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_VIP])
	{
		new componentid[3];

		//RUEDAS
		componentid[0] = ruedas_VIP_Component[random(sizeof(ruedas_VIP_Component))];
		AddVehicleComponent(vehicleid, componentid[0]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][0] = componentid[0];

		//NITRO
		componentid[1] = nitro_VIP_Component[random(sizeof(nitro_VIP_Component))];
		AddVehicleComponent(vehicleid, componentid[1]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][1] = componentid[1];

		//SUSPENSIÓN HIDRÁULICA
		componentid[2] = minrand(1086, 1088);
		AddVehicleComponent(vehicleid, componentid[2]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][2] = componentid[2];
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit) // Entra
	{
		SendClientMessage(playerid, -1, " ");
		SendNotification(playerid, "Solo puedes tunear vehículos en el Mecánico, búscalo con la App GPS.");
		SendClientMessage(playerid, -1, "{ffff35}[ATENCION] {"#SILVER_COLOR"}Si realizas alguna modificación al vehículo en este garaje serás expulsado.");
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			ChangeVehicleColor(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_COLOR_2]);
			ChangeVehiclePaintjob(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PAINTJOB]);
			AddVehicleComponents(vehicleid);
		}
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			else
			{
				if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
				else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

				PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
				if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
			}
		}
	}
	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(ac_Info[CHEAT_CAR_MOD][ac_Enabled])
	{
		if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_IMMUNITY])
		{
			if(!(-1 < paintjobid < 3) && paintjobid != 255)
			{
				if(!ac_Info[CHEAT_CAR_MOD][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_CAR_MOD][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_CAR_MOD][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_CAR_MOD][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_CAR_MOD);
				}
			}
		}
	}
	return 1;
}

DestroyVehicleEx(vehicleid)
{
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return false;

	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID)
	{
		ApagarEstrobos(vehicleid);
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_VEHICLE_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;
		PLAYER_AC_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] ][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	}

	if(DestroyVehicle(vehicleid))
	{
		ApagarEstrobos(vehicleid);
		if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
		{
			DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
			GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		new temp_GLOBAL_VEHICLES[Global_Vehicles_Info]; GLOBAL_VEHICLES[vehicleid] = temp_GLOBAL_VEHICLES;
		new temp_PLAYER_VEHICLES[Player_Vehicles_Info]; PLAYER_VEHICLES[vehicleid] = temp_PLAYER_VEHICLES;
		new temp_SELL_VEHICLES[SELL_VEHICLES_Enum]; SELL_VEHICLES[vehicleid] = temp_SELL_VEHICLES;

		new temp_VEHICLE_BOOT[enum_VEHICLE_BOOT];
		for(new i = 0; i != MAX_BOOT_SLOTS; i ++) VEHICLE_BOOT[vehicleid][i] = temp_VEHICLE_BOOT;

		new temp_VEHICLE_OBJECTS[e_VEHICLE_OBJECTS];
		for(new i = 0; i != MAX_SU2_VOBJECTS; i ++)
		{
			if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] != INVALID_STREAMER_ID) DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][i] = temp_VEHICLE_OBJECTS;
		}

		return true;
	}
	return false;
}

stock getRandomLetter()
{
	return 65 + random(25);
}

UpdatePlayerPropertyContructor(playerid)
{
	SetPlayerPosEx
	(
		playerid,
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_X],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Y],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_Z],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_ANGLE],
		PROPERTY_INTERIORS[ PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO] ][property_INT_INTERIOR],
		0, false, true
	);

	new td_str[45]; format(td_str, sizeof td_str, "Interior:_%d/%d", PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO], sizeof PROPERTY_INTERIORS - 1);
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][1], td_str);
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}

ExitPlayerPropertyConstructor(playerid)
{
	CancelSelectTextDrawEx(playerid);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = false;

	SetPlayerPosEx
	(
		playerid,
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG],
		PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT],
		0, false, true
	);

	for(new i = 0; i != 6; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);
	return 1;
}

Create_PlayerPropertyConstructo(playerid)
{
	new slot = GetEmptyPropertySlot();
	if(slot == -1)
	{
		SendNotification(playerid, "No hay mas slots.");
		ExitPlayerPropertyConstructor(playerid);
		return 1;
	}

	PROPERTY_INFO[slot][property_VALID] = true;
	PROPERTY_INFO[slot][property_EXT_X] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X];
	PROPERTY_INFO[slot][property_EXT_Y] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y];
	PROPERTY_INFO[slot][property_EXT_Z] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z];
	PROPERTY_INFO[slot][property_EXT_ANGLE] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG];
	PROPERTY_INFO[slot][property_EXT_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT];
	PROPERTY_INFO[slot][property_EXT_FREEZE] = false;
	PROPERTY_INFO[slot][property_ID_INTERIOR] = PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_INTERIO];

	PROPERTY_INFO[slot][property_SOLD] = false;
	PROPERTY_INFO[slot][property_OWNER_ID] = 0;
	PROPERTY_INFO[slot][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[slot][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[slot][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[slot][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[slot][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[slot][property_PRICE], MULTIPLIER_PROPERITES));

	if(PROPERTY_INFO[slot][property_EXTRA]) PROPERTY_INFO[slot][property_PRICE] = 0;
	if(PROPERTY_INFO[slot][property_VIP_LEVEL]) PROPERTY_INFO[slot][property_LEVEL] = 1;

	inline OnPropertyInserted()
	{
		PROPERTY_INFO[slot][property_ID] = cache_insert_id();
		CreatePropertyInfo(slot, 0, "", 0, "");

		SendFormatNotification(playerid, "Propiedad creada, id: %d (%d/%d).", PROPERTY_INFO[slot][property_ID], slot, MAX_PROPIEDADES);
		ExitPlayerPropertyConstructor(playerid);

		TOTAL_PROPIEDADES_CARGADAS ++;
	}
	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO properties (ext_x, ext_y, ext_z, ext_angle, ext_interior, ext_freeze, id_interior, price, level, extra, vip_level)\
			VALUES (%f, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d);\
		",
			PROPERTY_INFO[slot][property_EXT_X], PROPERTY_INFO[slot][property_EXT_Y], PROPERTY_INFO[slot][property_EXT_Z], PROPERTY_INFO[slot][property_EXT_ANGLE],
			PROPERTY_INFO[slot][property_EXT_INTERIOR], PROPERTY_INFO[slot][property_EXT_FREEZE], PROPERTY_INFO[slot][property_ID_INTERIOR],
			PROPERTY_INFO[slot][property_PRICE_BASE], PROPERTY_INFO[slot][property_LEVEL], PROPERTY_INFO[slot][property_EXTRA], PROPERTY_INFO[slot][property_VIP_LEVEL]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPropertyInserted);
	return 1;
}
GetEmptyGarajeSlot()
{
	for(new i = 0; i != MAX_PROPIEDADES; i ++)
	{
		if(!GARAJE_INFO[i][garaje_VALID]) return i;
	}
	return -1;
}

GetEmptyPropertySlot()
{
	for(new i = 0; i != MAX_PROPIEDADES; i ++)
	{
		if(!PROPERTY_INFO[i][property_VALID]) return i;
	}
	return -1;
}

stock SpaceFix(text[])
{
	new str[100 + 1]; format(str, sizeof str, "%s", text);
	for(new i = 0; i < strlen(str); i++)
	{
		if(str[i] == ' ') str[i] = '+';
	}
	return str;
}

GivePlayerDrunkLevel(playerid, amount)
{
	return SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + amount);
}

/*RotateDynamicObject(objectid, Float:rotX, Float:rotY, Float:rotZ, Float:Speed)
{

		Rotation Speeds:
		0.01 - Very very slow speed
		1.00 - Normal speed
		5.00 - Fast speed

	new Float:X, Float:Y, Float:Z;
	new Float:SpeedConverted = floatdiv(floatmul(Speed, 0.01), 2);

	if(IsDynamicObjectMoving(objectid)) StopDynamicObject(objectid);
	GetDynamicObjectPos(objectid, X, Y, Z);
	SetDynamicObjectPos(objectid, X, Y, Z + 0.01);
	MoveDynamicObject(objectid, X, Y, Z, SpeedConverted, rotX, rotY, rotZ);
	return 1;
}*/

stock Float:frandom(Float:max, Float:min, dp)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

SendAlertToMedics(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0x4aba00FF);
				SendClientMessageEx(i, -1, "Hay un persona herida solicitando un médico, distancia: {"#PRIMARY_COLOR"}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

SendAlertToTaxiDrivers(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][WORK_TAXI][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_TAXI) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0xf2f224FF);
				SendClientMessageEx(i, -1, "Hay un nuevo cliente solicitando un taxi, distancia: {"#PRIMARY_COLOR"}%.2f Km.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

SendAlertToMechanic(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MECANICO][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MECANICO) continue;

				SetPlayerMarkerForPlayer(i, playerid, 0xf4c242FF);
				SendClientMessageEx(i, -1, "{00FF00}Hay un nuevo cliente{FFFFFF} solicitando un {00FF00}mecánico{FFFFFF} que se encuentra a {00FF00}%.2f{FFFFFF} Km de ti.", (GetPlayerDistanceFromPoint(i, pos[0], pos[1], pos[2]) * 0.01));
			}
		}
	}
	return 1;
}

DisablePlayerJobMark(playerid, work)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
				if(!PLAYER_WORKS[i][work][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != work) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

SetTaxiPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_TEMP[i][pt_WANT_TAXI])
				{
					SetPlayerMarkerForPlayer(playerid, i, 0xf2f224FF);
				}
			}
		}
	}
	return 1;
}

SetNormalPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerMarkerForPlayer(playerid, i, PLAYER_TEMP[i][pt_PLAYER_COLOR]);
		}
	}
	return 1;
}

LoadPlayerCrewInfo(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	if(PI[playerid][pi_CREW])
	{
		new crew_index = GetCrewIndexById(PI[playerid][pi_CREW]);
		if(crew_index == -1)
		{
			PI[playerid][pi_CREW] = 0;
			PI[playerid][pi_CREW_RANK] = 0;
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = 0;
			SendNotification(playerid, "La banda a la que pertenecías ya no existe.");

			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL WHERE id = %d;", PI[playerid][pi_ID]);
			mysql_tquery(mysql_db, QUERY_BUFFER);
		}
		else
		{
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = crew_index;
			CREW_INFO[crew_index][crew_ONLINE_MEMBERS] ++;
		}
	}
	return 1;
}

LoadPlayerWorks(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPworksLoad()
	{
		new rows, count;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new work;
				cache_get_value_name_int(i, "id_work", work);
				cache_get_value_name_int(i, "set", PLAYER_WORKS[playerid][work][pwork_SET]);
				cache_get_value_name_int(i, "level", PLAYER_WORKS[playerid][work][pwork_LEVEL]);

				if(PLAYER_WORKS[playerid][work][pwork_SET] && !PI[playerid][pi_VIP])
				{
					if(count >= MAX_NU_WORKS)
					{
						PLAYER_WORKS[playerid][work][pwork_SET] = false;
						if(work == WORK_POLICE)
						{
							mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
							mysql_tquery(mysql_db, QUERY_BUFFER);
							PLAYER_WORKS[playerid][work][pwork_LEVEL] = 0;
						}
						else
						{
							mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[playerid][pi_ID], work);
							mysql_tquery(mysql_db, QUERY_BUFFER);
						}
					}
					count ++;
				}

			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pworks WHERE id_player = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPworksLoad);
	return 1;
}
ResetTrailerInfo(vehicleid)
{
	new tmp_TRAILER_VEHICLE[TRAILER_VEHICLE_Info]; TRAILER_VEHICLE[vehicleid] = tmp_TRAILER_VEHICLE;
	return 1;
}

ResetTruckInfo(vehicleid)
{
	new tmp_TRUCK_VEHICLE[TRUCK_VEHICLE_Info]; TRUCK_VEHICLE[vehicleid] = tmp_TRUCK_VEHICLE;
	return 1;
}

ResetPizzaInfo(vehicleid)
{
	new tmp_PIZZA_VEHICLE[PIZZA_VEHICLE_Info]; PIZZA_VEHICLE[vehicleid] = tmp_PIZZA_VEHICLE;
	return 1;
}

ResetTrashInfo(vehicleid)
{
	new tmp_TRASH_VEHICLES[TRASH_VEHICLES_INFO]; TRASH_VEHICLES[vehicleid] = tmp_TRASH_VEHICLES;

	TRASH_VEHICLES[vehicleid][trash_vehicle_DRIVER_ID] = INVALID_PLAYER_ID;
	TRASH_VEHICLES[vehicleid][trash_vehicle_PASSENGER_ID] = INVALID_PLAYER_ID;
	return 1;
}
forward TrailerLoadUp(playerid, cargaid);
public TrailerLoadUp(playerid, cargaid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TrailerLoadUp", 1000, false, "ii", playerid, cargaid);
		return 1;
	}

	TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADING] = true;
	TRAILER_VEHICLE[cargaid][trailer_vehicle_DRIVER_USER_ID] = PI[playerid][pi_ID];

	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADED] = true;
	TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADING] = false;
	TRAILER_VEHICLE[cargaid][trailer_vehicle_DELIVERED] = false;

	SendClientMessage(playerid, -1, "{"#SILVER_COLOR"}El trailer ha sido cargado, dirígete al checkpoint para entregar la mercancía.");
	Descongelar(playerid);
	//ShowPlayerVelocimetro(playerid);
	ShowPlayerSpeedoMeter(playerid); //AQUII
	SetPlayerTrailerCheckpoint(playerid, cargaid);
	return 1;
}

forward TruckLoadUp(playerid, vehicleid);
public TruckLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TruckLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED] = true;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = false;

	SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}El camión ha sido cargado, dirígete al checkpoint para entregar la mercancía.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

forward TrailerUnLoadUp(playerid, cargaid);
public TrailerUnLoadUp(playerid, cargaid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TrailerUnLoadUp", 1000, false, "ii", playerid, cargaid);
		return 1;
	}
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);
	Descongelar(playerid);

	TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING] = false;
	TRAILER_VEHICLE[cargaid][trailer_vehicle_DELIVERED] = true;

	SendNotification(playerid, "La mercancía ha sido entregada, regresa al punto de partida para cobrar.");
	Descongelar(playerid);
	//ShowPlayerVelocimetro(playerid);
	ShowPlayerSpeedoMeter(playerid); //AQUII
	SetPlayerTrailerCheckpoint(playerid, cargaid);
	return 1;
}

forward TruckUnLoadUp(playerid, vehicleid);
public TruckUnLoadUp(playerid, vehicleid)
{
	if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] += 10.0;
		if(PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] = 100.0;

		UpdatePlayerLoadingTruckSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
		PLAYER_TEMP[playerid][pt_TIMERS][7] = SetTimerEx("TruckUnLoadUp", 1000, false, "ii", playerid, vehicleid);
		return 1;
	}
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vehicleid);

	TRUCK_VEHICLE[vehicleid][truck_vehicle_UNLOADING] = false;
	TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED] = true;

	SendNotification(playerid, "La mercancía ha sido entregada, regresa al punto de partida para cobrar.");
	SetPlayerTruckCheckpoint(playerid, vehicleid);
	return 1;
}

SetPlayerTruckCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Return_Positions[0], Truck_Return_Positions[1], Truck_Return_Positions[2], 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = CreateDynamicCP(Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_X], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Y], Truck_Contents[ TRUCK_VEHICLE[vehicleid][truck_vehicle_POINT] ][truck_content_Z], 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRUCK;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

SetPlayerTrailerCheckpoint(playerid, vehicleid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(TRAILER_VEHICLE[vehicleid][trailer_vehicle_DELIVERED])
	{
		PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = CreateDynamicCP(Trailer_Return_Positions[0], Trailer_Return_Positions[1], Trailer_Return_Positions[2], 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRAILER;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT] = CreateDynamicCP(Trailero_Contents[ TRAILER_VEHICLE[vehicleid][trailer_vehicle_POINT] ][trailero_content_X], Trailero_Contents[ TRAILER_VEHICLE[vehicleid][trailer_vehicle_POINT] ][trailero_content_Y], Trailero_Contents[ TRAILER_VEHICLE[vehicleid][trailer_vehicle_POINT] ][trailero_content_Z], 5.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_UNLOAD_TRAILER;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRAILER_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

UpdatePlayerLoadingTruckSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3], 253.0 + ( PLAYER_TEMP[playerid][pt_TRUCK_LOADING_VALUE] * 1.34), 0.000000);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
	return 1;
}
CMD:basurero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_TRASH][pwork_SET]) return SendNotification(playerid, "No eres basurero.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_TRASH) return SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);

	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -1906.577514, -1756.457519, 22.079319)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_TRASH, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(PI[playerid][pi_MECANICO_KITS] <= 0) return SendNotification(playerid, "No tienes un kit de reparación, compra uno en cualquier 24/7.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");
	
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_STATE] != VEHICLE_STATE_DAMAGED) return SendNotification(playerid, "El vehículo no está dañado.");

	RepairVehicleEx(vehicleid, playerid, MIN_VEHICLE_HEALTH + 50.0);
	PI[playerid][pi_MECANICO_KITS] --;
	SendNotification(playerid, "~w~Has usado ~y~1 kit de reparación ~w~para arreglar este vehículo.");
	return 1;
}

CMD:vmenu(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET]) return SendNotification(playerid, "No eres Mecánico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MECANICO) return SendNotification(playerid, "No estás de servicio como Mecánico.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de ningún vehículo.");

	new bool:in_mecanico_area;
	for(new i; i != sizeof Areas_Mecanico; i++)
		if(IsPlayerInDynamicArea(playerid, Areas_Mecanico[i]))
		{
			in_mecanico_area = true;
			break;
		}


	if(!in_mecanico_area) return SendNotification(playerid, "Para reparar este vehículo tienes que estar en el taller.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE]) return SendNotification(playerid, "Para trabajar sobre el vehículo el motor debe estar apagado.");
	if(!VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_NORMAL_SPEEDO] || GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS] <= 0.0) return SendNotification(playerid, "No se puede modificar este vehículo aquí.");

	PLAYER_TEMP[playerid][pt_SELECTED_MECANICO_VEHICLE_ID] = vehicleid;
	ShowDialog(playerid, DIALOG_MECANICO_MENU);
	return 1;
}
CMD:talar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_LUMBERJACK][pwork_SET]) return SendNotification(playerid, "No eres leñador.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_LUMBERJACK)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -527.670349, -97.338562, 63.176174)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_LUMBERJACK, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:medico(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET]) return SendNotification(playerid, "No eres médico.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] == -1 || ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_INTERIOR_TYPE] != INTERIOR_HOSPITAL) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, -2029.751342, -114.503044, 1035.171875)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_MEDIC, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:pizzero(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_PIZZA][pwork_SET]) return SendNotification(playerid, "No eres pizzero, el trabajo se consigue dentro de la pizzería.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_PIZZA)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 2097.355712, -1818.040771, 13.382812)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", playerid, WORK_PIZZA, INVALID_VEHICLE_ID);
	else CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	return 1;
}

CMD:semillas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendNotification(playerid, "No eres agricultor.");
	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1566.521606, 31.370532, 24.16406)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	ShowDialog(playerid, DIALOG_SEED_LIST);
	return 1;
}

CMD:plantar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_FARMER][pwork_SET]) return SendNotification(playerid, "No eres agricultor.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FARMER)
	{
		SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		return 1;
	}

	if(GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(PLAYER_TEMP[playerid][pt_PLANTING]) return SendNotification(playerid, "Ahora mismo ya estás plantando algo.");

	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] + 60)
	{
		new time = (60-(gettime()-PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME]));
		SendFormatNotification(playerid, "Tienes que esperar %s segundos para volver a plantar.", TimeConvert(time));
		return 1;
	}

	if(GetPlayerPlantedPlants(playerid) > 10) return SendNotification(playerid, "Por favor, recoge tus otras plantas para poder plantar más.");

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[i][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, pos[0], pos[1], pos[2]))
		{
			SendNotification(playerid, "Aquí ya hay una planta, aléjate un poco para plantar.");
			return 1;
		}
	}

	ShowDialog(playerid, DIALOG_PLANT_PLANTS);
	return 1;
}

CMD:piezas(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET]) return SendNotification(playerid, "No eres Mecánico.");
	if(GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	for(new i; i != sizeof MecanicoBuyPiecesCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MecanicoBuyPiecesCoords[i][0], MecanicoBuyPiecesCoords[i][1], MecanicoBuyPiecesCoords[i][2]))
		{
			if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/piezas [cantidad]");
			if(params[0] <= 0 || params[0] >= 10000) return SendNotification(playerid, "~r~Modo de uso: ~w~/piezas [cantidad > 0]");

			new price = params[0] * 50;
			if(price > PI[playerid][pi_CASH])
			{
				SendFormatNotification(playerid, "Necesitas %s$ para poder comprar %d piezas.", number_format_thousand(price), params[0]);
				return 1;
			}
			if(price < 0) return 1;

			if(GivePlayerCash(playerid, -price, true, true))
			{
				PI[playerid][pi_MECANICO_PIECES] += params[0];

				SendFormatNotification(playerid, "Has comprado %s piezas por %s$, ahora tienes %s piezas.", number_format_thousand(params[0]), number_format_thousand(price), number_format_thousand(PI[playerid][pi_MECANICO_PIECES]));
			}
			return 1;
		}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:botiquin(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	for(new i; i != sizeof MedicalBuyKitsCoords; i++)
		if(IsPlayerInRangeOfPoint(playerid, 1.0, MedicalBuyKitsCoords[i][0], MedicalBuyKitsCoords[i][1], MedicalBuyKitsCoords[i][2]))
		{
			if(GivePlayerCash(playerid, -5100, true, true))
			{
				PI[playerid][pi_MEDICAL_KITS] += 1;
				SendNotification(playerid, "~w~Has comprado un botiquín, para usararlo usa ~y~/curar ~w~cerca de la persona que quieras curar.");
			}
			else SendNotification(playerid, "No tienes suficiente dinero.");
			return 1;
		}

	SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

VehiclePaintjob(modelid)
{
	switch(modelid)
	{
		case 483: return 1;
		case 534..536: return 3;
		case 558..562: return 3;
		case 565, 567: return 3;
		case 575: return 2;
		case 576: return 3;
	}
	return false;
}

Set_HARVEST_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															1,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															5.0,
															0,
															0,
															playerid
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] =	CreateDynamicRaceCP
														(
															0,
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ][2],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][0],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][1],
															HARVEST_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1 ][2],
															5.0,
															0,
															0,
															playerid
														);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_HARVEST;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	new info[1];
	Streamer_GetArrayData(STREAMER_TYPE_RACE_CP, checkpointid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case CHECKPOINT_TYPE_HARVEST:
		{
			if(PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] == sizeof(HARVEST_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				new work_extra_payment;
				if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY] > 0 && work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_HARVESTER][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_HARVESTER][pwork_LEVEL], work_info[WORK_HARVESTER][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_HARVESTER][work_info_EXTRA_PAY_LIMIT];

					if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

				new money = minrand(750, 1001) + WORK_HARVESTER;
				GivePlayerCash(playerid, money, true, false);

				PLAYER_WORKS[playerid][WORK_HARVESTER][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_HARVESTER);
				SendFormatNotification(playerid, "Has ganado %s$ con esta cosecha.", number_format_thousand(money));

				CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				return 1;
			}

			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] + 1, sizeof(HARVEST_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);

			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] ++;
			Set_HARVEST_Checkpoint(playerid);
		}
		case CHECKPOINT_TYPE_FUMIGATOR:
		{
			if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == INVALID_VEHICLE_ID) return 1;

				new work_extra_payment;
				if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] > 0 && work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP] > 0)
				{
					work_extra_payment = (work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL], work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_EXP])));
					if(work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_FUMIGATOR][work_info_EXTRA_PAY_LIMIT];

					if(PI[playerid][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
				}

				new money = minrand(2200, 3500) + work_extra_payment;
				GivePlayerCash(playerid, money, true, false);

				PLAYER_WORKS[playerid][WORK_FUMIGATOR][pwork_LEVEL] ++;
				AddPlayerJobPoints(playerid, WORK_FUMIGATOR);
				SendFormatNotification(playerid, "Gracias por fumigar nuestros cielos, has ganado %s$.", number_format_thousand(money));

				CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
				return 1;
			}

			new str[50];
			format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1, sizeof(FUMIGATOR_CHECKPOINTS));
			GameTextForPlayer(playerid, str, 2000, 3);

			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ++;
			Set_FUMIGATOR_Checkpoint(playerid);
		}
		case CHECKPOINT_TYPE_DRIVING_SCHOOL:
		{
			if(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][gb_vehicle_TYPE] == VEHICLE_TYPE_DRIVING_SCHOOL)
			{
				if(PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] == sizeof(Driving_School_Points) - 1)
				{
					new Float:vhealth;
					GetVehicleHealth(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID], vhealth);

					if(vhealth >= 800.0)
					{
						PI[playerid][pi_DRIVE_LICENSE_POINTS] = 12;
						SendNotification(playerid, "¡Felicidades! te has sacado el carnet de conducir, cuentas con 12 puntos.");
					}
					else SendNotification(playerid, "No has superado el examen.");

					if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
					{
						DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
						PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
					}
					PLAYER_TEMP[playerid][pt_DL_EXAM] = false;
					PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] = 0;
					SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					return 1;
				}

				new str[50];
				format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~w~~h~checkpoint_~y~%d/%d", PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1, sizeof(Driving_School_Points));
				GameTextForPlayer(playerid, str, 2000, 3);

				PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ++;
				SetPlayerDrivingSchoolCP(playerid);
			}
		}
	}
	return 1;
}

SetPlayerTrashCheckpoint(playerid, vehicleid)
{
	DestroyPlayerTrashCheckpoint(playerid);

	new cp = TRASH_VEHICLES[ vehicleid ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ vehicleid ][trash_vehicle_ROUTE];

	if(cp >= TRASH_OBJECTS[route][trash_route_OBJECTS])
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(-1872.575073, -1720.129394, 22.30542, 5.0, 0, 0, playerid, 9999999999.0);
		new info[1];
		info[0] = CHECKPOINT_TYPE_FINISH_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = CreateDynamicCP(TRASH_OBJECTS[ route ][trash_object_X][ cp ], TRASH_OBJECTS[ route ][trash_object_Y][ cp ], TRASH_OBJECTS[ route ][trash_object_Z][ cp ], 1.5, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_TRASH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

DestroyPlayerTrashCheckpoint(playerid)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	return 1;
}

CancelTrashWork(driver, mate, vehicleid)
{
	DestroyPlayerTrashCheckpoint(driver);
	DestroyPlayerTrashCheckpoint(mate);

	DestroyPlayerTrashRouteObjects(driver);
	DestroyPlayerTrashRouteObjects(mate);

	PLAYER_TEMP[driver][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[driver][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[driver][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	PLAYER_TEMP[mate][pt_TRASH_DRIVER] = false;
	PLAYER_TEMP[mate][pt_TRASH_PASSENGER] = false;
	PLAYER_TEMP[mate][pt_TRASH_VEHICLE_ID] = INVALID_VEHICLE_ID;

	KillTimer(PLAYER_TEMP[mate][pt_TIMERS][8]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(mate, PlayerTextdraws[mate][ptextdraw_RECYCLE_TRASH][2]);
	ClearAnimations(mate);
	TogglePlayerControllableEx(mate, true);

	ResetTrashInfo(vehicleid);
	SetVehicleToRespawnEx(vehicleid);
	return 1;
}

UpdatePlayerTrashRecycleSize(playerid)
{
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2], 0.0, PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] * 1.3);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);
	return 1;
}

forward RecycleUp(playerid);
public RecycleUp(playerid)
{
	if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] < 100.0)
	{
		PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] += 15.0;
		if(PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] > 100.0) PLAYER_TEMP[playerid][pt_RECYCLE_BIN_VALUE] = 100.0;

		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.1, true, false, false, false, 0);
		UpdatePlayerTrashRecycleSize(playerid);
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][8]);
		PLAYER_TEMP[playerid][pt_TIMERS][8] = SetTimerEx("RecycleUp", 1000, false, "i", playerid);
		return 1;
	}

	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][1]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_RECYCLE_TRASH][2]);

	new driver = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID];
	new cp = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP];
	new route = TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE];

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][cp]);
	TRASH_PLAYER_OBJECTS[playerid][cp] = INVALID_STREAMER_ID;

	DestroyDynamicObject(TRASH_PLAYER_OBJECTS[driver][cp]);
	TRASH_PLAYER_OBJECTS[driver][cp] = INVALID_STREAMER_ID;

	CreatePlayerFlashObject(
								playerid,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	CreatePlayerFlashObject(
								driver,
								TRASH_OBJECTS[ route ][trash_object_X][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Y][ cp ],
								TRASH_OBJECTS[ route ][trash_object_Z][ cp ] - 1.5
							);

	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);

	TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] ++;
	if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_CP] >= TRASH_OBJECTS[ TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_ROUTE] ][trash_route_OBJECTS])
	{
		SendNotification(playerid, "Sube al camión para volver al vertedero y recibir la paga.");
		SendNotification(driver, "Espera a que se suba tu compañero y vuelve al vertedero para recibir la paga.");
	}
	else SendNotification(playerid, "Sube al camión y sigue con la ruta.");

	SetPlayerTrashCheckpoint(driver, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
	SetPlayerTrashCheckpoint(playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);

	Streamer_Update(driver);
	Streamer_Update(playerid);
	return 1;
}

CancelLumberjackWork(playerid)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		DestroyDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID]);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_MODELID], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_X], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Y], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_Z], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RX], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RY], LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_RZ], 0, 0);
		LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el Árbol.", PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE]);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] ][lumber_tree_LABEL], -1, label_str);
	}

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
	//ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	TogglePlayerControllableEx(playerid, true);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;
	DestroyPlayerKeyPress(playerid);
	SetPlayerToys(playerid);
	return 1;
}

forward ContinueTreeAnimation(playerid, tree, Float:rotation);
public ContinueTreeAnimation(playerid, tree, Float:rotation)
{
	new Float:pos[3];
	pos[0] = LUMBER_TREES[ tree ][lumber_tree_X];
	pos[1] = LUMBER_TREES[ tree ][lumber_tree_Y];
	pos[2] = LUMBER_TREES[ tree ][lumber_tree_Z];

	pos[0] += (1.5 * floatsin(-rotation, degrees));
	pos[1] += (1.5 * floatcos(-rotation, degrees));

	CreateFlashObject(pos[0], pos[1], pos[2] - 0.4);
	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	PlayerPlaySoundEx(playerid, 1190, 0.0, 0.0, 0.0);

	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(841, pos[0], pos[1], pos[2] + 0.2, 0.0, 0.0, rotation, 0, 0);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = true;
	PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;

	RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT] = CreateDynamicCP(-504.353912, -88.591995, 62.086818, 5.0, 0, 0, playerid, 9999999999.0);

	new info[1];
	info[0] = CHECKPOINT_TYPE_LUMBERJACK;
	Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	SendNotification(playerid, "Ve a llevar la leña al punto marcado para recibir la paga.");


	LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] = 90;
	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_CUTTED;
	KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
	LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);

	Streamer_Update(playerid);
	return 1;
}

forward GrowTreeUp(tree);
public GrowTreeUp(tree)
{
	if(LUMBER_TREES[ tree ][lumber_tree_STATE] != LUMBER_TREE_STATE_CUTTED) return 0;

	if(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] > 0)
	{
		LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER] --;
		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{"#SILVER_COLOR"}(%s)", tree, TimeConvert(LUMBER_TREES[ tree ][lumber_tree_GROW_COUNTER]));
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

		KillTimer(LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER]);
		LUMBER_TREES[ tree ][lumber_tree_GROW_TIMER] = SetTimerEx("GrowTreeUp", 1000, false, "i", tree);
		return 1;
	}

	DestroyDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID]);
	LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID] = CreateDynamicObject(LUMBER_TREES[ tree ][lumber_tree_MODELID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], LUMBER_TREES[ tree ][lumber_tree_RZ], 0, 0);
	LUMBER_TREES[ tree ][lumber_tree_STATE] = LUMBER_TREE_STATE_NORMAL;

	new label_str[256];
	format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Pulsa {f9d834}~k~~CONVERSATION_NO~ {FFFFFF}para talar el Árbol.", tree);
	UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);
	return 1;
}

CreateFlashObject(Float:x, Float:y, Float:z)
{
	new oid = CreateObject(18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyFlashObject", 1000, false, "i", oid);
	return 1;
}

forward DestroyFlashObject(objectid);
public DestroyFlashObject(objectid)
{
	return DestroyObject(objectid);
}

ShowPlayerInventory(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;

	new caption[48];
	format(caption, sizeof caption, "Inventario de %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	new dialog[1800], line_str[128];

	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Dinero {"#SILVER_COLOR"}(%s$)\n", number_format_thousand(PI[pid][pi_CASH]));
	strcat(dialog, line_str);

	if(PI[pid][pi_DRIVE_LICENSE_POINTS])
	{
		format(line_str, sizeof line_str, "Licencia de conducir: {"#SILVER_COLOR"}sí, %d puntos\n", PI[pid][pi_DRIVE_LICENSE_POINTS]);
		strcat(dialog, line_str);
	}
	else
	{
		format(line_str, sizeof line_str, "Licencia de conducir: {"#SILVER_COLOR"}no\n");
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_PHONE_NUMBER])
	{
		format(line_str, sizeof line_str, "Teléfono {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_PHONE_NUMBER]);
		strcat(dialog, line_str);
	}

	new toys = CountPlayerToys(pid);
	if(toys > 0)
	{
		format(line_str, sizeof line_str, "Accesorios {"#SILVER_COLOR"}(%d)\n", toys);
		strcat(dialog, line_str);
	}

	new pocket_objects = CountPlayerPocketObjects(pid);
	if(pocket_objects > 0)
	{
		format(line_str, sizeof line_str, "Alimentos {"#SILVER_COLOR"}(%d)\n", pocket_objects);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MP3]) strcat(dialog, "Reproductor MP3\n");
	if(PI[pid][pi_PHONE_RESOLVER]) strcat(dialog, "Guía telefónica\n");
	if(PI[pid][pi_SPEAKERS]) strcat(dialog, "Altavoces\n");
	if(PI[pid][pi_Patines]) strcat(dialog, "Patines\n");

	new player_weapons = CountPlayerWeapons(pid);
	if(player_weapons > 0)
	{
		if(PLAYER_WORKS[pid][WORK_POLICE][pwork_SET]) format(line_str, sizeof line_str, "{"#PRIMARY_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		else format(line_str, sizeof line_str, "{"#RED_COLOR"}Armas {"#SILVER_COLOR"}(%d)\n", player_weapons);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MECANICO_PIECES] > 0)
	{
		format(line_str, sizeof line_str, "Piezas de Mecánico {"#SILVER_COLOR"}(%s)\n", number_format_thousand(PI[pid][pi_MECANICO_PIECES]));
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_FUEL_DRUM] > 0)
	{
		format(line_str, sizeof line_str, "Bidón de gasolina {"#SILVER_COLOR"}(%d Litros)\n", PI[pid][pi_FUEL_DRUM]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_SEED_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Semillas de medicina {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_MEDICINE]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_SEED_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de marihuana {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_CANNABIS]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_SEED_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Semillas de coca {"#SILVER_COLOR"}(%d)\n", PI[pid][pi_SEED_CRACK]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MEDICINE] > 0)
	{
		format(line_str, sizeof line_str, "{"#BLUE_COLOR"}Medicamentos {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_MEDICINE]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_CANNABIS] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Marihuana {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_CANNABIS]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_CRACK] > 0)
	{
		format(line_str, sizeof line_str, "{"#RED_COLOR"}Crack {"#SILVER_COLOR"}(%dg)\n", PI[pid][pi_CRACK]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MECANICO_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Kits de reparación (%d)\n", PI[pid][pi_MECANICO_KITS]);
		strcat(dialog, line_str);
	}

	if(PI[pid][pi_MEDICAL_KITS] > 0)
	{
		format(line_str, sizeof line_str, "Botiquines (%d)\n", PI[pid][pi_MEDICAL_KITS]);
		strcat(dialog, line_str);
	}
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

CountPlayerToys(playerid)
{
	new toys;
	for(new i = 0; i != MAX_SU2_TOYS; i ++)
	{
		if(PLAYER_TOYS[playerid][i][player_toy_VALID])
		{
			toys ++;
		}
	}
	return toys;
}

CountPlayerPocketObjects(playerid)
{
	new objects;
	for(new i = 0; i != MAX_PLAYER_POCKET_OBJECTS; i ++)
	{
		if(PLAYER_POCKET[playerid][i][player_pocket_VALID])
		{
			objects ++;
		}
	}
	return objects;
}

CountPlayerWeapons(playerid)
{
	new weapons;
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_VALID])
		{
			weapons ++;
		}
	}
	return weapons;
}

ShowPlayerSkills(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;

	new caption[48], line_str[80], dialog[sizeof line_str * (sizeof(work_info) + 5)];
	format(caption, sizeof caption, "Experiencia de %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	strcat(dialog, "{"#BLUE_COLOR"}CUENTA\n");
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Nivel: {"#PRIMARY_COLOR"}%d\n", PI[pid][pi_LEVEL]);
	strcat(dialog, line_str);

	new neccessary_rep = PI[pid][pi_LEVEL] * REP_MULTIPLIER;
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Reputación: {"#PRIMARY_COLOR"}%d/%d\n", PI[pid][pi_REP], neccessary_rep);
	strcat(dialog, line_str);

	new Float:hours;
	ConvertTime_SecondsToHoursFloat(PI[pid][pi_TIME_PLAYING], hours);
	format(line_str, sizeof line_str, "{"#SILVER_COLOR"}Horas de juego: {"#PRIMARY_COLOR"}%.1f horas\n", hours);
	strcat(dialog, line_str);

	strcat(dialog, "\n{"#BLUE_COLOR"}TRABAJOS\n");

	for(new i = 1; i != sizeof work_info; i ++)
	{
		if(i == WORK_POLICE)
		{
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], POLICE_RANKS[PLAYER_WORKS[pid][i][pwork_LEVEL]]);
				strcat(dialog, line_str);
			}
		}
		else if(i == WORK_MECANICO)
		{
			if(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET])
			{
				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], MECANICO_RANKS[PLAYER_WORKS[pid][i][pwork_LEVEL]]);
				strcat(dialog, line_str);
			}
		}
		else
		{
			format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%c%s: {"#PRIMARY_COLOR"}%s\n", toupper(work_info[i][work_info_NAME][0]), work_info[i][work_info_NAME][1], number_format_thousand(PLAYER_WORKS[pid][i][pwork_LEVEL]));
			strcat(dialog, line_str);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

stock ConvertTime_SecondsToHoursFloat(sec, &Float:hours)
{
	hours = floatdiv(float(sec), 3600);
   	return 1;
}

CreatePlayerTrashRouteObjects(playerid, route)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;

		if(TRASH_OBJECTS[route][trash_object_MODELID][i] != 0)
		{
			TRASH_PLAYER_OBJECTS[playerid][i] = CreateDynamicObject(TRASH_OBJECTS[route][trash_object_MODELID][i], TRASH_OBJECTS[route][trash_object_X][i], TRASH_OBJECTS[route][trash_object_Y][i], TRASH_OBJECTS[route][trash_object_Z][i], TRASH_OBJECTS[route][trash_object_RX][i], TRASH_OBJECTS[route][trash_object_RY][i], TRASH_OBJECTS[route][trash_object_RZ][i], 0, 0, playerid);
		}
	}
	return 1;
}

DestroyPlayerTrashRouteObjects(playerid)
{
	for(new i = 0; i != MAX_OBJECTS_PER_ROUTE; i ++)
	{
		if(TRASH_PLAYER_OBJECTS[playerid][i] != INVALID_STREAMER_ID) DestroyDynamicObject(TRASH_PLAYER_OBJECTS[playerid][i]);
		TRASH_PLAYER_OBJECTS[playerid][i] = INVALID_STREAMER_ID;
	}
	return 1;
}

CreatePlayerFlashObject(playerid, Float:x, Float:y, Float:z)
{
	new oid = CreatePlayerObject(playerid, 18680, x, y, z, 0.0, 0.0, 0.0);
	SetTimerEx("DestroyPlayerFlashObject", 1000, false, "ii", playerid, oid);
	return 1;
}

forward DestroyPlayerFlashObject(playerid, objectid);
public DestroyPlayerFlashObject(playerid, objectid)
{
	return DestroyPlayerObject(playerid, objectid);
}

GetVehicleFirstPassenger(vehicleid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(GetPlayerVehicleID(i) == vehicleid)
					{
						return i;
					}
				}
			}
		}
	}
	return INVALID_PLAYER_ID;
}

CancelPlayerPlanting(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][10]);
	PLAYER_TEMP[playerid][pt_PLANTING] = false;
	DestroyPlayerKeyPress(playerid);
	TogglePlayerControllableEx(playerid, true);
	ClearAnimations(playerid);
	return 1;
}

GetAvaiblePlantIndex()
{
	for(new i = 0; i != sizeof PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) return i;
	}
	return -1;
}

forward GrowPlantUp(plant);
public GrowPlantUp(plant)
{
	if(!PLANTS[plant][plant_VALID] || !PLANTS[plant][plant_GROWING]) return 0;

	if(PLANTS[plant][plant_GROWING_PROGRESS] < 100.0)
	{
		PLANTS[plant][plant_GROWING_PROGRESS] += floatdiv(25, plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_SEEDS]);
		if(PLANTS[plant][plant_GROWING_PROGRESS] > 100.0) PLANTS[plant][plant_GROWING_PROGRESS] = 100.0;

		if(PLANTS[plant][plant_INVISIBLE] && PLANTS[plant][plant_GROWING_PROGRESS] > 50.0)
		{
			PLANTS[plant][plant_INVISIBLE] = false;
			SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFFFFFFF);
		}

		new label_str[256];
		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], PLANTS[plant][plant_GROWING_PROGRESS]);
		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", plant);
		return 1;
	}

	SetDynamicObjectMaterial(PLANTS[plant][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0xFFff0000);

	PLANTS[plant][plant_GROWING] = false;
	PLANTS[plant][plant_EXPIRE_TIME] = 300;
	PLANTS[plant][plant_IMMUNITY] = 60;

	new label_str[256];
	if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
	UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);

	KillTimer(PLANTS[plant][plant_TIMER]);
	PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
	return 1;
}

forward ExpirePlantTime(plant);
public ExpirePlantTime(plant)
{
	if(!PLANTS[plant][plant_VALID]) return 0;

	if(PLANTS[plant][plant_EXPIRE_TIME] > 0)
	{
		new
			label_str[256];

		PLANTS[plant][plant_EXPIRE_TIME] --;
		PLANTS[plant][plant_IMMUNITY] --;

		if(seed_info[ PLANTS[plant][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL)
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}
		else
		{
			if(PLANTS[plant][plant_IMMUNITY] > 0) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: %ss\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]), TimeConvert(PLANTS[plant][plant_IMMUNITY]));
			else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n\n{CCCCCC}Agricultor: %s\nExpira en %sm\nInmunidad: Nada\n\nPresiona {"#PRIMARY_COLOR"}[ H ]{CCCCCC} para recogerla", plant_info[ PLANTS[plant][plant_TYPE] ][plant_info_NAME], PLANTS[plant][plant_PLANTED_BY_NAME], TimeConvert(PLANTS[plant][plant_EXPIRE_TIME]));
		}

		UpdateDynamic3DTextLabelText(PLANTS[plant][plant_LABEL_ID], -1, label_str);

		KillTimer(PLANTS[plant][plant_TIMER]);
		PLANTS[plant][plant_TIMER] = SetTimerEx("ExpirePlantTime", 1000, false, "d", plant);
		return 1;
	}

	new Float:pos[3];
	GetDynamicObjectPos(PLANTS[plant][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
	CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);

	DestroyDynamicObject(PLANTS[plant][plant_OBJECT_ID]);
	DestroyDynamic3DTextLabel(PLANTS[plant][plant_LABEL_ID]);

	new tmp_PLANTS[PLANTS_ENUM]; PLANTS[plant] = tmp_PLANTS;
	return 1;
}

CMD:recoger(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID] || PLANTS[i][plant_GROWING]) continue;

		if(PLANTS[i][plant_IMMUNITY] > 0 && PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] != PI[playerid][pi_ID]) return SendFormatNotification(playerid, "Esta planta tiene tiempo de inmunidad.");

		KillTimer(PLANTS[i][plant_TIMER]);
		switch(seed_info[ PLANTS[i][plant_TYPE] ][seed_info_PLANT_TYPE])
		{
			case PLANT_TYPE_MEDICINE:
			{
				PI[playerid][pi_MEDICINE] += 2;
				SendNotification(playerid, "Has recogido la planta y has obtenido ~g~2 gramos de medicamento~w~.");
			}
			case PLANT_TYPE_CANNABIS:
			{
				PI[playerid][pi_CANNABIS] += 1;
				SendNotification(playerid, "Has recogido la planta y has obtenido ~g~6 gramos de marihuana~w~.");
			}
			case PLANT_TYPE_CRACK:
			{
				PI[playerid][pi_CRACK] += 4;
				SendNotification(playerid, "Has recogido la planta y has obtenido ~g~4 gramos de crack~w~.");
			}
		}

		DestroyDynamicObject(PLANTS[i][plant_OBJECT_ID]);
		DestroyDynamic3DTextLabel(PLANTS[i][plant_LABEL_ID]);
		ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);

		new tmp_PLANTS[PLANTS_ENUM]; PLANTS[i] = tmp_PLANTS;
		return 1;
	}
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

	if(info[0] == OBJECT_TYPE_PLANT)
	{
		KillTimer(PLANTS[info[1]][plant_TIMER]);

		new Float:pos[3];
		GetDynamicObjectPos(PLANTS[info[1]][plant_OBJECT_ID], pos[0], pos[1], pos[2]);
		CreateFlashObject(pos[0], pos[1], pos[2] - 1.3);

		DestroyDynamicObject(PLANTS[info[1]][plant_OBJECT_ID]);
		DestroyDynamic3DTextLabel(PLANTS[info[1]][plant_LABEL_ID]);

		new tmp_PLANTS[PLANTS_ENUM]; PLANTS[info[1]] = tmp_PLANTS;
	}
	return 1;
}

ShowPlayerGpsMap(playerid)
{
	PLAYER_TEMP[playerid][pt_GPS_MAP] = true;
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);

	UpdatePlayer_GPS_Map(playerid);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	PLAYER_TEMP[playerid][pt_TIMERS][11] = SetTimerEx("UpdatePlayer_GPS_Map", 1000, true, "i", playerid);
	return 1;
}

HidePlayerGpsMap(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);
	PLAYER_TEMP[playerid][pt_GPS_MAP] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_GPS_MAP][3]);

	for(new i = 0; i != MAX_PLAYER_MAP_GPS_POINTS; i ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

forward UpdatePlayer_GPS_Map(playerid);
public UpdatePlayer_GPS_Map(playerid)
{
	/*
		0 - playerpos
		1 - cp gps
		2 - cp works
		3 > cp works

	*/
	if(!PLAYER_TEMP[playerid][pt_GPS_MAP]) return KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][11]);

	new Float:pos[3];

	switch(PI[playerid][pi_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
		}
		default: GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	}
	SetPlayerPoint_GPS_Map(0, playerid, "hud:radar_waypoint", -1, 5.0, 5.0, pos[0], pos[1]);

	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT]))
	{
		new Float:gps_cp_pos[2];
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
		Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_GPS_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
		SetPlayerPoint_GPS_Map(1, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
	}
	else
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][1] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_NONE:
		{
			if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
				PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
			}
		}
		case WORK_TRUCK, WORK_DELIVERYMAN:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_TRASH:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_TRASH_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_LUMBERJACK:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_LUMBERJACK_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
		case WORK_PIZZA:
		{
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				new Float:gps_cp_pos[2];
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_X, gps_cp_pos[0]);
				Streamer_GetFloatData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_Y, gps_cp_pos[1]);
				SetPlayerPoint_GPS_Map(2, playerid, "LD_SPAC:white", 0xaa0000ff, 3.0, 3.0, gps_cp_pos[0], gps_cp_pos[1]);
			}
			else
			{
				if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] != PlayerText:INVALID_TEXT_DRAW)
				{
					PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2]);
					PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][2] = PlayerText:INVALID_TEXT_DRAW;
				}
			}
		}
	}

	new cp_counts = 3;
	for(new d = cp_counts; d != MAX_PLAYER_MAP_GPS_POINTS; d ++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d]);
			PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][d] = PlayerText:INVALID_TEXT_DRAW;
		}
	}

	if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) return 1;
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PLAYER_TEMP[i][pt_WANT_TAXI])
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(PI[i][pi_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0xf2f224FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_POLICE:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][pi_WANTED_LEVEL] > 0)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							switch(PI[i][pi_STATE])
							{
								case ROLEPLAY_STATE_INTERIOR:
								{
									if(PLAYER_TEMP[i][pt_INTERIOR_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene interior index -1 estando en ROLEPLAY_STATE_INTERIOR");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_X];
									player_pos[1] = ENTER_EXIT[ PLAYER_TEMP[i][pt_INTERIOR_INDEX] ][ee_EXT_Y];
								}
								case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
								{
									if(PLAYER_TEMP[i][pt_PROPERTY_INDEX] == -1)
									{
										printf("[debug] Player id %d tiene property index -1 estando en pt_PROPERTY_INDEX");
										PrintBacktrace();
										continue;
									}
									player_pos[0] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_X];
									player_pos[1] = PROPERTY_INFO[ PLAYER_TEMP[i][pt_PROPERTY_INDEX] ][property_EXT_Y];
								}
								default: GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							}
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", PlayerWantedColor(i), 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
		case WORK_MEDIC:
		{
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(PI[i][pi_STATE] == ROLEPLAY_STATE_CRACK)
						{
							if(cp_counts >= MAX_PLAYER_MAP_GPS_POINTS) break;

							new Float:player_pos[3];
							GetPlayerPos(i, player_pos[0], player_pos[1], player_pos[2]);
							SetPlayerPoint_GPS_Map(cp_counts, playerid, "LD_SPAC:white", 0x4aba00FF, 3.0, 3.0, player_pos[0], player_pos[1]);
							cp_counts ++;
						}
					}
				}
			}
		}
	}
	return 1;
}

SetPlayerPoint_GPS_Map(index, playerid, icon[], color, Float:icon_size_X, Float:icon_size_Y, Float:x, Float:y)
{
	new Float:td_X, Float:td_Y,
		Float:converted_MAP_SIZE_X = floatdiv(map_td_SIZE_X, 2),
		Float:converted_MAP_SIZE_Y = floatdiv(map_td_SIZE_Y, 2),
		Float:converted_ICON_SIZE_X = floatdiv(icon_size_X, 2),
		Float:converted_ICON_SIZE_Y = floatdiv(icon_size_Y, 2);

	if(x > 3000.0) x = 3000.0;
	else if(x < -3000.0) x = -3000.0;

	if(y > 3000.0) y = 3000.0;
	else if(y < -3000.0) y = -3000.0;

	td_X = map_td_X + floatmul(floatdiv(converted_MAP_SIZE_X, 3000), x) + converted_MAP_SIZE_X - converted_ICON_SIZE_X;
	td_Y = map_td_Y + floatmul(floatdiv(-converted_MAP_SIZE_Y, 3000), y) + converted_MAP_SIZE_Y- converted_ICON_SIZE_Y;

	if(PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
		PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = PlayerText:INVALID_TEXT_DRAW;
	}

	PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index] = CreatePlayerTextDraw(playerid, td_X, td_Y, icon);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0.160333, 1.280592);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], icon_size_X, icon_size_Y);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], color);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 4);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index], 0);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PLAYER_GPS_MAP][index]);
	return 1;
}

#define lc_limit_X_WEST 4000.0
#define lc_limit_X_EAST 7500.0
#define lc_limit_Y_NORTH 6900.0
#define lc_limit_Y_SOUTH 4150.0

stock Lc3dTo2d(Float:map_x, Float:map_y, Float:map_size_x, Float:map_size_y, Float:x, Float:y, Float:z, &Float:td_x, &Float:td_y)
{
	#pragma unused z

	/* Map limits */
	if(x > lc_limit_X_EAST) x = lc_limit_X_EAST;
	else if(x < lc_limit_X_WEST) x = lc_limit_X_WEST;

	if(y > lc_limit_Y_NORTH) y = lc_limit_Y_NORTH;
	else if(y < lc_limit_Y_SOUTH) y = lc_limit_Y_SOUTH;

	/* Calculations */
	new Float:map_width = floatsub(lc_limit_X_EAST, lc_limit_X_WEST),
		Float:prop_X = floatdiv(map_size_x, map_width),
		Float:mv_X = floatsub(map_width, lc_limit_X_EAST);

	new Float:map_height = floatsub(lc_limit_Y_SOUTH, lc_limit_Y_NORTH),
		Float:prop_Y = floatdiv(map_size_y, map_height),
		Float:mv_Y = floatsub(map_height, lc_limit_Y_SOUTH);

	/* Conversion */
	x += mv_X;
	y += mv_Y;

	/* Result */
	td_x = map_x + floatmul(prop_X, x),
	td_y = map_y + floatmul(prop_Y, y);
	return 1;
}

/*stock GetIconTextdraw(iconid)
{
	new td_icon[24];

	switch(iconid)
	{
		case 2: td_icon = "hud:radar_centre";
		case 3: td_icon = "hud:arrow";
		case 4: td_icon = "hud:radar_north";
		case 5: td_icon = "hud:radar_airyard";
		case 6: td_icon = "hud:radar_ammugun";
		case 7: td_icon = "hud:radar_barbers";
		case 8: td_icon = "hud:radar_bigsmoke";
		case 9: td_icon = "hud:radar_boatyard";
		case 10: td_icon = "hud:radar_burgershot";
		case 11: td_icon = "hud:radar_bulldozer";
		case 12: td_icon = "hud:radar_catalinapink";
		case 13: td_icon = "hud:radar_cesarviapando";
		case 14: td_icon = "hud:radar_chicken";
		case 15: td_icon = "hud:radar_cj";
		case 16: td_icon = "hud:radar_crash1";
		case 17: td_icon = "hud:radar_diner";
		case 18: td_icon = "hud:radar_emmetgun";
		case 19: td_icon = "hud:radar_enemyattack";
		case 20: td_icon = "hud:radar_fire";
		case 21: td_icon = "hud:radar_girlfriend";
		case 22: td_icon = "hud:radar_hostpital";
		case 23: td_icon = "hud:radar_locosyndicate";
		case 24: td_icon = "hud:radar_maddog";
		case 25: td_icon = "hud:radar_mafiacasino";
		case 26: td_icon = "hud:radar_mcstrap";
		case 27: td_icon = "hud:radar_modgarage";
		case 28: td_icon = "hud:radar_ogloc";
		case 29: td_icon = "hud:radar_pizza";
		case 30: td_icon = "hud:radar_police";
		case 31: td_icon = "hud:radar_propertyg";
		case 32: td_icon = "hud:radar_propertyr";
		case 33: td_icon = "hud:radar_race";
		case 34: td_icon = "hud:radar_ryder";
		case 35: td_icon = "hud:radar_savegame";
		case 36: td_icon = "hud:radar_school";
		case 37: td_icon = "hud:radar_qmark";
		case 38: td_icon = "hud:radar_sweet";
		case 39: td_icon = "hud:radar_tattoo";
		case 40: td_icon = "hud:radar_thetruth";
		case 41: td_icon = "hud:radar_waypoint";
		case 42: td_icon = "hud:radar_toreno";
		case 43: td_icon = "hud:radar_triads";
		case 44: td_icon = "hud:radar_triadscasino";
		case 45: td_icon = "hud:radar_tshirt";
		case 46: td_icon = "hud:radar_woozie";
		case 47: td_icon = "hud:radar_zero";
		case 48: td_icon = "hud:radar_datedisco";
		case 49: td_icon = "hud:radar_datedrink";
		case 50: td_icon = "hud:radar_datefood";
		case 51: td_icon = "hud:radar_truck";
		case 52: td_icon = "hud:radar_cash";
		case 53: td_icon = "hud:radar_flag";
		case 54: td_icon = "hud:radar_gym";
		case 55: td_icon = "hud:radar_impound";
		case 56: td_icon = "hud:radar_light";
		case 57: td_icon = "hud:radar_runway";
		case 58: td_icon = "hud:radar_gangb";
		case 59: td_icon = "hud:radar_gangp";
		case 60: td_icon = "hud:radar_gangy";
		case 61: td_icon = "hud:radar_gangn";
		case 62: td_icon = "hud:radar_gangg";
		case 63: td_icon = "hud:radar_spray";
	}

	return td_icon;
}*/

GivePlayerWeaponEx(playerid, weapon_id, ammo)
{
	if(weapon_id < 0 || weapon_id > 48) return 0;

	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] == weapon_id) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] += ammo;
	else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = ammo;

	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_VALID] = true;
	PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID] = weapon_id;

	SetPlayerWeapon(playerid, WEAPON_INFO[weapon_id][weapon_info_SLOT]);
	return 1;
}

ResetPlayerWeaponsEx(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	new tmp_PLAYER_WEAPONS[enum_PLAYER_WEAPONS];
	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++) PLAYER_WEAPONS[playerid][i] = tmp_PLAYER_WEAPONS;

	ResetPlayerWeapons(playerid);
	return 1;
}

SetWeaponsForPlayer(playerid)
{
	PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY] = gettime() + 3;

	ResetPlayerWeapons(playerid);

	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(PLAYER_WEAPONS[playerid][i][player_weapon_ID] != 0)
		{
			SetPlayerWeapon(playerid, i);
		}
	}
	return 1;
}

SetPlayerWeapon(playerid, slot)
{
	if(WEAPON_INFO[ PLAYER_WEAPONS[playerid][slot][player_weapon_ID] ][weapon_info_SPECIAL])
	{
		switch(WEAPON_INFO[ PLAYER_WEAPONS[playerid][slot][player_weapon_ID] ][weapon_info_TYPE])
		{
			case WEAPON_TASER_GUN:
			{
				GivePlayerWeapon(playerid, 23, PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO]);
			}
		}
	}
	else
	{
		if(PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] > 0) GivePlayerWeapon(playerid, PLAYER_WEAPONS[playerid][slot][player_weapon_ID], PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO]);
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(WEAPON_INFO[weaponid][weapon_info_AMMO]) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] --;
	if(PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] <= 0) PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO] = 0;
	if(ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Enabled])
	{
		if(GetPlayerWeapon(playerid) != weaponid)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_UNDETECTED_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_UNDETECTED_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_UNDETECTED_WEAPON);
				}
			}
		}
	}
	if(ac_Info[CHEAT_DRIVE_BY][ac_Enabled])
	{
		new player_state = GetPlayerState(playerid);
		if(player_state == PLAYER_STATE_DRIVER || player_state == PLAYER_STATE_PASSENGER)
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DRIVE_BY][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				else
				{
					if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DRIVE_BY][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_LAST_DETECTION] = gettime();
					if(PLAYER_AC_INFO[playerid][CHEAT_DRIVE_BY][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DRIVE_BY][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DRIVE_BY);
				}
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(PI[playerid][pi_DAMAGE])//AGREDIDO
		{
			if(PLAYER_TEMP[playerid][pt_TIMERS][18] != 0) KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);

			PLAYER_TEMP[playerid][pt_DAMAGE_DANIO] += amount;

			PLAYER_TEMP[playerid][pt_TIMERS][18] = SetTimerEx("DamageReset", 3000, 0, "i", playerid);

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0]);
			PlayerPlaySound(playerid,1085,0.0,0.0,0.0);

			new str[50];
			format(str,sizeof str,"%s - Daño:-%.0f", PLAYER_TEMP[issuerid][pt_RP_NAME], PLAYER_TEMP[playerid][pt_DAMAGE_DANIO]);
			FixTextDrawString(str);
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0], str);
		}
		if(PI[issuerid][pi_DAMAGE])//ATACANTE
		{
			if(PLAYER_TEMP[issuerid][pt_TIMERS][18] != 0) KillTimer(PLAYER_TEMP[issuerid][pt_TIMERS][18]);

			PLAYER_TEMP[issuerid][pt_DAMAGE_DANIO] += amount;

			PLAYER_TEMP[issuerid][pt_TIMERS][18] = SetTimerEx("DamageReset", 3000, 0, "i", issuerid);

			PlayerTextDrawShow(issuerid, PlayerTextdraws[issuerid][ptextdraw_DAMAGE][1]);
			PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);

			new str[50];
			format(str,sizeof str,"%s - Daño:+%.0f", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[issuerid][pt_DAMAGE_DANIO]);
			FixTextDrawString(str);
			PlayerTextDrawSetString(issuerid, PlayerTextdraws[issuerid][ptextdraw_DAMAGE][1], str);
		 }

		if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE && PI[playerid][pi_STATE] != ROLEPLAY_STATE_CRACK && PI[playerid][pi_STATE] != ROLEPLAY_STATE_JAIL)
		{
			if(PLAYER_TEMP[playerid][pt_COMBAT])
			{
				KillTimer(PLAYER_TEMP[playerid][pt_COMBAT_TIMER]);
				PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 30000 * 2, false, "i", playerid);
			}
			else
			{
				PLAYER_TEMP[playerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 30000 * 2, false, "i", playerid);
				PLAYER_TEMP[playerid][pt_COMBAT] = true;

				TextDrawShowForPlayer(playerid, Textdraws[textdraw_COMBAT_MODE]);

				SendNotification(playerid, "Has entrado en modo de combate. Saldrás de este modo en ~r~1 minutos~w~.~n~~n~Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}

		if(PLAYER_TEMP[issuerid][pt_WORKING_IN] != WORK_POLICE && PI[issuerid][pi_STATE] != ROLEPLAY_STATE_CRACK && PI[issuerid][pi_STATE] != ROLEPLAY_STATE_JAIL)
		{
			if(PLAYER_TEMP[issuerid][pt_COMBAT])
			{
				KillTimer(PLAYER_TEMP[issuerid][pt_COMBAT_TIMER]);
				PLAYER_TEMP[issuerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 30000 * 2, false, "i", issuerid);
			}
			else
			{
				PLAYER_TEMP[issuerid][pt_COMBAT_TIMER] = SetTimerEx("ResetCombat", 30000 * 2, false, "i", issuerid);
				PLAYER_TEMP[issuerid][pt_COMBAT] = true;

				TextDrawShowForPlayer(issuerid, Textdraws[textdraw_COMBAT_MODE]);

				SendNotification(issuerid, "Has entrado en modo de combate. Saldrás de este modo en ~r~1 minutos~w~.~n~~n~Si te desconectas, perderás todas tus armas, y en caso de tener cargos irás a prisión.");
			}
		}

		if(!PLAYER_WORKS[issuerid][WORK_POLICE][pwork_SET])
		{
			if(gettime() > PLAYER_TEMP[issuerid][pt_LAST_SAFE_ZONE_WARNING] + 60)
			{
				if(IsPlayerInSafeZone(issuerid))
				{
					SendNotification(issuerid, "Estás en una zona segura, la policía ha sido avisada de la agresión.");

					new city[45], zone[45];
					GetPlayerZones(issuerid, city, zone);

					if(!PI[issuerid][pi_WANTED_LEVEL]) SetPlayerWantedLevelEx(issuerid, 1);

					new message[145];
					format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s está causando disturbios en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[issuerid][pt_RP_NAME], city, zone);
					SendWorkRadioMessage(WORK_POLICE, -1, -1, message);

					PLAYER_TEMP[issuerid][pt_LAST_SAFE_ZONE_WARNING] = gettime();
				}
			}
		}
	}
	return 1;
}

CheckWeaponAndAmmo(playerid, weaponid)
{
	if(WEAPON_INFO[weaponid][weapon_info_ANTI_CHEAT])
	{
		new weapon_id, weapon_ammo;
		GetPlayerWeaponData(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT], weapon_id, weapon_ammo);

		if(ac_Info[CHEAT_WEAPON][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_IMMUNITY])
			{
				if(weapon_id != PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_ID])
				{
					if(!ac_Info[CHEAT_WEAPON][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_WEAPON][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_WEAPON][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_WEAPON][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_WEAPON);
					}
				}
			}
		}

		if(WEAPON_INFO[weapon_id][weapon_info_AMMO])
		{
			if(ac_Info[CHEAT_AMMO][ac_Enabled])
			{
				if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_IMMUNITY])
				{
					if(weapon_ammo > PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] + 10)
					{

						if(!ac_Info[CHEAT_AMMO][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						else
						{
							if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_AMMO][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] = 0;
							else PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] ++;

							PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_LAST_DETECTION] = gettime();
							if(PLAYER_AC_INFO[playerid][CHEAT_AMMO][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_AMMO][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_AMMO);
						}
					}
					else PLAYER_WEAPONS[playerid][ WEAPON_INFO[weapon_id][weapon_info_SLOT] ][player_weapon_AMMO] = weapon_ammo;
				}
			}
		}
	}
	return 1;
}


new ADMIN_LEVEL_AC_IMMUNITY = 3; //nivel 3 en adelante
OnPlayerCheatDetected(playerid, cheat, Float:extra = 0.0)
{
	if(PI[playerid][pi_ADMIN_LEVEL] >= ADMIN_LEVEL_AC_IMMUNITY) return 1;
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 1;


	if(gettime() < PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] + 5) return 1;

	new ac_message[145], ac_discord[145], player_state = GetPlayerState(playerid);

	if(ac_Info[cheat][ac_Kick])
	{
		new bad_history[24];
		format(bad_history, sizeof bad_history, "ac, cheat (%02d)", cheat);
		AddPlayerBadHistory(PI[playerid][pi_ID], -1, TYPE_KICK, bad_history);

		if(extra != 0.0) 
		{
			format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
			format(ac_discord, sizeof ac_discord, "```[AC-KICK] %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)```\n@everyone", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		}
		else 
		{
			format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-KICK] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
			format(ac_discord, sizeof ac_discord, "```[AC-KICK] %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)```\n@everyone", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		}
		KickEx(playerid);

		if(cheat == CHEAT_PLAYER_HEALTH) PI[playerid][pi_HEALTH] = 20.0;
		if(cheat == CHEAT_PLAYER_ARMOUR) PI[playerid][pi_ARMOUR] = 0.0;
	}
	else
	{
		if(extra != 0.0) 
		{
			format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
			format(ac_discord, sizeof ac_discord, "```[AC-AVISO] %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d, extra: %.1f)```\n@everyone", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval], extra);
		}
		else
		{ 
			format(ac_message, sizeof ac_message, "{"#RED_COLOR"}[AC-AVISO] {FFFFFF}%s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
			format(ac_discord, sizeof ac_discord, "```[AC-AVISO] %s (%d): %s (cd: %02d, ps: %02d, ping: %d, dec: %d:%d)```\n@everyone", PI[playerid][pi_NAME], playerid, ac_Info[cheat][ac_Name], cheat, player_state, GetPlayerPing(playerid), PLAYER_AC_INFO[playerid][cheat][p_ac_info_DETECTIONS], ac_Info[cheat][ac_Interval]);
		}
	}

	SendMessageToAdminsAC(-1, ac_message);
	DCC_SendChannelMessage(dc_channel[4], ac_discord);
	print(ac_message);
	PLAYER_TEMP[playerid][pt_LAST_CHEAT_DETECTED_TIME] = gettime();
	return 1;
}

RegisterNewPlayerWeapon(playerid, weapon_slot)
{
	inline OnPweaponInserted()
	{
		PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_DB_ID] = cache_insert_id();
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pweapons (id_player, weaponid, ammo) VALUES (%d, %d, %d);", PI[playerid][pi_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPweaponInserted);
	QUERY_BUFFER[0] = EOS;
	return 1;
}

SavePlayerWeaponsData(playerid)
{
	if(!PLAYER_TEMP[playerid][pt_USER_EXIST] || !PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;

	for(new i = 0; i != sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]) continue;

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET weaponid = %d, ammo = %d WHERE id = %d;", PLAYER_WEAPONS[playerid][i][player_weapon_ID], PLAYER_WEAPONS[playerid][i][player_weapon_AMMO], PLAYER_WEAPONS[playerid][i][player_weapon_DB_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	return 1;
}

RemovePlayerSlotWeapon(playerid, slot, bool:db_delete = false)
{
	if(db_delete)
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id = %d;", PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}

	new current_weapon = GetPlayerWeapon(playerid);
	if(current_weapon == PLAYER_WEAPONS[playerid][slot][player_weapon_ID]) current_weapon = 0;

	PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] = false;
	PLAYER_WEAPONS[playerid][slot][player_weapon_DB_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_ID] = 0;
	PLAYER_WEAPONS[playerid][slot][player_weapon_AMMO] = 0;

	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, current_weapon);
	return 1;
}

LoadPlayerWeaponsData(playerid)
{
	if(PI[playerid][pi_ID] == 0) return 0;

	inline OnPweaponsLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new weaponid;
				cache_get_value_name_int(i, "weaponid", weaponid);

				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_VALID] = true;
				cache_get_value_name_int(i, "id", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_DB_ID]);
				cache_get_value_name_int(i, "ammo", PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_AMMO]);
				PLAYER_WEAPONS[playerid][ WEAPON_INFO[weaponid][weapon_info_SLOT] ][player_weapon_ID] = weaponid;
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM pweapons WHERE id_player = %d LIMIT 13;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPweaponsLoad);
	return 1;
}

SetPlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	PI[playerid][pi_HEALTH] = health;
	SetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
	UpdateInfoHealth(playerid);
	return 1;
}

SetPlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;

	PI[playerid][pi_ARMOUR] = armour;
	SetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
	UpdateInfoHealth(playerid);
	return 1;
}

GivePlayerHealthEx(playerid, Float:health)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_HEALTH][p_ac_info_IMMUNITY] = gettime() + 3;

	PI[playerid][pi_HEALTH] += health;
	if(PI[playerid][pi_HEALTH] > 100.0) PI[playerid][pi_HEALTH] = 100.0;
	SetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
	UpdateInfoHealth(playerid);
	return 1;
}

GivePlayerArmourEx(playerid, Float:armour)
{
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_ARMOUR][p_ac_info_IMMUNITY] = gettime() + 3;

	PI[playerid][pi_ARMOUR] += armour;
	if(PI[playerid][pi_ARMOUR] > 100.0) PI[playerid][pi_ARMOUR] = 100.0;
	SetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
	UpdateInfoHealth(playerid);
	return 1;
}

UpdateInfoHealth(playerid)
{
	if(PI[playerid][pi_INFO_HEALTH])
	{
		new str[16];
		if(PI[playerid][pi_ARMOUR] <= 0.0)
		{
			if(PLAYER_TEMP[playerid][pt_Plataforma]) format(str, sizeof str, "~r~%.0f", PI[playerid][pi_HEALTH]);
			else format(str, sizeof str, "~n~~n~~r~%.0f", PI[playerid][pi_HEALTH]);
		}
		else if(PI[playerid][pi_HEALTH] <= 0.0) format(str, sizeof str, "_");
		else
		{
			if(PLAYER_TEMP[playerid][pt_Plataforma]) format(str, sizeof str, "%.0f~n~~n~~w~%.0f", PI[playerid][pi_HEALTH], PI[playerid][pi_ARMOUR]);
			else format(str, sizeof str, "%.0f~n~~n~~r~%.0f", PI[playerid][pi_ARMOUR], PI[playerid][pi_HEALTH]);
		}

		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_INFO_HEALTH], str);
	}
	return 1;
}

TransferPlayerWeapon(from_playerid, slot, to_playerid)
{
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pweapons SET id_player = %d WHERE id = %d;", PI[to_playerid][pi_ID], PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PLAYER_WEAPONS[to_playerid][slot][player_weapon_VALID] = true;
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_DB_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_DB_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_ID] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_ID];
	PLAYER_WEAPONS[to_playerid][slot][player_weapon_AMMO] = PLAYER_WEAPONS[from_playerid][slot][player_weapon_AMMO];
	SetWeaponsForPlayer(to_playerid);

	RemovePlayerSlotWeapon(from_playerid, slot);
	return 1;
}

PlayerPayday(playerid)
{
	new
		dialog_header[630],
		dialog_string[140],
		date[24],
		money = 300 * PI[playerid][pi_LEVEL];

	if(money > 4500) money = 4500;
	money += minrand(100, 200);

	getDateTime(date);

	format(dialog_string, sizeof dialog_string, "Pago diario (%s)~n~[ PAGA DEL GOBIERNO ]__~n~", date);
	strcat(dialog_header, dialog_string);

	format(dialog_string, sizeof dialog_string, "Paga del gobierno: ~g~%s dólares~n~", number_format_thousand(money));
	strcat(dialog_header, dialog_string);

	if(!PI[playerid][pi_VIP])
	{
		strcat(dialog_header, "~w~[ Vehículos ]________~n~");

		for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
		{
			if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
			if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) continue;

			new veh_money = VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_PRICE] / 100;
			money -= veh_money;

			format(dialog_string, sizeof dialog_string, "~w~Seguro del vehículo %s: ~r~-%s dólares~n~", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(veh_money));
			strcat(dialog_header, dialog_string);
		}

		strcat(dialog_header, "~w~[ PROPIEDADES ]________~n~");

		for(new i = 0; i != MAX_PROPIEDADES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			if(PROPERTY_INFO[i][property_OWNER_ID] != PI[playerid][pi_ID]) continue;

			if(PROPERTY_INFO[i][property_VIP_LEVEL]) format(dialog_string, sizeof dialog_string, "~w~Seguro de la propiedad %s: PROPIEDAD ~y~VIP~w~, NO SE PAGA SEGURO.~n~", PROPERTY_INFO[i][property_NAME]);
			else
			{
				new property_money = PROPERTY_INFO[i][property_PRICE_BASE] / 200;
				money -= property_money;

				format(dialog_string, sizeof dialog_string, "~w~Seguro de la propiedad %s: ~r~-%s dólares~n~", PROPERTY_INFO[i][property_NAME], number_format_thousand(property_money));
			}
			strcat(dialog_header, dialog_string);
		}
	}

	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		new work_payment;
		if(work_info[WORK_POLICE][work_info_EXTRA_PAY] > 0 && work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_payment = (work_info[WORK_POLICE][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL], work_info[WORK_POLICE][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_POLICE][work_info_EXTRA_PAY_LIMIT];
		}

		money += work_payment;

		strcat(dialog_header, "~w~[ TRABAJOS ]________~n~");

		format(dialog_string, sizeof dialog_string, "~w~Paga por ser policía: ~g~%s dólares~n~", number_format_thousand(work_payment));
		strcat(dialog_header, dialog_string);
	}
	if(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET])
	{
		new work_payment;
		if(work_info[WORK_MECANICO][work_info_EXTRA_PAY] > 0 && work_info[WORK_MECANICO][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_payment = (work_info[WORK_MECANICO][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL], work_info[WORK_MECANICO][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_MECANICO][work_info_EXTRA_PAY_LIMIT] != 0) if(work_payment > work_info[WORK_MECANICO][work_info_EXTRA_PAY_LIMIT]) work_payment = work_info[WORK_MECANICO][work_info_EXTRA_PAY_LIMIT];
		}

		money += work_payment;

		strcat(dialog_header, "~w~[ TRABAJOS ]________~n~");

		format(dialog_string, sizeof dialog_string, "~w~Paga por ser mecánico: ~g~%s dólares~n~", number_format_thousand(work_payment));
		strcat(dialog_header, dialog_string);
	}

	if(PI[playerid][pi_CREW])
	{
		new
			territories = GetCrewTerritories(PI[playerid][pi_CREW]),
			graffitis = CountCrewGraffitis(PI[playerid][pi_CREW]);

		if(territories > 0 || graffitis > 0)
		{
			money += territories * 70;
			money += graffitis * 40;

			strcat(dialog_header, "~n~~w~[ TERRITORIOS ]________~n~");

			if(territories > 0) format(dialog_string, sizeof dialog_string, "~w~Paga por territorios en posesión (%d): ~g~%d dólares~n~", territories, territories * 350);
			if(graffitis > 0) format(dialog_string, sizeof dialog_string, "~w~Paga por graffitis (%d): ~g~%d dólares~n~", graffitis, graffitis * 300);
			strcat(dialog_header, dialog_string);
		}
	}

	if(money + PI[playerid][pi_CASH] <= 0)
	{
		money = 0;
		PI[playerid][pi_CASH] = 0;
	}

	strcat(dialog_header, "~w~[ RESUMEN ]________~n~");

	if(money > 0) format(dialog_string, sizeof dialog_string, "~w~Has ganado: ~g~%s dólares", number_format_thousand(money));
	else format(dialog_string, sizeof dialog_string, "~w~Has perdido: ~r~%s dólares", number_format_thousand(money));

	strcat(dialog_header, dialog_string);
	FixTextDrawString(dialog_header);

	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY], dialog_header);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PAYDAY]);

	PLAYER_TEMP[playerid][pt_PAYDAY_DADO] = SetTimerEx("PaydayDado", 6000, false, "i", playerid);

	GivePlayerCash(playerid, money, true, money < 0 ? true : false);
	return 1;
}
CMD:damecrack(playerid, params[])
{
	PI[playerid][pi_CRACK] += 100;
	SendNotification(playerid, "Has recibido 100g de crack.");
	SendCmdLogToAdmins(playerid, "damecrack", params);
	return 1;
}

CMD:damekit(playerid, params[])
{
	PI[playerid][pi_MECANICO_KITS] += 10;
	SendNotification(playerid, "Has recibido 10 kits.");
	SendCmdLogToAdmins(playerid, "damecrack", params);
	return 1;
}

CMD:damebotiquin(playerid, params[])
{
	PI[playerid][pi_MEDICAL_KITS] += 10;
	SendNotification(playerid, "Has recibido 10 botiquines.");
	SendCmdLogToAdmins(playerid, "damecrack", params);
	return 1;
}

CMD:damemedicamentos(playerid, params[])
{
	PI[playerid][pi_MEDICINE] += 100;
	SendNotification(playerid, "Has recibido 100g de medicamentos.");
	SendCmdLogToAdmins(playerid, "damemedicamentos", params);
	return 1;
}

CMD:damemarihuana(playerid, params[])
{
	PI[playerid][pi_CANNABIS] += 100;
	SendNotification(playerid, "Has recibido 100g de marihuana");
	SendCmdLogToAdmins(playerid, "damemarihuana", params);
	return 1;
}

//ANIMACIONES
CMD:animaciones(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ShowDialog(playerid, DIALOG_ANIMS);
	return 1;
}
alias:animaciones("anims", "acciones");

CMD:accion(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~ERROR: ~w~/accion [1-9]");

	switch(params[0])
	{
		case 1: ApplyAnimation(playerid, "BD_FIRE", "M_SMKLEAN_LOOP", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "KISSING", "GRLFRD_KISS_02", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BMX", "BMX_BACK", 4.0, 1, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid, "DAM_JUMP", "DAM_DIVE_LOOP", 4.0, 1, 0, 0, 0, 0);
		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
		case 7: ApplyAnimation(playerid, "MISC", "BITCHSLAP", 4.0, 1, 0, 0, 0, 0);
		case 8: ApplyAnimation(playerid, "PED", "HIT_WALK", 4.0, 1, 0, 0, 0, 0);
		case 9: ApplyAnimation(playerid, "MISC", "BMX_IDLELOOP_02", 4.0, 0, 0, 0, 0, 0);
	}

	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}

CMD:parar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:rendirse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP); //rendirse
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:blowjob(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 0, 0);//blowjob
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rodar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:borracho(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"PED", "WALK_DRUNK",4.0,1,1,1,1,500);//borracho
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bomba(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//bomba
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:apuntar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation( playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1,500);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:reir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0,0);//reir
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:amenazar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1,500);//amenazar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:paja(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:herido(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cruzarbrazos(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:recostarse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);//recostarse
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:cubrirse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);//crubrirse
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:vomitar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);//vomitar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:comer(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:despedir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);//despedir
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:nalgada(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);//nalgada
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:agonizar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);//agonizar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:besar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);//besar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:crack(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);//crack
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:mear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);//mear
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:sentarse(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);//sentarse
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:asiento(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 1, 1, 1, 0);
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:fucku(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation( playerid,"ped", "fucku", 4.0, 0, 1, 1, 1, 1 );//fucku
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:taichi(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop",  4.1,7,5,1,1,1);//taichi
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:beber(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 1, 1, 0, 4000);//beber
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:boxear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox",  4.1,7,5,1,1,1);//boxear
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:saludar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,0,0,0,0);//saludar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:llorar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,0,0,0,0);//llorar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:dormir(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	if(!GetPlayerInterior(playerid)) return SendNotification(playerid, "Solo puedes hacer esto en un interior");
	ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);//dormir
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:rapear(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,0,0,0,8000);//rapear
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:strip(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"STRIP","strip_A",4.1,7,5,1,1,1);//strip
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:bailar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	if(sscanf(params, "d", params[0])) return SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");

	switch(params[0])
	{
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, 0xFF4500FF, "ERROR: /bailar [1-4]");
	}
	return 1;
}
CMD:alentar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,7,5,1,1,1);//alentar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}
CMD:hablar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No puedes usarlo en un vehículo.");
	ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);//hablar
	SendNotification(playerid, "Para cancelar la animacion utiliza /parar.");
	return 1;
}

GetPlayerVehicleAvaibleBootSlot(vehicleid)
{
	new max_slots = VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_BOOT_SLOTS];
	if(max_slots > MAX_BOOT_SLOTS) max_slots = MAX_BOOT_SLOTS;

	for(new i = 0; i != max_slots; i ++)
	{
		if(!VEHICLE_BOOT[vehicleid][i][vehicle_boot_VALID]) return i;
	}
	return -1;
}

RegisterVehicleBootObject(vehicleid, boot_slot, type, int, extra)
{
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_ID]) return 0;

	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = false;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE] = type;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT] = int;
	VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA] = extra;

	inline OnVbootInserted()
	{
		VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID] = cache_insert_id();
		if(VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_OBJECT_ID]) VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_VALID] = true;
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO vboot (id_vehicle, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_TYPE], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT], VEHICLE_BOOT[vehicleid][boot_slot][vehicle_boot_INT_EXTRA]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnVbootInserted);
	return 1;
}

SavePlayerWeaponInVehicleBoot(playerid, weapon_slot, vehicleid, boot_slot)
{
	RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

GetPropertyAvaibleClosetSlot(index)
{
	new max_slots = MAX_CLOSET_SLOTS;
	for(new i = 0; i != max_slots; i ++)
	{
		if(!PROPERTY_CLOSET[index][i][property_closet_VALID]) return i;
	}
	return -1;
}

RegisterPropertyClosetObject(index, closet_slot, type, int, extra)
{
	PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = false;
	PROPERTY_CLOSET[index][closet_slot][property_closet_TYPE] = type;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT] = int;
	PROPERTY_CLOSET[index][closet_slot][property_closet_INT_EXTRA] = extra;

	inline OnPropertyClosetInserted()
	{
		PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID] = cache_insert_id();
		if(PROPERTY_CLOSET[index][closet_slot][property_closet_OBJECT_ID]) PROPERTY_CLOSET[index][closet_slot][property_closet_VALID] = true;
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO property_closet (id_property, type, `int`, int_extra) VALUES (%d, %d, %d, %d);", PROPERTY_INFO[index][property_ID], type, int, extra);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPropertyClosetInserted);
	return 1;
}

SaveWeaponInPropertyCloset(playerid, weapon_slot, index, closet_slot)
{
	RegisterPropertyClosetObject(index, closet_slot, CLOSET_TYPE_WEAPON, PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_ID], PLAYER_WEAPONS[playerid][weapon_slot][player_weapon_AMMO]);
	RemovePlayerSlotWeapon(playerid, weapon_slot, true);
	return 1;
}

CMD:guardar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	new option[24], extra;
	if(sscanf(params, "s[24]d", option, extra)) return SendNotification(playerid, "Error en los parámetros, utilice ~r~/man guardar~w~.");

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new vehicleid = GetPlayerCameraTargetVehicle(playerid);
		if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de tu vehículo.");

		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
		if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este no es tú vehículo.");

		new boot_slot = GetPlayerVehicleAvaibleBootSlot(vehicleid);
		if(boot_slot == -1) return SendNotification(playerid, "No tienes suficiente espacio en tu /maletero.");

		if(!strcmp(option, "arma", true))
		{
			if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "Error: ~b~/guardar arma {FFFFFF}[slot/armas]");
			if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
			{
				PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
				SendNotification(playerid, "No tienes ninguna arma en ese slot (/armas).");
				return 1;
			}

			SendFormatNotification(playerid, "Arma ~g~'%s' ~w~guardada en el maletero de tu %s.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME], VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NAME]);

			new string[128];
			format(string, sizeof string, "guarda un(a) %s en el maletero de su vehículo.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
			Auto_SendPlayerAction(playerid, string);

			SavePlayerWeaponInVehicleBoot(playerid, extra, vehicleid, boot_slot);
		}
		else if(!strcmp(option, "medicamentos", true))
		{
			if(extra < 0 || extra > PI[playerid][pi_MEDICINE]) return SendNotification(playerid, "Cantidad incorrecta.");

			PI[playerid][pi_MEDICINE] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_MEDICINES, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda medicamentos en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "marihuana", true))
		{
			if(extra < 0 || extra > PI[playerid][pi_CANNABIS]) return SendNotification(playerid, "Cantidad incorrecta.");

			PI[playerid][pi_CANNABIS] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CANNABIS, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda marihuana en el maletero de su vehículo.");
		}
		else if(!strcmp(option, "crack", true))
		{
			if(extra < 0 || extra > PI[playerid][pi_CRACK]) return SendNotification(playerid, "Cantidad incorrecta.");

			PI[playerid][pi_CRACK] -= extra;
			RegisterVehicleBootObject(vehicleid, boot_slot, BOOT_TYPE_CRACK, extra, 0);

			Auto_SendPlayerAction(playerid, "guarda crack en el maletero de su vehículo.");
		}
		else SendNotification(playerid, "Error en los parámetros, utilice ~b~/man guardar~w~.");
	}
	else if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY)
	{
		new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
		if(index == -1) return SendNotification(playerid, "BUG: CMD /guardar (casa), Tome captura y contacte con administrador.");
		if(PROPERTY_INFO[index][property_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Esta no es tu casa");

		new Float:z_pos = PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		if(IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_X], PROPERTY_CLOSET_POS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_closet_Y], z_pos))
		{
			new closet_slot = GetPropertyAvaibleClosetSlot(index);
			if(closet_slot == -1) return SendNotification(playerid, "No tienes suficiente espacio en tu /armario.");

			if(!strcmp(option, "arma", true))
			{
				if(extra < 0 || extra >= sizeof PLAYER_WEAPONS[]) return SendNotification(playerid, "~r~Modo de uso: ~w~/guardar arma [slot /armas]");
				if(!PLAYER_WEAPONS[playerid][extra][player_weapon_VALID])
				{
					PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
					SendNotification(playerid, "No tienes ninguna arma en ese slot (/armas).");
					return 1;
				}

				SendFormatNotification(playerid, "Arma ~g~'%s' ~w~guardada en el armario de tu casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);

				new string[128];
				format(string, sizeof string, "guarda un(a) %s en el armario de su casa.", WEAPON_INFO[ PLAYER_WEAPONS[playerid][extra][player_weapon_ID] ][weapon_info_NAME]);
				Auto_SendPlayerAction(playerid, string);

				SaveWeaponInPropertyCloset(playerid, extra, index, closet_slot);
			}
			else if(!strcmp(option, "medicamentos", true))
			{
				if(extra < 0 || extra > PI[playerid][pi_MEDICINE]) return SendNotification(playerid, "Cantidad incorrecta.");

				PI[playerid][pi_MEDICINE] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_MEDICINES, extra, 0);

				Auto_SendPlayerAction(playerid, "guarda medicamentos en el armario.");
			}
			else if(!strcmp(option, "marihuana", true))
			{
				if(extra < 0 || extra > PI[playerid][pi_CANNABIS]) return SendNotification(playerid, "Cantidad incorrecta.");

				PI[playerid][pi_CANNABIS] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CANNABIS, extra, 0);

				Auto_SendPlayerAction(playerid, "guarda marihuana en el armario.");
			}
			else if(!strcmp(option, "crack", true))
			{
				if(extra < 0 || extra > PI[playerid][pi_CRACK]) return SendNotification(playerid, "Cantidad incorrecta.");

				PI[playerid][pi_CRACK] -= extra;
				RegisterPropertyClosetObject(index, closet_slot, BOOT_TYPE_CRACK, extra, 0);

				Auto_SendPlayerAction(playerid, "guarda crack en el armario.");
			}
			else SendNotification(playerid, "Error en los parámetros, utilice ~b~/man guardar~w~.");
		}
		else SendNotification(playerid, "No estás cerca del armario.");
	}
	else SendNotification(playerid, "Ahora no puedes usar este comando.");
	return 1;
}

CMD:maletero(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	new vehicleid = GetPlayerCameraTargetVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendNotification(playerid, "No estás cerca de tu vehículo.");

	if((PLAYER_TEMP[playerid][pt_WORKING_IN] == WORK_POLICE) && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID])
	{
		if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este vehiculo es del gobierno o de un consecionario.");
		new pid = -1;
		for(new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PLAYER_TEMP[i][pt_USER_LOGGED] && PI[i][pi_ID] == PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID])
			pid = i;
		}

		if(pid == -1) return SendNotification(playerid, "Error del juego: No se ha podido encontrar al dueño de este vehículo.");
		if(!PLAYER_TEMP[pid][pt_CUFFED]) return SendNotification(playerid, "El dueño de este vehículo debe estar esposado para poder revisar su vehículo.");

		PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
		ShowDialog(playerid, DIALOG_VEHICLE_BOOT);

		Auto_SendPlayerAction(playerid, "revisa el maltero del vehículo");
		return 1;
	}

	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Este no es tú vehículo.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Este no es tú vehículo.");

	PLAYER_TEMP[playerid][pt_DIALOG_BOT_VEHICLE] = vehicleid;
	ShowDialog(playerid, DIALOG_VEHICLE_BOOT);
	return 1;
}
alias:maletero("baul");

SetWantedPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][pi_WANTED_LEVEL] > 0)
				{
					SetPlayerMarkerForPlayer(playerid, i, PlayerWantedColor(i));
				}
			}
		}
	}
	return 1;
}

PlayerWantedColor(playerid)
{
	if(PI[playerid][pi_WANTED_LEVEL] > 0)
	{
		if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return 0x009900ff;
		else
		{
			switch(PI[playerid][pi_WANTED_LEVEL])
			{
				case 1: return 0xfffdbaff;
				case 2: return 0xf7f254ff;
				case 3: return 0xd98900ff;
				case 4: return 0xce4202ff;
				case 5: return 0xff00ffff;
				case 6: return 0x9900ccff;
				default: return 0x9900ccff;
			}
		}
	}
	return PLAYER_COLOR;
}

CMD:nivel(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 2) return SendNotification(playerid, "Los Cadetes no asignan cargos.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "~r~Modo de uso: ~w~/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");
	if(params[1] < 0 || params[1] > 6) return SendNotification(playerid, "~r~Modo de uso: ~w~/nivel [PlayerID/Nombre] [nivel de búsqueda 0-6]");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	if(PLAYER_WORKS[params[0]][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Este jugador es policía.");
	if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "Esta persona está en la cárcel.");

	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya. (A más de 100 metros)");

	new
		action[64],
		message[145];

	if(params[1] == 0)
	{
		format(action, sizeof action, "le quita el nivel de búsqueda a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);

		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#PRIMARY_COLOR"}%s {FFFFFF}ya no es sospechoso.", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[params[0]][pt_RP_NAME]);
		SendFormatNotification(playerid, "Le has removido el nivel de búsqueda a ~r~%s~w~.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	}
	else
	{
		new
			zone[45],
			city[45];

		GetPlayerZones(playerid, city, zone);

		format(action, sizeof action, "le pone nivel de búsqueda a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);

		SendFormatNotification(playerid, "Has asignado nivel de búsqueda ~b~%d~w~ a ~r~%s~w~.", params[1], PLAYER_TEMP[params[0]][pt_RP_NAME]);
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}%s reporta: {"#PRIMARY_COLOR"}%s (%d*) {FFFFFF}visto por última vez en {"#PRIMARY_COLOR"}%s, %s.", PLAYER_TEMP[playerid][pt_RP_NAME], PLAYER_TEMP[params[0]][pt_RP_NAME], params[1], city, zone);
	}

	Auto_SendPlayerAction(playerid, action);

	SetPlayerWantedLevelEx(params[0], params[1]);
	SendWorkRadioMessage(WORK_POLICE, -1, -1, message);
	return 1;
}
alias:nivel("cargos", "c");

CMD:esposar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /esposar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes esposar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para esposar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");

	new oldstate = PI[params[0]][pi_STATE];
	DisablePlayerInjuredMark(params[0]);
	PI[params[0]][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	ApplyAnimation(params[0], "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(params[0]);

	if(PLAYER_TEMP[params[0]][pt_CUFFED])
	{
		TogglePlayerControllableEx(params[0], true);
		PLAYER_TEMP[params[0]][pt_CUFFED] = false;
		PLAYER_TEMP[params[0]][pt_CUFFING] = false;
		SetPlayerSpecialAction(params[0], SPECIAL_ACTION_NONE);

		new action[64];
		format(action, sizeof action, "le quita las esposas a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		return 1;
	}

	if(!PLAYER_TEMP[params[0]][pt_CUFFING])
	{
		if(oldstate == ROLEPLAY_STATE_CRACK)
		{
			CuffPlayer(params[0]);
		}
		else
		{
			SendNotification(params[0], "Estás siendo esposado, puedes ~g~/resistirse~w~.");
			SendNotification(playerid, "Estás esposando a esta persona, aún puede resistirse.");

			PLAYER_TEMP[params[0]][pt_CUFFED] = false;
			PLAYER_TEMP[params[0]][pt_CUFFING] = true;
			KillTimer(PLAYER_TEMP[params[0]][pt_TIMERS][12]);
			TogglePlayerControllableEx(params[0], false);
			SetPlayerSpecialAction(params[0], SPECIAL_ACTION_HANDSUP);
			PLAYER_TEMP[params[0]][pt_TIMERS][12] = SetTimerEx("CuffPlayer", 6000, false, "i", params[0]);
		}
	}
	return 1;
}

CMD:placa(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /placa [PlayerID/Nombre]");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes enseñarle tu placa a este jugador ahora.");

	new action[64];
	format(action, sizeof action, "le enseña su placa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);

	SendClientMessageEx(params[0], -1, "{"#SILVER_COLOR"}%s %c. %s {A9C4E4}[Placa: %d]", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME], PI[playerid][pi_PLACA_PD]);
	return 1;
}

CMD:licencia(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /licencia [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");

	if(PI[playerid][pi_DRIVE_LICENSE_POINTS] == 0) SendFormatNotification(params[0], "~r~%s~w~ no tiene licencia de conducción.", PLAYER_TEMP[playerid][pt_RP_NAME]);
	else
	{
		new action[128];
		format(action, 128, "le muestra su licencia de conducir a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
		Auto_SendPlayerAction(playerid, action);
		SendClientMessageEx(params[0], -1, "{"#SILVER_COLOR"}Licencia de conducir de %s, puntos: %d.", PLAYER_TEMP[playerid][pt_RP_NAME], PI[playerid][pi_DRIVE_LICENSE_POINTS]);
	}
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /revisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendNotification(playerid, "Para revisar a esta persona tiene que estar esposada.");

	ShowPlayerInventory(playerid, params[0]);

	new action[64];
	format(action, sizeof action, "revisa a %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:puntos(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "Error: /puntos [PlayerID/Nombre] [cantidad]");
	if(params[1] < 1 || params[1] > 12) return SendNotification(playerid, "Error: cantidad de puntos no válida.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes quitarle puntos a este jugador ahora.");

	PI[params[0]][pi_DRIVE_LICENSE_POINTS] -= params[1];
	if(PI[params[0]][pi_DRIVE_LICENSE_POINTS] < 0) PI[params[0]][pi_DRIVE_LICENSE_POINTS] = 0;

	SendFormatNotification(playerid, "Le has quitado ~r~%d puntos~w~ del carnet a %s, ahora tiene ~r~%d puntos~w~.", params[1], PLAYER_TEMP[params[0]][pt_RP_NAME], PI[params[0]][pi_DRIVE_LICENSE_POINTS]);
	SendFormatNotification(params[0], "El policía %s te ha quitado ~r~%d puntos~w~ del carnet de conducir, te quedan ~r~%d puntos~w~.", PLAYER_TEMP[playerid][pt_RP_NAME], params[1], PI[params[0]][pi_DRIVE_LICENSE_POINTS]);
	return 1;
}

CMD:requisar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /requisar [PlayerID/Nombre]");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes revisar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "Para revisar a esta persona tiene que estar depie.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[params[0]][pt_CUFFED]) return SendNotification(playerid, "Para revisar a esta persona tiene que estar esposada.");

	DeleteIlegalInv(params[0]);

	new action[64];
	format(action, sizeof action, "requisa las pertenencias ilegales de %s.", PLAYER_TEMP[params[0]][pt_RP_NAME]);
	Auto_SendPlayerAction(playerid, action);
	return 1;
}

CMD:ref(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_CREW]) return Crew_RequestHelp(playerid, PI[playerid][pi_CREW]);

	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return Police_RequestHelp(playerid);
	return 1;
}
alias:ref("refuerzos");

CMD:control(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);

	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No puedes colocar objetos policiales aquí.");

	new type;
	if(sscanf(params, "d", type)) return SendNotification(playerid, "~r~Modo de uso: ~w~/control [Tipo 1-10]");

	new modelid;
	switch(type)
	{
		case 1: modelid = 1459;
		case 2: modelid = 1238;
		case 3: modelid = 1425;
		case 4: modelid = 3265;
		case 5: modelid = 3091;
		case 6: modelid = 1459;
		case 7: modelid = 1408;
		case 8: modelid = 4516;
		case 9: modelid = 5820;
		case 10: modelid = 7212;
		default: return SendNotification(playerid, "Tipo de objeto no válido.");
	}

	new index = GetFreePoliceObjectSlot();
	if(index == -1) return SendNotification(playerid, "No se pueden crear más objetos policiales.");

	POLICE_OBJECTS[index][police_object_VALID] = true;
	format(POLICE_OBJECTS[index][police_object_USER], 24, "%s", PI[playerid][pi_NAME]);

	new Float:pos[3], Float:angle;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle);
	pos[0] += (1.5 * floatsin(-angle, degrees));
	pos[1] += (1.5 * floatcos(-angle, degrees));

	POLICE_OBJECTS[index][police_object_OBJECT_ID] = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, angle, GetPlayerVirtualWorld(playerid), 0);
	Streamer_Update(playerid);
	new info[3];
	info[0] = OBJECT_TYPE_POLICE;
	info[1] = index; // Index
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, POLICE_OBJECTS[index][police_object_OBJECT_ID], E_STREAMER_EXTRA_ID, info);
	PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = index;
	EditDynamicObject(playerid, POLICE_OBJECTS[index][police_object_OBJECT_ID]);

	SendNotification(playerid, "Coloca el objeto, posteriormente puedes usar /econtrol para moverlo o eliminarlo.");
	return 1;
}

CMD:econtrol(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para editar objetos policiales.", POLICE_RANKS[8]);

	if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return SendNotification(playerid, "No puedes editar objetos policiales aquí.");

	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	new info[3];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

	switch(info[0])
	{
		case OBJECT_TYPE_POLICE:
		{
			if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
			{
				CancelEdit(playerid);
				SendNotification(playerid, "No eres policía.");
				return 1;
			}
			if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
			{
				CancelEdit(playerid);
				SendNotification(playerid, "No estás de servicio como policía.");
				return 1;
			}
			if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
			{
				CancelEdit(playerid);
				SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
				return 1;
			}

			SendFormatNotification(playerid, "Este objeto fue colocado por ~g~%s.~n~~n~~w~ Usa ~g~'ESC'~w~ para borrar el objeto, o usa los controles para moverlo.", POLICE_OBJECTS[ info[1] ][police_object_USER]);
			PLAYER_TEMP[playerid][pt_SELECTED_POLICE_OBJECT_INDEX] = info[1];
			EditDynamicObject(playerid, objectid);
			return 1;
		}
		default: 
		{
			if(PI[playerid][pi_ADMIN_LEVEL] >= CMD_ADMINISTRADOR_GENERAL)
			{
				EditDynamicObject(playerid, objectid);
			}
		}
	}

	return 1;
}

SetCorrectObjectPos(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(objectid, x, y, z);
	GetDynamicObjectRot(objectid, rx, ry, rz);

	SetDynamicObjectPos(objectid, x, y, z);
	SetDynamicObjectRot(objectid, rx, ry, rz);
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	switch(response)
	{
		case EDIT_RESPONSE_CANCEL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);
			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No eres policía.");
						return 1;
					}
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No estás de servicio como policía.");
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
						return 1;
					}

					DestroyDynamicObject(POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID]);
					POLICE_OBJECTS[ info[1] ][police_object_VALID] = false;
					POLICE_OBJECTS[ info[1] ][police_object_USER][0] = EOS;
					POLICE_OBJECTS[ info[1] ][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
					SendNotification(playerid, "Objeto policial eliminado.");
				}
			}
		}
		case EDIT_RESPONSE_FINAL:
		{
			new info[3];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, info);

			switch(info[0])
			{
				case OBJECT_TYPE_POLICE:
				{
					if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No eres policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE)
					{
						CancelEdit(playerid);
						SendNotification(playerid, "No estás de servicio como policía.");
						SetCorrectObjectPos(objectid);
						return 1;
					}
					if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 8)
					{
						CancelEdit(playerid);
						SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para colocar objetos policiales.", POLICE_RANKS[8]);
						SetCorrectObjectPos(objectid);
						return 1;
					}

					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);

					SendNotification(playerid, "Objeto movido correctamente");

					format(POLICE_OBJECTS[ info[1] ][police_object_USER], 24, "%s", PI[playerid][pi_NAME]);

				}
				case OBJECT_TYPE_TEST: 
				{
					printf("CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f);", Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID), x, y, z, rx, ry, rz);
				}
			}
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(sscanf(params, "ud", params[0], params[1])) return SendNotification(playerid, "~r~Modo de uso: ~w~/multar [PlayerID/Nombre] [precio$]");
	if(params[1] < 0) return SendNotification(playerid, "El precio no puede ser menor a 0$.");
	else if(params[1] > 1000) return SendNotification(playerid, "El precio no puede ser mayor a 10.000$.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes multar a este jugador ahora.");
	if(PI[params[0]][pi_STATE] == ROLEPLAY_STATE_ARRESTED || PI[params[0]][pi_STATE] == ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "No puedes multar a este jugador ahora.");

	PLAYER_TEMP[params[0]][pt_POLICE_PEN_PID] = playerid;
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_AID] = PI[playerid][pi_ID];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_IM] = params[1];
	PLAYER_TEMP[params[0]][pt_POLICE_PEN_TIME] = gettime();
	ShowDialog(params[0], DIALOG_POLICE_PENALTY);

	SendNotification(playerid, "La multa ha sido enviada, espera para ver si el jugador la acepta.");
	return 1;
}

CMD:arrestar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");

	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para arrestar tienes que estar dentro de un vehículo policial.");

	new to_player, asiento;
	if(sscanf(params, "ud", to_player, asiento)) return SendNotification(playerid, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	if(asiento < 1 || asiento > 2) return SendNotification(playerid, "Error: /arrestar [PlayerID/Nombre] [Asiento 1 ó 2]");
	asiento ++;

	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes arrestar a este jugador ahora.");

	if(!PI[to_player][pi_WANTED_LEVEL]) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");
	if(!PLAYER_TEMP[to_player][pt_CUFFED] && PI[to_player][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Para arrestar a esta persona tiene que estar esposada.");
	if((asiento + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]) return SendFormatNotification(playerid, "Este vehículo es de %d pasajeros, así que no puedes llevar arrestados en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);

	if(PI[to_player][pi_STATE] == ROLEPLAY_STATE_ARRESTED)
	{
		TogglePlayerControllableEx(to_player, true);
		PLAYER_TEMP[to_player][pt_CUFFED] = false;
		PLAYER_TEMP[to_player][pt_CUFFING] = false;
		SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
		PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;

		SendFormatNotification(playerid, "Has soltado a ~r~%s~w~.", PLAYER_TEMP[to_player][pt_RP_NAME]);
		return 1;
	}
	else
	{
		if(PI[to_player][pi_STATE] == ROLEPLAY_STATE_CRACK)
		{
			DisablePlayerInjuredMark(to_player);
			ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
			ClearAnimations(to_player);
		}

		PI[to_player][pi_STATE] = ROLEPLAY_STATE_ARRESTED;
		TogglePlayerControllableEx(to_player, false);
		PutPlayerInVehicleEx(to_player, vehicleid, asiento);
	}
	return 1;
}


CMD:patrullat(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 2) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para asignar texto.", POLICE_RANKS[2]);

	if(isnull(params)) return SendNotification(playerid, "Error: /patrullat [Texto]");
	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para asignar un texto tienes que estar dentro de un vehículo policial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para asignar texto tienes que estar dentro de un vehículo policial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para asignar texto tienes que estar dentro de un vehículo policial.");

	if(IsValidDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]))
	{
		DestroyDynamic3DTextLabel(GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL]);
		GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = Text3D:INVALID_STREAMER_ID;
	}
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_LABEL] = CreateDynamic3DTextLabel(params, 0xCCCCCCCC, -0.7, -1.9, -0.3, 40.0, .attachedvehicle = vehicleid);
	return 1;
}

CMD:m(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");

	if(!IsPlayerInAnyVehicle(playerid)) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para usar el megáfono tienes que estar dentro de un vehículo oficial.");

	if(isnull(params)) return SendNotification(playerid, "Error: /m [Mensaje]");

	new str_text[190];
	format(str_text, 190, "(Megáfono) %s: {FFFFFF}%s", PLAYER_TEMP[playerid][pt_RP_NAME], params);
	ProxDetector(playerid, 40.0, str_text, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 0xFF9B6AFF, 85);
	return 1;
}

PutPlayerInVehicleEx(playerid, vehicleid, seat)
{
	PLAYER_AC_INFO[playerid][CHEAT_POS][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_STATE_SPAMMER][p_ac_info_IMMUNITY] = gettime() + 3;
	PLAYER_AC_INFO[playerid][CHEAT_PLAYER_VEHICLE_DOORS][p_ac_info_IMMUNITY] = gettime() + 5;
	PLAYER_AC_INFO[playerid][CHEAT_VEHICLE_NOFUEL][p_ac_info_IMMUNITY] = gettime() + 15;
	return PutPlayerInVehicle(playerid, vehicleid, seat);
}
//====PRISION Y PRISION GENERAL====
CMD:entregar(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");

	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /entregar [PlayerID/Nombre]");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697) || IsPlayerInRangeOfPoint(playerid, 20.0, 6808.6948, 5335.9800 ,14.9625))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106) || IsPlayerInRangeOfPoint(playerid, 20.0, 6005.6670, 4917.3179, 23.0543))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518) || IsPlayerInRangeOfPoint(playerid, 20.0, 4405.0625, 5969.0493, 59.0018))
	{
		SendNotification(playerid, "La persona ahora está en la cárcel.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0]);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:prisiongen(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");

	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "Error: /entregar [PlayerID/Nombre]");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!WORK_VEHICLES[vehicleid][work_vehicle_VALID]) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");
	if(WORK_VEHICLES[vehicleid][work_vehicle_WORK] != WORK_POLICE) return SendNotification(playerid, "Para entregar tienes que estar dentro de un vehículo oficial.");

	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "El jugador no está conectado.");
	new Float:pos[3]; GetPlayerPos(params[0], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[params[0]][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes arrestar a este jugador ahora.");
	if(GetPlayerState(params[0]) != PLAYER_STATE_PASSENGER) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(GetPlayerVehicleID(params[0]) != vehicleid) return SendNotification(playerid, "Para entregar a esta persona tiene que estar dentro del vehículo policial.");
	if(PI[params[0]][pi_WANTED_LEVEL] == 0) return SendNotification(playerid, "Esta persona no tiene nivel de búsqueda.");

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 1564.971923, -1694.916381, 5.617697) || IsPlayerInRangeOfPoint(playerid, 20.0, 6808.6948, 5335.9800 ,14.9625))
	{
		SendNotification(playerid, "La persona ahora está en prisión.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 0;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, -1589.333496, 716.759521, -5.515106) || IsPlayerInRangeOfPoint(playerid, 20.0, 6005.6670, 4917.3179, 23.0543))
	{
		SendNotification(playerid, "La persona ahora está en prisión.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 1;
		JailPlayer(params[0]);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2282.200439, 2431.598632, 3.000518) || IsPlayerInRangeOfPoint(playerid, 20.0, 4405.0625, 5969.0493, 59.0018))
	{
		SendNotification(playerid, "La persona ahora está en prisión.");
		PI[params[0]][pi_POLICE_JAIL_ID] = 2;
		JailPlayer(params[0]);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}
//=====================================================================

CMD:faccion(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && !PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET] && !PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No perteneces a una facción.");

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_PLAYERS_WORK_LIST);
	return 1;
}
alias:faccion("policias", "mecanicos", "fbis");

CMD:entregarse(playerid, params[])
{
	if(PI[playerid][pi_WANTED_LEVEL] <= 0) return SendNotification(playerid, "No tienes cargos.");

	if(IsPlayerInRangeOfPoint(playerid, 1.5, 250.049026, 67.635704, 1003.640625))
	{
		PI[playerid][pi_POLICE_JAIL_ID] = 0;
		JailPlayer(playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 246.349716, 118.358116, 1003.218750))
	{
		PI[playerid][pi_POLICE_JAIL_ID] = 1;
		JailPlayer(playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.5, 235.772537, 165.382186, 1003.029968))
	{
		PI[playerid][pi_POLICE_JAIL_ID] = 2;
		JailPlayer(playerid);
	}
	else SendNotification(playerid, "No estás en el lugar adecuado.");
	return 1;
}

CMD:resistirse(playerid, params[])
{
	if(PLAYER_TEMP[playerid][pt_CUFFING])
	{
		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][12]);
		PLAYER_TEMP[playerid][pt_CUFFING] = false;
		TogglePlayerControllableEx(playerid, true);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		Auto_SendPlayerAction(playerid, "se resiste.");
	}
	return 1;
}

forward CuffPlayer(playerid);
public CuffPlayer(playerid)
{
	StopAudioStreamForPlayer(playerid);
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CancelEdit(playerid);
	HidePlayerDialog(playerid);
	CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
	PLAYER_TEMP[playerid][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[playerid][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[playerid][pt_CUFFED] = false;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		PLAYER_TEMP[playerid][pt_WANT_TAXI] = false;
		DisablePlayerJobMark(playerid, WORK_TAXI);
	}
	if(PLAYER_TEMP[playerid][pt_PLAYER_IN_CALL]) EndPhoneCall(playerid);
	if(PLAYER_TEMP[playerid][pt_GPS_MAP]) HidePlayerGpsMap(playerid);
	if(PLAYER_TEMP[playerid][pt_SHOW_IPHONE]) { HidePlayeriPhone(playerid); HidePlayeriPhoneApps(playerid); }
	if(PI[playerid][pi_WANTED_LEVEL] > 0) DisablePlayerJobMark(playerid, WORK_POLICE);

	PLAYER_TEMP[playerid][pt_CUFFED] = true;
	PLAYER_TEMP[playerid][pt_CUFFING] = false;
	TogglePlayerControllableEx(playerid, true);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllableEx(playerid, false);
	return 1;
}

CMD:frecuencias(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && !PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET] && !PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No perteneces a una facción");
	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) return SendNotification(playerid, "No estás en servicio.");

	ShowDialog(playerid, DIALOG_WORK_RADIOS);
	return 1;
}

/*RemoveBuildingForPlayer(playerid, 4504, 56.3828, -1531.4531, 6.7266, 0.25);
RemoveBuildingForPlayer(playerid, 4524, -1141.7188, 1098.0547, 39.4766, 0.25);
CreateDynamicObject(9623, 50.72536, -1531.44495, 6.90923,   0.00000, 0.00000, 86.10001);
CreateDynamicObject(966, 50.56018, -1523.62183, 3.82835,   0.00000, 0.00000, 85.07997);
CreateDynamicObject(968, 50.50442, -1523.69922, 4.83996,   5.09995, 90.47991, -94.19994);
CreateDynamicObject(966, 50.47457, -1532.39697, 3.82835,   0.00000, 0.00000, 85.07997);
CreateDynamicObject(968, 50.43867, -1532.49426, 4.83996,   5.09995, 90.47991, -94.19994);*/

SendWorkRadioMessage(work, radio, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][work][pwork_SET])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == work)
					{
						if(radio == -1) SendClientMessage(i, color, message);
						else
						{
							if(PLAYER_TEMP[i][pt_FRECUENCIA_RADIO] == radio)
							{
								SendClientMessage(i, color, message);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

CountWorkRadioPlayers(work, radio)
{
	new total;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][work][pwork_SET])
				{
					if(PLAYER_TEMP[i][pt_WORKING_IN] == work)
					{
						if(PLAYER_TEMP[i][pt_FRECUENCIA_RADIO] == radio)
						{
							total ++;
						}
					}
				}
			}
		}
	}
	return total;
}

GetPlayerZones(playerid, city[], zone[])
{
	new Float:f_Pos[3];

	switch(PI[playerid][pi_STATE])
	{
		case ROLEPLAY_STATE_INTERIOR:
		{
			f_Pos[0] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_X];
			f_Pos[1] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Y];
			f_Pos[2] = ENTER_EXIT[ PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] ][ee_EXT_Z];
		}
		case ROLEPLAY_STATE_OWN_PROPERTY, ROLEPLAY_STATE_GUEST_PROPERTY:
		{
			f_Pos[0] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_X];
			f_Pos[1] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Y];
			f_Pos[2] = PROPERTY_INFO[ PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] ][property_EXT_Z];
		}
		default: GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);
	}

	format(city, 45, "San Andreas");
	format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
		if(	(f_Pos[0] >= g_Cities[i][z_MinX] && f_Pos[0] < g_Cities[i][z_MaxX]) && (f_Pos[1] >= g_Cities[i][z_MinY] && f_Pos[1] < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
			break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
		if(	(f_Pos[0] >= g_Zones[i][z_MinX] && f_Pos[0] < g_Zones[i][z_MaxX]) && (f_Pos[1] >= g_Zones[i][z_MinY] && f_Pos[1] < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
			break;
		}
	}
	return 1;
}

SetPlayerWantedLevelEx(playerid, level)
{
	PI[playerid][pi_WANTED_LEVEL] = level;

	if(PI[playerid][pi_WANTED_LEVEL] == 0)
	{
		DisablePlayerJobMark(playerid, WORK_POLICE);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
	}
	else
	{
		new td_str[24];
		for(new i = 0; i != PI[playerid][pi_WANTED_LEVEL]; i ++) strcat(td_str, "]");
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1], td_str);

		PLAYER_TEMP[playerid][pt_LAST_SET_WANTED_LEVEL] = gettime();

		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);
		SetWantedMarkerToPolice(playerid);
	}
	return 1;
}

GetPointZone(Float:f_Pos_X, Float:f_Pos_Y, city[], zone[])
{
	format(city, 45, "San Andreas");
	format(zone, 45, "Desconocida");

	for(new i = 0; i < sizeof(g_Cities); i++)
	{
		if(	(f_Pos_X >= g_Cities[i][z_MinX] && f_Pos_X < g_Cities[i][z_MaxX]) && (f_Pos_Y >= g_Cities[i][z_MinY] && f_Pos_Y < g_Cities[i][z_MaxY]) )
		{
			format(city, 45, g_Cities[i][z_Name]);
			break;
		}
	}

	for(new i = 0; i < sizeof(g_Zones); i++)
	{
		if(	(f_Pos_X >= g_Zones[i][z_MinX] && f_Pos_X < g_Zones[i][z_MaxX]) && (f_Pos_Y >= g_Zones[i][z_MinY] && f_Pos_Y < g_Zones[i][z_MaxY]) )
		{
			format(zone, 45, g_Zones[i][z_Name]);
			break;
		}
	}

	return 1;
}

JailPlayer(playerid, time = 0)
{
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_WANTED_LEVEL][1]);

	PI[playerid][pi_STATE] = ROLEPLAY_STATE_JAIL;

	if(time)
		PI[playerid][pi_POLICE_JAIL_TIME] = time;
	else
	{
		if(PI[playerid][pi_VIP]) PI[playerid][pi_POLICE_JAIL_TIME] = 150 * PI[playerid][pi_WANTED_LEVEL];
		else PI[playerid][pi_POLICE_JAIL_TIME] = 300 * PI[playerid][pi_WANTED_LEVEL];
	}

	SetPlayerWantedLevelEx(playerid, 0);
	PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME] = gettime();
	SetPlayerPosEx(playerid, JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Y], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_Z], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_ANGLE], JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR], 0, true);

	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PLAYER_TEMP[playerid][pt_TIMERS][13] = SetTimerEx("UnjailPlayer", PI[playerid][pi_POLICE_JAIL_TIME] * 1000, false, "i", playerid);

	SendFormatNotification(playerid, "Te quedan %s minutos de condena.", TimeConvert( PI[playerid][pi_POLICE_JAIL_TIME] - (gettime() - PLAYER_TEMP[playerid][pt_ENTER_JAIL_TIME]) ));
	ResetPlayerWeaponsEx(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerJobMark(playerid, WORK_POLICE);
	DeleteIlegalInv(playerid);
	StopAudioStreamForPlayer(playerid);
	return 1;
}

forward UnjailPlayer(playerid);
public UnjailPlayer(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][13]);
	PI[playerid][pi_POLICE_JAIL_TIME] = 0;
	SetPlayerWantedLevelEx(playerid, 0);
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_INTERIOR;
	SetWeaponsForPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i != sizeof ENTER_EXIT; i ++)
	{
		if(ENTER_EXIT[i][ee_INTERIOR_TYPE] == JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_INT])
		{
			PI[playerid][pi_LOCAL_INTERIOR] = ENTER_EXIT[i][ee_ID];
			PLAYER_TEMP[playerid][pt_PROPERTY_INDEX] = -1;
			SetPlayerPosEx(playerid, ENTER_EXIT[i][ee_INT_X], ENTER_EXIT[i][ee_INT_Y], ENTER_EXIT[i][ee_INT_Z], ENTER_EXIT[i][ee_INT_ANGLE] + 180.0, ENTER_EXIT[i][ee_INT_INTERIOR], ENTER_EXIT[i][ee_INT_WORLD], true);
			StopAudioStreamForPlayer(playerid);
			break;
		}
	}

	SendFormatNotification(playerid, "Has cumplido tu condena.");
	return 1;
}

Police_RequestHelp(playerid)
{
	new
		city[45],
		zone[45],
		police_message[128];

	GetPlayerZones(playerid, city, zone);

	if(!PLAYER_TEMP[playerid][pt_POLICE_HELP])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
					if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;

					SetPlayerMarkerForPlayer(i, playerid, 0x3399FFFF);
				}
			}
		}
		format(police_message, sizeof police_message, "[Central de policía] {FFFFFF}El %s %s está pidiendo refuerzos en %s, %s.", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
		SendWorkRadioMessage(WORK_POLICE, -1, COLOR_POLICE, police_message);

		PLAYER_TEMP[playerid][pt_POLICE_HELP] = true;
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
					if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;

					SetPlayerMarkerForPlayer(i, playerid, 0x3399FF00);
				}
			}
		}
		format(police_message, sizeof police_message, "[Central de policía]{FFFFFF} El %s %s ya no necesita refuerzos.", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PLAYER_TEMP[playerid][pt_RP_NAME]);
		SendWorkRadioMessage(WORK_POLICE, -1, COLOR_POLICE, police_message);

		PLAYER_TEMP[playerid][pt_POLICE_HELP] = false;
	}
	return 1;
}

Crew_RequestHelp(playerid, crew_id)
{
	new
		city[45],
		zone[45],
		crew_message[128];

	GetPlayerZones(playerid, city, zone);

	if(!PLAYER_TEMP[playerid][pt_CREW_HELP])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][pi_CREW] != crew_id) continue;

					new r, g, b, a;
					HexToRGBA(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
					SetPlayerMarkerForPlayer(i, playerid, RGBAToHex(r, g, b, 135));
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s está pidiendo refuerzos en %s, %s.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME], city, zone);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		PLAYER_TEMP[playerid][pt_CREW_HELP] = true;
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
				{
					if(i == playerid) continue;
					if(PI[i][pi_CREW] != crew_id) continue;

					SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
				}
			}
		}
		format(crew_message, sizeof crew_message, "{%06x}[Banda] {FFFFFF}%s ya no necesita refuerzos.", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, PLAYER_TEMP[playerid][pt_RP_NAME]);
		SendMessageToCrewMembers(crew_id, -1, crew_message);

		PLAYER_TEMP[playerid][pt_CREW_HELP] = false;
	}
	return 1;
}

SetWantedMarkerToPolice(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_POLICE][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_POLICE) continue;

				SetPlayerMarkerForPlayer(i, playerid, PlayerWantedColor(playerid));
			}
		}
	}
	return 1;
}



ShowPlayerStats(playerid, pid)
{
	if(!IsPlayerConnected(pid)) return 0;
	if(PI[pid][pi_ID] == 0) return 0;

	new Float:hours;
	ConvertTime_SecondsToHoursFloat(PI[pid][pi_TIME_PLAYING], hours);

	new next_rep[24], neccessary_rep = PI[pid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[pid][pi_REP] < neccessary_rep)
	{
		new time = (PI[pid][pi_TIME_FOR_REP] - (gettime() * 1000 - PLAYER_TEMP[pid][pt_TIME_PASSED_LAST_REP])) / 1000;
		if(time < 3) time = 3;

		format(next_rep, sizeof next_rep, "%sm", TimeConvert(time));
	}
	else format(next_rep, sizeof next_rep, "/comprarnivel");

	new caption[48], dialog[445 + (27 * sizeof(work_info))];

	format(caption, sizeof caption, "Estadísticas %s", PLAYER_TEMP[pid][pt_RP_NAME]);

	format(dialog, sizeof dialog,

		"\
			{FFFFFF}ID: %d\n\
			{FFFFFF}Nombre: {00E1FF}%s\n\
			{FFFFFF}Correo electrónico: %s\n\
			{FFFFFF}Fecha registro: %s\n\
			{FFFFFF}últ. conexión: %s\n\
			{FFFFFF}Tiempo jugando: %.1f horas\n\
			{FFFFFF}Nivel: {FDB600}%d\n\
			{FFFFFF}Reputación: {59FF00}%d/%d\n\
			{FFFFFF}Siguiente reputación: %s\n\
			{FFFFFF}Trabajo(s): %s\n\
			{FFFFFF}Banda: %s\n\
			{FFFFFF}Dinero: {"#DOLAR_COLOR"}$%s\n\
			{FFFFFF}Dinero en banco: {"#DOLAR_COLOR"}$%s\n\
			{FFFFFF}Monedas "SERVER_COIN": %d\n\
			{FFFFFF}VIP: %s\n\
			{FFFFFF}Plataforma: %s\n\
			\n\
			{FFFFFF}Para estadísticas de tus trabajos utiliza {4CF5F5}/exp.\n\
			{FFFFFF}Para ver tus pertenencias usa {4CF5F5}/inv {FFFFFF}o pulsa N.\n\
			\n\
		",

			PI[pid][pi_ID],
			PI[pid][pi_NAME],
			PI[pid][pi_EMAIL],
			PI[pid][pi_REG_DATE],
			PI[pid][pi_LAST_CONNECTION],
			hours,
			PI[pid][pi_LEVEL],
			PI[pid][pi_REP], neccessary_rep,
			next_rep,
			getPlayerWorks(pid),
			getPlayerCrew(pid),
			number_format_thousand(PI[pid][pi_CASH]),
			number_format_thousand(PI[pid][pi_BANK_MONEY]),
			PI[pid][pi_COINS],
			getPlayerVip(pid),
			(PLAYER_TEMP[pid][pt_Plataforma] ? "{00FFFF}Android" : "{00FF00}PC")
	);
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, caption, dialog, "Cerrar", "");
	return 1;
}

getPlayerCrew(playerid)
{
	new crew[64];
	if(!PI[playerid][pi_CREW]) crew = "ninguna";
	else format(crew, sizeof crew, "{%06x}%s - {FFFFFF}Rango: %s", CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_COLOR] >>> 8, CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_NAME]);
	return crew;
}

getPlayerVip(playerid)
{
	new vip[20];
	if(!PI[playerid][pi_VIP]) vip = "{CCCCCC}No";
	else format(vip, sizeof vip, "{FDB600}Sí, VIP (%d)", PI[playerid][pi_VIP]);
	return vip;
}

AddPlayerBadHistory(account_id, by_account_id, type, text[])
{
	new date[24];
	getDateTime(date);
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}

AddBanForAntiCheat(playerid, reason[])
{
	AddPlayerBan(PI[playerid][pi_ID], PI[playerid][pi_NAME], PI[playerid][pi_IP], 0, TYPE_BAN, reason);

	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado, razón:\n%s\n", reason);
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(playerid, 500);

	new str[145]; format(str, 145, "El {"#RED_COLOR"}AntiCheat {FFFFFF}baneó {FFFFFF}a %s (%d): %s.", PI[playerid][pi_NAME], playerid, reason);
	SendAdminAd(-1, str);
	return 1;
}

AddPlayerBan(account_id, account_name[], account_ip[], by_account_id, type, text[], days = 0)
{
	new date[24], account_name_fix[24], account_ip_fix[24];
	getDateTime(date);
	format(account_name_fix, 24, "%s", account_name);
	format(account_ip_fix, 16, "%s", account_ip);

	if(!days)
	{
		inline OnBadHistoryInserted1()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history) VALUES ('%e', '%e', %d);", account_name_fix, account_ip_fix, id);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}
		}
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnBadHistoryInserted1);
	}
	else
	{
		inline OnBadHistoryInserted2()
		{
			new id = cache_insert_id();
			if(id)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bans (name, ip, id_history, expire_date) VALUES ('%e', '%e', %d, DATE_ADD(NOW(), INTERVAL %d DAY));", account_name_fix, account_ip_fix, id, days);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}
		}
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO bad_history (id_player, type, `by`, `text`, `date`) VALUES (%d, %d, %d, '%e', '%e');", account_id, type, by_account_id, text, date);
		mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnBadHistoryInserted2);
	}
	return 1;
}

// Comandos admins
CMD:ctele(playerid, params[])
{
	new tele[16];
	if(sscanf(params, "s[16]", tele)) return SendNotification(playerid, "~r~Modo de uso: ~w~/ctele [Nombre]");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows) return SendFormatNotification(playerid, "El tele %s ya existe.", tele);
			else
			{
				new Float:Pos[4];
				GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				GetPlayerFacingAngle(playerid, Pos[3]);
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "\
					INSERT INTO teles(name, pos_x, pos_y, pos_z, pos_angle, interior, world)\
					VALUES('%s', %f, %f, %f, %f, %d, %d)", tele, Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "Creaste el tele ~b~%s", tele);
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM teles WHERE name = '%s';", tele);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "ctele", params);
	return 1;
}
CMD:teles(playerid, params[])
{
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	
	inline OnDialogQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			new dialog[128 * 15], line_str[128], count, start_pos = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] + 1;
			format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Nombre\n");
			for(new i = 0; i != MAX_LISTITEMS; i++ ) PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][i] = -1;
			for(new i = 0; i != rows; i++)
			{
				new name[16];
				cache_get_value_name(i, "name", name);

				format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%d. %s\t{"#SILVER_COLOR"}%s\t{"#SILVER_COLOR"}%s\n", start_pos + i, name);
				strcat(dialog, line_str);
				PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = i;
			}

			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -2;
			strcat(dialog, "{c9c9c9}- Siguiente\n");
			PLAYER_TEMP[playerid][pt_PLAYER_LISTITEM][count++] = -3;
			strcat(dialog, "{c9c9c9}- Anterior\n");
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Teles creados", dialog, "» Continuar", "Cerrar");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT name FROM teles LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnDialogQueryLoad);

	SendCmdLogToAdmins(playerid, "teles", params);
	return 1;
}
CMD:tele(playerid, params[])
{
	new tele[16];
	if(sscanf(params, "s[16]", tele)) return SendNotification(playerid, "~r~Modo de uso: ~w~/tele [Nombre]");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new Float:Pos[4], interior, world;
				for(new i = 0; i != rows; i ++)
				{
					cache_get_value_name_float(i, "pos_x", Pos[0]);
					cache_get_value_name_float(i, "pos_z", Pos[1]);
					cache_get_value_name_float(i, "pos_y", Pos[2]);
					cache_get_value_name_float(i, "pos_angle", Pos[3]);
					cache_get_value_name_int(i, "interior", interior);
					cache_get_value_name_int(i, "world", world);
				}
				SetPlayerPosEx(playerid, Pos[0], Pos[1], Pos[2], Pos[3], interior, world);
			}
			else SendFormatNotification(playerid, "No se encontró el tele ~b~%s", tele);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM teles WHERE name = '%s';", tele);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "tele", params);
	return 1;
}
CMD:etele(playerid, params[])
{
	new tele[16];
	if(sscanf(params, "s[16]", tele)) return SendNotification(playerid, "~r~Modo de uso: ~w~/etele [Nombre]");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM teles WHERE name = '%s'", tele);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "El tele %s ha sido eliminado.", tele);
			}
			else SendFormatNotification(playerid, "No se encontró el tele ~b~%s", tele);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM teles WHERE name = '%s';", tele);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "etele", params);
	return 1;
}
CMD:pcolor(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/pcolor [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");

	PLAYER_TEMP[playerid][pt_ID_COLOR] = to_player;
	ShowDialog(playerid, DIALOG_PLAYER_COLOR);

	SendCmdLogToAdmins(playerid, "pcolor", params);
	return 1;
}
CMD:slap(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso: ~w~/slap [PlayerID/Nombre]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "Jugador desconectado.");

	new Float:p[3];
	SendClientMessageEx(playerid, -1, "Vida de {FF00CF}%s(%d) {FFFFFF}antes del slap: {"#RED_COLOR"}%f", PLAYER_TEMP[params[0]][pt_RP_NAME], params[0], PI[params[0]][pi_HEALTH]);

	PLAYER_TEMP[playerid][pt_SLAP_ID] = params[0];

	GetPlayerPos(params[0], p[0], p[1], p[2]);
	SetPlayerPosEx(params[0], p[0], p[1], p[2]+8, PI[params[0]][pi_ANGLE], PI[params[0]][pi_INTERIOR], PLAYER_TEMP[params[0]][pt_VIRTUAL_WORLD]);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][19]);
	PLAYER_TEMP[playerid][pt_TIMERS][19] = SetTimerEx("DarSlap", 2000, false, "i", playerid);

	SendCmdLogToAdmins(playerid, "slap", params);
	return 1;
}
CMD:reportar(playerid, params[])
{
	if(gettime() < PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] + 5) return SendNotification(playerid, "Cálmate.");
	PLAYER_TEMP[playerid][pt_ANTIFLOOD_REPORT] = gettime();

	new reason[128];
	if(sscanf(params, "us[128]", params[0], reason)) return SendNotification(playerid, "~r~Modo de uso: ~w~/reportar [PlayerID/Nombre] [Razón]");
	if(!IsPlayerConnected(params[0])) return SendNotification(playerid, "Jugador desconectado.");

	SendClientMessage(playerid, COLOR_PRINCIPAL, "·{FFFFFF}Tu reporte ha sido enviado a los {"#RED_COLOR"}administradores{FFFFFF} en {"#CORRECT_COLOR"}línea{FFFFFF}.");

	new str[145]; format(str, 145, "{FF0094}[REPORTE] {FF2400}%s (%d) > %s (%d): %s", PI[playerid][pi_NAME], playerid, PI[params[0]][pi_NAME], params[0], reason);
	SendMessageToAdmins(-1, str);

	format(str, sizeof str, "`[REPORTE]` %s (%d) > %s (%d): %s",  PI[playerid][pi_NAME], playerid, PI[params[0]][pi_NAME], params[0], reason);
	FixCharacterString(str);
	DCC_SendChannelMessage(dc_channel[0], str);
	return 1;
}

CMD:r(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/r [MENSAJE]");
	if(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] == INVALID_PLAYER_ID || !PLAYER_TEMP[playerid][pt_ADMIN_PM_AID]) return SendNotification(playerid, "Nada para responder.");

	if(PI[ PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] ][pi_ID] != PLAYER_TEMP[playerid][pt_ADMIN_PM_AID])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendNotification(playerid, "El administrador que te envió el mensaje está ~r~desconectado~w~.");
		return 1;
	}
	if(gettime() > PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendNotification(playerid, "Has tardado demasiado en responser.");
		return 1;
	}

	SendClientMessageEx(PLAYER_TEMP[playerid][pt_ADMIN_PM_PID], -1, "Respuesta de %s (%d): %s", PI[playerid][pi_NAME], playerid, params);
	SendNotification(playerid, "Tu mensaje ha sido enviado al administrador.");
	PLAYER_TEMP[playerid][pt_ADMIN_PM_PID] = INVALID_PLAYER_ID;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_AID] = 0;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
	return 1;
}
CMD:rd(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso: ~w~/rd [MENSAJE]");
	if(!PLAYER_TEMP[playerid][pt_ADMIN_PM_DS]) return SendNotification(playerid, "Nada para responder.");

	if(gettime() > PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] + 60)
	{
		PLAYER_TEMP[playerid][pt_ADMIN_PM_DS] = false;
		PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
		SendNotification(playerid, "Has tardado demasiado en responder");
		return 1;
	}

	new string[128];
	format(string, sizeof string, "Respuesta de %s (%d): %s", PI[playerid][pi_NAME], playerid, params);
	FixCharacterString(params);
	DCC_SendChannelMessage(dc_channel[0], string);
	SendNotification(playerid, "Tu mensaje ha sido enviado al administrador.");

	PLAYER_TEMP[playerid][pt_ADMIN_PM_DS] = false;
	PLAYER_TEMP[playerid][pt_ADMIN_PM_TIME] = 0;
	return 1;
}

CMD:id(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/id [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");

	new string[280];
	if(to_player == playerid)
	{
		format(string, sizeof string, "·{FFFFFF}Nombre: '{00CCFF}%s{FFFFFF}' DB-ID: {b5bfcb}%d{FFFFFF} Playerid: {FF0000}%d{FFFFFF} Nivel: {e77d31}%d", PI[playerid][pi_NAME], PI[playerid][pi_ID], playerid, PI[playerid][pi_LEVEL], (PLAYER_TEMP[playerid][pt_Plataforma] ? "{00FFFF}Android" : "{00FF00}PC"));
		SendClientMessage(playerid, COLOR_PRINCIPAL, string);
		SendClientMessageEx(playerid, COLOR_PRINCIPAL, "·{FFFFFF}(Ping: %s P: %.2f)", GetPlayerPingEx(playerid), NetStats_PacketLossPercent(playerid), GetPlayerPingEx(playerid), NetStats_PacketLossPercent(playerid));
	}
	else
	{
		format(string, sizeof string, "·{FFFFFF}Nombre: '{00CCFF}%s{FFFFFF}' DB-ID: %d Playerid: {FF0000}%d{FFFFFF} Nivel: {e77d31}%d {FFFFFF}Plataforma: %s", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player, PI[to_player][pi_LEVEL], (PLAYER_TEMP[to_player][pt_Plataforma] ? "{00FFFF}Android" : "{00FF00}PC"));
		SendClientMessage(playerid, COLOR_PRINCIPAL, string);
		SendClientMessageEx(playerid, COLOR_PRINCIPAL, "·{FFFFFF}(Ping: %s P: %.2f | Tu ping: %s Tu P: %.2f)", GetPlayerPingEx(to_player), NetStats_PacketLossPercent(to_player), GetPlayerPingEx(playerid), NetStats_PacketLossPercent(playerid));
	}
	return 1;
}

GetPlayerPingEx(playerid)
{
	new string[32];
	new ping = GetPlayerPing(playerid);
	if(ping >= 0 && ping < 150) format(string, sizeof string, "{46e800}%d{FFFFFF}", ping);
	if(ping >= 150 && ping < 200) format(string, sizeof string, "{00cbf7}%d{FFFFFF}", ping);
	if(ping >= 200 && ping < 250) format(string, sizeof string, "{E0F600}%d{FFFFFF}", ping);
	if(ping >= 250 && ping < 300) format(string, sizeof string, "{f7e300}%d{FFFFFF}", ping);
	if(ping >= 300) format(string, sizeof string, "{f74000}%d{FFFFFF}",ping);
	return string;
}

CMD:admins(playerid, params[])
{
	if(PI[playerid][pi_ADMIN_LEVEL] < 2) return 0;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 10;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;
	ShowDialog(playerid, DIALOG_ADMIN_LIST);
	return 1;
}

CMD:trabajos(playerid)
{
	ShowDialog(playerid, DIALOG_WORKS_TELEPORTS);
	return 1;
}

CMD:getid(playerid, params[])
{
	new findname[24];
	if(sscanf(params, "s[24]", findname)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getid <nombre o parte del nombre>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "connected", connected);
				cache_get_value_name_int(i, "playerid", pid);
				SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE name LIKE '%%%e%%' LIMIT 20;", findname);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:getname(playerid, params[])
{
	new db_id;
	if(sscanf(params, "d", db_id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getname <DB-ID>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				cache_get_value_name_int(i, "connected", connected);
				cache_get_value_name_int(i, "playerid", pid);
				SendClientMessageEx(playerid, -1, "Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", name, id, connected, pid);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE id = %d LIMIT 20;", db_id);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:aka(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /aka <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(isnull(PI[to_player][pi_IP])) return SendNotification(playerid, "IP no válida.");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			SendFormatNotification(playerid, "AKA de %s (%d):", PI[to_player][pi_NAME], to_player);
			for(new i = 0; i != rows; i ++)
			{
				new id, name[24];
				cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "name", name);
				SendClientMessageEx(playerid, -1, "Nombre: {f4f442}'%s' {FFFFFF}DB-ID: '%d'", name, id);
			}
			SendClientMessageEx(playerid, -1, "Se encontraron %d coincidencias, el límite es 20.", rows);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name FROM player WHERE ip = '%e' LIMIT 20;", PI[to_player][pi_IP]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}
alias:aka("cuentas", "multicuentas");

CMD:adv(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /adv <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");


	AddPlayerBadHistory(PI[to_player][pi_ID], PI[playerid][pi_ID], TYPE_WARNING, reason);

	new dialog[170];
	format(dialog, sizeof dialog, "Has recibido una advertencia, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");

	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') advertido.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);


	new str[145]; format(str, 145, "{DE00FF}[ADMIN] {FFFFFF}%s (%d) le {06FF00}dió una advertencia {FFFFFF}a %s (%d): %s", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}
alias:adv("advertencia");

CMD:kick(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /kick <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);


	AddPlayerBadHistory(PI[to_player][pi_ID], PI[playerid][pi_ID], TYPE_KICK, reason);

	new dialog[170];
	format(dialog, sizeof dialog, "Has sido expulsado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);

	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') expulsado.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);


	new str[145]; format(str, 145, "{DE00FF}[ADMIN] {FFFFFF}%s (%d) {037D00}expulsó {FFFFFF}a %s (%d): %s", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}

CMD:spec(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /spec <player_id>");
	if(to_player == playerid) return SendNotification(playerid, "Eres tú.");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(PLAYER_TEMP[to_player][pt_SPECTANDO]) return SendNotification(playerid, "Este jugador está en modo spectador.");

	if(!PLAYER_TEMP[playerid][pt_SPECTANDO])
	{
		GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
		GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
		PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
		PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD] = GetPlayerVirtualWorld(playerid);
	}

	PLAYER_TEMP[playerid][pt_ID_SPEC] = to_player;
	PLAYER_TEMP[to_player][pt_SPECTEADO] = true;

	TogglePlayerSpectatingEx(playerid, true);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(to_player));
	SetPlayerInterior(playerid, GetPlayerInterior(to_player));
	if(IsPlayerInAnyVehicle(to_player)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(to_player));
	else PlayerSpectatePlayer(playerid, to_player);
	SendNotification(playerid, "Utiliza ~r~/specoff ~w~para terminar este modo.");

	SendCmdLogToAdmins(playerid, "spec", params);
	return 1;
}
alias:spec("specp", "spp");

CMD:specoff(playerid, params[])
{
	if(!PLAYER_TEMP[playerid][pt_SPECTANDO]) return SendNotification(playerid, "No estás en modo spectador.");

	PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_ID_SPEC] ][pt_SPECTEADO] = false;
	PLAYER_TEMP[playerid][pt_ID_SPEC] = INVALID_PLAYER_ID;

	TogglePlayerSpectatingEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", 2000, false, "ib", playerid, true);

	SetPlayerPosEx(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_INTERIOR], PLAYER_TEMP[playerid][pt_VIRTUAL_WORLD]);
	return 1;
}
alias:specoff("listo");

CMD:congelar(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /congelar <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SendFormatNotification(playerid, "Jugador '%s' (%d) congelado.", PI[to_player][pi_NAME], to_player);
	TogglePlayerControllableEx(to_player, false);
	return 1;
}
alias:congelar("freeze");

CMD:descongelar(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /descongelar <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SendFormatNotification(playerid, "Jugador '%s' (%d) descongelado.", PI[to_player][pi_NAME], to_player);
	TogglePlayerControllableEx(to_player, true);
	return 1;
}
alias:descongelar("unfreeze");

CMD:pest(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pest <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerStats(playerid, to_player);
	return 1;
}

CMD:pinv(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pinv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerInventory(playerid, to_player);
	return 1;
}

CMD:pexp(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pexp <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	ShowPlayerSkills(playerid, to_player);
	return 1;
}

CMD:parmas(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /parmas <player_id>");

	new dialog[95 * 15], line_str[95];
	format(dialog, sizeof dialog, "{"#SILVER_COLOR"}Arma\t{"#BLUE_COLOR"}Munición\t{"#SILVER_COLOR"}Slot\n");

	for(new i = 0; i < sizeof PLAYER_WEAPONS[]; i ++)
	{
		if(!PLAYER_WEAPONS[to_player][i][player_weapon_VALID]) continue;

		format(line_str, sizeof line_str, "{"#SILVER_COLOR"}%s\t{"#BLUE_COLOR"}%s\t{"#SILVER_COLOR"}%d\n", WEAPON_INFO[ PLAYER_WEAPONS[to_player][i][player_weapon_ID] ][weapon_info_NAME], number_format_thousand(PLAYER_WEAPONS[to_player][i][player_weapon_AMMO]), i);
		strcat(dialog, line_str);
	}

	format(line_str, sizeof line_str, "Armas de %s", PLAYER_TEMP[playerid][pt_RP_NAME]);

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, line_str, dialog, "» Continuar", "Cerrar");
	return 1;
}

CMD:pbank(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pbank <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(!PI[to_player][pi_BANK_ACCOUNT]) SendNotification(playerid, "El jugador no tiene cuenta bancaria.");
	else SendFormatNotification(playerid, "Cuenta bancaria ID: '%d' Balance: '%s'", PI[to_player][pi_BANK_ACCOUNT], number_format_thousand(PI[to_player][pi_BANK_MONEY]));
	return 1;
}

CMD:unjail(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unjail <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_JAIL) return SendNotification(playerid, "El jugador no está en el cárcel.");

	UnjailPlayer(to_player);
	SendFormatNotification(playerid, "El jugador %s (%d) ahora está en libertad.", PI[to_player][pi_NAME], to_player);

	SendCmdLogToAdmins(playerid, "unjail", params);
	return 1;
}

CMD:ip(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ip <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	SendFormatNotification(playerid, "IP %s (%d): %s", PI[to_player][pi_NAME], to_player, PI[to_player][pi_IP]);
	return 1;
}

CMD:traerveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendNotification(playerid, "~r~Modo de uso:~w~ /traerveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");
	if(GLOBAL_VEHICLES[to_car][gb_vehicle_OCCUPIED]) return SendNotification(playerid, "Vehículo está ocupado.");

	new Float:gPos[3];
	GetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);
	SetVehiclePosEx(to_car, gPos[0] + 2.0, gPos[1], gPos[2]);
	SetVehicleVirtualWorldEx(to_car, GetPlayerInterior(playerid));
	LinkVehicleToInteriorEx(to_car, GetPlayerVirtualWorld(playerid));
	return 1;
}
alias:traerveh("getveh", "traervehiculo", "traerauto", "getcar");

CMD:irveh(playerid, params[])
{
	new to_car;
	if(sscanf(params, "i", to_car)) return SendNotification(playerid, "~r~Modo de uso:~w~ /irveh <car_id>");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");

	new Float:gPos[3];
	GetVehiclePos(to_car, gPos[0], gPos[1], gPos[2]);
	SetPlayerPosEx(playerid, gPos[0], gPos[1], gPos[2], 0.0, GLOBAL_VEHICLES[to_car][gb_vehicle_INTERIOR], GLOBAL_VEHICLES[to_car][gb_vehicle_WORLD]);
	return 1;
}
alias:irveh("irvehiculo", "gotocar", "ircarro");

CMD:duty(playerid)
{
	if(PI[playerid][pi_ADMIN_LEVEL] < 1) return 0;
	if(PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = false;
		SetPlayerNormalColor(playerid);

		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0]);
		PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1]);

		SendFormatNotification(playerid, "Ahora no estás de servicio como ~r~%s.", GetNameRankAdmin(playerid));
	}
	else
	{
		PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] = true;
		SetPlayerNormalColor(playerid);

		if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]))
		{
			DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_ADMIN_LABEL]);
			PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = Text3D:INVALID_STREAMER_ID;
		}

		new label_str[64];
		switch(PI[playerid][pi_ADMIN_LEVEL])
		{
			case 1: format(label_str, sizeof label_str, "{feff00}%s en servicio", GetNameRankAdmin(playerid));
			case 2: format(label_str, sizeof label_str, "{fea600}%s en servicio", GetNameRankAdmin(playerid));
			case 3: format(label_str, sizeof label_str, "{00ff11}%s en servicio", GetNameRankAdmin(playerid));
			case 4: format(label_str, sizeof label_str, "{a4001c}%s en servicio", GetNameRankAdmin(playerid));
			case 5: format(label_str, sizeof label_str, "{ff00d1}%s en servicio", GetNameRankAdmin(playerid));
			case 6: format(label_str, sizeof label_str, "{00ffdd}%s en servicio", GetNameRankAdmin(playerid));
			case 7: format(label_str, sizeof label_str, "{00ffdd}%s en servicio", GetNameRankAdmin(playerid));
		}
		PLAYER_TEMP[playerid][pt_ADMIN_LABEL] = CreateDynamic3DTextLabel(label_str, -1, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][0]);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_ON_DUTY][1]);

		if(PLAYER_TEMP[playerid][pt_WORKING_IN]) SendFormatNotification(playerid, "Deberías dejar de estar de servicio como %s para administrar mejor...", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
		SendFormatNotification(playerid, "Ahora estás de servicio como ~g~%s.", GetNameRankAdmin(playerid));
	}
	return 1;
}

CMD:ir(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ir <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(to_player, p[0], p[1], p[2]);
	GetPlayerFacingAngle(to_player, p[3]);

	SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], GetPlayerInterior(to_player), GetPlayerVirtualWorld(to_player), false, true);
	SetPlayerFacingAngle(playerid, p[3] + 180.0);

	PLAYER_TEMP[playerid][pt_INTERIOR_INDEX] = PLAYER_TEMP[to_player][pt_INTERIOR_INDEX];

	SetPlayerCityWeather(playerid);

	SendCmdLogToAdmins(playerid, "ir", params);
	return 1;
}
alias:ir("goto");

CMD:traer(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /traer <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	SetPlayerPosEx(to_player, p[0], p[1], p[2], p[3], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false, true);
	SetPlayerFacingAngle(to_player, p[3] + 180.0);

	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = PLAYER_TEMP[playerid][pt_INTERIOR_INDEX];

	SetPlayerCityWeather(to_player);

	SendCmdLogToAdmins(playerid, "traer", params);
	return 1;
}
alias:traer("get");

CMD:desbanx27(playerid, params[])
{
	new name[24];
	if(sscanf(params, "s[24]", name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unban <nombre completo o ip>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "'%s' ha sido desbaneado.", name);

				new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) ha desbaneado a '%s'.", PI[playerid][pi_NAME], playerid, name);
				SendMessageToAdmins(-1, str);

				inline OnCountQueryLoad()
				{
					new crows;
					if(cache_get_row_count(crows))
					{
						if(crows)
						{
							new id_player;
							cache_get_value_index_int(0, 0, id_player);
							if(id_player) AddPlayerBadHistory(id_player, PI[playerid][pi_ID], TYPE_UNBAN, "/unban");
						}
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e' OR ip = '%e';", name, name);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
			}
			else SendFormatNotification(playerid, "'%s' no está en la lista de baneados.", name);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, name);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);

	SendCmdLogToAdmins(playerid, "unban", params);
	return 1;
}

CMD:desbanipx27(playerid, params[])
{
	new ip[24];
	if(sscanf(params, "s[24]", ip)) return SendNotification(playerid, "~r~Modo de uso:~w~ /unbanip <ip>");

	new string[64];
	format(string, sizeof string, "unbanip %s", ip);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	SendFormatNotification(playerid, "La ip %s ha sido desbaneada.", ip);
	SendCmdLogToAdmins(playerid, "unbanip", params);
	return 1;
}

CMD:sanx27(playerid, params[])
{
	new to_player, reason[128], time;
	if(sscanf(params, "uds[128]", to_player, time, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /jail <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendNotification(playerid, "Intervalo de minutos incorrecto.");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(PLAYER_TEMP[to_player][pt_PLAYER_IN_CALL]) EndPhoneCall(to_player);
	if(PLAYER_TEMP[to_player][pt_GPS_MAP]) HidePlayerGpsMap(to_player);
	if(PLAYER_TEMP[to_player][pt_SHOW_IPHONE]) { HidePlayeriPhone(to_player); HidePlayeriPhoneApps(to_player); }
	StopAudioStreamForPlayer(to_player);
	CancelEdit(to_player);
	HidePlayerDialog(to_player);
	CallLocalFunction("EndPlayerJob", "iib", to_player, PLAYER_TEMP[to_player][pt_WORKING_IN], true);
	PLAYER_TEMP[to_player][pt_HUNGRY_MESSAGE] = false;
	PLAYER_TEMP[to_player][pt_THIRST_MESSAGE] = false;
	PLAYER_TEMP[to_player][pt_PLAYER_IN_ATM] = false;
	PLAYER_TEMP[to_player][pt_CUFFED] = false;
	PLAYER_TEMP[to_player][pt_CUFFING] = false;

	if(PLAYER_TEMP[to_player][pt_WANT_TAXI])
	{
		PLAYER_TEMP[to_player][pt_WANT_TAXI] = false;
		DisablePlayerJobMark(to_player, WORK_TAXI);
	}
	if(PLAYER_TEMP[to_player][pt_WANT_MEDIC])
	{
		PLAYER_TEMP[to_player][pt_WANT_MEDIC] = false;
		DisablePlayerJobMark(to_player, WORK_MEDIC);
	}
	if(PLAYER_TEMP[to_player][pt_WANT_MECANICO])
	{
		PLAYER_TEMP[to_player][pt_WANT_MECANICO] = false;
		DisablePlayerJobMark(to_player, WORK_MEDIC);
	}

	PI[to_player][pi_POLICE_JAIL_ID] = 0;
	JailPlayer(to_player, time * 60);
	SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Te quedan %s minutos de sanción, razón: %s.", TimeConvert(time * 60), reason);
	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);

	new str[145]; format(str, 145, "{DE00FF}[ADMIN] {FFFFFF}%s (%d) {00EDFF}sancionó {FFFFFF}a %s (%d): %s.", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendAdminAd(-1, str);

	if(playerid != to_player) // El mensaje no se enviará si el sancionado es él mismo
	{
		format(str, sizeof str, "\
		**%s:** %s\n\
		**Usuario:** %s\n\
		**Falta(s):** %s\n\
		**Tiempo de jail:** %s\
		", GetNameRankAdmin(playerid), PI[playerid][pi_NAME], PI[to_player][pi_NAME], TimeConvert(time * 60), reason);
		FixCharacterString(str);
		DCC_SendChannelMessage(dc_channel[5], str);
	}
	return 1;
}

CMD:say(playerid, params[])
{
	new
		to_player,
		command[128];

	if(sscanf(params, "us[128]", to_player, command)) return SendNotification(playerid, "~r~Modo de uso:~w~ /say <player_id> <comando>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(strfind(command, "/", true) == -1) CallLocalFunction("OnPlayerText", "is", to_player, command);
	else
	{
		PLAYER_TEMP[to_player][pt_ANTIFLOOD_TALK] = GetTickCount();
		PC_EmulateCommand(to_player, command);
	}
	SendCmdLogToAdmins(playerid, "say", params);
	return 1;
}

CMD:banx27(playerid, params[])
{
	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ban <player_id> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);

	AddPlayerBan(PI[to_player][pi_ID], PI[to_player][pi_NAME], PI[to_player][pi_IP], PI[playerid][pi_ID], TYPE_BAN, reason);

	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado, razón:\n%s\n", reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);

	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', id: '%d') baneado.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player);

	new str[145]; format(str, 145, "{DE00FF}[ADMIN] {FFFFFF}%s (%d) {FF0000}baneó {FFFFFF}a %s (%d): %s.", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}

CMD:cls(playerid, params[])
{
	for(new i = 0; i != 100; i ++) SendClientMessageToAll(-1, " ");
	SendCmdLogToAdmins(playerid, "cls", params);
	return 1;
}
alias:cls("cc");

CMD:bantempx27(playerid, params[])
{
	new to_player, days, reason[128];
	if(sscanf(params, "uds[128]", to_player, days, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /bantempx27 <player_id> <dias> <razon>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(days <= 0 || days > 9999) return SendNotification(playerid, "~r~Modo de uso:~w~ /bantempx27 <player_id> <dias> <razon>");

	if(PLAYER_TEMP[to_player][pt_KICKED]) return SendNotification(playerid, "El jugador ya está expulsado.");
	if(!PI[to_player][pi_ID]) return Kick(to_player);

	AddPlayerBan(PI[to_player][pi_ID], PI[to_player][pi_NAME], PI[to_player], PI[playerid][pi_ID], TYPE_TEMP_BAN, reason, days);

	new dialog[250];
	format(dialog, sizeof dialog, "Has sido baneado por %d días, razón:\n%s\n", days, reason);
	ShowPlayerDialog(to_player, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Aviso", dialog, "Entiendo", "");
	KickEx(to_player, 500);

	SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d', pid: '%d') baneado por %d días.", PI[to_player][pi_NAME], PI[to_player][pi_ID], to_player, days);


	new str[145]; format(str, 145, "{DE00FF}[ADMIN] {FFFFFF}%s (%d) {FF0000}baneó{FFFFFF} a %s (%d): %s", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendAdminAd(-1, str);
	return 1;
}
alias:bantempx27("bantemp");

CMD:cargosadmin(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /cargosadmin <to_player> <level>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SetPlayerWantedLevelEx(to_player, level);

	SendCmdLogToAdmins(playerid, "cargosadmin", params);
	return 1;
}

CMD:sound(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /sound <id>");

	PlayerPlaySound(playerid, params[0], 0.0, 0.0, 0.0);
	return 1;
}

CMD:anim(playerid, params[])
{
	new animLib[32], animName[32];
	if(sscanf(params, "s[32]s[32]", animLib, animName)) return SendNotification(playerid, "~r~Modo de uso:~w~ /anim <animLib> <animName>");
	ApplyAnimation(playerid, animLib, animName, 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:banoffx27(playerid, params[])
{
	new reason[128], to_account;
	if(sscanf(params, "ds[128]", to_account, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /banoff <DB-ID> <razon>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new expire_date[24];
									cache_get_value_name(0, "expire_date", expire_date);

									if(isnull(expire_date)) SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, ip, PI[playerid][pi_ID], TYPE_BAN, reason);
									SendFormatNotification(playerid, "Jugador (nick: '%s' db_id: '%d') baneado.", name, id);

									new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó a %s (offline, db_id: %d): %s", PI[playerid][pi_NAME], playerid, name, id, reason);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:bantempoffx27(playerid, params[])
{
	new reason[128], to_account, days;
	if(sscanf(params, "dds[128]", to_account, days, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /bantoff <DB-ID> <dias> <razon>");
	if(days <= 0 || days > 9999) return SendNotification(playerid, "~r~Modo de uso:~w~ /bantempoffx27 <DB-ID> <dias> <razon>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ban, su player_id: %d.", name, id, pid);
					else
					{
						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new expire_date[24];
									cache_get_value_name(0, "expire_date", expire_date);

									if(isnull(expire_date)) SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (permanentemente).", name, id);
									else SendFormatNotification(playerid, "JUGADOR (Nombre: '%s' DB-ID: '%d') ya está baneado (temporalmente, fecha de readmisión: %s).", name, id, expire_date);
								}
								else
								{
									AddPlayerBan(id, name, ip, PI[playerid][pi_ID], TYPE_BAN, reason, days);
									SendFormatNotification(playerid, "Jugador (nick: '%s' dbid: '%d') baneado por %d días.", name, id, days);

									new str[145]; format(str, 145, "{"#RED_COLOR"}[ADMIN] {FFFFFF}%s (%d) baneó %d días a %s (offline, db_id: %d): %s", PI[playerid][pi_NAME], playerid, days, name, id, reason);
									SendMessageToAdmins(-1, str);
								}
							}
						}
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM bans WHERE name = '%e' OR ip = '%e';", name, ip);
						mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:entercar(playerid,params[])
{
	new to_player, to_car, asiento;
	if(sscanf(params, "udd", to_player, to_car, asiento)) return SendNotification(playerid, "~r~Modo de uso:~w~ /entercar <player_id> <car_id> <asiento 0-3>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");
	if(to_car >= MAX_VEHICLES) return 1;

	if(!GLOBAL_VEHICLES[to_car][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");
	GLOBAL_VEHICLES[to_car][gb_vehicle_LAST_CLOSED_TIME] = gettime();

	PutPlayerInVehicleEx(to_player, to_car, asiento);
	return 1;
}

CMD:rac(playerid, params[])
{
	RespawnGlobalUnoccupiedVehicles();
	SendNotification(playerid, "Todos los vehículos no personales y sin ocupar han sido re-spawneados.");

	SendCmdLogToAdmins(playerid, "rac", params);
	return 1;
}

CMD:rac2(playerid, params[])
{
	RespawnAllUnoccupiedVehicles();
	SendNotification(playerid, "Todos los vehículos sin ocupar han sido re-spawneados.");

	SendCmdLogToAdmins(playerid, "rac2", params);
	return 1;
}

CMD:rv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "d", vehicleid)) { }
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo o usa /rv <vehicle_id>.");
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");

	SetVehicleToRespawnEx(vehicleid);

	SendFormatNotification(playerid, "Vehículo (%d) re-spawneado.", vehicleid);
	return 1;
}

CMD:pm(playerid, params[])
{
	new to_player, message[128];
	if(sscanf(params, "us[128]", to_player, message)) return SendNotification(playerid, "~r~Modo de uso:~w~ /pm <player_id> <mensaje>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SendFormatNotification(playerid, "Mensaje enviado a %s (%d): %s", PI[to_player][pi_NAME], to_player, message);

	PLAYER_TEMP[to_player][pt_ADMIN_PM_PID] = playerid;
	PLAYER_TEMP[to_player][pt_ADMIN_PM_AID] = PI[playerid][pi_ID];
	PLAYER_TEMP[to_player][pt_ADMIN_PM_TIME] = gettime();
	SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Mensaje de un administrador (/r para responder): {FFFFFF}%s", message);

	SendCmdLogToAdmins(playerid, "pm", params);
	return 1;
}

CMD:deletead(playerid, params[])
{
	new ad_id;
	if(sscanf(params, "d", ad_id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /deletead <ID>");

	inline OnShopChecked()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM shop WHERE id = %d;", ad_id);
				mysql_tquery(mysql_db, QUERY_BUFFER);
				SendFormatNotification(playerid, "Anuncio '%d' eliminado.", ad_id);
				SendCmdLogToAdmins(playerid, "deletead", params);
			}
			else SendNotification(playerid, "No se encontro la ID de ese anuncio.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM shop WHERE id = %d;", ad_id);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopChecked);
	return 1;
}
alias:deletead("borrarad");

CMD:darpatines(playerid, params[])
{
	new to_player;
	if(sscanf(params, "ud", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darpatines <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_Patines] = 1;

	SendFormatNotification(playerid, "Le diste patines a %s", PLAYER_TEMP[to_player][pt_RP_NAME]);
   	SendCmdLogToAdmins(playerid, "darpatines", params);
	return 1;
}
alias:darpatines("setpatines");

CMD:damepatines(playerid, params[])
{
	PI[playerid][pi_Patines] = 1;
	SendNotification(playerid, "Aqui tienes miamor");
	SendCmdLogToAdmins(playerid, "damepatines", params);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour, minute;
	if(sscanf(params, "dd", hour, minute)) return SendNotification(playerid, "~r~Modo de uso:~w~ /settime <hora> <minuto>");
	SetMyWorldTime(hour, minute);
	SendNotification(playerid, "El tiempo se ajustará cuando el reloj avance.");
	SendCmdLogToAdmins(playerid, "settime", params);
	return 1;
}
alias:settime("settiempo");

CMD:setweather(playerid, params[])
{
	new weather;
	if(sscanf(params, "d", weather)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setweather <ID>");
	InterpolateWeather(weather);
	SendCmdLogToAdmins(playerid, "setweather", params);
	return 1;
}
alias:setweather("setclima");

/*CMD:dameadmin(playerid, params[])
{
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = 7 WHERE id = %d;", PI[playerid][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PI[playerid][pi_ADMIN_LEVEL] = 7;
	SendNotification(playerid, "Ahora sos Dueño.");
	return 1;
}*/

CMD:daradmin0988(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /daradmin0988 <player_id> <rango>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(level < 0 || level >= sizeof ADMIN_LEVELS) return SendNotification(playerid, "El rango no es válido.");
	if(level > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "No puedes dar este rango por ser un rango superior al tuyo.");

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET admin_level = %d WHERE id = %d;", level, PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PI[to_player][pi_ADMIN_LEVEL] = level;
	SendClientMessageEx(to_player, -1, "%s cambió tu rango administrativo a: %s.", PI[playerid][pi_NAME], GetNameRankAdmin(to_player));
	SendFormatNotification(playerid, "El rango administrativo de %s (%d) ahora es %s.", PI[to_player][pi_NAME], to_player, GetNameRankAdmin(to_player));

	SendCmdLogToAdmins(playerid, "daradminx2731", params);
	return 1;
}
alias:daradmin0988("staff");

CMD:ac(playerid, params[])
{
	ShowDialog(playerid, DIALOG_ANTI_CHEAT);
	return 1;
}

CMD:darsed(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darsed <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Cantidad no válida.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	PI[to_player][pi_THIRST] = amount;
	SendFormatNotification(playerid, "La hidratación de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);

	SendCmdLogToAdmins(playerid, "darsed", params);
	return 1;
}
alias:darsed("setsed");

CMD:darhambre(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darhambre <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 100.0) return SendNotification(playerid, "Cantidad no válida.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	PI[to_player][pi_HUNGRY] = amount;
	SendFormatNotification(playerid, "La alimentación de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);

	SendCmdLogToAdmins(playerid, "darhambre", params);
	return 1;
}
alias:darhambre("sethambre", "sethungry");

CMD:dargaso(playerid, params[])
{
	new Float:val;
	if(sscanf(params, "f", val)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setgas <valor>");
	if(val < 0.0) return SendNotification(playerid, "Valor no válido.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo.");

	if(val > GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS]) val = GLOBAL_VEHICLES[vehicleid][gb_vehicle_MAX_GAS];
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS] = val;

	SendFormatNotification(playerid, "La gasolina del vehículo (%d) ahora es %.1f.", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_GAS]);

	SendCmdLogToAdmins(playerid, "setgas", params);
	return 1;
}

CMD:fixveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "d", vehicleid)) { }
	if(!vehicleid) return SendNotification(playerid, "No estás en un vehículo o usa /fixveh <vehicle_id>.");
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");

	if(IsPlayerInVehicle(playerid, vehicleid)) RepairVehicleEx(vehicleid, playerid);
	else
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RepairVehicleEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER]);
		else RepairVehicleEx(vehicleid);
	}
	SendFormatNotification(playerid, "Vehículo (%d) reparado.", vehicleid);

	SendCmdLogToAdmins(playerid, "fixveh", params);
	return 1;
}

CMD:darvida(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darvida <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 10000.0) return SendNotification(playerid, "Valor no válido.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerHealthEx(to_player, amount);
	SendFormatNotification(playerid, "La vida de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);

	SendCmdLogToAdmins(playerid, "darvida", params);
	return 1;
}
alias:darvida("setvida");

CMD:darchale(playerid, params[])
{
	new to_player, Float:amount;
	if(sscanf(params, "uf", to_player, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darchale <player_id> <valor>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(amount < 0.0 || amount > 10000.0) return SendNotification(playerid, "Valor no válido.");
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerArmourEx(to_player, amount);
	SendFormatNotification(playerid, "El chaleco de %s (%d) ahora es %.1f.", PI[to_player][pi_NAME], to_player, amount);

	SendCmdLogToAdmins(playerid, "darchale", params);
	return 1;
}
alias:darchale("setchaleco");

CMD:darnivel(playerid, params[])
{
	new to_player, level;
	if(sscanf(params, "ud", to_player, level)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darnivel <player_id> <nivel>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][1]);

	PI[to_player][pi_REP] = 1;
	PI[to_player][pi_LEVEL] = level;
	UpdateReputationTextDraws(to_player);
	SetPlayerSkillLevels(to_player);

	SendFormatNotification(to_player, "~g~¡Felicidades! ~w~Has subido al nivel %d.", PI[to_player][pi_LEVEL]);
	SetPlayerScore(to_player, PI[to_player][pi_LEVEL]);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);

	PI[to_player][pi_TIME_FOR_REP] = TIME_FOR_REP;
	PLAYER_TEMP[to_player][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET time_playing = %d, level = %d, rep = %d, time_for_rep = %d, payday_rep = %d WHERE id = %d;", PI[to_player][pi_TIME_PLAYING], PI[to_player][pi_LEVEL], PI[to_player][pi_REP], TIME_FOR_REP, PI[to_player][pi_PAYDAY_REP], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][1]);
	PLAYER_TEMP[to_player][pt_TIMERS][1] = SetTimerEx("AddPlayerReputation", PI[to_player][pi_TIME_FOR_REP], false, "i", to_player);

	SendFormatNotification(playerid, "El nivel de %s (%d) ahora es %d.", PI[to_player][pi_NAME], to_player, PI[to_player][pi_LEVEL]);

	SendCmdLogToAdmins(playerid, "setlevel", params);
	return 1;
}
alias:darnivel("setnivel", "darlevel");

CMD:dartrabajo(playerid, params[])
{
	new to_player, work, set;
	if(sscanf(params, "udd", to_player, work, set)) return SendNotification(playerid, "~r~Modo de uso:~w~ /dartrabajo <player_id> <work> <set>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendNotification(playerid, "No se puede cambiar el trabajo del jugador porque está de servicio en su trabajo.");
	if(work < 0 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido, para verlos usa /works.");

	new player_jobs = CountPlayerJobs(to_player);
	if(PI[to_player][pi_VIP] == 2)
	{
		if(player_jobs >= MAX_SU2_WORKS && set) return SendFormatNotification(playerid, "El límite de trabajos para este jugador es %d.", player_jobs);
	}
	else if(PI[to_player][pi_VIP] == 1)
	{
		if(player_jobs >= MAX_SU_WORKS && set) return SendFormatNotification(playerid, "El límite de trabajos para este jugador es %d.", player_jobs);
	}
	else if(player_jobs >= MAX_NU_WORKS && set) return SendFormatNotification(playerid, "El límite de trabajos para este jugador es %d.", player_jobs);

	if(set)
	{

		if(work == WORK_POLICE || work == WORK_MECANICO || work == WORK_FBI)
		{
			if(GetIDFaccionPlayer(to_player) != -1) return SendNotification(playerid, "No puedes asignarle este trabajo ya que actualmente pertenece a otra facción.");

			if(work == WORK_POLICE)
			{
				PI[to_player][pi_PLACA_PD] = random(10000000);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);
			}

			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);

			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;
		}
		else
		{
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);
		}

		PLAYER_WORKS[to_player][work][pwork_SET] = 1;
		SendClientMessageEx(to_player, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has conseguido tu trabajo de %s.", work_info[work][work_info_NAME]);
		SendClientMessage(to_player, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/trabajo {FFFFFF}para ver como trabajar aquí.");

	}
	else
	{
		if(work == WORK_POLICE || work == WORK_MECANICO || work == WORK_FBI)
		{
			if(work == WORK_POLICE)
			{
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				PI[to_player][pi_PLACA_PD] = 0;
			}

			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0, level = 0 WHERE id_player = %d AND id_work = %d;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);

			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 0;
		}
		else
		{
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET `set` = 0 WHERE id_player = %d AND id_work = %d;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);
		}

		PLAYER_WORKS[to_player][work][pwork_SET] = 0;
		SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Has abandonado tu trabajo de %s.", work_info[work][work_info_NAME]);
	}

	SendFormatNotification(playerid, "El trabajo %s de %s (%d) es: '%d'.", work_info[ work ][work_info_NAME], PI[to_player][pi_NAME], to_player, set);
	SendCmdLogToAdmins(playerid, "setwork", params);
	return 1;
}
alias:dartrabajo("setjob", "setwork");

CMD:darexpjob(playerid, params[])
{
	new to_player, work, exp;
	if(sscanf(params, "udd", to_player, work, exp)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setworkexp <player_id> <work, para verlos /works> <exp>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(work < 0 || work >= sizeof work_info) return SendNotification(playerid, "El trabajo no es válido, para verlos usa /works.");
	if(!PLAYER_WORKS[to_player][ work ][pwork_SET]) return SendNotification(playerid, "El jugador no tiene el trabajo");

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", exp, PI[to_player][pi_ID], work);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	PLAYER_WORKS[to_player][ work ][pwork_LEVEL] = exp;
	SendFormatNotification(playerid, "La experiencia de %s (%d) en el trabajo '%s' ahora es %d.", PI[to_player][pi_NAME], to_player, work_info[ work ][work_info_NAME], exp);
	SendCmdLogToAdmins(playerid, "setworkexp", params);
	return 1;
}

CMD:setcash(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setcash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	SetPlayerCash(to_player, value);
	SendFormatNotification(playerid, "El dinero de %s (%d) ahora es %d.", PI[to_player][pi_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setcash", params);
	return 1;
}

CMD:dardinero(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /givecash <player_id> <amount>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	GivePlayerCash(to_player, value, true, value < 0 ? true : false);
	SendFormatNotification(playerid, "El jugador %s (%d) ha recibido %d.", PI[to_player][pi_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "givecash", params);
	return 1;
}

CMD:setbmlevel(playerid, params[])
{
	new to_player, value;
	if(sscanf(params, "ud", to_player, value)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setbmlevel <player_id> <level>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	PI[to_player][pi_BLACK_MARKET_LEVEL] = value;
	SendFormatNotification(playerid, "El nivel 'black_market' de %s (%d) ahora es %d.", PI[to_player][pi_NAME], to_player, value);

	SendCmdLogToAdmins(playerid, "setbmlevel", params);
	return 1;
}

CMD:aa(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "~r~Modo de uso:~w~ /aa [mensaje]");
	new str[145]; format(str, 145, "[SERVIDOR]: {0CEDE3}%s", params);
	SendClientMessageToAll(0xD90CEDFF, str);

	SendCmdLogToAdmins(playerid, "sv", params);
	return 1;
}
alias:aa("sv");

CMD:cord(playerid, params[])
{
	new Float:p[4], interior, vw;
	if(sscanf(params, "p<,>ffffdd", p[0], p[1], p[2], p[3], interior, vw)) return SendNotification(playerid, "~r~Modo de uso:~w~ /cord [X], [Y], [Z], [ANGLE], [INTERIOR], [VIRTUAL WORLD]");

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		SetVehiclePosEx(vehicleid, p[0], p[1], p[2]);
		LinkVehicleToInteriorEx(vehicleid, interior);
		SetVehicleVirtualWorld(vehicleid, vw);

		SetPlayerInterior(playerid, interior);
		SetPlayerVirtualWorld(playerid, vw);
	}
	else SetPlayerPosEx(playerid, p[0], p[1], p[2], p[3], interior, vw);
	return 1;
}

GetVehicleModelByName(vehname[])
{
	new modelid = -1;
	for(new i = 0; i < sizeof VEHICLE_INFO; i ++)
	{
		if(strfind(VEHICLE_INFO[i][vehicle_info_NAME], vehname, true) != -1)
		{
			modelid = i + 400;
			break;
		}
	}
	return modelid;
}

CMD:payday(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /payday [Player/Name]");
	PlayerPayday(to_player);
	return 1;
}

CMD:v(playerid, params[])
{
	new modelid, vehname[24], color1 = 1, color2 = 1;
	if(!sscanf(params, "ddd", modelid, color1, color2)) { }
	else if(!sscanf(params, "d", modelid)) { }
	else if(!sscanf(params, "s[24]dd", vehname, color1, color2)) { modelid = GetVehicleModelByName(vehname); }
	else if(!sscanf(params, "s[24]", vehname)) { modelid = GetVehicleModelByName(vehname); }
	else return SendNotification(playerid, "~r~Modo de uso:~w~ /v <modelid/name> <color 1 = 1> <color 2 = 1>");

	if(modelid < 400 || modelid > 611) return SendNotification(playerid, "Modelo de vehículo no válido.");
	if(color1 < 0 || color1 > 255 || color2 < 0 || color2 > 255) return SendNotification(playerid, "Color de vehículo no válido.");

	new Float:p[4];
	GetPlayerPos(playerid, p[0], p[1], p[2]);
	GetPlayerFacingAngle(playerid, p[3]);

	new vid = AddTestVehicle(false, modelid, p[0], p[1], p[2], p[3], color1, color2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, vid, 0);

	GLOBAL_VEHICLES[vid][gb_vehicle_PARAMS_ENGINE] = 1;
	UpdateVehicleParams(vid);

	SendCmdLogToAdmins(playerid, "v", params);
	return 1;
}

CMD:dv(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(sscanf(params, "d", vehicleid)) { }
	if(!vehicleid) return SendNotification(playerid, "Error: no estás en ningún vehículo de prueba o usa /dv <vehicle_id>.");
	if(!GLOBAL_VEHICLES[vehicleid][gb_vehicle_VALID]) return SendNotification(playerid, "Vehículo no válido.");
	if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_TYPE] != VEHICLE_TYPE_TEST) return SendNotification(playerid, "Error: no estás en ningún vehículo de prueba o usa /dv <vehicle_id>..");

	DestroyVehicleEx(vehicleid);

	SendNotification(playerid, "Vehículo de prueba destruido.");
	return 1;
}


CMD:restart(playerid, params[])
{
	mysql_tquery(mysql_db, "UPDATE player SET connected = 0, playerid = 0;");
	SendRconCommand("gmx");
	return 1;
}

/*CMD:nombre(playerid, params[])
{
	if(CHANGE_NAME_SD_PRICE > PI[playerid][pi_COINS])
	{
		SendFormatNotification(playerid, "Te faltan %d "SERVER_COIN" para poder cambiarte el nombre.", CHANGE_NAME_SD_PRICE - PI[playerid][pi_COINS]);
		return 1;
	}

	ShowDialog(playerid, DIALOG_CHANGE_NAME);
	return 1;
}*/
//alias:nombre("cname");

CMD:correo(playerid, params[])
{
	ShowDialog(playerid, DIALOG_CHANGE_EMAIL);
	return 1;
}
alias:correo("email", "mail");

CMD:darnametemp(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setnametemp <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	if(SetPlayerName(to_player, new_name) == 1)
	{
		for(new i = 0; i < 24; i++)
		{
			if(new_name[i] == '_')
			{
				new_name[i] = ' ';
			}
		}

		format(PLAYER_TEMP[to_player][pt_RP_NAME], 24, "%s", new_name);
		SendNotification(playerid, "Nombre cambiado temporalmente.");
	}
	else SendNotification(playerid, "Nombre no válido.");
	return 1;
}

CMD:darnameplayer(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setnameplayer <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	SetRolePlayNames(to_player);
	SetPlayerName(to_player, PI[to_player][pi_NAME]);
	SendNotification(playerid, "Nombre cambiado.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new to_player, new_name[24];
	if(sscanf(params, "us[24]", to_player, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setname <player_id> <nuevo nombre>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(!IsValidRPName(new_name)) return SendFormatNotification(playerid, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

	inline OnInfoQueryLoad(data[])
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows) SendFormatNotification(playerid, "El nombre '%s' está en uso.", new_name);
			else
			{
				format(PLAYER_TEMP[to_player][pt_NAME], 24, "%s", new_name);
				format(PI[to_player][pi_NAME], 24, "%s", new_name);
				SetRolePlayNames(to_player);
				SetPlayerName(to_player, new_name);

				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, PI[to_player][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				for(new i = 0; i != MAX_PROPIEDADES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					if(PROPERTY_INFO[i][property_OWNER_ID] != PI[to_player][pi_ID]) continue;

					new label_str[256];
					format
					(
						label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{"#PRIMARY_COLOR"}·{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
							{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], PI[to_player][pi_NAME]
					);
					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}

				SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Tu nombre ha sido cambiado a '%s'", new_name);
				SendFormatNotification(playerid, "El nombre del jugador ha sido cambiado a '%s'", new_name);

				SendCmdLogToAdmins(playerid, "setname", data);
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad, "s", params);
	return 1;
}

CMD:vendercasa(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendNotification(playerid, "~r~Modo de uso:~w~ /vendercasa <id>");
	if(id_property <= 0) return SendNotification(playerid, "~r~Modo de uso:~w~ /vendercasa < id > 0 >");

	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	if(!PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Esta propiedad ya está en venta.");


	PROPERTY_INFO[ index ][property_SOLD] = false;
	PROPERTY_INFO[ index ][property_CREW] = false;
	PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
	PROPERTY_INFO[ index ][property_CREW_ID] = 0;
	format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

	new info[3];
	UpdateUnnocupiedPropertyLabel(index);

	DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

	PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
	info[0] = PICKUP_TYPE_PROPERTY;
	info[1] = index; // Index
	info[2] = 2; // Pickup Exterior
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_player = NULL, id_territory = NULL WHERE id = %d;", PROPERTY_INFO[ index ][property_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	SendFormatNotification(playerid, "Propiedad (%d) expropiada.", PROPERTY_INFO[ index ][property_ID]);

	SendCmdLogToAdmins(playerid, "vendercasa", params);
	return 1;
}
CMD:ircasa(playerid, params[])
{
	new casaid;
	if(sscanf(params, "d", casaid)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ircasa <casa id>");
	new index = GetPropertyIndexByID(casaid);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	SetPlayerPosEx(playerid, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], PROPERTY_INFO[ index ][property_EXT_ANGLE], PROPERTY_INFO[ index ][property_EXT_INTERIOR], 0, false, true);
	SendFormatNotification(playerid, "Fuiste a la posición de la casa ID %d", casaid);
	return 1;
}
CMD:irgaraje(playerid, params[])
{
	new garajeid;
	if(sscanf(params, "d", garajeid)) return SendNotification(playerid, "~r~Modo de uso:~w~ /irgaraje <casa id>");
	new index = GetPropertyIndexByID(garajeid);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	garajeid = GetGarajeIndexByID(PROPERTY_INFO[ index ][property_GARAJE]);
	if(garajeid == -1) return SendNotification(playerid, "Esa casa no tiene garaje.");

	SetPlayerPosEx(playerid, GARAJE_INFO[ garajeid ][garaje_EXT_X], GARAJE_INFO[ garajeid ][garaje_EXT_Y], GARAJE_INFO[ garajeid ][garaje_EXT_Z], GARAJE_INFO[ garajeid ][garaje_EXT_ANGLE], GARAJE_INFO[ garajeid ][garaje_EXT_INTERIOR], 0, false, true);
	SendFormatNotification(playerid, "Fuista a la posición del garaje ID %d", garajeid);
	return 1;
}

CMD:interiorcasa(playerid, params[])
{
	new int_type;
	if(sscanf(params, "d", int_type)) return SendNotification(playerid, "~r~Modo de uso:~w~ /interiorcasa <interior>");
	if(int_type < 0 || int_type >= sizeof PROPERTY_INTERIORS) return SendFormatNotification(playerid, "Error, rango de interior: 0-%d", sizeof(PROPERTY_INTERIORS) - 1);

	SetPlayerPosEx(playerid, PROPERTY_INTERIORS[int_type][property_INT_X], PROPERTY_INTERIORS[int_type][property_INT_Y], PROPERTY_INTERIORS[int_type][property_INT_Z], PROPERTY_INTERIORS[int_type][property_INT_ANGLE], PROPERTY_INTERIORS[int_type][property_INT_INTERIOR], 0, false, true);
	return 1;
}
alias:interiorcasa("gotopropertie");

CMD:setpass(playerid, params[])
{
	new to_account, new_pass[MAX_PASS_LENGTH + 1];
	if(sscanf(params, "ds[19]", to_account, new_pass)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setpass <DB-ID> <pass>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);
				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, no es necario cambiar la contraseña.", name, id, pid);
					else
					{
						new salt[16], salt_ex[16], pass_ex[64 + 1];
						getRandomSalt(salt);
						format(salt_ex, 16, "%s", salt);
						SHA256_PassHash(new_pass, salt_ex, pass_ex, 64 + 1);

						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET salt = '%e', pass = '%e' WHERE id = %d;", salt_ex, pass_ex, id);
						mysql_tquery(mysql_db, QUERY_BUFFER);

						SendFormatNotification(playerid, "La contraseña de '%s' ahora es: %s", name, new_pass);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:delete(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendNotification(playerid, "~r~Modo de uso:~w~ /delete <DB-ID>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
				{
					if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado para eliminarlo debe estar desconectado, utilice kick, su player_id: %d.", name, id, pid);
					else
					{
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM player WHERE id = %d;", id);
						mysql_tquery(mysql_db, QUERY_BUFFER);

						new ex_properties;
						for(new index = 0; index != MAX_PROPIEDADES; index ++)
						{
							if(!PROPERTY_INFO[index][property_VALID]) continue;
							if(!PROPERTY_INFO[index][property_SOLD]) continue;
							if(PROPERTY_INFO[index][property_OWNER_ID] != id) continue;

							PROPERTY_INFO[ index ][property_SOLD] = false;
							PROPERTY_INFO[ index ][property_OWNER_ID] = 0;
							format(PROPERTY_INFO[ index ][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[ index ][property_ID]);

							new info[3];
							UpdateUnnocupiedPropertyLabel(index);

							DestroyDynamicPickup(PROPERTY_INFO[ index ][property_EXT_PICKUP_ID]);
							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

							PROPERTY_INFO[ index ][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[ index ][property_EXT_X], PROPERTY_INFO[ index ][property_EXT_Y], PROPERTY_INFO[ index ][property_EXT_Z], 0, PROPERTY_INFO[ index ][property_EXT_INTERIOR]);
							info[0] = PICKUP_TYPE_PROPERTY;
							info[1] = index; // Index
							info[2] = 2; // Pickup Exterior
							Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[ index ][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

							ex_properties ++;
						}


						SendFormatNotification(playerid, "CUENTA (Nombre '%s' DB-ID: '%d') ha sido eliminada.", name, id);
						if(ex_properties > 0) SendFormatNotification(playerid, "Se han expropiado '%d' propiedades del jugador eliminado.", ex_properties);

						new str[145]; format(str, 145, "[ADMIN] {FFFFFF}%s (%d) ha {7C007D}eliminado{FFFFFF} el usuario '%s'", PI[playerid][pi_NAME], playerid, name);
						SendMessageToAdmins(0xDE00FFFF, str);
					}
				}
				else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

/* CONSTRUCTOR DE PROPIEDADES */
CMD:eliminarcasa(playerid, params[])
{
	new id_property;
	if(sscanf(params, "d", id_property)) return SendNotification(playerid, "~r~Modo de uso:~w~ /eliminarcasa <casa id>");
	if(id_property <= 0) return SendNotification(playerid, "~r~Modo de uso:~w~ /eliminarcasa < id >");

	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM properties WHERE id = %d;", PROPERTY_INFO[index][property_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	if(PROPERTY_INFO[index][property_GARAJE] != -1)//si tiene garaje la casa
	{
		new garajeid = GetGarajeIndexByID(PROPERTY_INFO[index][property_GARAJE]);

		if(IsValidDynamic3DTextLabel(GARAJE_INFO[garajeid][garaje_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(GARAJE_INFO[garajeid][garaje_EXT_LABEL_ID]);
		if(IsValidDynamic3DTextLabel(GARAJE_INFO[garajeid][garaje_INT_LABEL_ID])) DestroyDynamic3DTextLabel(GARAJE_INFO[garajeid][garaje_INT_LABEL_ID]);
		new reset[Garaje_Info_Enum]; GARAJE_INFO[garajeid] = reset;
	}

	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_EXT_LABEL_ID]);
	if(IsValidDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID])) DestroyDynamic3DTextLabel(PROPERTY_INFO[index][property_INT_LABEL_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_EXT_PICKUP_ID]);
	if(IsValidDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID])) DestroyDynamicPickup(PROPERTY_INFO[index][property_INT_PICKUP_ID]);
	new reset[Property_Info_Enum]; PROPERTY_INFO[index] = reset;

	TOTAL_PROPIEDADES_CARGADAS --;

	SendFormatNotification(playerid, "PROPIEDAD %d ELIMINADA.", id_property);
	SendFormatNotification(playerid, "PROPIEDADES: %d/%d", TOTAL_PROPIEDADES_CARGADAS, MAX_PROPIEDADES);

	SendCmdLogToAdmins(playerid, "eliminarcasa", params);
	return 1;
}
alias:eliminarcasa("eliminarprop");

CMD:editarcasa(playerid, params[])
{
	new id_property, new_int;
	if(sscanf(params, "dddddd", id_property, new_int, PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendNotification(playerid, "~r~Modo de uso:~w~ /editarcasa <id> <interior> <nivel> <precio> <vip level> <coins>");
	if(id_property <= 0) return SendNotification(playerid, "ID no válida.");

	new index = GetPropertyIndexByID(id_property);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	if(PROPERTY_INFO[index][property_SOLD]) return SendNotification(playerid, "Solo se pueden modificar propiedades que están libres.");

	if(new_int < 0 || new_int >= sizeof(PROPERTY_INTERIORS)) return SendNotification(playerid, "El interior elegido no es válido.");

	PROPERTY_INFO[index][property_ID_INTERIOR] = new_int;
	PROPERTY_INFO[index][property_PRICE] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1];
	PROPERTY_INFO[index][property_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0];
	PROPERTY_INFO[index][property_EXTRA] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3];
	PROPERTY_INFO[index][property_VIP_LEVEL] = PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2];
	PROPERTY_INFO[index][property_PRICE_BASE] = floatround(floatdiv(PROPERTY_INFO[index][property_PRICE], MULTIPLIER_PROPERITES));

	if(PROPERTY_INFO[index][property_EXTRA]) PROPERTY_INFO[index][property_PRICE] = 0;
	if(PROPERTY_INFO[index][property_VIP_LEVEL]) PROPERTY_INFO[index][property_LEVEL] = 1;

	UpdateUnnocupiedPropertyLabel(index);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET id_interior = %d, price = %d, level = %d, extra = %d, vip_level = %d WHERE id = %d;", PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_PRICE_BASE], PROPERTY_INFO[index][property_LEVEL], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_VIP_LEVEL], PROPERTY_INFO[index][property_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "editarcasa", params);
	return 1;
}
alias:editarcasa("editarprop");

CMD:poscasa(playerid, params[])
{
	new casa_id;
	if(sscanf(params, "d", casa_id)) return SendNotification(playerid, "~r~Modo de uso:~w~ /poscasa <casaID>");
	if(casa_id <= 0) return SendNotification(playerid, "ID no válida.");

	new index = GetPropertyIndexByID(casa_id);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	PROPERTY_INFO[index][property_EXT_X] = Pos[0];
	PROPERTY_INFO[index][property_EXT_Y] = Pos[1];
	PROPERTY_INFO[index][property_EXT_Z] = Pos[2];
	PROPERTY_INFO[index][property_EXT_ANGLE] = Pos[3] + 180;

	UpdateUnnocupiedPropertyLabel(index);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET ext_x = %f, ext_y = %f, ext_z = %f, ext_angle = %f WHERE id = %d;", PROPERTY_INFO[index][property_EXT_X], PROPERTY_INFO[index][property_EXT_Y], PROPERTY_INFO[index][property_EXT_Z], PROPERTY_INFO[index][property_EXT_ANGLE], PROPERTY_INFO[index][property_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "poscasa", params);
	return 1;
}

CMD:mapgh(playerid, params[])
{
	if(TOTAL_PROPIEDADES_CARGADAS >= MAX_PROPIEDADES) return SendNotification(playerid, "Límite alcanzado.");

	if(sscanf(params, "dddd", PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][0], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][1], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][2], PLAYER_TEMP[playerid][pt_PROPERTY_CINFO][3])) return SendNotification(playerid, "~r~Modo de uso:~w~ /mapgh <nivel> <precio> <vip level> <coins>");

	GetPlayerPos(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_X], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Y], PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_Z]);
	GetPlayerFacingAngle(playerid, PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_ANG]);
	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_EXT_INT] = GetPlayerInterior(playerid);

	PLAYER_PROPERTY_CONSTRUCTOR[playerid][player_property_creator_ENABLED] = true;
	for(new i = 0; i != 6; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_PROPERTY_CONSTRUCTOR][i]);

	UpdatePlayerPropertyContructor(playerid);
	SendCmdLogToAdmins(playerid, "mapgh", params);
	return 1;
}
alias:mapgh("crearprop");

CMD:mapgar(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /mapgar <Casa ID>");
	if(params[0] <= 0) return SendNotification(playerid, "ID no válida.");

	new index = GetPropertyIndexByID(params[0]);
	if(index == -1) return SendNotification(playerid, "PROPIEDAD ID no encontrada.");

//	if(PROPERTY_INFO[index][property_GARAJE] = 1) return SendNotification(playerid, "Esa propiedad ya tiene un Garaje.");

	new slot = GetEmptyGarajeSlot();
	if(slot == -1) return SendNotification(playerid, "No hay mas slots.");

	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	GARAJE_INFO[slot][garaje_VALID] = true;
	GARAJE_INFO[slot][garaje_EXT_X] = Pos[0];
	GARAJE_INFO[slot][garaje_EXT_Y] = Pos[1];
	GARAJE_INFO[slot][garaje_EXT_Z] = Pos[2];
	GARAJE_INFO[slot][garaje_EXT_ANGLE] = Pos[3];
	GARAJE_INFO[slot][garaje_EXT_INTERIOR] = GetPlayerInterior(playerid);
	GARAJE_INFO[slot][garaje_PROPERTY] = PROPERTY_INFO[index][property_ID];

	inline OnGarajeInserted()
	{
		GARAJE_INFO[slot][garaje_ID] = cache_insert_id();
		CreateGarajeInfo(slot);

		SendFormatNotification(playerid, "Garaje creado, id: %d (%d/%d) casa: %d.", GARAJE_INFO[slot][garaje_ID], slot, MAX_PROPIEDADES, PROPERTY_INFO[index][property_ID]);
	}
	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO garajes (ext_x, ext_y, ext_z, ext_angle, ext_interior, casa_id)\
			VALUES (%f, %f, %f, %f, %d, %d);\
		",
			GARAJE_INFO[slot][garaje_EXT_X], GARAJE_INFO[slot][garaje_EXT_Y], GARAJE_INFO[slot][garaje_EXT_Z], GARAJE_INFO[slot][garaje_EXT_ANGLE],
			GARAJE_INFO[slot][garaje_EXT_INTERIOR], PROPERTY_INFO[index][property_ID]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnGarajeInserted);
	return 1;
}

SendChatMessageToAdmins(color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
			if(PI[i][pi_ADMIN_LEVEL] >= 1 && PLAYER_TEMP[i][pt_SEE_ADM_CHAT]) //&& PLAYER_TEMP[i][pt_ADMIN_SERVICE])
				SendClientMessage(i, color, message);
	return 1;
}

SendMessageToAdmins(color, message[], level = 1)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
			if(PI[i][pi_ADMIN_LEVEL] > level && PLAYER_TEMP[i][pt_SEE_ADM_LOG] && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
				SendClientMessage(i, color, message);

	return 1;
}

SendCmdLogToAdmins(playerid, cmdtext[], params[])
{
	new message[145];
	if(isnull(params)) format(message, sizeof message, "[ADMIN] %s (%d) ha utilizado el comando /%s", PI[playerid][pi_NAME], playerid, cmdtext);
	else format(message, sizeof message, "[ADMIN] %s (%d) ha utilizado el comando /%s %s", PI[playerid][pi_NAME], playerid, cmdtext, params);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
			if(PI[i][pi_ADMIN_LEVEL] >= PI[playerid][pi_ADMIN_LEVEL] && PLAYER_TEMP[i][pt_SEE_ACMD_LOG] && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
				SendClientMessage(i, 0x8300FFFF, message);

	return 1;
}

SendMessageToAdminsAC(color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
			if(PI[i][pi_ADMIN_LEVEL] > 1 && PLAYER_TEMP[i][pt_SEE_AC_LOG] && PLAYER_TEMP[i][pt_ADMIN_SERVICE])
				SendClientMessage(i, color, message);

	return 1;
}

RespawnAllUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			DestroyVehicleEx(i);
			continue;
		}

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

RespawnGlobalUnoccupiedVehicles()
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_PERSONAL) continue;
		if(GLOBAL_VEHICLES[i][gb_vehicle_OCCUPIED]) continue;

		SetVehicleToRespawnEx(i);
	}
	return 1;
}

CMD:kill(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		new now = gettime();
		if(now < PLAYER_TEMP[playerid][pt_DEATH_TIME] + 30)
		{
			new time = 30 - (now - PLAYER_TEMP[playerid][pt_DEATH_TIME]);
			SendFormatNotification(playerid, "Tienes que esperar %s minutos para poder usar este comando.", TimeConvert(time));
			return 1;
		}
	}

	SetPlayerHealthEx(playerid, 0.0);
	return 1;
}

GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[16], ip_count = 0;
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if(IsPlayerConnected(x))
		{
			GetPlayerIp(x, against_ip, 16);
			if(!strcmp(against_ip, test_ip)) ip_count++;
		}
	}
	return ip_count;
}

getRandomSalt(salt[], length = sizeof salt)
{
	for(new i = 0; i != length; i ++)
	{
		salt[i] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
	}
	return true;
}

GetTickDiff(newtick, oldtick)
{
	if (oldtick < 0 && newtick >= 0)
	{
		return newtick - oldtick;
	} else if (oldtick >= 0 && newtick < 0 || oldtick > newtick)
	{
		return (cellmax - oldtick + 1) - (cellmin - newtick);
	}
	return newtick - oldtick;
}

GetPlayerSpeed(vehicleid)
{
	new Float:xPos[3];
	GetPlayerVelocity(vehicleid, xPos[0], xPos[1], xPos[2]);
	return floatround(floatsqroot(xPos[0] * xPos[0] + xPos[1] * xPos[1] + xPos[2] * xPos[2]) * 170.00);
}

ShowPlayerShop(playerid)
{
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP][4]);

	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = true;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 6;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;

	UpdatePlayerShop(playerid);
	SelectTextDrawEx(playerid, 0x00a39bFF);
	return 1;
}

UpdatePlayerShop(playerid)
{
	switch(PLAYER_TEMP[playerid][pt_SHOP_STATE])
	{
		case PLAYER_SHOP_STATE_ALL:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "+_Publicar_anuncio");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "-_Mis_anuncios");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Cerrar");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			//
			inline OnShopLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					for(new i = 0; i != rows; i ++)
					{
						new connected, id_ad, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "id_ad", id_ad);
						cache_get_value_name_int(i, "price", price);
						cache_get_value_name_int(i, "modelid", modelid);
						cache_get_value_name_float(i, "rx", rx);
						cache_get_value_name_float(i, "ry", ry);
						cache_get_value_name_float(i, "rz", rz);
						cache_get_value_name_float(i, "zoom", zoom);
						cache_get_value_name_int(i, "vcol1", vcol1);
						cache_get_value_name_int(i, "vcol2", vcol2);
						PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = id_ad;

						new Float:Td_Pos[2], td_str[64];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);

						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						mysql_tquery_inline(mysql_db, "SELECT COUNT(id) FROM shop;", using inline OnCountQueryLoad);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS id_ad FROM shop INNER JOIN player ON shop.id_player = player.id ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT], PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopLoad);
			return 1;
		}
		case PLAYER_SHOP_STATE_MY_ADS:
		{
			if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
			{
				PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
				PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
			}
			TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
			PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

			for(new i = 0; i != 6; i ++)
			{
				PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
				TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
				if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
			}

			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Atrás");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Siguiente");
			PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Anterior");

			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
			PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);


			DestroyArticleShopTextDraws(playerid);

			//
			inline OnShopLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new td_str[64];
					for(new i = 0; i != rows; i ++)
					{
						new connected, ad_id, price, modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2;
						cache_get_value_name_int(i, "connected", connected);
						cache_get_value_name_int(i, "ad_id", ad_id);
						cache_get_value_name_int(i, "price", price);
						cache_get_value_name_int(i, "modelid", modelid);
						cache_get_value_name_float(i, "rx", rx);
						cache_get_value_name_float(i, "ry", ry);
						cache_get_value_name_float(i, "rz", rz);
						cache_get_value_name_float(i, "zoom", zoom);
						cache_get_value_name_int(i, "vcol1", vcol1);
						cache_get_value_name_int(i, "vcol2", vcol2);
						PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = ad_id;

						new Float:Td_Pos[2];
						switch(i)
						{
							case 0: Td_Pos = Float:{212.000000, 152.000000};
							case 1: Td_Pos = Float:{289.000000, 152.000000};
							case 2: Td_Pos = Float:{366.000000, 152.000000};
							case 3: Td_Pos = Float:{212.000000, 229.000000};
							case 4: Td_Pos = Float:{289.000000, 229.000000};
							case 5: Td_Pos = Float:{366.000000, 229.000000};
						}

						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = CreatePlayerTextDraw(playerid, Td_Pos[0], Td_Pos[1], "");
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 62.000000, 55.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], -1);
						if(connected) PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0xCCCCCCFF);
						else PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 0x666666FF);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], 5);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);

						format(td_str, sizeof td_str, "%s$", number_format_thousand(price));
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = CreatePlayerTextDraw(playerid, Td_Pos[0] + 31.0, Td_Pos[1] + 55.0, td_str);
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0.229333, 0.957037);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 2);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 255);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i], 0);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);

						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);

						inline OnCountQueryLoad()
						{
							new crows;
							if(cache_get_row_count(crows))
							{
								if(crows)
								{
									new count, pages;
									cache_get_value_index_int(0, 0, count);
									pages = GetDatabasePages(count, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);

									format(td_str, sizeof td_str, "-_%d/%d_-", PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] + 1, pages);
									PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE], td_str);
								}
							}
						}
						mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM shop WHERE id_player = %d;", PI[playerid][pi_ID]);
						mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
					}
				}
			}
			new limit1 = PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] * PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT];
			if(limit1 < 0) limit1 = 0;
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT player.connected, shop.*, shop.id AS ad_id FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id_player = %d ORDER BY player.connected DESC, shop.date DESC LIMIT %d, %d;", PI[playerid][pi_ID], limit1, PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopLoad);
			return 1;
		}
		case PLAYER_SHOP_STATE_AD:
		{
			inline OnShopAdLoad()
			{
				new rows;
				if(cache_get_row_count(rows))
				{
					new td_str[190];
					if(rows)
					{
						new id, id_player, type, price, text[24], modelid, Float:rx, Float:ry, Float:rz, Float:zoom, vcol1, vcol2, date[24], connected, name[24], phone_number;
						cache_get_value_name_int(0, "id", id);
						cache_get_value_name_int(0, "id_player", id_player);
						cache_get_value_name_int(0, "type", type);
						cache_get_value_name_int(0, "price", price);
						cache_get_value_name(0, "text", text);
						cache_get_value_name_int(0, "modelid", modelid);
						cache_get_value_name_float(0, "rx", rx);
						cache_get_value_name_float(0, "ry", ry);
						cache_get_value_name_float(0, "rz", rz);
						cache_get_value_name_float(0, "zoom", zoom);
						cache_get_value_name_int(0, "vcol1", vcol1);
						cache_get_value_name_int(0, "vcol2", vcol2);
						cache_get_value_name(0, "date", date);
						cache_get_value_name_int(0, "connected", connected);
						cache_get_value_name(0, "name", name);
						cache_get_value_name_int(0, "phone_number", phone_number);

						if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
						{
							PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
							PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
						}
						PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = CreatePlayerTextDraw(playerid, 212.000000, 179.000000, "");
						PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0.000000, 0.000000);
						PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 92.000000, 91.000000);
						PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 1);
						PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], -1);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 44284927);
						PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 5);
						PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], 0);
						PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], modelid);
						PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], rx, ry, rz, zoom);
						PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID], vcol1, vcol2);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
						TextDrawShowForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);

						format(td_str, sizeof td_str, "Artículo_n|_%d (%s)", id, date);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);

						switch(type)
						{
							case SHOP_ARTICLE_TYPE_PROPERTY: format(td_str, sizeof td_str, "Producto:_Propiedad~n~Precio:_%s$~n~~n~Descripción:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_VEHICLE: format(td_str, sizeof td_str, "Producto:_Vehículo~n~Precio:_%s$~n~~n~Descripción:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
							case SHOP_ARTICLE_TYPE_OTHER: format(td_str, sizeof td_str, "Producto:_Otros~n~Precio:_%s$~n~~n~Descripción:~n~%s~n~~n~Tlf:_%d_(%s)~n~%s", number_format_thousand(price), text, phone_number, connected ? "online" : "offline", name);
						}
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO], td_str);
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);

						for(new i = 0; i != 4; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][0], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][1], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "_");
						PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4], "Atrás");
						PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][4]);

						if(PI[playerid][pi_ID] == id_player)
						{
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2], "Modificar");
							PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3], "Eliminar");
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][2]);
							PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][3]);
						}

						for(new i = 0; i != 6; i ++)
						{
							PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
							TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
						}

						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);
						DestroyArticleShopTextDraws(playerid);
					}
					else
					{
						SendNotification(playerid, "Este anuncio ya no está disponible.");
						PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
					}
				}
				else
				{
					SendNotification(playerid, "Este anuncio ya no está disponible.");
					PLAYER_TEMP[playerid][pt_SHOP_STATE] = PLAYER_SHOP_STATE_ALL;
				}

			}
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT shop.*, player.connected, player.name, player.phone_number FROM shop INNER JOIN player ON shop.id_player = player.id WHERE shop.id = %d;", PLAYER_TEMP[playerid][pt_SHOP_SELECTED_ARTICLE_ID]);
			mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnShopAdLoad);
		}
	}
	return 1;
}

HidePlayerShop(playerid)
{
	HidePlayerDialog(playerid);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP][4]);

	PLAYER_TEMP[playerid][pt_SHOP_COME_FROM_MY_ADS] = false;
	PLAYER_TEMP[playerid][pt_SHOP] = false;
	PLAYER_TEMP[playerid][pt_SHOP_STATE] = 0;

	PLAYER_TEMP[playerid][pt_DIALOG_DB_LIMIT] = 0;
	PLAYER_TEMP[playerid][pt_DIALOG_DB_PAGE] = 0;

	if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID]);
		PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_MODELID] = PlayerText:INVALID_TEXT_DRAW;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLE_BOX]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_NUMBER]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLE_INFO]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PAGE]);

	for(new i = 0; i != 6; i ++)
	{
		PLAYER_TEMP[playerid][pt_SHOP_ARTICLE_ID][i] = 0;
		TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_ARTICLES_BOX][i]);
		if(i <= 4) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_BUTTONS][i]);
	}
	DestroyArticleShopTextDraws(playerid);

	CancelSelectTextDrawEx(playerid);
	return 1;
}

DestroyArticleShopTextDraws(playerid)
{
	for(new i; i < 6; i++)
	{
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_MODEL][i] = PlayerText:INVALID_TEXT_DRAW;
		}
		if(PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] != PlayerText:INVALID_TEXT_DRAW)
		{
			PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i]);
			PlayerTextdraws[playerid][ptextdraw_SHOP_ARTICLES_PRICE][i] = PlayerText:INVALID_TEXT_DRAW;
		}
	}
	return 1;
}

td_str_legal(text[])
{
	for(new i = 0; i != strlen(text); i ++)
	{
		if((text[i] >= 91 && text[i] <= 96) || (text[i] >= 58 && text[i] <= 64) || (text[i] < 48 && text[i] != 32) || text[i] > 122)
		{
			return false;
		}
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI][pwork_SET]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf2f224FF);
		}
	}

	if(PI[playerid][pi_WANTED_LEVEL] > 0)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_POLICE][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerWantedColor(playerid));
	}

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x4aba00FF);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(PLAYER_TEMP[playerid][pt_WANT_TAXI])
	{
		if(GetPlayerState(forplayerid) == PLAYER_STATE_DRIVER)
		{
			if(!PLAYER_WORKS[forplayerid][WORK_TAXI][pwork_SET]) return 1;
			if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_TAXI) return 1;
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0xf2f224FF);
		}
	}

	if(PI[playerid][pi_WANTED_LEVEL] > 0)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_POLICE][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_POLICE) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerWantedColor(playerid));
	}

	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK)
	{
		if(!PLAYER_WORKS[forplayerid][WORK_MEDIC][pwork_SET]) return 1;
		if(PLAYER_TEMP[forplayerid][pt_WORKING_IN] != WORK_MEDIC) return 1;
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x4aba00FF);
	}
	return 1;
}

GetPlayerPlantedPlants(playerid)
{
	new plants;

	for(new i = 0; i != MAX_PLANTS; i ++)
	{
		if(!PLANTS[i][plant_VALID]) continue;
		if(PLANTS[i][plant_PLANTED_BY_ACCOUNT_ID] == PI[playerid][pi_ID]) plants ++;
	}
	return plants;
}

forward StartPlayerJob(playerid, work, vehicleid);
public StartPlayerJob(playerid, work, vehicleid)
{
	switch(work)
	{
		case WORK_TAXI:
		{
			SetTaxiPlayerMarkers(playerid);
			ResetVehicleTaxiMeter(vehicleid);
			ShowPlayerTaxiMeter(playerid);

			new passenger = GetVehicleFirstPassenger(vehicleid);
			if(passenger != INVALID_PLAYER_ID)
			{
				ShowPlayerTaxiMeter(passenger);
				if(PLAYER_TEMP[passenger][pt_WANT_TAXI])
				{
					PLAYER_TEMP[passenger][pt_WANT_TAXI] = false;
					DisablePlayerJobMark(passenger, WORK_TAXI);
				}

				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_ENABLED] = true;
				GetVehiclePos(vehicleid, TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_X], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Y], TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_OLD_Z]);
				KillTimer(TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER]);
				TAXI_METER_VEHICLE[vehicleid][veh_taxi_meter_TIMER] = SetTimerEx("UpdateVehicleTaximeter", 4000, true, "iii", vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER], passenger);
			}
		}
		case WORK_TRUCK:
		{
			if(TRUCK_VEHICLE[vehicleid][truck_vehicle_LOADED])
			{
				if(TRUCK_VEHICLE[vehicleid][truck_vehicle_DELIVERED]) SendNotification(playerid, "El camión ya ha entregado la mercancía, ve al punto de partida para cobrar.");
				else SendNotification(playerid, "Ve a entregar la mercancía al punto marcado.");

				SetPlayerTruckCheckpoint(playerid, vehicleid);
			}
			else SendNotification(playerid, "Para comenzar a trabajar carga el camión en la zona indicada con una flecha amarilla.");
		}
		case WORK_TRAILERO:
		{
			if(TRAILER_VEHICLE[vehicleid][trailer_vehicle_LOADED])
			{
				if(TRAILER_VEHICLE[vehicleid][trailer_vehicle_DELIVERED]) SendNotification(playerid, "El trailer ya ha entregado la mercancía, ve al punto de partida para cobrar.");
				else SendNotification(playerid, "Ve a entregar la mercancía al punto marcado.");

				SetPlayerTrailerCheckpoint(playerid, vehicleid);
			}
			else SendNotification(playerid, "Para comenzar a trabajar conecta el trailer de una carga.");
		}
		case WORK_HARVESTER:
		{
			PLAYER_TEMP[playerid][pt_HARVERT_PROCCESS] = 0;
			SendNotification(playerid, "Ve hasta los puntos de control para completar el trabajo.");
			SendNotification(playerid, "Si te bajas de la cosechadora se cancelará el trabajo.");
			Set_HARVEST_Checkpoint(playerid);
		}
		case WORK_FUMIGATOR:
		{
			PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] = 0;
			SendNotification(playerid, "Ve hasta los puntos de control para completar el trabajo.");
			SendNotification(playerid, "Si te bajas del avión se cancelará el trabajo.");
			Set_FUMIGATOR_Checkpoint(playerid);

			GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 1;
			UpdateVehicleParams(vehicleid);
		}
		case WORK_LUMBERJACK:
		{
			PLAYER_TEMP[playerid][pt_PLAYER_CARRYING_TREE] = false;
			PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] = -1;

			DestroyPlayerKeyPress(playerid);
			DisablePlayerArmedWeapons(playerid);
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

			SendClientMessage(playerid,-1, "{"#SILVER_COLOR"}Los árboles que puedes talar están repartidos por la zona, si te alejas demasiado el trabajo se cancelará.");
		}
		case WORK_TRASH:
		{
			if(PI[playerid][pi_GENERO] == SEXO_MASCULINO)
			{
				SetPlayerSkin(playerid, 16);
				for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			}
		}
		case WORK_FBI:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s en servicio.", FBI_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ]);

			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]);
				PLAYER_TEMP[playerid][pt_WORK_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][pt_WORK_LABEL] = CreateDynamic3DTextLabel(label_str, 0x00EDFFCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetWantedPlayerMarkers(playerid);
			SetPlayerColorEx(playerid, 0x00479100);
			SetPlayerSkin(playerid, PI[playerid][pi_WORK_DUTY]);
		}
		case WORK_MECANICO:
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s en servicio.", MECANICO_RANKS[ PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL] ]);

			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]);
				PLAYER_TEMP[playerid][pt_WORK_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][pt_WORK_LABEL] = CreateDynamic3DTextLabel(label_str, 0x00EDFFCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetPlayerColor(playerid, 0x00FFFF00);
			SetPlayerSkin(playerid, PI[playerid][pi_WORK_DUTY]);
		}
		case WORK_POLICE: // Placa SAPD
		{
			new label_str[128];
			format(label_str, sizeof label_str, "%s | Nº%d | %c. %s", POLICE_RANKS[ PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] ], PI[playerid][pi_PLACA_PD], PLAYER_TEMP[playerid][pt_FIRST_NAME][0], PLAYER_TEMP[playerid][pt_SUB_NAME]);

			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]);
				PLAYER_TEMP[playerid][pt_WORK_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			PLAYER_TEMP[playerid][pt_WORK_LABEL] = CreateDynamic3DTextLabel(label_str, 0x00EDFFCC, 0.0, 0.0, 0.3, 20.0, playerid, .testlos = true);

			for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetWantedPlayerMarkers(playerid);
			SetPlayerColorEx(playerid, 0x3399FF00);
			SetPlayerSkin(playerid, PI[playerid][pi_WORK_DUTY]);
		}
		case WORK_PIZZA:
		{
			if(PI[playerid][pi_GENERO] == SEXO_MASCULINO)
			{
				SetPlayerSkin(playerid, 155);
				for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
				DisablePlayerArmedWeapons(playerid);
			}
			PLAYER_TEMP[playerid][pt_PIZZA_PROCCESS] = 0;
			PLAYER_TEMP[playerid][pt_DELIVERED_PIZZAS] = 0;
			SendNotification(playerid, "Para comenzar a repartir súbete a una moto de la pizzería.");
		}
		case WORK_MEDIC:
		{
			if(PI[playerid][pi_GENERO] == SEXO_MASCULINO) SetPlayerSkin(playerid, male_medic_skins[ random(sizeof(male_medic_skins)) ]);
			else SetPlayerSkin(playerid, 308);
			for(new i = 0; i != MAX_SU2_TOYS; i ++) RemovePlayerAttachedObject(playerid, i);
			SetInjuredPlayerMarkers(playerid);
		}
	}

	PLAYER_TEMP[playerid][pt_WORKING_IN] = work;
	return 1;
}

forward EndPlayerJob(playerid, work, bool:changeskin);
public EndPlayerJob(playerid, work, bool:changeskin)
{
	switch(PLAYER_TEMP[playerid][pt_WORKING_IN])
	{
		case WORK_TAXI:
		{
			if(PLAYER_TEMP[playerid][pt_TAXI_METER_ENABLED])
			{
				SetNormalPlayerMarkers(playerid);
				HidePlayerTaxiMeter(playerid);
			}
		}
		case WORK_TRUCK:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_DRIVER_USER_ID] == PI[playerid][pi_ID])
				{
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_LOADING])
					{
						HidePlayerDialog(playerid);
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
						SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
					}
					if(TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING])
					{
						TRUCK_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][truck_vehicle_UNLOADING] = false;
						KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][7]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TRUCK_LOAD][3]);
					}
				}
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_TRUCK_CHECKPOINT] = INVALID_STREAMER_ID;
			}
		}
		case WORK_HARVESTER:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_HARVERT_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_HARVESTER) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_FUMIGATOR:
		{
			if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
			{
				DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(WORK_VEHICLES[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][work_vehicle_WORK] == WORK_FUMIGATOR) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
		}
		case WORK_LUMBERJACK: CancelLumberjackWork(playerid);
		case WORK_FARMER: CancelPlayerPlanting(playerid);
		case WORK_TRASH:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}

			if(PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_JOB_STARTED])
				{
					if(PLAYER_TEMP[playerid][pt_TRASH_DRIVER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(playerid, TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_PASSENGER_ID], PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
					if(PLAYER_TEMP[playerid][pt_TRASH_PASSENGER])
					{
						SendClientMessage(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], -1, "{"#SILVER_COLOR"}El trabajo se ha cancelado porque tu compañero ha dejado de trabajar.");
						CancelTrashWork(TRASH_VEHICLES[ PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID] ][trash_vehicle_DRIVER_ID], playerid, PLAYER_TEMP[playerid][pt_TRASH_VEHICLE_ID]);
					}
				}
			}
		}
		case WORK_POLICE, WORK_MECANICO, WORK_FBI:
		{
			PLAYER_TEMP[playerid][pt_FRECUENCIA_RADIO] = 0;

			if(IsValidDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]))
			{
				DestroyDynamic3DTextLabel(PLAYER_TEMP[playerid][pt_WORK_LABEL]);
				PLAYER_TEMP[playerid][pt_WORK_LABEL] = Text3D:INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
				PI[playerid][pi_WORK_DUTY] = 0;
			}
			SetNormalPlayerMarkers(playerid);
			SetPlayerColorEx(playerid, PLAYER_COLOR);
		}
		case WORK_PIZZA:
		{
			if(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] != INVALID_VEHICLE_ID)
			{
				if(PIZZA_VEHICLE[ PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID] ][pizza_vehicle_DRIVER_AID] == PI[playerid][pi_ID]) SetVehicleToRespawnEx(PLAYER_TEMP[playerid][pt_LAST_VEHICLE_ID]);
			}
			if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
			{
				DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
				PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
			}
			if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
			{
				DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
				PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
			}
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}
		}
		case WORK_MEDIC:
		{
			if(changeskin)
			{
				SetPlayerSkin(playerid, PI[playerid][pi_SKIN]);
				SetPlayerToys(playerid);
			}
			SetNormalPlayerMarkers(playerid);
		}
	}

	EnablePlayerArmedWeapons(playerid);
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][ PLAYER_TEMP[playerid][pt_WORKING_IN] ][pwork_LEVEL], PI[playerid][pi_ID], PLAYER_TEMP[playerid][pt_WORKING_IN]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
	return 1;
}

CountPlayerJobs(playerid)
{
	new count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET]) count ++;
	}
	return count;
}

getPlayerWorks(playerid)
{
	new works[27 * sizeof(work_info)], count;
	for(new i = 1; i != sizeof(work_info); i ++)
	{
		if(PLAYER_WORKS[playerid][i][pwork_SET])
		{
			if(count > 0) strcat(works, ", ");
			strcat(works, work_info[i][work_info_NAME]);

			count ++;
		}
	}

	if(!count) works = "ninguno";
	return works;
}

SetPlayer_Pizza_Checkpoint(playerid, point)
{
	if(IsValidDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]))
	{
		DestroyDynamicCP(PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = INVALID_STREAMER_ID;
	}
	if(IsValidDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]))
	{
		DestroyDynamicActor(PLAYER_TEMP[playerid][pt_PIZZA_ACTOR]);
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = INVALID_STREAMER_ID;
	}

	if(point == -1)
	{
		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(2096.279785, -1797.436279, 12.982056, 3.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_FINISH;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_PIZZA_ACTOR] = CreateDynamicActor(minrand(0, 311), PIZZA_DELIVERY_POINT[point][0], PIZZA_DELIVERY_POINT[point][1], PIZZA_DELIVERY_POINT[point][2], PIZZA_DELIVERY_POINT[point][3], .playerid = playerid);

		new Float:pos[3];
		pos[0] = PIZZA_DELIVERY_POINT[point][0] + (1.5 * floatsin(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[1] = PIZZA_DELIVERY_POINT[point][1] + (1.5 * floatcos(-PIZZA_DELIVERY_POINT[point][3], degrees));
		pos[2] = PIZZA_DELIVERY_POINT[point][2];

		PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT] = CreateDynamicCP(pos[0], pos[1], pos[2], 1.0, 0, 0, playerid, 9999999999.0);

		new info[1];
		info[0] = CHECKPOINT_TYPE_PIZZA_DEL;
		Streamer_SetArrayData(STREAMER_TYPE_CP, PLAYER_TEMP[playerid][pt_PIZZA_CHECKPOINT], E_STREAMER_EXTRA_ID, info);
	}
	return 1;
}

randomEx(max, exception)
{
	new rand = random(max);
	while(rand == exception)
	{
		rand = random(max);
	}
	return rand;
}

SetPlayerSkillLevels(playerid)
{
	if(PI[playerid][pi_LEVEL] >= 4)
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN,		200);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 				40);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 		500);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 		999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 			50);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 				999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 					999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 			999);
	}
	else
	{
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	}
	return 1;
}

DeleteIlegalInv(playerid)
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET])
	{
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET seed_cannabis = 0, seed_crack = 0, cannabis = 0, crack = 0 WHERE id = %d;", PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM pweapons WHERE id_player = %d;", PI[playerid][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);
		ResetPlayerWeaponsEx(playerid);
	}

	PI[playerid][pi_SEED_CANNABIS] = 0;
	PI[playerid][pi_SEED_CRACK] = 0;
	PI[playerid][pi_CANNABIS] = 0;
	PI[playerid][pi_CRACK] = 0;
	return 1;
}

SetInjuredPlayerMarkers(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PI[i][pi_STATE] == ROLEPLAY_STATE_CRACK)
				{
					SetPlayerMarkerForPlayer(playerid, i, 0x4aba00FF);
				}
			}
		}
	}
	return 1;
}

DisablePlayerInjuredMark(playerid)
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(i == playerid) continue;
				if(!PLAYER_WORKS[i][WORK_MEDIC][pwork_SET]) continue;
				if(PLAYER_TEMP[i][pt_WORKING_IN] != WORK_MEDIC) continue;

				SetPlayerMarkerForPlayer(i, playerid, PLAYER_COLOR);
			}
		}
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "No puedes curar estando herido.");
	if(PI[playerid][pi_CREW] && CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes curar mientras tu banda está en combate.");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/curar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "El jugador no está conectado.");
	if(to_player == playerid) return SendNotification(playerid, "~r~Modo de uso: ~w~/curar [PlayerID/Nombre]");

	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, NEARS_PLAYERS_DISTANCE, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");

	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Esta persona no está herida.");

	if(PLAYER_TEMP[to_player][pt_CUFFED] || PLAYER_TEMP[to_player][pt_CUFFING]) return SendNotification(playerid, "No puedes curar a esta persona porque está esposado.");

	if(!PLAYER_WORKS[playerid][WORK_MEDIC][pwork_SET] && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_MEDIC)
	{
		if(PI[playerid][pi_MEDICAL_KITS] <= 0) return SendNotification(playerid, "No tienes botiquines para curar a esta persona.");
		else
		{
			new now = gettime();
			if(PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] > now) return SendFormatNotification(playerid, "Debes esperar %d segundos para volver a poder curar.", PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] - now);
			PLAYER_TEMP[playerid][pt_COOLDOWN_MEDICAL_KIT] = now + 300;

			PI[playerid][pi_MEDICAL_KITS] --;
			SendNotification(playerid, "Has usado 1 botiquín para curar a esta persona.");
		}
	}

	KillTimer(PLAYER_TEMP[to_player][pt_TIMERS][14]);
	PLAYER_TEMP[to_player][pt_TIMERS][14] = SetTimerEx("StandUp", 5000, false, "ii", playerid, to_player);
	DisablePlayerInjuredMark(to_player);

	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, false, 0, 0, 0, 0, 1);
	return 1;
}

forward StandUp(medic, playerid);
public StandUp(medic, playerid)
{
	if(PLAYER_WORKS[medic][WORK_MEDIC][pwork_SET] && PLAYER_TEMP[medic][pt_WORKING_IN] == WORK_MEDIC)
	{
		new work_extra_payment;
		if(work_info[WORK_MEDIC][work_info_EXTRA_PAY] > 0 && work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP] > 0)
		{
			work_extra_payment = (work_info[WORK_MEDIC][work_info_EXTRA_PAY] * floatround(floatdiv(PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL], work_info[WORK_MEDIC][work_info_EXTRA_PAY_EXP])));
			if(work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT] != 0) if(work_extra_payment > work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT]) work_extra_payment = work_info[WORK_MEDIC][work_info_EXTRA_PAY_LIMIT];

			if(PI[medic][pi_VIP]) work_extra_payment += SU_WORK_EXTRA_PAY;
		}

		new money = minrand(600, 800) + work_extra_payment;
		GivePlayerCash(medic, money, true, false);
		PLAYER_WORKS[medic][WORK_MEDIC][pwork_LEVEL] ++;
		SendClientMessageEx(medic, -1, "Has salvado la vida de esta persona, has ganado {"#PRIMARY_COLOR"}%s$.", number_format_thousand(money));
	}

	PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(playerid);
	if(PI[playerid][pi_VIP]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(playerid, 25.0);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(playerid);
	return 1;
}
CMD:bandas(playerid, params[])
{
	ShowDialog(playerid, DIALOG_BANDAS);
	return 1;
}
CMD:banda(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(PI[playerid][pi_CREW]) return ShowDialog(playerid, DIALOG_CREW_MENU);

	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] || PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No puedes permanecer en una banda.");

	new index = GetAvaibleCrewIndex();
	if(index == -1) return 
		SendFormatNotification(playerid, "No perteneces a ninguna banda y no se puede crear una porque no hay espacio disponible, el límite de bandas es %d.", MAX_CREWS);

	ShowDialog(playerid, DIALOG_CREATE_CREW);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No perteneces a ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_LEAVE_TERRITORY]) return SendNotification(playerid, "No tienes permiso para abandonar territorios.");
	if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] == INVALID_STREAMER_ID) return SendNotification(playerid, "No estás en un territorio de tu banda.");
	if(!IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA])) return SendNotification(playerid, "No estás en un territorio de tu banda.");
	if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][pi_CREW]) return SendNotification(playerid, "No estás en un territorio de tu banda.");
	if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes abandonar territorios mientras tu banda está en combate.");

	PLAYER_TEMP[playerid][pt_PLAYER_TERRITORY_PRO] = PLAYER_TEMP[playerid][pt_LAST_TERRITORY];
	ShowDialog(playerid, DIALOG_CREW_LEAVE_TERRITORY);
	return 1;
}

CMD:invitar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");

	if(!PI[playerid][pi_CREW]) return SendNotification(playerid, "No eres miembro de ninguna banda.");
	if(!CREW_RANK_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][ PI[playerid][pi_CREW_RANK] ][crew_rank_PERMISSION][CREW_RANK_INVITE]) return SendNotification(playerid, "No tienes permiso para invitar personas a la banda.");
	if(CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING]) return SendNotification(playerid, "No puedes invitar a gente a la banda cuando la banda está en combate.");

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso: ~w~/invitar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "El jugador está desconectado.");
	if(to_player == playerid) return SendNotification(playerid, "Eres tú.");

	new members = CountCrewPlayers(PI[playerid][pi_CREW]);
	if(members >= MAX_CREW_MEMBERS) return SendFormatNotification(playerid, "Actualmente la banda cuenta con %d miembros, el límite es de %d miembros.", members, MAX_CREW_MEMBERS);

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "Este jugador no está cerca tuya.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Esta persona es policía y no puede tener banda.");
	if(PI[to_player][pi_CREW]) return SendNotification(playerid, "Esta persona pertenece a otra banda.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No puedes invitar a este jugador ahora.");

	if(gettime() < PLAYER_TEMP[ to_player ][pt_LAST_GOT_CREW] + 600) return SendFormatNotification(playerid, "La otra persona debe esperar %s minutos para volver a ser invitada.", TimeConvert(600 - (gettime() - PLAYER_TEMP[to_player][pt_LAST_GOT_CREW])));
	PLAYER_TEMP[playerid][pt_CREW_INVITE_PID] = to_player;
	PLAYER_TEMP[playerid][pt_CREW_INVITE_AID] = PI[to_player][pi_ID];
	SendFormatNotification(playerid, "Quieres invitar a %s a la banda, elige el rango que le ofreces.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	ShowDialog(playerid, DIALOG_CREW_INVITE_RANK);
	return 1;
}

CMD:reclutar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "~r~Ahora no puedes usar este comando.");

	new work = GetIDFaccionPlayer(playerid);
	if(work == -1) return SendNotification(playerid, "~r~Debes ser miembro de una facción para usar este comando.");

	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 10) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para reclutar gente.", POLICE_RANKS[10]);
	if(PLAYER_WORKS[playerid][WORK_MECANICO][pwork_SET] && PLAYER_WORKS[playerid][WORK_MECANICO][pwork_LEVEL] < 5) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para reclutar gente.", MECANICO_RANKS[5]);
	if(PLAYER_WORKS[playerid][WORK_FBI][pwork_SET] && PLAYER_WORKS[playerid][WORK_FBI][pwork_LEVEL] < 5) return SendFormatNotification(playerid, "Debes ser al menos rango ~r~%s~w~ para reclutar gente.", FBI_RANKS[5]);

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /reclutar [PlayerID/Nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "~r~El jugador está desconectado.");
	if(to_player == playerid) return SendNotification(playerid, "~r~No puedes invitarte.");

	new Float:pos[3]; GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])) return SendNotification(playerid, "~r~Este jugador no está cerca tuya.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "~r~No puedes reclutar a este jugador ahora.");

	new player_jobs = CountPlayerJobs(to_player);
	if(PI[to_player][pi_VIP] == 2) if(player_jobs >= MAX_SU2_WORKS) return SendNotification(playerid, "~r~Esta persona ya tiene trabajo y no puede tener más.");
	else if(PI[to_player][pi_VIP] == 1) if(player_jobs >= MAX_SU_WORKS) return SendNotification(playerid, "~r~Esta persona ya tiene trabajo y no puede tener más.");
	else if(player_jobs >= MAX_NU_WORKS) return SendNotification(playerid, "~r~Esta persona ya tiene trabajo y no puede tener más.");

	if(PLAYER_TEMP[to_player][pt_WORKING_IN]) return SendNotification(playerid, "~r~Esta persona no puede unirse porque esta de servicio en su trabajo.");
	if(PLAYER_WORKS[to_player][work][pwork_SET]) return SendNotification(playerid, "~r~éste usuario es miembro.");

	new to_work = GetIDFaccionPlayer(to_player);
	if(to_work != -1) return SendNotification(playerid, "Este usuario ya pertenece a otra facción.");

	switch(work)
	{
		case WORK_POLICE, WORK_FBI:
		{
			if(PI[to_player][pi_CREW]) return SendClientMessage(playerid,-1, "{"#RED_COLOR"}Esta persona pertenece a una banda y no puede pertenecer a la facción.");

			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);

			PLAYER_WORKS[to_player][work][pwork_SET] = true;
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;

			if(work == WORK_POLICE)
			{
				PI[to_player][pi_PLACA_PD] = random(10000000);
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET placa_pd = %d WHERE id = %d;", PI[to_player][pi_PLACA_PD], PI[to_player][pi_ID]);
				mysql_tquery(mysql_db, QUERY_BUFFER);

				SendFormatNotification(playerid, "%s ahora es policía.", PLAYER_TEMP[to_player][pt_RP_NAME]);
				SendClientMessage(to_player, -1, "Ahora eres policía.");
			}
			else if(work == WORK_FBI)
			{
				SendFormatNotification(playerid, "%s ahora pertenece a la FBI.", PLAYER_TEMP[to_player][pt_RP_NAME]);
				SendClientMessage(to_player, -1, "Ahora eres perteneces a la FBI.");
			}
		}
		case WORK_MECANICO:
		{
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO pworks (id_player, id_work, `set`, level) VALUES(%d, %d, 1, 1) ON DUPLICATE KEY UPDATE `set` = 1, level = 1;", PI[to_player][pi_ID], work);
			mysql_tquery(mysql_db, QUERY_BUFFER);

			PLAYER_WORKS[to_player][work][pwork_SET] = true;
			PLAYER_WORKS[to_player][work][pwork_LEVEL] = 1;

			SendFormatNotification(playerid, "%s ahora es mecánico.", PLAYER_TEMP[to_player][pt_RP_NAME]);
			SendClientMessage(to_player, -1, "Ahora eres mecánico.");
		}
	}
	return 1;
}

CMD:darbanda(playerid, params[])
{
	new to_player, bandaid, rangoid;
	if(sscanf(params, "udd", to_player, bandaid, rangoid)) return SendNotification(playerid, "~r~Modo de uso~w~: /darbanda <player_id> <bandaid> <rangoid>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "Esta persona es policía y no puede tener banda.");

	if(bandaid == 0)
	{
		if(PI[to_player][pi_CREW])
		{
			CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_MEMBERS] --;
			CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] --;
		}

		PI[to_player][pi_CREW] = 0;
		PI[to_player][pi_CREW_RANK] = 0;
		PLAYER_TEMP[to_player][pt_CREW_INDEX] = 0;
		HidePlayerGangZones(to_player);

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = NULL, crew_rank = 0 WHERE id = %d;", PI[to_player][pi_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		SendFormatNotification(playerid, "Expulsaste a %s de la banda en que integraba.", PLAYER_TEMP[to_player][pt_RP_NAME]);
		return 1;
	}

	new crew_index = GetCrewIndexById(bandaid);
	if(crew_index == -1) return SendNotification(playerid, "Esa banda no existe.");

	PI[to_player][pi_CREW] = bandaid;
	PI[to_player][pi_CREW_RANK] = rangoid;
	PLAYER_TEMP[to_player][pt_CREW_INDEX] = crew_index;
	SetPlayerGangZones(to_player);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[to_player][pi_CREW], PI[to_player][pi_CREW_RANK], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	if(CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_VALID])
	{
		CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_MEMBERS] ++;
		CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_ONLINE_MEMBERS] ++;

	}

	SendFormatNotification(playerid, "Integraste a %s en la banda %s con el rango %s(%d)", PLAYER_TEMP[to_player][pt_RP_NAME], CREW_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][crew_NAME], CREW_RANK_INFO[ PLAYER_TEMP[to_player][pt_CREW_INDEX] ][ PI[to_player][pi_CREW_RANK] ][crew_rank_NAME], rangoid);
	SendCmdLogToAdmins(playerid, "darbanda", params);
	return 1;
}
CMD:conquistar(playerid, params[])
{
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");

	new time = CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_LAST_ATTACK] + TIEMPO_BANDA_PROX_CONQUISTA - gettime();
	new time2 = TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + TIEMPO_TERRI_PROX_CONQUISTA - gettime();
	if(PI[playerid][pi_CREW])
	{
		if(gettime() > CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_LAST_ATTACK] + TIEMPO_BANDA_PROX_CONQUISTA)
		{
			if(PLAYER_TEMP[playerid][pt_LAST_TERRITORY] != INVALID_STREAMER_ID)
			{
				if(IsPlayerInDynamicArea(playerid, TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_AREA]))
				{
					if(TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_ID] != PI[playerid][pi_CREW])
					{
						if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_WAR] && !CREW_INFO[ PLAYER_TEMP[playerid][pt_CREW_INDEX] ][crew_FIGHTING])
						{
							if(gettime() > TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_LAST_ATTACK] + TIEMPO_TERRI_PROX_CONQUISTA)
							{
								if(!TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_OCCUPIED])
								{
									new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
									if(attackers_in_area >= JUGADORES_TERRI_LIBRE) StartTerritoryAttack(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], TIEMPO_CONQUISTA);
									else SendFormatNotification(playerid, "Para comenzar la conquista necesitan al menos %d integrantes dentro del territorio.", JUGADORES_TERRI_LIBRE);
								}
								else
								{
									if(CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_VALID])
									{
										if(!CREW_INFO[ TERRITORIES[ PLAYER_TEMP[playerid][pt_LAST_TERRITORY] ][territory_CREW_INDEX] ][crew_FIGHTING])
										{
											new attackers_in_area = CountCrewPlayersInTerritory(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY]);
											if(attackers_in_area >= JUGADORES_TERRI_CONQUISTADO) StartTerritoryAttack(PLAYER_TEMP[playerid][pt_CREW_INDEX], PLAYER_TEMP[playerid][pt_LAST_TERRITORY], TIEMPO_CONQUISTA);
											else SendFormatNotification(playerid, "Para atacar este territorio necesitan al menos %d integrantes dentro del territorio.", JUGADORES_TERRI_CONQUISTADO);
										}
									}
								}
							}
							else SendFormatNotification(playerid, "Este territorio acaba de ser atacado, espera %s para atacarlo.", TimeConvert(time2));
						}
						else SendNotification(playerid, "Este territorio ya está siendo atacado.");
					}
					else SendNotification(playerid, "Este territorio ya pertene a tu banda.");
				}
			}
			else SendNotification(playerid, "No estás en ningun territorio.");
		}
		else SendFormatNotification(playerid, "Espera %s para volver a atacar otro territorio.", TimeConvert(time));
	}
	else SendNotification(playerid, "No perteneces a una banda.");
	return 1;
}

GetAvaibleCrewIndex()
{
	for(new i = 0; i != MAX_CREWS; i ++)
	{
		if(!CREW_INFO[i][crew_VALID]) return i;
	}
	return -1;
}


NewCrewRegister(index, playerid)
{
	if(!CREW_INFO[index][crew_VALID]) return 0;

	inline OnCrewInserted()
	{
		CREW_INFO[index][crew_ID] = cache_insert_id();
		if(CREW_INFO[index][crew_ID])
		{
			PI[playerid][pi_CREW] = CREW_INFO[index][crew_ID];
			PI[playerid][pi_CREW_RANK] = 0;
			PLAYER_TEMP[playerid][pt_CREW_INDEX] = index;
			mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET crew = %d, crew_rank = %d WHERE id = %d;", PI[playerid][pi_CREW], PI[playerid][pi_CREW_RANK], PI[playerid][pi_ID]);
			mysql_tquery(mysql_db, QUERY_BUFFER);
			RegisterNewCrewRank(index, 0);
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO crews (name, color) VALUES ('%e', %d);", CREW_INFO[index][crew_NAME], CREW_INFO[index][crew_COLOR]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewInserted);
	return 1;
}

SendMessageToCrewMembers(crew_id, color, message[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[i][pt_USER_LOGGED])
		{
			if(PI[i][pi_CREW] == crew_id)
			{
				SendClientMessage(i, color, message);
			}
		}
	}
	return 1;
}

RegisterNewCrewRank(index, rank)
{
	inline OnCrewRankInserted()
	{
		CREW_RANK_INFO[index][rank][crew_rank_ID] = cache_insert_id();
	}
	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO crew_ranks (id_crew, rank_pos, rank_name, permission0, permission1, permission2, permission3, permission4, permission5, permission6, permission7, permission8, permission9, permission10)\
			VALUES (%d, %d, '%e', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d);\
		",
			CREW_INFO[index][crew_ID], rank, CREW_RANK_INFO[index][rank][crew_rank_NAME], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][0], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][1],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][2], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][3], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][4],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][5], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][6], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][7],
			CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][8], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][9], CREW_RANK_INFO[index][rank][crew_rank_PERMISSION][10]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCrewRankInserted);
	return 1;
}

SetPlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;

		if(TERRITORIES[i][territory_WAR])
		{
			new flash_color, r, g, b, a;
			HexToRGBA(CREW_INFO[ TERRITORIES[i][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
			flash_color = RGBAToHex(r, g, b, 135);

			GangZoneFlashForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], flash_color);
		}
		else GangZoneShowForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE], TERRITORIES[i][territory_COLOR]);
	}
	return 1;
}

SetPlayerZonasSeguras(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		new r, g, b, a;
		HexToRGBA(0x43F75BFF, r, g, b, a);
		new ColorZonaSegura = RGBAToHex(r, g, b, 70);

		GangZoneShowForPlayer(playerid, SAFE_ZONES[i][safe_zone_AREA_ID], ColorZonaSegura);
	}
	return 1;
}

HidePlayerGangZones(playerid)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(!TERRITORIES[i][territory_VALID]) continue;

		GangZoneHideForPlayer(playerid, TERRITORIES[i][territory_GANG_ZONE]);
	}
	return 1;
}

stock HexToRGBA(colour, &r, &g, &b, &a) //By Betamaster
{
	r = (colour >> 24) & 0xFF;
	g = (colour >> 16) & 0xFF;
	b = (colour >> 8) & 0xFF;
	a = colour & 0xFF;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
	return (r<<24 | g<<16 | b<<8 | a);
}

stock RGBAToARGB(col)
{
	return ((((col) << 24) & 0xFF000000) | (((col) >>> 8) & 0xFFFFFF));
}

stock ARGBToRGBA(col)
{
	return ((((col) << 8) & 0xFFFFFF00) | (((col) >>> 24) & 0xFF));
}

UpdateGangZoneColor(index)
{
	if(TERRITORIES[index][territory_WAR])
	{
		new flash_color, r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		flash_color = RGBAToHex(r, g, b, 135);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					GangZoneFlashForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], flash_color);
				}
			}
		}
	}
	else
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					GangZoneShowForPlayer(i, TERRITORIES[index][territory_GANG_ZONE], TERRITORIES[index][territory_COLOR]);
				}
			}
		}
	}
	return 1;
}

StartTerritoryAttack(crew_index, territory_index, time)
{
	CREW_INFO[crew_index][crew_FIGHTING] = true;
	CREW_INFO[crew_index][crew_LAST_ATTACK] = gettime();
	TERRITORIES[territory_index][territory_WAR] = true;
	TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = crew_index;
	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = time;
	TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
	UpdateGangZoneColor(territory_index);

	new message[145], dcc_message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 500, false, "i", territory_index);

	if(TERRITORIES[territory_index][territory_OCCUPIED])
	{
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = true;
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' está atacando un territorio de la banda '%s' en %s.", CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
		format(dcc_message, sizeof dcc_message, "[BANDAS] La banda '%s' esta atacando un territorio de la banda '%s' en %s.", CREW_INFO[crew_index][crew_NAME], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}
	else
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
		format(dcc_message, sizeof dcc_message, "[BANDAS] La banda '%s' esta atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
	}

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_CREW])
			{
				SendClientMessage(i, -1, message);

				FixCharacterString(dcc_message);
				DCC_SendChannelMessage(dc_channel[2], dcc_message);

				if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
				{
					if(CountPlayersJobOnDuty(WORK_POLICE) > 1) //Solo se les insignará cargos si hay 2 policías mínimo
					{
						if(PI[i][pi_WANTED_LEVEL] < 2) SetPlayerWantedLevelEx(i, 2);
					}

					new r, g, b, a;
					HexToRGBA(CREW_INFO[ PLAYER_TEMP[i][pt_CREW_INDEX] ][crew_COLOR], r, g, b, a);
					SetPlayerColorEx(i, RGBAToHex(r, g, b, 0));

					TextDrawShowForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
					TextDrawShowForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
				}
			}

			if(PLAYER_WORKS[i][WORK_POLICE][pwork_SET])
			{
				if(PLAYER_TEMP[i][pt_WORKING_IN] == WORK_POLICE)
				{
					format(message, sizeof message, "{"#PRIMARY_COLOR"}[Central policía] {FFFFFF}La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
					SendClientMessage(i, -1, message);

					format(dcc_message, sizeof dcc_message, "[Central policia] La banda '%s' está atacando un territorio en %s.", CREW_INFO[crew_index][crew_NAME], TERRITORIES[territory_index][territory_NAME]);
					FixCharacterString(dcc_message);
					DCC_SendChannelMessage(dc_channel[3], dcc_message);
				}
			}
		}
	}
	return 1;
}

forward UpdateTerritoryAttack(territory_index);
public UpdateTerritoryAttack(territory_index)
{
	if(!TERRITORIES[territory_index][territory_VALID]) return 1;
	if(!TERRITORIES[territory_index][territory_WAR]) return 1;

	if(TERRITORIES[territory_index][territory_WAR_TIME_LEFT] <= 0)
	{
		new old_crew = TERRITORIES[territory_index][territory_CREW_ID];

		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_CREW_ID] = CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID];
		TERRITORIES[territory_index][territory_CREW_INDEX] = TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX];

		new r, g, b, a;
		HexToRGBA(CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_COLOR], r, g, b, a);
		TERRITORIES[territory_index][territory_COLOR] = RGBAToHex(r, g, b, 135);

		new message[145];
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		new label_str[256];
		if(TERRITORIES[territory_index][territory_OCCUPIED])
		{
			for(new i = 0; i != MAX_PROPIEDADES; i ++)
			{
				if(!PROPERTY_INFO[i][property_VALID]) continue;
				if(!PROPERTY_INFO[i][property_CREW]) continue;
				if(PROPERTY_INFO[i][property_CREW_ID] != old_crew) continue;

				if(IsPointInDynamicArea(TERRITORIES[territory_index][territory_AREA], PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z]))
				{
					PROPERTY_INFO[i][property_CREW_ID] = TERRITORIES[territory_index][territory_CREW_ID];

					format
					(
						label_str,
						sizeof label_str,
						"\
							{"#PRIMARY_COLOR"}·Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
							{"#PRIMARY_COLOR"}·{FFFFFF}Banda: {"#PRIMARY_COLOR"}%s\n\
							{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
						", PROPERTY_INFO[i][property_ID], CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_NAME]
					);

					UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
		}

		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE territories SET id_crew = %d WHERE id = %d;", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_ID], TERRITORIES[territory_index][territory_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);
		TERRITORIES[territory_index][territory_OCCUPIED] = true;

		new prize = minrand(5000, 7525);
		new prize_message[64];
		format(prize_message, sizeof prize_message, "{"#SILVER_COLOR"}Has ganado %d$ por conquistar este territorio.", prize);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					SendClientMessage(i, -1, message);

					format(message, sizeof message, "[BANDAS] La banda '%s' ha conquistado un nuevo territorio.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
					DCC_SendChannelMessage(dc_channel[2], message);

					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						if(PI[i][pi_CREW] == TERRITORIES[territory_index][territory_CREW_ID])
						{
							GivePlayerCash(i, prize, true, false);
							SendClientMessage(i, -1, prize_message);
						}
						SetPlayerNormalColor(i);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}

		CallLocalFunction("OnCrewCaptureTerritory", "iiii", TERRITORIES[territory_index][territory_CREW_ID], TERRITORIES[territory_index][territory_CREW_INDEX], TERRITORIES[territory_index][territory_ID], territory_index);
		return 1;
	}


	TERRITORIES[territory_index][territory_WAR_TIME_LEFT] --;
	new message[145];
	format(message, sizeof message, "Conquista:_%s", TimeConvert(TERRITORIES[territory_index][territory_WAR_TIME_LEFT]));
	TextDrawSetString(TERRITORIES[territory_index][territory_TEXTDRAW], message);


	new attackers_in_area = CountCrewPlayersInTerritory(TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX], territory_index);
	if(attackers_in_area <= 0)
	{
		format(message, sizeof message, "{"#PRIMARY_COLOR"}[BANDAS] {FFFFFF}La banda '%s' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);

		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_LAST_ATTACK] = gettime();
		CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_FIGHTING] = false;
		CREW_INFO[ TERRITORIES[territory_index][territory_CREW_INDEX] ][crew_FIGHTING] = false;
		TERRITORIES[territory_index][territory_WAR] = false;
		TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] = 0;
		TERRITORIES[territory_index][territory_WAR_TIME_LEFT] = 0;
		TERRITORIES[territory_index][territory_LAST_ATTACK] = gettime();
		KillTimer(TERRITORIES[territory_index][territory_TIMER]);
		UpdateGangZoneColor(territory_index);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PI[i][pi_CREW])
				{
					SendClientMessage(i, -1, message);

					format(message, sizeof message,  "[BANDAS] La banda '%s' no ha podido conquistar el territorio que estaba atacando.", CREW_INFO[ TERRITORIES[territory_index][territory_ATTACKER_CREW_INDEX] ][crew_NAME]);
					DCC_SendChannelMessage(dc_channel[2], message);

					if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
					{
						SetPlayerNormalColor(i);

						TextDrawHideForPlayer(i, Textdraws[textdraw_TERRITORY_BOX]);
						TextDrawHideForPlayer(i, TERRITORIES[territory_index][territory_TEXTDRAW]);
					}
				}
			}
		}
		return 1;
	}

	KillTimer(TERRITORIES[territory_index][territory_TIMER]);
	TERRITORIES[territory_index][territory_TIMER] = SetTimerEx("UpdateTerritoryAttack", 1000, false, "i", territory_index);
	return 1;
}

CountCrewPlayersInTerritory(crew_index, territory_index)
{
	new count;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PI[i][pi_CREW])
			{
				if(PLAYER_TEMP[i][pt_CREW_INDEX] == crew_index)
				{
					if(PI[i][pi_STATE] == ROLEPLAY_STATE_NORMAL && PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
					{
						if(IsPlayerInDynamicArea(i, TERRITORIES[territory_index][territory_AREA]))
						{
							count ++;
						}
					}
				}
			}
		}
	}
	return count;
}

SetPlayerColorEx(playerid, color)
{
	PLAYER_TEMP[playerid][pt_PLAYER_COLOR] = color;
	return SetPlayerColor(playerid, color);
}

LoadServerInfo()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_read), eco_str[256];
	if(ECO)
	{
		fread(ECO, eco_str);
		sscanf(eco_str, "p<,>fffffdddd", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE, SU_SD_PRICE2, SU_WORK_EXTRA_PAY, CHANGE_NAME_SD_PRICE);
		fclose(ECO);
	}


	new File:AC = fopen("SERVER/AC.txt", io_read), ac_str[128], ac_num;
	if(AC)
	{
		while(fread(AC, ac_str))
		{
			if(ac_num >= sizeof(ac_Info)) break;
			sscanf(ac_str, "p<,>bbdd", ac_Info[ac_num][ac_Enabled], ac_Info[ac_num][ac_Kick], ac_Info[ac_num][ac_Detections], ac_Info[ac_num][ac_Interval]);
			ac_num ++;
		}
		fclose(AC);
	}
	return 1;
}

WriteAnticheatRules()
{
	new File:AC = fopen("SERVER/AC.txt", io_write), ac_str[128];
	if(AC)
	{
		for(new i = 0; i != sizeof(ac_Info); i ++)
		{
			format(ac_str, sizeof ac_str, "%d,%d,%d,%d\r\n", ac_Info[i][ac_Enabled], ac_Info[i][ac_Kick], ac_Info[i][ac_Detections], ac_Info[i][ac_Interval]);
			fwrite(AC, ac_str);
		}
		fclose(AC);
	}
	return 1;
}

WriteEconomyMultipliers()
{
	new File:ECO = fopen("SERVER/ECO.txt", io_write), eco_str[256];
	if(ECO)
	{
		format(eco_str, sizeof eco_str, "%f,%f,%f,%f,%f,%d,%d,%d,%d", MULTIPLIER_PROPERITES, MULTIPLIER_VEHICLES, MULTIPLIER_TOYS, MULTIPLIER_SKINS, MULTIPLIER_WEAPONS, SU_SD_PRICE, SU_SD_PRICE2, SU_WORK_EXTRA_PAY, CHANGE_NAME_SD_PRICE);
		fwrite(ECO, eco_str);
		fclose(ECO);
	}
	return 1;
}

UpdateEconomy(type = -1)
{
	new label_str[256];

	if(type == -1)
	{
		for(new i = 0; i != MAX_PROPIEDADES; i ++)
		{
			if(!PROPERTY_INFO[i][property_VALID]) continue;
			PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

			if(!PROPERTY_INFO[i][property_SOLD])
			{
				UpdateUnnocupiedPropertyLabel(i);
			}
		}

		for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
		{
			if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
			SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
			if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;

			if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
								\n\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
								\n\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			else
			{
				if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
				else
				{
					format
					(
						label_str,
							sizeof label_str,
							"\
								{"#PRIMARY_COLOR"}%s\n\n\
								{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
								{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
							", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
					);
				}
			}
			UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
		}

		for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
		for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);

		for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
	}
	else
	{
		switch(type)
		{
			case 0:
			{
				for(new i = 0; i != MAX_PROPIEDADES; i ++)
				{
					if(!PROPERTY_INFO[i][property_VALID]) continue;
					PROPERTY_INFO[i][property_PRICE] = floatround(PROPERTY_INFO[i][property_PRICE_BASE] * MULTIPLIER_PROPERITES, floatround_ceil);

					if(!PROPERTY_INFO[i][property_SOLD])
					{
						UpdateUnnocupiedPropertyLabel(i);
					}
				}
			}
			case 1:
			{
				for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
				{
					if(!SELL_VEHICLES[i][sell_vehicle_VALID]) continue;
					SELL_VEHICLES[i][sell_vehicle_PRICE] = floatround(VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_PRICE] * MULTIPLIER_VEHICLES, floatround_ceil);

					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL]) SELL_VEHICLES[i][sell_vehicle_LEVEL] = 1;
					if(SELL_VEHICLES[i][sell_vehicle_EXTRA]) SELL_VEHICLES[i][sell_vehicle_PRICE] = 0;

					if(SELL_VEHICLES[i][sell_vehicle_VIP_LEVEL])
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
										\n\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
										\n\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					else
					{
						if(SELL_VEHICLES[i][sell_vehicle_EXTRA])
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], SELL_VEHICLES[i][sell_vehicle_EXTRA], SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
						else
						{
							format
							(
								label_str,
									sizeof label_str,
									"\
										{"#PRIMARY_COLOR"}%s\n\n\
										{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
										{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\
									", VEHICLE_INFO[GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400][vehicle_info_NAME], number_format_thousand(SELL_VEHICLES[i][sell_vehicle_PRICE]), SELL_VEHICLES[i][sell_vehicle_LEVEL]
							);
						}
					}
					UpdateDynamic3DTextLabelText(SELL_VEHICLES[i][sell_vehicle_LABEL_ID], 0xFFFFFFFF, label_str);
				}
			}
			case 2:
			{
				for(new i = 0; i != sizeof(Toys_Shop); i ++) Toys_Shop[i][shop_toy_price] = floatround(Toys_Shop[i][shop_toy_price_base] * MULTIPLIER_TOYS, floatround_ceil);
			}
			case 3:
			{
				for(new i = 0; i != sizeof(Binco_Shop_Male_Skins); i ++) Binco_Shop_Male_Skins[i][2] = floatround(Binco_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Binco_Shop_Female_Skins); i ++) Binco_Shop_Female_Skins[i][2] = floatround(Binco_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Male_Skins); i ++) Suburban_Shop_Male_Skins[i][2] = floatround(Suburban_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Suburban_Shop_Female_Skins); i ++) Suburban_Shop_Female_Skins[i][2] = floatround(Suburban_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Male_Skins); i ++) Prolaps_Shop_Male_Skins[i][2] = floatround(Prolaps_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Prolaps_Shop_Female_Skins); i ++) Prolaps_Shop_Female_Skins[i][2] = floatround(Prolaps_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Male_Skins); i ++) Didier_Shop_Male_Skins[i][2] = floatround(Didier_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Didier_Shop_Female_Skins); i ++) Didier_Shop_Female_Skins[i][2] = floatround(Didier_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Male_Skins); i ++) Victim_Shop_Male_Skins[i][2] = floatround(Victim_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Victim_Shop_Female_Skins); i ++) Victim_Shop_Female_Skins[i][2] = floatround(Victim_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Male_Skins); i ++) Zip_Shop_Male_Skins[i][2] = floatround(Zip_Shop_Male_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
				for(new i = 0; i != sizeof(Zip_Shop_Female_Skins); i ++) Zip_Shop_Female_Skins[i][2] = floatround(Zip_Shop_Female_Skins[i][1] * MULTIPLIER_SKINS, floatround_ceil);
			}
			case 4:
			{
				for(new i = 0; i != sizeof(BLACK_MARKT_WEAPONS); i ++) BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE] = floatround(BLACK_MARKT_WEAPONS[i][black_market_WEAPON_PRICE_BASE] * MULTIPLIER_WEAPONS, floatround_ceil);
			}
		}
	}
	return 1;
}

CMD:eco(playerid, params[])
{
	ShowDialog(playerid, DIALOG_SERVER_ECO);
	return 1;
}

ReLockPlayerVehicles(playerid, bool:remove = false)
{
	if(PI[playerid][pi_ID] == 0) return 0;
	if(PI[playerid][pi_VIP]) return 0;

	inline OnQueryLoadedInline()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			for(new i = 0; i != rows; i ++)
			{
				if(i >= MAX_SU2_VEHICLES)
				{
					printf("---> MAX_SU2_VEHICLES superado al cargar de base de datos.");
					break;
				}

				new veh_did;
				cache_get_value_index_int(i, 0, veh_did);

				new vehicle_id = GetPlayerVehicleIdFromDbId(veh_did);
				if(vehicle_id != INVALID_VEHICLE_ID)
				{
					PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = true;
					if(i >= MAX_NU_VEHICLES)
					{
						if(remove)
						{
							if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_OCCUPIED])
							{
								SetVehicleVelocity(vehicle_id, 0.0, 0.0, 0.0);
								if(GLOBAL_VEHICLES[vehicle_id][gb_vehicle_DRIVER] != INVALID_PLAYER_ID) RemovePlayerFromVehicle(playerid);
							}
						}

						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_ENGINE] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_LIGHTS] = 0;
						GLOBAL_VEHICLES[vehicle_id][gb_vehicle_PARAMS_DOORS] = 1;
						PLAYER_VEHICLES[vehicle_id][player_vehicle_ACCESSIBLE] = false;

						ApagarEstrobos(vehicle_id);
						UpdateVehicleParams(vehicle_id);
					}
				}
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM pvehicles WHERE id_player = %d ORDER BY id DESC LIMIT %d;", PI[playerid][pi_ID], MAX_SU2_VEHICLES);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnQueryLoadedInline);
	return 1;
}

UnlockPlayerVehicles(playerid)
{
	new total;
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if(PLAYER_VEHICLES[i][player_vehicle_ID] == PI[playerid][pi_ID])
		{
			if(total >= MAX_SU2_VEHICLES) break;

			PLAYER_VEHICLES[i][player_vehicle_ACCESSIBLE] = true;
		}
	}
	return total;
}

GetPlayerVehicleIdFromDbId(veh_did)
{
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;

		if(PLAYER_VEHICLES[i][player_vehicle_ID] == veh_did) return i;
	}
	return INVALID_VEHICLE_ID;
}

CMD:vip(playerid, params[])
{
	if(PI[playerid][pi_VIP] == 2) ShowDialog(playerid, DIALOG_SU2);
	else if(PI[playerid][pi_VIP] == 1) ShowDialog(playerid, DIALOG_SU);
	else ShowDialog(playerid, DIALOG_VIPS);
	return 1;
}

CMD:darcoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setcoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	PI[to_player][pi_COINS] = sd;
	SendFormatNotification(to_player, "Ahora tienes ~g~%d "SERVER_COIN"~w~.", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][pi_COINS], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "setcoins", params);
	return 1;
}

CMD:givecoins(playerid, params[])
{
	new to_player, sd;
	if(sscanf(params, "ud", to_player, sd)) return SendNotification(playerid, "~r~Modo de uso:~w~ /givecoins <player_id> <sd>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	PI[to_player][pi_COINS] += sd;
	SendClientMessageEx(to_player, -1, "{"#SILVER_COLOR"}Has comprado %d "SERVER_COIN".", sd);
	PlayerPlaySoundEx(to_player, 1058, 0.0, 0.0, 0.0);

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d WHERE id = %d;", PI[to_player][pi_COINS], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	SendCmdLogToAdmins(playerid, "givecoins", params);
	return 1;
}

CMD:darvip(playerid, params[])
{
	new to_player, vip_level, days;
	if(sscanf(params, "udd", to_player, vip_level, days)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setvip <player_id> <vip_level> <dias>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	else if(vip_level < 0 || vip_level > 2) return SendNotification(playerid, "Nivel de VIP incorrecto, no tiene que ser mayor a 2.");

	SetPlayerVip(to_player, vip_level, 0, days);

	SendCmdLogToAdmins(playerid, "setvip", params);
	return 1;
}

CheckPlayerSuperUser(playerid)
{
	if(PI[playerid][pi_VIP])
	{
		inline OnInfoQueryLoad()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET vip = 0, vip_expire_date = '0000-00-00 00:00:00' WHERE id = %d;", PI[playerid][pi_ID]);
					mysql_tquery(mysql_db, QUERY_BUFFER);

					PI[playerid][pi_VIP] = false;
					PI[playerid][pi_VIP_EXPIRE_DATE][0] = EOS;
					SendNotification(playerid, "¡Tu VIP ha expirado! Usa /vip para comprar de nuevo.");
					if(GetPlayerSkin(playerid) == PI[playerid][pi_SKIN]) SetPlayerToys(playerid);
					ReLockPlayerVehicles(playerid, true);
				}
				PLAYER_TEMP[playerid][pt_LAST_SU_CHECK] = gettime();
			}
		}
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE id = %d AND NOW() >= vip_expire_date;", PI[playerid][pi_ID]);
		mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	}
	return 1;
}
CMD:dargenero(playerid, params[])
{
	new to_player, genero;
	if(sscanf(params, "ud", to_player, genero)) return SendNotification(playerid, "~r~Modo de uso:~w~ /dargenero <player_id> <genero 0 - 1>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");
	if(genero < 0 || genero > 1) return SendNotification(playerid, "~r~Modo de uso:~w~ /dargenero <player_id> <genero 0 - 1>");

	PI[to_player][pi_GENERO] = genero;

	SendFormatNotification(playerid, "Genero '%s (%d)' cambiado a '%s'.", PI[to_player][pi_NAME], to_player, (genero ? "Femenino" : "Masculino"));
   	SendCmdLogToAdmins(playerid, "dargenero", params);
	return 1;
}

CMD:darskin(playerid, params[])
{
	new to_player, skin;
	if(sscanf(params, "ud", to_player, skin)) return SendNotification(playerid, "~r~Modo de uso:~w~ /darskin <player_id> <skin>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");
	if(skin < 0 || skin > 312) return SendNotification(playerid, "~r~Modo de uso:~w~ /darskin <player_id> <skin>");

	PI[to_player][pi_SKIN] = skin;
	SetPlayerSkin(to_player, PI[to_player][pi_SKIN]);

	SendFormatNotification(playerid, "Skin '%s (%d)' cambiado a '%d'.", PI[to_player][pi_NAME], to_player, skin);
   	SendCmdLogToAdmins(playerid, "darskin", params);
	return 1;
}
alias:darskin("setskin");

CMD:setfstyle(playerid, params[])
{
	new to_player, style;
	if(sscanf(params, "ud", to_player, style)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setfstyle <player_id> <style>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_FIGHT_STYLE] = style;
	SetPlayerFightingStyle(to_player, PI[to_player][pi_FIGHT_STYLE]);

	SendFormatNotification(playerid, "FStyle '%s (%d)' cambiado a '%d'.", PI[to_player][pi_NAME], to_player, style);
	return 1;
}

CMD:ls(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ls <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][pi_LOCAL_INTERIOR] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][pi_INTERIOR] = 0;
	PI[to_player][pi_POLICE_JAIL_TIME] = 0;

	if(GetPlayerState(to_player) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(to_player);
		SetVehiclePosEx(vehicleid, 1532.9812, -1655.4763, 13.1099);
		SetVehicleZAngle(vehicleid, 180.0);
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		SetVehicleVirtualWorldEx(vehicleid, 0);
		LinkVehicleToInteriorEx(vehicleid, 0);

		SetPlayerInterior(to_player, 0);
		SetPlayerVirtualWorld(to_player, 0);
	}
	else SetPlayerPosEx(to_player, 1555.400390, -1675.611694, 16.195312, 90.0, 0, 0, true, true);

	SetPlayerCityWeather(to_player);
	SendFormatNotification(playerid, "Jugador '%s (%d)' fue llevado a LS.", PI[to_player][pi_NAME], to_player);
 	SendCmdLogToAdmins(playerid, "ls", params);
	return 1;
}
CMD:sf(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /sf <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][pi_LOCAL_INTERIOR] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][pi_INTERIOR] = 0;
	PI[to_player][pi_POLICE_JAIL_TIME] = 0;

	if(GetPlayerState(to_player) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(to_player);
		SetVehiclePosEx(vehicleid, -2047.0356, -82.7486, 34.8911);
		SetVehicleZAngle(vehicleid, 360.0);
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		SetVehicleVirtualWorldEx(vehicleid, 0);
		LinkVehicleToInteriorEx(vehicleid, 0);

		SetPlayerInterior(to_player, 0);
		SetPlayerVirtualWorld(to_player, 0);
	}
	else SetPlayerPosEx(to_player, -2016.4399, -79.7714, 35.3203, 0.0, 0, 0, true);

	SetPlayerCityWeather(to_player);
	SendFormatNotification(playerid, "Jugador '%s (%d)' fue llevado a SF.", PI[to_player][pi_NAME], to_player);
 	SendCmdLogToAdmins(playerid, "sf", params);
	return 1;
}
CMD:lv(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /lv <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][pi_LOCAL_INTERIOR] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][pi_INTERIOR] = 0;
	PI[to_player][pi_POLICE_JAIL_TIME] = 0;

	if(GetPlayerState(to_player) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(to_player);
		SetVehiclePosEx(vehicleid, 1689.1085, 1453.1542, 10.4943);
		SetVehicleZAngle(vehicleid, 270.0);
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		SetVehicleVirtualWorldEx(vehicleid, 0);
		LinkVehicleToInteriorEx(vehicleid, 0);

		SetPlayerInterior(to_player, 0);
		SetPlayerVirtualWorld(to_player, 0);
	}
	else SetPlayerPosEx(to_player, 1686.1249, 1449.9110, 10.7694, 270.0, 0, 0, true);

	SetPlayerCityWeather(to_player);
	SendFormatNotification(playerid, "Jugador '%s (%d)' fue llevado a LV.", PI[to_player][pi_NAME], to_player);
 	SendCmdLogToAdmins(playerid, "lv", params);
	return 1;
}

CMD:despacho(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /despacho <player_id>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[to_player][pi_LOCAL_INTERIOR] = 0;
	PLAYER_TEMP[to_player][pt_INTERIOR_INDEX] = -1;
	PI[to_player][pi_INTERIOR] = 0;
	PI[to_player][pi_POLICE_JAIL_TIME] = 0;
	SetPlayerPosEx(to_player, 1802.2946, -1300.6003, 119.7412, 0.0, 0, 0, true);
	SetPlayerCityWeather(to_player);
	SendFormatNotification(playerid, "Jugador '%s (%d)' fue llevado a la zona admin.", PI[to_player][pi_NAME], to_player);
 	SendCmdLogToAdmins(playerid, "despacho", params);
	return 1;
}

CMD:lsdb(playerid, params[])
{
	new to_account;
	if(sscanf(params, "d", to_account)) return SendNotification(playerid, "~r~Modo de uso:~w~ /osendls <DB-ID>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /ls, su player_id: %d.", name, id, pid);
				else
				{
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET pos_x = 1555.400390, pos_y = -1675.611694, pos_z = 16.195312, angle = 0, state = %d, interior = 0, local_interior = 0, police_jail_time = 0 WHERE id = %d;", ROLEPLAY_STATE_NORMAL, to_account);
					mysql_tquery(mysql_db, QUERY_BUFFER);
					SendFormatNotification(playerid, "Jugador '%s' DB-ID '%d' ahora aparecerá en LS.", name, id);
				}
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}
CMD:darprenda(playerid, params[])
{
	new to_player, modelid;
	if(sscanf(params, "ud", to_player, modelid)) return SendNotification(playerid, "~r~Modo de uso:~w~ /setprenda <playerid> <modelid>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(modelid < 400 || modelid > 19801) return SendNotification(playerid, "Modelo de prenda no válido.");

	new toys = CountPlayerToys(to_player);
	if(toys >= MAX_SU2_TOYS) return SendFormatNotification(playerid, "El jugador no puede tener más prendas, su límite es %d.", MAX_SU2_TOYS);
	if(!PI[to_player][pi_VIP])
	{
		if(toys >= MAX_NU_TOYS)
		{
			SendFormatNotification(playerid, "El jugador no puede tener más prendas, su límite es %d.", MAX_NU_TOYS);
			return 1;
		}
	}
	new vid = GivePlayerToy
	(
		to_player,
		modelid
	);
	if(!vid) return SendNotification(playerid, "No se pueden añadir más prendas");
	else
	{
		SendFormatNotification(to_player,  "Se te dió un/a %s por parte de la administración.", GetNameObjeto(modelid));
		SendFormatNotification(playerid,  "Acabas de dar un/a %s a %s.", GetNameObjeto(modelid), PLAYER_TEMP[to_player][pt_RP_NAME]);
	}
	SendCmdLogToAdmins(playerid, "darprenda", params);
	return 1;
}
alias:darprenda("setprenda");
CMD:vpcar(playerid, params[])
{
	new to_player, modelid, vehname[24];
	if(!sscanf(params, "ud", to_player, modelid)) { }
	else if(!sscanf(params, "us[24]", to_player, vehname)) { modelid = GetVehicleModelByName(vehname); }
	else return SendNotification(playerid, "~r~Modo de uso:~w~ /vpcar <playerid> <modelid/name>");

	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(modelid < 400 || modelid > 611) return SendNotification(playerid, "Modelo de vehículo no válido.");

	new pvehicles = CountPlayerVehicles(to_player);
	if(pvehicles >= MAX_SU2_VEHICLES) return SendFormatNotification(playerid, "El jugador no puede tener más vehículos, su límite es %d.", pvehicles);
	if(PI[to_player][pi_VIP] == 1)
	{
		if(pvehicles >= MAX_SU_VEHICLES) return SendFormatNotification(playerid, "El jugador no puede tener más vehículos, su límite es %d.", pvehicles);
	}
	if(!PI[to_player][pi_VIP])
	{
		if(pvehicles >= MAX_NU_VEHICLES) return SendFormatNotification(playerid, "El jugador no puede tener más vehículos, su límite es %d.", pvehicles);
	}

	new Float:pos[4];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(to_player, pos[3]);

	new vid = AddPersonalVehicle
	(
		to_player,
		modelid,
		pos[0],
		pos[1],
		pos[2],
		pos[3],
		1,
		1,
		VEHICLE_INFO[ modelid - 400 ][vehicle_info_MAX_GAS]
	);
	if(!vid) return SendNotification(playerid, "No se pueden añadir más vehículos.");

	SendCmdLogToAdmins(playerid, "vpcar", params);
	return 1;
}
alias:vpcar("shopcar");

CMD:revive(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /revive <playerid>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_STATE] != ROLEPLAY_STATE_CRACK) return SendNotification(playerid, "Esta persona no está herida.");

	DisablePlayerInjuredMark(to_player);
	PI[to_player][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	SetWeaponsForPlayer(to_player);
	if(PI[to_player][pi_VIP]) SetPlayerHealthEx(playerid, 50.0);
	else SetPlayerHealthEx(to_player, 25.0);
	ApplyAnimation(to_player, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, true);
	ClearAnimations(to_player);

	SendCmdLogToAdmins(playerid, "revive", params);
	return 1;
}
alias:revive("revivir");

CMD:tuning(playerid, params[])
{
	if(PI[playerid][pi_LEVEL] < 2) return SendNotification(playerid, "Debes de ser al menos nivel 2 para tunear vehículos aquí.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendNotification(playerid, "No estás en ningún vehículo.");
	if(PI[playerid][pi_STATE] == ROLEPLAY_STATE_CRACK || PI[playerid][pi_STATE] == ROLEPLAY_STATE_JAIL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_ARRESTED) return SendNotification(playerid, "Ahora no puedes usar este comando.");
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return SendNotification(playerid, "No estás en el lugar adecuado.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 263.592102, 22.960014, 2.170951)) return SendNotification(playerid, "No estás en el lugar adecuado.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PLAYER_VEHICLES[vehicleid][player_vehicle_VALID]) return SendNotification(playerid, "Solo puedes tunear tus vehículos personales.");
	if(PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] != PI[playerid][pi_ID]) return SendNotification(playerid, "Solo puedes tunear tus vehículos personales.");
	if(!VEHICLE_INFO[GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400][vehicle_info_NORMAL_SPEEDO]) return SendNotification(playerid, "Este vehículo no se puede tunear.");

	PLAYER_TEMP[playerid][pt_IN_TUNING_GARAGE] = true;
	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] = vehicleid;

	SetVehiclePosEx(vehicleid, 263.592102, 22.960014, 3.170951);
	SetVehicleZAngle(vehicleid, 0.0);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	SetVehicleVirtualWorldEx(vehicleid, playerid + MAX_PLAYERS);
	SetPlayerVirtualWorld(playerid, playerid + MAX_PLAYERS);

	GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
	UpdateVehicleParams(vehicleid);
	//HidePlayerVelocimetro(playerid);
	HidePlayerSpeedoMeter(playerid); //AQUII
	SetCameraBehindPlayer(playerid);

	ShowDialog(playerid, DIALOG_VOBJECT_MENU);
	return 1;
}

stock GetPlayerCameraLookAt(playerid, &Float:X, &Float:Y, &Float:Z)
{
	new Float:pos[6];
	GetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerCameraFrontVector(playerid, pos[3], pos[4], pos[5]);
	X = floatadd(pos[0], pos[3]);
	Y = floatadd(pos[1], pos[4]);
	Z = floatadd(pos[2], pos[5]);
	return 1;
}

UpdateTuningShop(playerid)
{
	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = CreateDynamicPickup(Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_MODELID], 1, 268.2404, 11.4559, 2.4222, playerid + MAX_PLAYERS, -1, playerid);

	new td_str[128];
	format(td_str, sizeof td_str, "Objeto:_%d/%d~n~Precio:_%s$", PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] + 1, sizeof Tuning_Shop_Objects, number_format_thousand( Tuning_Shop_Objects[ PLAYER_TEMP[playerid][pt_SELECT_TUNING_OBJECT] ][tuning_object_PRICE] ) );
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP], td_str);
	return 1;
}

CancelPlayerTuningShop(playerid)
{
	SetCameraBehindPlayer(playerid);

	if(PLAYER_TEMP[playerid][pt_TUNING_PICKUP] != INVALID_STREAMER_ID)
	{
		DestroyDynamicPickup(PLAYER_TEMP[playerid][pt_TUNING_PICKUP]);
		PLAYER_TEMP[playerid][pt_TUNING_PICKUP] = INVALID_STREAMER_ID;
	}
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][0]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][1]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][2]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][3]);
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_SHOP_TUNING][4]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TUNING_SHOP]);
	CancelSelectTextDrawEx(playerid);

	PLAYER_TEMP[playerid][pt_TUNING_GARAGE_SHOP] = false;
	return 1;
}

GetVehicleFreeObjectSlot(vehicleid)
{
	for(new i = 0; i != MAX_SU2_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) return i;
	}
	return -1;
}

UpdateVehicleAttachedObject(vehicleid, slot, material = false)
{
	if(VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED])
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] == INVALID_STREAMER_ID)
		{
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = 	CreateDynamicObject
																	(
																		VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0,
																		0.0
																	);
		}

		if(material)
		{
			switch(VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE])
			{
				case VOBJECT_TYPE_OBJECT:
				{
					for(new i = 0; i != MAX_VEHICLE_OBJECTS_INDEXS; i ++)
					{
						SetDynamicObjectMaterial(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], i, -1, "none", "none", VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][i]);
					}
				}
				case VOBJECT_TYPE_TEXT:
				{
					SetDynamicObjectMaterialText
					(
						VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
						0,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT],
						130,
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD],
						VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],
						0,
						OBJECT_MATERIAL_TEXT_ALIGN_CENTER
					);
				}
				case VOBJECT_TYPE_COUNTRY_FLAG: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 1, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
				case VOBJECT_TYPE_COUNTRY_PANEL: TextureCountryFlag(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID], 0, VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0]);
			}
		}

		AttachDynamicObjectToVehicle
		(
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID],
			vehicleid,
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]
		);
	}
	else
	{
		if(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] != INVALID_STREAMER_ID)
		{
			DestroyDynamicObject(VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID]);
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OBJECT_ID] = INVALID_STREAMER_ID;
		}
	}
	return 1;
}

EditVehicleObject(playerid, vehicleid, slot)
{
	if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
	{
		DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
		PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
	}

	PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] = slot;
	GetVehiclePos(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1], GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2]);

	new Float:pos[3];
	pos[0] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][0] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	pos[1] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][1] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	pos[2] = GLOBAL_VEHICLES[vehicleid][gb_vehicle_POS][2] + VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];

	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1];
	PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5] = VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2];

	PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = CreatePlayerObject(playerid, 999, pos[0], pos[1], pos[2], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2]);
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 0, 0, "null", "null");
	SetPlayerObjectMaterial(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT], 1, 0, "null", "null");

	Streamer_Update(playerid);
	EditPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(playerobject)
	{
		if(objectid == PLAYER_TEMP[playerid][pt_PIVOT_OBJECT])
		{
			switch(response)
			{
				case EDIT_RESPONSE_CANCEL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
					Streamer_Update(playerid);

					SendNotification(playerid, "Has cancelado la edición.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_FINAL:
				{
					if(PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] != INVALID_OBJECT_ID)
					{
						DestroyPlayerObject(playerid, PLAYER_TEMP[playerid][pt_PIVOT_OBJECT]);
						PLAYER_TEMP[playerid][pt_PIVOT_OBJECT] = INVALID_OBJECT_ID;
					}

					new Float:v_size[3];
					GetVehicleModelInfo(GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_MODELID], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);

					if	(
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] >= v_size[0] || -v_size[0] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] >= v_size[1] || -v_size[1] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1]) ||
							(VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] >= v_size[2] || -v_size[2] >= VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2])
						)
					{
						SendNotification(playerid, "La posición del objeto está demasiado lejos del vehículo.");
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][0];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][1];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][2];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][3];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][4];
						VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = PLAYER_TEMP[playerid][pt_OLD_EDIT_VOBJECT_POS][5];
						UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
						Streamer_Update(playerid);
					}

					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ATTACHED] = true;
					SendNotification(playerid, "Objeto actualizado.");
					ShowDialog(playerid, DIALOG_VOBJECT_OBJECT);
				}
				case EDIT_RESPONSE_UPDATE:
				{
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][0] = fX - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][0];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][1] = fY - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][1];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_OFFSET][2] = fZ - GLOBAL_VEHICLES[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][gb_vehicle_POS][2];
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][0] = fRotX;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][1] = fRotY;
					VEHICLE_OBJECTS[ PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID] ][ PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT] ][vobject_ROT][2] = fRotZ;
					UpdateVehicleAttachedObject(PLAYER_TEMP[playerid][pt_TUNING_GARAGE_VEHICLEID], PLAYER_TEMP[playerid][pt_TUNING_EDIT_SLOT]);
				}
			}
		}
	}
	return 1;
}

SetVehicleVirtualWorldEx(vehicleid, worldid)
{
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_TP_IMMUNITY] = gettime() + 5;
	GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD] = worldid;

	for(new i = 0; i != MAX_SU2_VOBJECTS; i ++)
	{
		if(!VEHICLE_OBJECTS[vehicleid][i][vobject_VALID]) continue;
		if(VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID] == INVALID_STREAMER_ID) continue;

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, VEHICLE_OBJECTS[vehicleid][i][vobject_OBJECT_ID], E_STREAMER_WORLD_ID, GLOBAL_VEHICLES[vehicleid][gb_vehicle_WORLD]);
	}

	SetVehicleVirtualWorld(vehicleid, worldid);
	return 1;
}

TextureCountryFlag(objectid, index, country)
{
	new text_flag[128], material_size, font[24], font_size, text_alignment;
	switch(country)
	{
		case 0: // Alemania
		{
			text_flag		= "{231f20}ggg\n{e01f26}ggg\n{e3bc22}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 1: // Argentina
		{
			text_flag		= "{1FBEF2}ggg\n{ffffff}ggg\n{1FBEF2}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 2: // Austria
		{
			text_flag		= "{d81e05}ggg\n{ffffff}ggg\n{d81e05}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 3: // Belgica
		{
			text_flag		= "{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g\n{000000}g{ffd600}g{e80000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 4: // Bolivia
		{
			text_flag		= "{d52b1e}ggg\n{f9e300}ggg\n{007934}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 5: // Bulgaria
		{
			text_flag		= "{ffffff}ggg\n{00966e}ggg\n{d62612}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 6: // Chile
		{
			text_flag		= "{04019a}g{ffffff}gg\n{fe0002}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 7: // Colombia
		{
			text_flag		= "{fcd116}ggg\n{003893}ggg\n{ce1126}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 0;
		}
		case 8: // El Salvador
		{
			text_flag		= "{0f47af}ggg\n{ffffff}ggg\n{0f47af}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 9: // España
		{
			text_flag		= "{c60b1e}ggg\n{ffc400}ggg\n{c60b1e}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 10: // Estonia
		{
			text_flag		= "{3a75c4}ggg\n{000000}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 11: // Francia
		{
			text_flag		= "{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g\n{00209f}g{ffffff}g{f42a41}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 12: // Guatemala
		{
			text_flag		= "{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g\n{4997d0}g{ffffff}g{4997d0}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 13: // Holanda
		{
			text_flag		= "{ad1b28}ggg\n{fefefe}ggg\n{204589}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 14: // Hungria
		{
			text_flag		= "{d2232c}ggg\n{ffffff}ggg\n{008d46}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 15: // India
		{
			text_flag		= "{ff9933}ggg\n{ffffff}ggg\n{138808}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 16: // Indonesia
		{
			text_flag		= "{ce1126}ggg\n{ffffff}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 17: // Irlanda
		{
			text_flag		= "{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g\n{009e60}g{ffffff}g{f77f00}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 18: // Italia
		{
			text_flag		= "{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g\n{009246}g{ffffff}g{ce2b37}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 19: // Lituania
		{
			text_flag		= "{fdb913}ggg\n{006a44}ggg\n{c1272d}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 20: // Luxemburgo
		{
			text_flag		= "{ef2b2d}ggg\n{ffffff}ggg\n{00a3dd}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 21: // Madagascar
		{
			text_flag		= "{ffffff}g{d11f33}gg\n{ffffff}g{00a651}gg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 22: // Malta
		{
			text_flag		= "{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g\n{ffffff}g{d11f33}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 23: // Malí
		{
			text_flag		= "{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g\n{14b53a}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 24: // México
		{
			text_flag		= "{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g\n{006847}g{ffffff}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 25: // Nigeria
		{
			text_flag		= "{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g\n{008751}g{ffffff}g{008751}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 26: // Panamá
		{
			text_flag		= "{ffffff}g{d21034}g\n{0067c6}g{ffffff}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 0;
		}
		case 27: // Paraguay
		{
			text_flag		= "{d52b1e}ggg\n{ffffff}ggg\n{0038a8}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 28: // Perú
		{
			text_flag		= "{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g\n{e30000}g{ffffff}g{e30000}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 29: // Polonia
		{
			text_flag		= "{ffffff}ggg\n{dc143c}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 30: // Rumania
		{
			text_flag		= "{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g\n{002b7f}g{fcd116}g{ce1126}g";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 31: // Rusia
		{
			text_flag		= "{ffffff}ggg\n{054da2}ggg\n{e01f26}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
		case 32: // Ucrania
		{
			text_flag		= "{3a75c4}ggg\n{f9dd16}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 60;
			text_alignment	= 1;
		}
		case 33: // Venezuela
		{
			text_flag		= "{f7d117}ggg\n{0033ab}ggg\n{cf142b}ggg";
			material_size	= 60;
			font			= "Webdings";
			font_size		= 55;
			text_alignment	= 1;
		}
	}

	SetDynamicObjectMaterialText
	(
		objectid,
		index,
		text_flag,
		material_size,
		font,
		font_size,
		0,
		0xFFFFFFFF,
		0,
		text_alignment
	);
	return 1;
}

RegisterNewVehicleObject(vehicleid, slot)
{
	inline OnVobjectInserted()
	{
		VEHICLE_OBJECTS[vehicleid][slot][vobject_ID] = cache_insert_id();
	}

	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			INSERT INTO vobjects (id_vehicle, type, name, modelid, off_x, off_y, off_z, rot_x, rot_y, rot_z, attached, color0, color1, color2, color3, color4, text, font, fontsize, fontbold, fontcolor)\
			VALUES(%d, %d, '%e', %d, %f, %f, %f, %f, %f, %f, %d, %d, %d, %d, %d, %d, '%e', '%e', %d, %d, %d);\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR]
	);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnVobjectInserted);
	return 1;
}

UpdateVehicleObject(vehicleid, slot)
{
	mysql_format
	(
		mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
		"\
			UPDATE vobjects SET \
				id_vehicle = %d,\
				type = %d,\
				name = '%e',\
				modelid = %d,\
				off_x = %f,\
				off_y = %f,\
				off_z = %f,\
				rot_x = %f,\
				rot_y = %f,\
				rot_z = %f,\
				attached = %d,\
				color0 = %d,\
				color1 = %d,\
				color2 = %d,\
				color3 = %d,\
				color4 = %d,\
				text = '%e',\
				font = '%e',\
				fontsize = %d,\
				fontbold = %d,\
				fontcolor = %d \
			WHERE id = %d;\
		",
			PLAYER_VEHICLES[vehicleid][player_vehicle_ID], VEHICLE_OBJECTS[vehicleid][slot][vobject_TYPE], VEHICLE_OBJECTS[vehicleid][slot][vobject_NAME], VEHICLE_OBJECTS[vehicleid][slot][vobject_MODELID],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_OFFSET][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][1], VEHICLE_OBJECTS[vehicleid][slot][vobject_ROT][2],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_ATTACHED], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][0], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][1],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][2], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][3], VEHICLE_OBJECTS[vehicleid][slot][vobject_COLORS][4],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_TEXT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_SIZE],
			VEHICLE_OBJECTS[vehicleid][slot][vobject_text_BOLD], VEHICLE_OBJECTS[vehicleid][slot][vobject_text_FONT_COLOR],

			VEHICLE_OBJECTS[vehicleid][slot][vobject_ID]
	);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}



GetRulePagePositions(lines, &Float:pos_descripcion, &Float:pos_pages, &Float:pos_title)
{
	new Float:val[3];
	val[0] = 215.0 - (7.0 * (lines - 1) );
	val[1] = val[0] + (13.0 * (lines -1) ) + 20.0;
	val[2] = val[0] - 25.0;

	pos_descripcion = val[0];
	pos_pages = val[1];
	pos_title = val[2];
	return 1;
}

SetPlayerRulesTextDraw(playerid, title[], info[], info_lines, page, total_pages)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}

	FixTextDrawString(info);

	new Float:pos[3];
	GetRulePagePositions(info_lines, pos[0], pos[1], pos[2]);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = CreatePlayerTextDraw(playerid, 320.000000, pos[2], title);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = CreatePlayerTextDraw(playerid, 320.000000, pos[0], info);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0.314666, 1.442370);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 255);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1], 0);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = CreatePlayerTextDraw(playerid, 437.000000, pos[1], "Siguiente");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 3);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], 500.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], true);

	PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = CreatePlayerTextDraw(playerid, 203.000000, pos[1], "Anterior");
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0.386999, 1.861333);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 0);
	PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], 266.0, 20.0);
	PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3], true);

	if(page == total_pages) PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2], "Finalizar");
	new str[12]; format(str, sizeof str, "-_%d/%d_-", page, total_pages);
	PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = CreatePlayerTextDraw(playerid, 320.000000, pos[1] + 3.5, str);
	PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0.257998, 1.172740);
	PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 2);
	PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], -76);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 5272575);
	PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4], 0);

	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]);
	PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]);
	return 1;
}

DestroyPlayerRulesTextDraw(playerid)
{
	if(PlayerTextdraws[playerid][ptextdraw_GUIDE][0] != PlayerText:INVALID_TEXT_DRAW)
	{
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][0]); PlayerTextdraws[playerid][ptextdraw_GUIDE][0] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][1]); PlayerTextdraws[playerid][ptextdraw_GUIDE][1] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][2]); PlayerTextdraws[playerid][ptextdraw_GUIDE][2] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][3]); PlayerTextdraws[playerid][ptextdraw_GUIDE][3] = PlayerText:INVALID_TEXT_DRAW;
		PlayerTextDrawDestroy(playerid, PlayerTextdraws[playerid][ptextdraw_GUIDE][4]); PlayerTextdraws[playerid][ptextdraw_GUIDE][4] = PlayerText:INVALID_TEXT_DRAW;
	}
	return 1;
}

FixCharacterString(message[])
{
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'Á': message[pos] = 'A';
			case 'á': message[pos] = 'a';
			case 'É': message[pos] = 'E';
			case 'é': message[pos] = 'e';
			case 'Í': message[pos] = 'I';
			case 'í': message[pos] = 'i';
			case 'Ó': message[pos] = 'O';
			case 'ó': message[pos] = 'o';
			case 'Ú': message[pos] = 'U';
			case 'ú': message[pos] = 'u';
			case 'Ñ': message[pos] = 'N';
			case 'ñ': message[pos] = 'n';
			default:  message[pos] = message[pos];
		}
	}
}

FixTextDrawString(message[], bool:space = false)
{
	for(new len = strlen(message), pos; pos < len; pos ++)
	{
		switch(message[pos])
		{
			case 'à': message[pos] = 151;
			case 'á': message[pos] = 152;
			case 'â': message[pos] = 153;
			case 'ä': message[pos] = 154;
			case 'À': message[pos] = 128;
			case 'Á': message[pos] = 129;
			case 'Â': message[pos] = 130;
			case 'Ä': message[pos] = 131;
			case 'è': message[pos] = 157;
			case 'é': message[pos] = 158;
			case 'ê': message[pos] = 159;
			case 'ë': message[pos] = 160;
			case 'È': message[pos] = 134;
			case 'É': message[pos] = 135;
			case 'Ê': message[pos] = 136;
			case 'Ë': message[pos] = 137;
			case 'ì': message[pos] = 161;
			case 'í': message[pos] = 162;
			case 'î': message[pos] = 163;
			case 'ï': message[pos] = 164;
			case 'Ì': message[pos] = 138;
			case 'Í': message[pos] = 139;
			case 'Î': message[pos] = 140;
			case 'Ï': message[pos] = 141;
			case 'ò': message[pos] = 165;
			case 'ó': message[pos] = 166;
			case 'ô': message[pos] = 167;
			case 'ö': message[pos] = 168;
			case 'Ò': message[pos] = 142;
			case 'Ó': message[pos] = 143;
			case 'Ô': message[pos] = 144;
			case 'Ö': message[pos] = 145;
			case 'ù': message[pos] = 169;
			case 'ú': message[pos] = 170;
			case 'û': message[pos] = 171;
			case 'ü': message[pos] = 172;
			case 'Ù': message[pos] = 146;
			case 'Ú': message[pos] = 147;
			case 'Û': message[pos] = 148;
			case 'Ü': message[pos] = 149;
			case 'ñ': message[pos] = 174;
			case 'Ñ': message[pos] = 173;
			case '¡': message[pos] = 64;
			case '¿': message[pos] = 175;
			case '`': message[pos] = 177;
			case '&': message[pos] = 38;
			case ' ':
			{
				if(space)
				{
					message[pos] = '_';
				}
			}
			default:  message[pos] = message[pos];
		}
	}
}

HidePlayerMessage(playerid);
public HidePlayerMessage(playerid)
{
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][14]);
	if(!PLAYER_TEMP[playerid][pt_USER_LOGGED]) return 0;
	PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE], "_");
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_MESSAGE]);
	return 1;
}

PlayerPlaySoundEx(playerid, sound, Float:X, Float:Y, Float:Z)
{
	if(PI[playerid][pi_CONFIG_SOUNDS]) PlayerPlaySound(playerid, sound, X, Y, Z);
	return 1;
}

PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(PI[playerid][pi_CONFIG_AUDIO]) PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	return 1;
}

TogglePlayerControllableEx(playerid, bool:controllable)
{
	PLAYER_TEMP[playerid][pt_CONTROL] = controllable;
	return TogglePlayerControllable(playerid, controllable);
}

IsPlayerInSafeZone(playerid)
{
	for(new i = 0; i != sizeof SAFE_ZONES; i ++)
	{
		if(IsPlayerInDynamicArea(playerid, SAFE_ZONES[i][safe_zone_AREA_ID]))
		{
			return true;
		}
	}
	return false;
}

SetPlayerVip(playerid, vip_level, price_coin = 0, days = 30)
{
	PI[playerid][pi_COINS] -= price_coin;
	PI[playerid][pi_VIP] = vip_level;

	inline OnInfoQueryLoad()
	{
		inline OnCountQueryLoad()
		{
			new rows;
			if(cache_get_row_count(rows))
			{
				if(rows)
				{
					cache_get_value_index(0, 0, PI[playerid][pi_VIP_EXPIRE_DATE]);
					SendClientMessageEx(playerid, -1, "{"#PRIMARY_COLOR"}¡Felicidades! {FFFFFF}Has comprado VIP (%d) por %d días, fecha de caducidad: %s.", PI[playerid][pi_VIP], days, PI[playerid][pi_VIP_EXPIRE_DATE]);
					SendClientMessage(playerid, -1, "Puedes utilizar {"#PRIMARY_COLOR"}/vip {FFFFFF}para ver el tiempo restante o renovar.");
					UnlockPlayerVehicles(playerid);
					if(GetPlayerSkin(playerid) == PI[playerid][pi_SKIN]) SetPlayerToys(playerid);
				}
			}
		}
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT vip_expire_date FROM player WHERE id = %d;", PI[playerid][pi_ID]);
		mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnCountQueryLoad);
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = %d, vip = %d, vip_expire_date = DATE_ADD(NOW(), INTERVAL %d DAY) WHERE id = %d;", PI[playerid][pi_COINS], PI[playerid][pi_VIP], days, PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

UpdateUnnocupiedPropertyLabel(index)
{
	if(!PROPERTY_INFO[index][property_VALID]) return 0;
	if(PROPERTY_INFO[index][property_SOLD]) return 0;

	new label_str[256];
	if(PROPERTY_INFO[index][property_VIP_LEVEL])
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{"#PRIMARY_COLOR"}Membresía VIP requerida\n\
					\n\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	else
	{
		if(PROPERTY_INFO[index][property_EXTRA])
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Coste: {"#PRIMARY_COLOR"}%d "SERVER_COIN"\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], PROPERTY_INFO[index][property_EXTRA], PROPERTY_INFO[index][property_LEVEL]
			);
		}
		else
		{
			format
			(
				label_str,
				sizeof label_str,
				"\
					{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[index][property_ID], PROPERTY_INFO[index][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[index][property_PRICE]), PROPERTY_INFO[index][property_LEVEL]
			);
		}
	}
	UpdateDynamic3DTextLabelText(PROPERTY_INFO[index][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
	return 1;
}


FreezePlayer(playerid, ms = 2000)
{
	TogglePlayerControllableEx(playerid, false);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][2]);
	PLAYER_TEMP[playerid][pt_TIMERS][2] = SetTimerEx("TogglePlayerControl", ms, false, "ib", playerid, true);
	return 1;
}

forward CarJackingFinish(playerid);
public CarJackingFinish(playerid)
{
	TogglePlayerControllableEx(playerid, true);
	return 1;
}

SetPlayerNormalColor(playerid)
{
	/*if(PI[playerid][pi_VIP]) return SetPlayerColorEx(playerid, 0x{"#PRIMARY_COLOR"}00);
	else
	{
		if(PI[playerid][pi_ADMIN_LEVEL] && PLAYER_TEMP[playerid][pt_ADMIN_SERVICE] == true) SetPlayerColorEx(playerid, 0x8000FF00);
		else SetPlayerColorEx(playerid, PLAYER_COLOR);
	}*/
	SetPlayerColorEx(playerid, PLAYER_COLOR);
	return 1;
}



SendAdminAd(color, text[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][pi_CONFIG_ADMIN])
			{
				SendClientMessage(i, color, text);
			}
		}
	}
	return 1;
}

#define MIN_SECONDS_BETWEEN_COMMANDS 1 // Deben pasar al menos 1 segundos entre comando y comando.
public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(PLAYER_TEMP[playerid][pt_KICKED]) return 0;

	if(PLAYER_TEMP[playerid][pt_GAME_STATE] != GAME_STATE_NORMAL || PI[playerid][pi_STATE] == ROLEPLAY_STATE_HOSPITAL || IsPlayerInWorkTutorial(playerid))
	{
		SendNotification(playerid, "Ahora no puedes usar comandos.");
		return 0;
	}

	if(PLAYER_TEMP[playerid][pt_SELECT_TEXTDRAW]) { SendNotification(playerid, "Ahora no puedes usar comandos, pulsa 'ESCAPE' para cerrar el menú."); return 0; }

	if(PI[playerid][pi_ADMIN_LEVEL] < CMD_MODERADOR)
	{
		if(ComandoEstado == 0 && TiempoReinicio <= 2) 
		{ 
			SendNotification(playerid, "No puedes usar comandos durante el reinicio."); 
			return 0;
		}
	}

	new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS]);
	if(interval < MIN_SECONDS_BETWEEN_COMMANDS)
	{
		if(ac_Info[CHEAT_COMMAND_SPAMMER][ac_Enabled])
		{
			if(gettime() > PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_IMMUNITY])
			{
				if(interval < 50)
				{
					if(!ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					else
					{
						if(gettime() - PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_COMMAND_SPAMMER][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] = 0;
						else PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] ++;

						PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_LAST_DETECTION] = gettime();
						if(PLAYER_AC_INFO[playerid][CHEAT_COMMAND_SPAMMER][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_COMMAND_SPAMMER][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_COMMAND_SPAMMER, float(interval));
					}
				}
			}
		}
		SendNotification(playerid, "Cálmate.");
		return 0;
	}

	if(flags)
	{
		if(flags == CMD_DISABLED)
		{
			SendNotification(playerid, "Este comando está deshabilitado.");
			return 0;
		}

		if(flags > PI[playerid][pi_ADMIN_LEVEL])
		{
			SendFormatNotification(playerid, "El comando ~p~\"%s\"~w~ no existe.~n~~n~Utiliza el comando ~p~\"/ayuda\"~w~ para ver información sobre el servidor.", cmd);
			return 0;
		}

		if(!PLAYER_TEMP[playerid][pt_ADMIN_SERVICE])
		{
			SendNotification(playerid, "Debes estar de servicio como ~r~admin.");
			return 0;
		}
	}

	PLAYER_TEMP[playerid][pt_ANTIFLOOD_COMMANDS] = GetTickCount();

	#if CMD_LOGGIN
		printf("[CMD] %s (%d): /%s %s", PI[playerid][pi_NAME], PI[playerid][pi_ID], cmd, params);
	#endif
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		SendFormatNotification(playerid, "El comando ~p~\"%s\"~w~ no existe.~n~~n~Utiliza el comando ~p~\"/ayuda\"~w~ para ver información sobre el servidor.", cmd);
		return 0;
	}
	return 1;
}

SendMessageToDoubtChannel(playerid, message[])
{
	new str[145];
	if(PI[playerid][pi_ADMIN_LEVEL]) format(str, sizeof str, "[Dudas] {FFFFFF}%s (%d)[%s]: {b5bfcb}%s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, GetNameRankAdmin(playerid), message);
	else format(str, sizeof str, "[Dudas] {FFFFFF}%s (%d)[Nivel %d]: {b5bfcb}%s", PLAYER_TEMP[playerid][pt_RP_NAME], playerid, PI[playerid][pi_LEVEL], message);

	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if((PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL || PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_DEAD) && PI[i][pi_DOUBT_CHANNEL])
			{
				SendClientMessage(i, 0xE70CF5FF, str);
			}
		}
	}
	return 1;
}
CMD:muteart(playerid, params[])
{
	new to_player, reason[128], time;
	if(sscanf(params, "uds[128]", to_player, time, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /muteart <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendNotification(playerid, "Intervalo de minutos incorrecto.");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(gettime() < PI[to_player][pi_MUTE_TW]) return SendNotification(playerid, "El jugador ya está muteado de ~b~~h~~h~twitter~w~.");

	new seconds = time * 60;
	PI[to_player][pi_MUTE_TW] = gettime() + seconds;
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute_tw = %d WHERE id = %d;", PI[to_player][pi_MUTE_TW], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	SendClientMessageEx(to_player, -1, "Has sido silenciado del canal de twitter por %d minutos, razón: %s", time, reason);

	new str[145]; format(str, 145, "[ADMIN] {FFFFFF}%s (%d) silenció a %s (%d) del canal de twitter: %s.", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendCmdLogToAdmins(playerid, "muteart", params);
	SendAdminAd(0xDE00FFFF, str);
	return 1;
}
alias:muteart("mutetw");

CMD:desmuteart(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /desmuteart <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(gettime() > PI[to_player][pi_MUTE_TW]) return SendNotification(playerid, "Este jugador no está silenciado.");

	PI[to_player][pi_MUTE_TW] = 0;
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute_tw = %d WHERE id = %d;", PI[to_player][pi_MUTE_TW], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	SendClientMessage(to_player, -1, "Ya puedes volver a enviar twit's.");

	SendFormatNotification(playerid, "Jugador %s (%d) ha sido des-silenciado.", PI[to_player][pi_NAME], to_player);
	SendCmdLogToAdmins(playerid, "desmuteart", params);
	return 1;
}
alias:desmuteart("desmutetw");

CMD:muteard(playerid, params[])
{
	new to_player, reason[128], time;
	if(sscanf(params, "uds[128]", to_player, time, reason)) return SendNotification(playerid, "~r~Modo de uso:~w~ /muteard <player_id> <minutos> <razón>");
	if(time < 0 || time > 1440) return SendNotification(playerid, "Intervalo de minutos incorrecto.");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(gettime() < PI[to_player][pi_MUTE]) return SendNotification(playerid, "El jugador ya está muteado.");

	new seconds = time * 60;
	PI[to_player][pi_MUTE] = gettime() + seconds;
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][pi_MUTE], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	SendClientMessageEx(to_player, -1, "Has sido silenciado del canal de dudas por %d minutos, razón: %s", time, reason);

	new str[145]; format(str, 145, "[ADMIN] {FFFFFF}%s (%d) silenció a %s (%d) del canal de dudas: %s.", PI[playerid][pi_NAME], playerid, PI[to_player][pi_NAME], to_player, reason);
	SendCmdLogToAdmins(playerid, "muteard", params);
	SendAdminAd(0xDE00FFFF, str);
	return 1;
}

CMD:desmuteard(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /desmuteard <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");

	if(gettime() > PI[to_player][pi_MUTE]) return SendNotification(playerid, "Este jugador no está silenciado.");

	PI[to_player][pi_MUTE] = 0;
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET mute = %d WHERE id = %d;", PI[to_player][pi_MUTE], PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	SendClientMessage(to_player, -1, "Ya puedes volver a enviar dudas.");

	SendFormatNotification(playerid, "Jugador %s (%d) ha sido des-silenciado.", PI[to_player][pi_NAME], to_player);
	SendCmdLogToAdmins(playerid, "desmuteard", params);
	return 1;
}

GetFreePoliceObjectSlot()
{
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) return i;
	}
	return -1;
}

CMD:borrarop(playerid, params[])
{
	new affected_objects;
	for(new i = 0; i != MAX_POLICE_OBJECTS; i ++)
	{
		if(!POLICE_OBJECTS[i][police_object_VALID]) continue;

		DestroyDynamicObject(POLICE_OBJECTS[i][police_object_OBJECT_ID]);
		POLICE_OBJECTS[i][police_object_VALID] = false;
		POLICE_OBJECTS[i][police_object_USER][0] = EOS;
		POLICE_OBJECTS[i][police_object_OBJECT_ID] = INVALID_STREAMER_ID;
		affected_objects ++;
	}

	SendFormatNotification(playerid, "Se han eliminado todos los objetos policiales, %d objetos afectados.", affected_objects);
	SendCmdLogToAdmins(playerid, "borrarop", params);
	return 1;
}

CMD:abyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && !PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No perteneces a una facción.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE || PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FBI) return SendNotification(playerid, "No estás de servicio.");

	new to_player, reason[128];
	if(sscanf(params, "us[128]", to_player, reason)) return SendNotification(playerid, "Error: /abyc [Playerid o nombre] [razon]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(to_player == playerid) return 1;

	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No se puede añadir byc a este jugador ahora.");
	if(PLAYER_WORKS[to_player][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No puedes añadir byc a este jugador porque es policía.");

	AddPlayerPoliceHistory(to_player, PI[playerid][pi_ID], reason);
	SendFormatNotification(playerid, "Se ha añadido el informe al historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}

CMD:dbyc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && !PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No perteneces a una facción.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE || PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FBI) return SendNotification(playerid, "No estás de servicio.");
	if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 11) return SendFormatNotification(playerid, "~r~Debes ser al menos rango %s para hacer esto.", POLICE_RANKS[11]);
	else if(PLAYER_WORKS[playerid][WORK_POLICE][pwork_LEVEL] < 5) return SendFormatNotification(playerid, "~r~Debes ser al menos rango %s para hacer esto.", FBI_RANKS[5]);

	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "Error: /dbyc [Playerid o nombre]");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado.");
	if(PLAYER_TEMP[to_player][pt_GAME_STATE] != GAME_STATE_NORMAL) return SendNotification(playerid, "No se puede eliminar el historial policial de este jugador ahora.");

	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "DELETE FROM police_history WHERE id_player = %d;", PI[to_player][pi_ID]);
	mysql_tquery(mysql_db, QUERY_BUFFER);

	SendFormatNotification(playerid, "Has borrado el historial policial de %s.", PLAYER_TEMP[to_player][pt_RP_NAME]);
	return 1;
}


CMD:byc(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET] && !PLAYER_WORKS[playerid][WORK_FBI][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE || PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_FBI) return SendNotification(playerid, "No estás de servicio.");

	ShowDialog(playerid, DIALOG_POLICE_BYC);
	return 1;
}

AddPlayerPoliceHistory(playerid, by_id, reason[])
{
	if(!PI[playerid][pi_ID]) return 0;

	new date[24];
	getDateTime(date);
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "INSERT INTO police_history (id_player, by_id, text, date) VALUES (%d, %d, '%e', '%e');", PI[playerid][pi_ID], by_id, reason, date);
	mysql_tquery(mysql_db, QUERY_BUFFER);
	return 1;
}

CMD:admac(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /admac <nivel>");
	ADMIN_LEVEL_AC_IMMUNITY = params[0];

	SendFormatNotification(playerid, "Admin level %d o mayor no sera detectado por ac.", ADMIN_LEVEL_AC_IMMUNITY);
	return 1;
}

CMD:cleancrews(playerid, params[])
{
	SendNotification(playerid, "deshabilitado");
	return 1;
}

CMD:cleanproperties(playerid, params[])
{
	new total;
	for(new i = 0; i != MAX_PROPIEDADES; i ++)
	{
		if(PROPERTY_INFO[i][property_SOLD])
		{
			PROPERTY_INFO[i][property_SOLD] = false;
			PROPERTY_INFO[i][property_CREW] = false;
			PROPERTY_INFO[i][property_OWNER_ID] = 0;
			PROPERTY_INFO[i][property_CREW_ID] = 0;
			format(PROPERTY_INFO[i][property_NAME], 24, "PROPIEDAD %d", PROPERTY_INFO[i][property_ID]);

			new label_str[256], info[3];
			format
			(
				label_str,
				sizeof label_str,
				"\
					Propiedad {"#PRIMARY_COLOR"}#%d {FFFFFF}está en venta\n\n\
					Interior: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Precio: {"#PRIMARY_COLOR"}%s$\n\
					{FFFFFF}Nivel necesario: {"#PRIMARY_COLOR"}%d\n\
					{FFFFFF}Usa {"#PRIMARY_COLOR"}/ayuda {FFFFFF}para ver como adquirirla.\
				", PROPERTY_INFO[i][property_ID], PROPERTY_INFO[i][property_ID_INTERIOR], number_format_thousand(PROPERTY_INFO[i][property_PRICE]), PROPERTY_INFO[i][property_LEVEL]
			);
			UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);

			DestroyDynamicPickup(PROPERTY_INFO[i][property_EXT_PICKUP_ID]);
			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = INVALID_STREAMER_ID;

			PROPERTY_INFO[i][property_EXT_PICKUP_ID] = CreateDynamicPickup(1273, 1, PROPERTY_INFO[i][property_EXT_X], PROPERTY_INFO[i][property_EXT_Y], PROPERTY_INFO[i][property_EXT_Z], 0, PROPERTY_INFO[i][property_EXT_INTERIOR]);
			info[0] = PICKUP_TYPE_PROPERTY;
			info[1] = i; // Index
			info[2] = 2; // Pickup Exterior
			Streamer_SetArrayData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[i][property_EXT_PICKUP_ID], E_STREAMER_EXTRA_ID, info);

			//
			total ++;
		}
	}

	//
	mysql_tquery(mysql_db, "UPDATE properties SET id_player = NULL, id_territory = NULL;");

	SendFormatNotification(playerid, "Se han liberado todas las propiedades (%d).", total);

	SendCmdLogToAdmins(playerid, "cleanproperties", params);
	return 1;
}

CMD:cleanshop(playerid, params[])
{
	mysql_tquery(mysql_db, "DELETE FROM shop;");
	SendNotification(playerid, "Ok.");
	return 1;
}

CMD:countv(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /countv <playerid>");
	SendFormatNotification(playerid, "Vehicles: %d", CountPlayerVehicles(params[0]));
	return 1;
}

CMD:countp(playerid, params[])
{
	if(sscanf(params, "u", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /countp <playerid>");
	SendFormatNotification(playerid, "Properties: %d", CountPlayerProperties(params[0]));
	return 1;
}

CMD:presolv(playerid, params[])
{
	if(sscanf(params, "d", params[0])) return SendNotification(playerid, "~r~Modo de uso:~w~ /presolv <numero>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, name[24], connected, pid;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				SendFormatNotification(playerid, "PN: %d --- Nombre: '%s' DB-ID: '%d' Conectado: '%d' Playerid: '%d'", params[0], name, id, connected, pid);
			}
			else SendNotification(playerid, "No se encontró ningún resultado para ese número.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, name, connected, playerid FROM player WHERE phone_number = %d LIMIT 1;", params[0]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}


Set_FUMIGATOR_Checkpoint(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT]);
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] == sizeof(FUMIGATOR_CHECKPOINTS) - 1)
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															4,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															0.0,
															0.0,
															0.0,
															10.0,
															0,
															0,
															playerid,
															999999.0
														);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT] =	CreateDynamicRaceCP
														(
															3,
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] ][2],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][0],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][1],
															FUMIGATOR_CHECKPOINTS[ PLAYER_TEMP[playerid][pt_FUMIGATOR_PROCCESS] + 1 ][2],
															10.0,
															0,
															0,
															playerid,
															999999.0
														);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_FUMIGATOR;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_FUMIGATOR_CHECKPOINT], E_STREAMER_EXTRA_ID, info);

	return 1;
}

CMD:osetname(playerid, params[])
{
	new to_account, new_name[24];
	if(sscanf(params, "ds[20]", to_account, new_name)) return SendNotification(playerid, "~r~Modo de uso:~w~ /osetname <DB-ID> <name>");
	if(!IsValidRPName(new_name)) return SendFormatNotification(playerid, "El nombre '%s' no cumple con el formato Nombre_Apellido.", new_name);

	inline OnNameChecked()
	{
		new crows;
		if(cache_get_row_count(crows))
		{
			if(crows) SendFormatNotification(playerid, "El nombre %s está en uso", new_name);
			else
			{
				inline OnInfoQueryLoad()
				{
					new rows;
					if(cache_get_row_count(rows))
					{
						if(rows)
						{
							new id, ip[16], name[24], connected, pid, admin_level;
							cache_get_value_name_int(0, "id", id);
							cache_get_value_name(0, "ip", ip);
							cache_get_value_name(0, "name", name);
							cache_get_value_name_int(0, "connected", connected);
							cache_get_value_name_int(0, "playerid", pid);
							cache_get_value_name_int(0, "admin_level", admin_level);

							if(PI[playerid][pi_ADMIN_LEVEL] >= admin_level)
							{
								if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado utilice /setname, su player_id: %d.", name, id, pid);
								else
								{
									mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET name = '%e' WHERE id = %d;", new_name, id);
									mysql_tquery(mysql_db, QUERY_BUFFER);

									for(new i = 0; i != MAX_PROPIEDADES; i ++)
									{
										if(!PROPERTY_INFO[i][property_VALID]) continue;
										if(PROPERTY_INFO[i][property_OWNER_ID] != id) continue;

										new label_str[256];
										format
										(
											label_str,
											sizeof label_str,
											"\
												{"#PRIMARY_COLOR"}·{FFFFFF}Propiedad {"#PRIMARY_COLOR"}#%d\n\n\
												{"#PRIMARY_COLOR"}·{FFFFFF}Propietario: {"#PRIMARY_COLOR"}%s\n\
												{"#PRIMARY_COLOR"}·Acercate {FFFFFF}para entrar.\
											", PROPERTY_INFO[i][property_ID], new_name
										);
										UpdateDynamic3DTextLabelText(PROPERTY_INFO[i][property_EXT_LABEL_ID], 0xFFFFFFFF, label_str);
									}
									SendFormatNotification(playerid, "El nombre de '%s' ahora es: %s", name, new_name);
								}
							}
							else SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
						}
						else SendNotification(playerid, "No se encontro la DB-ID.");
					}
				}
				mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
				mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
			}
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id FROM player WHERE name = '%e';", new_name);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnNameChecked);
	return 1;
}

CMD:ogivecoins(playerid, params[])
{
	new to_account, amount;
	if(sscanf(params, "dd", to_account, amount)) return SendNotification(playerid, "~r~Modo de uso:~w~ /ogivecoins <DB-ID> <cantidad>");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new id, ip[16], name[24], connected, pid, admin_level;
				cache_get_value_name_int(0, "id", id);
				cache_get_value_name(0, "ip", ip);
				cache_get_value_name(0, "name", name);
				cache_get_value_name_int(0, "connected", connected);
				cache_get_value_name_int(0, "playerid", pid);
				cache_get_value_name_int(0, "admin_level", admin_level);

				if(connected) SendFormatNotification(playerid, "JUGADOR '%s' DB-ID '%d' conectado, player_id: %d, use /givecoins.", name, id, pid);
				else
				{
					mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE player SET coins = coins + %d WHERE id = %d;", amount, id);
					mysql_tquery(mysql_db, QUERY_BUFFER);
					SendFormatNotification(playerid, "Le has dado %d "SERVER_COIN" a %s.", amount, name);
				}
			}
			else SendNotification(playerid, "No se encontro la DB-ID.");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT id, ip, name, connected, playerid, admin_level FROM player WHERE id = %d;", to_account);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:con(playerid, params[])
{
	new stats[400+1];
	GetNetworkStats(stats, sizeof(stats));
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Estadísticas del servidor", stats, "OK", "");
	return 1;
}

CMD:notifica(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "Uso: /notifica [cmd/adm/ac/chat]");

	switch(YHash(params, false))
	{
		case _I<cmd>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] ^= true;
			SendFormatNotification(playerid, "Log de comandos %sactivado", PLAYER_TEMP[playerid][pt_SEE_ACMD_LOG] ? ("") : ("des"));
		}
		case _I<adm>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] ^= true;
			SendFormatNotification(playerid, "Log admin general %sactivado", PLAYER_TEMP[playerid][pt_SEE_ADM_LOG] ? ("") : ("des"));
		}
		case _I<ac>:
		{
			PLAYER_TEMP[playerid][pt_SEE_AC_LOG] ^= true;
			SendFormatNotification(playerid, "Log de anticheat %sactivado", PLAYER_TEMP[playerid][pt_SEE_AC_LOG] ? ("") : ("des"));
		}
		case _I<chat>:
		{
			PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] ^= true;
			SendFormatNotification(playerid, "Chat admin %sactivado", PLAYER_TEMP[playerid][pt_SEE_ADM_CHAT] ? ("") : ("des"));
		}
		default:
			SendNotification(playerid, "Uso: /notifica [cmd/log/ac/chat]");
	}

	return 1;
}

SetPlayerDrivingSchoolCP(playerid)
{
	if(IsValidDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]))
	{
		DestroyDynamicRaceCP(PLAYER_TEMP[playerid][pt_DL_EXAM_CP]);
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] = INVALID_STREAMER_ID;
	}

	if(PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] == sizeof(Driving_School_Points) - 1)
	{
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] =	CreateDynamicRaceCP
												(
													1,
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][2],
													0.0,
													0.0,
													0.0,
													5.0,
													0,
													0,
													playerid
												);
	}
	else
	{
		PLAYER_TEMP[playerid][pt_DL_EXAM_CP] =	CreateDynamicRaceCP
												(
													0,
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] ][2],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][0],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][1],
													Driving_School_Points[ PLAYER_TEMP[playerid][pt_DL_EXAM_PROCCESS] + 1][2],
													5.0,
													0,
													0,
													playerid
												);
	}

	new info[1];
	info[0] = CHECKPOINT_TYPE_DRIVING_SCHOOL;
	Streamer_SetArrayData(STREAMER_TYPE_RACE_CP, PLAYER_TEMP[playerid][pt_DL_EXAM_CP], E_STREAMER_EXTRA_ID, info);
	return 1;
}

CMD:changeflags(playerid, params[])
{
	new cmd[24], flags;
	if(sscanf(params, "s[24]d", cmd, flags)) return SendNotification(playerid, "Uso: /changeflags [cmd] [flags]");

	PC_SetFlags(cmd, flags);
	SendFormatNotification(playerid, "Flag de /%s cambiada a %d", cmd, flags);
	return 1;
}

CMD:cobject(playerid, params[]) //crear objetos dentro del servidor
{
	new modelid;
	if(sscanf(params, "d", modelid)) return SendNotification(playerid, "Uso: /cobject [modelid]");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	new objectid = CreateDynamicObject(modelid, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0);
	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, {OBJECT_TYPE_TEST});
	Streamer_Update(playerid);
	EditDynamicObject(playerid, objectid);
	return 1;
}

CMD:selectobject(playerid, params[])
{
	SendNotification(playerid, "Entraste en selección de objetos");
	SelectObject(playerid);
	return 1;
}

CMD:std(playerid, params[])
{
	SelectTextDrawEx(playerid, 0xe8d08fFF);
	return 1;
}


CMD:historial(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /historial <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);
	if(PI[to_player][pi_ADMIN_LEVEL] > PI[playerid][pi_ADMIN_LEVEL]) return SendNotification(playerid, "El rango administrativo de este jugador es superior al tuyo.");
	if(!PI[to_player][pi_ID]) return SendNotification(playerid, "DB ID = 0!");

	inline OnInfoQueryLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			new caption[40], dialog[1600], line_str[256];
			format(caption, sizeof caption, "Bad historial de %s (%d)", PI[to_player][pi_NAME], to_player);
			format(dialog, sizeof dialog, "Por\tFecha\tTipo\tDescr.\n");
			if(rows)
			{
				for(new i = 0; i != rows; i ++)
				{
					new name[24], by, type, date[24], text[128], bool:isnull_by;
					cache_get_value_name(i, "name", name);
					cache_is_value_name_null(i, "by", isnull_by);
					if(!isnull_by) cache_get_value_name_int(i, "by", by);
					cache_get_value_name_int(i, "type", type);
					cache_get_value_name(i, "date", date);
					cache_get_value_name(i, "text", text);

					if(by == -1) name = "AC";
					switch(type)
					{
						case TYPE_WARNING: format(line_str, sizeof line_str, "%s\t%s\tAdv\t%s\n", name, date, text);
						case TYPE_KICK: format(line_str, sizeof line_str, "%s\t%s\tKick\t%s\n", name, date, text);
						case TYPE_BAN: format(line_str, sizeof line_str, "%s\t%s\tBan\t%s\n", name, date, text);
						case TYPE_TEMP_BAN: format(line_str, sizeof line_str, "%s\t%s\tTBan\t%s\n", name, date, text);
						case TYPE_UNBAN: format(line_str, sizeof line_str, "%s\t%s\tUnban\t%s\n", name, date, text);
					}
					strcat(dialog, line_str);
				}
			}
			else strcat(dialog, "Sin resultados");
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, caption, dialog, "X", "");
			SendNotification(playerid, "Limite: 20");
		}
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT bad_history.*, player.name FROM bad_history LEFT JOIN player ON bad_history.by = player.id WHERE bad_history.id_player = %d ORDER BY bad_history.date LIMIT 20;", PI[to_player][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnInfoQueryLoad);
	return 1;
}

CMD:version(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /getversion <playerid>");
	if(!IsPlayerConnected(to_player)) return SendNotification(playerid, "Jugador desconectado");

	new player_version[32];
	GetPlayerVersion(to_player, player_version, sizeof player_version);

	SendFormatNotification(playerid, "%s usa la versión %s", PLAYER_TEMP[to_player][pt_NAME], player_version);
	return 1;
}
alias:version("cliente");

CMD:arma(playerid, params[])
{
	new weaponid, ammo;
	if(sscanf(params, "dd", weaponid, ammo)) return SendNotification(playerid, "Uso: /arma [weaponid] [balas]");
	if(!WEAPON_INFO[weaponid][weapon_info_AMMO]) ammo = 1;

	GivePlayerWeaponEx(playerid, weaponid, ammo);
	RegisterNewPlayerWeapon(playerid, WEAPON_INFO[weaponid][weapon_info_SLOT]);
	return 1;
}

CMD:printtestvehicles(playerid, params[])
{
	for(new i, j = GetVehiclePoolSize(); i <= j; i++)
	{
		if(GLOBAL_VEHICLES[i][gb_vehicle_VALID] && GLOBAL_VEHICLES[i][gb_vehicle_TYPE] == VEHICLE_TYPE_TEST)
		{
			new Float:x, Float:y, Float:z, Float:angle;
			GetVehiclePos(i, x, y, z);
			GetVehicleZAngle(i, angle);
			printf("{VEHICLE_TYPE_, WORK_, exp, %d, %f, %f, %f, %f, color1, color2, vip, world},", GetVehicleModel(i), x, y, z, angle);
			SendClientMessageEx(playerid, -1, "%d %d, %f, %f, %f, %f", i, GetVehicleModel(i), x, y, z, angle);
		}
	}
	SendNotification(playerid, "Se hizo un printf de todos los vehiculos de prueba - revisa la consola o el server_log.txt");
	return 1;
}
alias:printtestvehicles("vehiculostest");

CMD:placaex(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_NONE && PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendFormatNotification(playerid, "Tienes que dejar de estar de servicio como %s primero.", work_info[ PLAYER_TEMP[playerid][pt_WORKING_IN] ][work_info_NAME]);
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return SendNotification(playerid, "No estás depie.");

	if(!PLAYER_TEMP[playerid][pt_WORKING_IN]) ShowDialog(playerid, DIALOG_SELECT_WORK_SKIN);
	else
	{
		CallLocalFunction("EndPlayerJob", "iib", playerid, PLAYER_TEMP[playerid][pt_WORKING_IN], true);
		PI[playerid][pi_WORK_DUTY] = 0;
	}
	return 1;
}
alias:placaex("policiaadmin");

CMD:vehicles(playerid, params[])
{
	new to_player;
	if(sscanf(params, "u", to_player)) return SendNotification(playerid, "~r~Modo de uso:~w~ /vehicles <player_id>");
	if(!IsPlayerConnected(to_player)) return SendFormatNotification(playerid, "Jugador (%d) desconectado", to_player);

	new dialog[115 * (MAX_SU2_VEHICLES + 2)], total_vehicles;
	format(dialog, sizeof dialog, "Vehículo\tMatrícula\tDistancia\n");
	for(new i = 0; i != MAX_VEHICLES; i ++)
	{
		if(!GLOBAL_VEHICLES[i][gb_vehicle_VALID]) continue;
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(total_vehicles > MAX_SU2_VEHICLES) break;

		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[to_player][pi_ID])
		{
			new Float:pos[3];
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			new line_str[115];
			format(line_str, sizeof line_str, "{FFFFFF}%d. %s\t{FFFFFF}%s\t{"#SILVER_COLOR"}/gotoveh %d\n", total_vehicles + 1, VEHICLE_INFO[ GLOBAL_VEHICLES[i][gb_vehicle_MODELID] - 400 ][vehicle_info_NAME], GLOBAL_VEHICLES[i][gb_vehicle_NUMBER_PLATE], i);
			strcat(dialog, line_str);
			total_vehicles ++;
		}
	}
	if(total_vehicles == 0) strcat(dialog, "{"#SILVER_COLOR"}El jugador no tiene vehiculos");

	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_TABLIST_HEADERS, "Vehiculos", dialog, "OK", "");
	return 1;
}
alias:vehicles("vehiculos");

CMD:msv(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "Usa /msv [link]");
	new string[320];
	format(string, sizeof(string), params);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		PlayAudioStreamForPlayer(i, string);
	}
	return 1;
}

CMD:voz(playerid, params[])
{
	if(isnull(params)) return SendNotification(playerid, "Usa /voz [Texto]");
	new string[300];
	format(string, sizeof string , "http://audio1.spanishdict.com/audio?lang=es&voice=Ximena&speed=25&text=%s", params);
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		PlayAudioStreamForPlayer(i, string);
	}
	return 1;
}

CMD:reloadsv(playerid,params[])
{
	new tiempo;
	if(!ComandoEstado) return SendClientMessage(playerid, -1, "El reinicio del servidor ya está activo.");
	if(sscanf(params, "d", tiempo)) return SendNotification(playerid,"Utiliza /reloadsv [minutos]");
	if(tiempo < 2) return SendClientMessage(playerid, -1, "El tiempo para el reinicio debe ser mayor que 1.");

	ComandoEstado = 0;
	TiempoReinicio = tiempo*60;

	new string[64];
	format(string, sizeof string, "El servidor se reiniciará automáticamente en %d minutos.", tiempo);
	SendClientMessageToAll(0xb5bfcbFF, string);

	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i) && PLAYER_TEMP[playerid][pt_USER_LOGGED])
		{
			ResetCombat(i);
			if(PI[i][pi_WANTED_LEVEL] > 0)
			{
				SendNotification(i, "Se te quitaron los cargos por el reinicio del servidor.");
				SetPlayerWantedLevelEx(i, 0);
			}
		}
	}
	return 1;
}

CMD:reloadcancel(playerid)
{
	if(ComandoEstado) return SendClientMessage(playerid, -1, "El reinicio del servidor no está activado.");

	ComandoEstado = 1;
	TiempoReinicio = -1;
	SendClientMessageToAll(0xb5bfcbFF, "El reinicio del servidor fue cancelado.");
	return 1;
}

//Ayudante
flags:muteard(CMD_AYUDANTE);
flags:desmuteard(CMD_AYUDANTE);
flags:cls(CMD_AYUDANTE);

//Mod
flags:sanx27(CMD_MODERADOR);
flags:trabajos(CMD_MODERADOR);
flags:getid(CMD_MODERADOR);
flags:getname(CMD_MODERADOR);
flags:adv(CMD_MODERADOR);
flags:kick(CMD_MODERADOR);
flags:spec(CMD_MODERADOR);
flags:specoff(CMD_MODERADOR);
flags:congelar(CMD_MODERADOR);
flags:descongelar(CMD_MODERADOR);
flags:unjail(CMD_MODERADOR);
flags:notifica(CMD_MODERADOR);
flags:ls(CMD_MODERADOR);
flags:lv(CMD_MODERADOR);
flags:sf(CMD_MODERADOR);
flags:pm(CMD_MODERADOR);
flags:despacho(CMD_MODERADOR);
flags:rv(CMD_MODERADOR);
flags:traerveh(CMD_MODERADOR);
flags:irveh(CMD_MODERADOR);
flags:ir(CMD_MODERADOR);
flags:traer(CMD_MODERADOR);
flags:bantempx27(CMD_MODERADOR);
flags:historial(CMD_MODERADOR);
flags:presolv(CMD_MODERADOR);
flags:slap(CMD_MODERADOR);
flags:ircasa(CMD_MODERADOR);
flags:irgaraje(CMD_MODERADOR);
flags:desbanipx27(CMD_MODERADOR);

//Mod global
flags:pest(CMD_MODERADOR_GLOBAL);
flags:pinv(CMD_MODERADOR_GLOBAL);
flags:pexp(CMD_MODERADOR_GLOBAL);
flags:parmas(CMD_MODERADOR_GLOBAL);
flags:pbank(CMD_MODERADOR_GLOBAL);
flags:desbanx27(CMD_MODERADOR_GLOBAL);
flags:banoffx27(CMD_MODERADOR_GLOBAL);
flags:bantempoffx27(CMD_MODERADOR_GLOBAL);
flags:rac(CMD_MODERADOR_GLOBAL);
flags:rac2(CMD_MODERADOR_GLOBAL);
flags:deletead(CMD_MODERADOR_GLOBAL);
flags:darsed(CMD_MODERADOR_GLOBAL);
flags:darhambre(CMD_MODERADOR_GLOBAL);
flags:dargaso(CMD_MODERADOR_GLOBAL);
flags:fixveh(CMD_MODERADOR_GLOBAL);
flags:lsdb(CMD_MODERADOR_GLOBAL);
flags:revive(CMD_MODERADOR_GLOBAL);
flags:borrarop(CMD_MODERADOR_GLOBAL);
flags:version(CMD_MODERADOR_GLOBAL);
flags:darvida(CMD_MODERADOR_GLOBAL);
flags:darchale(CMD_MODERADOR_GLOBAL);
flags:banx27(CMD_MODERADOR_GLOBAL);
flags:aka(CMD_MODERADOR_GLOBAL);
flags:entercar(CMD_MODERADOR_GLOBAL);
flags:vehicles(CMD_MODERADOR_GLOBAL);
flags:mapgar(CMD_MODERADOR_GLOBAL);

//Administrador
flags:pcolor(CMD_ADMINISTRADOR);
flags:settime(CMD_ADMINISTRADOR);
flags:setweather(CMD_ADMINISTRADOR);
flags:daradminx2731(CMD_ADMINISTRADOR);
flags:aa(CMD_ADMINISTRADOR);
flags:eliminarcasa(CMD_ADMINISTRADOR);
flags:editarcasa(CMD_ADMINISTRADOR);
flags:poscasa(CMD_ADMINISTRADOR);
flags:mapgh(CMD_ADMINISTRADOR);
flags:placaex(CMD_ADMINISTRADOR);
flags:cargosadmin(CMD_ADMINISTRADOR);
flags:setcash(CMD_ADMINISTRADOR);
flags:darnametemp(CMD_ADMINISTRADOR);
flags:arma(CMD_ADMINISTRADOR);
flags:givecoins(CMD_ADMINISTRADOR);
flags:darvip(CMD_ADMINISTRADOR);
flags:darskin(CMD_ADMINISTRADOR);
flags:dargenero(CMD_ADMINISTRADOR);
flags:ip(CMD_ADMINISTRADOR);
flags:damecrack(CMD_ADMINISTRADOR);
flags:damemedicamentos(CMD_ADMINISTRADOR);
flags:damemarihuana(CMD_ADMINISTRADOR);
flags:damekit(CMD_ADMINISTRADOR);
flags:damebotiquin(CMD_ADMINISTRADOR);
flags:say(CMD_ADMINISTRADOR);
flags:setfdrum(CMD_ADMINISTRADOR);
flags:ctele(CMD_ADMINISTRADOR);
flags:tele(CMD_ADMINISTRADOR);
flags:teles(CMD_ADMINISTRADOR);
flags:etele(CMD_ADMINISTRADOR);

//Desarrollador
flags:darcoins(CMD_ADMINISTRADOR_GENERAL);
flags:ac(CMD_ADMINISTRADOR_GENERAL);
flags:darnivel(CMD_ADMINISTRADOR_GENERAL);
flags:dartrabajo(CMD_ADMINISTRADOR_GENERAL);
flags:darexpjob(CMD_ADMINISTRADOR_GENERAL);
flags:dardinero(CMD_ADMINISTRADOR_GENERAL);
flags:setbmlevel(CMD_ADMINISTRADOR_GENERAL);
flags:cord(CMD_ADMINISTRADOR_GENERAL);
flags:v(CMD_ADMINISTRADOR_GENERAL);
flags:dv(CMD_ADMINISTRADOR_GENERAL);
flags:restart(CMD_ADMINISTRADOR_GENERAL);
flags:setname(CMD_ADMINISTRADOR_GENERAL);
flags:vendercasa(CMD_ADMINISTRADOR_GENERAL);
flags:interiorcasa(CMD_ADMINISTRADOR_GENERAL);
flags:setpass(CMD_ADMINISTRADOR_GENERAL);
flags:osetname(CMD_ADMINISTRADOR_GENERAL);
flags:delete(CMD_ADMINISTRADOR_GENERAL);
flags:setfstyle(CMD_ADMINISTRADOR_GENERAL);
flags:vpcar(CMD_ADMINISTRADOR_GENERAL);
flags:darprenda(CMD_ADMINISTRADOR_GENERAL);
flags:admac(CMD_ADMINISTRADOR_GENERAL);
flags:ogivecoins(CMD_ADMINISTRADOR_GENERAL);
flags:changeflags(CMD_ADMINISTRADOR_GENERAL);
flags:darnameplayer(CMD_ADMINISTRADOR_GENERAL);
flags:printtestvehicles(CMD_ADMINISTRADOR_GENERAL);
flags:gpos(CMD_ADMINISTRADOR_GENERAL);
flags:cpos(CMD_ADMINISTRADOR_GENERAL);
flags:sound(CMD_ADMINISTRADOR_GENERAL);
flags:anim(CMD_ADMINISTRADOR_GENERAL);
flags:cobject(CMD_ADMINISTRADOR_GENERAL);
flags:payday(CMD_ADMINISTRADOR_GENERAL);
flags:damepatines(CMD_ADMINISTRADOR_GENERAL);
flags:darpatines(CMD_ADMINISTRADOR_GENERAL);
flags:voz(CMD_ADMINISTRADOR_GENERAL);
flags:msv(CMD_ADMINISTRADOR_GENERAL);
flags:darbanda(CMD_ADMINISTRADOR_GENERAL);
flags:bandas(CMD_ADMINISTRADOR_GENERAL);

//OWNER
flags:cleancrews(CMD_OWNER);
flags:cleanproperties(CMD_OWNER);
flags:cleanshop(CMD_OWNER);
flags:selectobject(CMD_OWNER);
flags:con(CMD_OWNER);
flags:eco(CMD_OWNER);
flags:reloadsv(CMD_OWNER);
flags:reloadcancel(CMD_OWNER);

forward SecuestrarPlayer(playerid);
public SecuestrarPlayer(playerid)
{
	new to_player = PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO];
	if(!IsPlayerConnected(to_player) || PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] != playerid)
	{
		SendNotification(playerid, "El jugador que estabas secuestrando se ~r~desconectó.");

		PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;
		return 1;
	}

	PLAYER_TEMP[to_player][pt_PLAYER_SECUESTRANDO] = false;

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		SendNotification(playerid, "~r~¡¿Qué chingados se hizo el vehículo de secuestro?!");

		SendFormatNotification(playerid, "~b~%s logró escapar", PLAYER_TEMP[playerid][pt_RP_NAME]);
		SendNotification(to_player, "~g~¡Lograste escapar del secuestrador!");

		PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;
		PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] = INVALID_PLAYER_ID;
		return 1;
	}

	new Float:pos[3];
	GetPlayerPos(to_player, pos[0], pos[1], pos[2]);
	if(IsPlayerInRangeOfPoint(playerid, 6.0, pos[0], pos[1], pos[2]))
	{
		new asiento = 1, vehicleid = GetPlayerVehicleID(playerid);
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS])
		{
			SendNotification(playerid, "Cerraste las puertas del vehículo y la persona escapó.");

			SendFormatNotification(playerid, "~b~%s ~w~logró escapar", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendNotification(to_player, "~g~¡Lograste escapar del secuestrador!");

			PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;
			PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] = INVALID_PLAYER_ID;
		}
		else if((asiento + 1) > VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS])
		{
			SendFormatNotification(playerid, "Este vehículo es de %d pasajeros, así que no puedes secuestrar en él.", VEHICLE_INFO[ GLOBAL_VEHICLES[vehicleid][gb_vehicle_MODELID] - 400 ][vehicle_info_SEATS]);

			SendFormatNotification(playerid, "~b~%s ~w~logró escapar", PLAYER_TEMP[playerid][pt_RP_NAME]);
			SendNotification(to_player, "~g~¡Lograste escapar del secuestrador!");

			PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;
			PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] = INVALID_PLAYER_ID;
		}
		else
		{
			SendFormatNotification(playerid, "Has secuestrado a ~b~%s", PLAYER_TEMP[to_player][pt_RP_NAME]);
			SetPlayerWantedLevelEx(playerid, 3);
			PLAYER_TEMP[playerid][pt_TIME_SECUESTRO] = gettime();

			SendNotification(to_player, "~r~¡Oh no, te han secuestrado tío!");
			TogglePlayerControllableEx(to_player, false);
			PutPlayerInVehicleEx(to_player, vehicleid, asiento);
		}
	}
	else
	{
		SendFormatNotification(playerid, "~b~%s ~w~logró escapar", PLAYER_TEMP[playerid][pt_RP_NAME]);
		SendNotification(to_player, "~g~¡Lograste escapar del secuestrador!");

		PLAYER_TEMP[playerid][pt_PLAYER_ID_SECUESTRADO] = INVALID_PLAYER_ID;
		PLAYER_TEMP[to_player][pt_PLAYER_ID_SECUESTRADOR] = INVALID_PLAYER_ID;
	}
	return 1;
}

GetIDFaccionPlayer(playerid)
{
	for(new i = 0; i != sizeof work_info; i ++)
	{
		if(!PLAYER_WORKS[playerid][i][pwork_SET] || !i) continue;
		if(work_info[i][work_info_TYPE] != WORK_TYPE_FAMILY) continue;

		return i;
	}
	return -1;
}

SendErrorNotification(playerid, message[])
{
	PlayerPlaySoundEx(playerid, 1085, 0.0, 0.0, 0.0);
	SendNotification(playerid, message);
	return 1;
}

IsBici(id)
{
	if(GetVehicleModel(id) == 481 || GetVehicleModel(id) == 509 || GetVehicleModel(id) == 510) return 1;
	return 0;
}

IsTrailer(id)
{
	if(GetVehicleModel(id) == 403 || GetVehicleModel(id) == 559 || GetVehicleModel(id) == 515) return 1;
	return 0;
}

public DCC_OnMessageCreate(DCC_Message:message)
{
    new DCC_Channel:channel;
    DCC_GetMessageChannel(message, channel);
 
    // This if condition checks that if the channel is not the command channel then it will do nothing and return 1 //
    if(channel != dc_channel[0]) return 1;
 
    // But before that we need to save who actually sent the message //
    new DCC_User:author;
    DCC_GetMessageAuthor(message, author);

    new bool:isMentionMessage[2], user_and_role[2];
    DCC_IsMessageMentioningEveryone(message, isMentionMessage[0]);
    DCC_IsMessageTts(message, isMentionMessage[1]);
    DCC_GetMessageUserMentionCount(message, user_and_role[0]);
    DCC_GetMessageRoleMentionCount(message, user_and_role[1]);

    if(isMentionMessage[0] || isMentionMessage[1] || user_and_role[0] > 0 || user_and_role[1] > 0) return 1;
 
    // We need to check if the author is a bot or not //
 
    new bool:isBot;
    DCC_IsUserBot(author, isBot);
 
    // If the author is a bot then nothing will happen //
    if(isBot) return 1;
        
 
    // Now we will fetch if the author has the required role or not! //
    new bool:hasRole;
    DCC_HasGuildMemberRole(guildName, author, adminRole, hasRole);
 
    // If the author does not have the role then don't do anything //
    if(!hasRole) return DCC_SendChannelMessage(dc_channel[0], "No tienes el rol requerido para charlar en este canal.");
 
    // Now to actually make a command after all the checks are done //
    new str[256];
    new command[32], params[128];
 
    DCC_GetMessageContent(message, str); // Storing the entire message of the author in the variable str //

    if(isnull(str)) return 1; //si el mensaje es nulo o multimedia que retorne a 1
 
    // Now seperating the command and the params //
 
    sscanf(str, "s[32]s[128]", command, params);
    
    if(!strcmp(command, "&cmds", true))
    {
    	DCC_SendChannelMessage(channel, "```Comandos disponibles: \n/aa\n/pm```");
    	return 1;
    }
	else if(!strcmp(command, "&pm", true))
    {
        new playerID, _mensaje[128], string[128];
        if(sscanf(params, "us[128]", playerID, _mensaje)) return DCC_SendChannelMessage(channel, "Modo de uso: /pm <player_id> <mensaje>"); // Seperating the playerID and the message //
        if(!IsPlayerConnected(playerID)) return DCC_SendChannelMessage(channel, "El jugador no esta conectado.");

        format(string, sizeof string, "[Discord]: {FFFFFF}%s", _mensaje);
        SendClientMessage(playerID, 0x5865F2FF, string);
        SendClientMessage(playerID, -1, "{"#SILVER_COLOR"}Usa /rd para responder el mensaje.");
        PLAYER_TEMP[playerID][pt_ADMIN_PM_TIME] = gettime();
        PLAYER_TEMP[playerID][pt_ADMIN_PM_DS] = true;

        format(string, sizeof string, "Mensaje enviado a %s (%d)", PI[playerID][pi_NAME], playerID);
        DCC_SendChannelMessage(channel, string);
        return 1;
    }
    else if(!strcmp(command, "&aa", true))
    {
    	if(isnull(params)) return DCC_SendChannelMessage(channel, "Modo de uso: /aa <mensaje>");

		new string[128];
		format(string, sizeof string, "[SERVIDOR]: {0CEDE3}%s", params);
		SendClientMessageToAll(0xD90CEDFF, string);

		format(string, sizeof string, "Mesaje enviado globalmente: %s", params);
		DCC_SendChannelMessage(channel, string);
		return 1;
    }
	else if(str[0] != '-' || str[0] != '/')
 	{
 		new string[145], username[DCC_NICKNAME_SIZE];
 		DCC_GetGuildMemberNickname(guildName, author, username);

 		if(isnull(username)) DCC_GetUserName(author, username);

 		format(string, sizeof string, "Chat Administrativo (Discord): {90D496}%s: {FFFFFF}%s %s", username, command, params);
 		FixCharacterString(string);
 		SendChatMessageToAdmins(0x90C3D4FF, string);
 		return 1;
 	}
    return 1;
}


forward DarSlap(playerid);
public DarSlap(playerid)
{
	SendClientMessageEx(playerid, -1, "Vida de {FF00CF}%s(%d) {FFFFFF}despues del slap: {"#RED_COLOR"}%f", PLAYER_TEMP[ PLAYER_TEMP[playerid][pt_SLAP_ID] ][pt_RP_NAME], PLAYER_TEMP[playerid][pt_SLAP_ID], PI[ PLAYER_TEMP[playerid][pt_SLAP_ID] ][pi_HEALTH]);
	return 1;
}

ShowPlayeriPhoneApps(playerid)
{
	SelectTextDrawEx(playerid, 0x000000AA);
	if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
		for(new i = 0; i < 23; i ++) PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][i]);

	return 1;
}

HidePlayeriPhoneApps(playerid)
{
	for(new i = 0; i < 23; i ++) PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][i]);
	return 1;
}

ShowPlayeriPhone(playerid)
{
	PLAYER_TEMP[playerid][pt_SHOW_IPHONE] = true;

	TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][0]);//iPhone
	TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][4]);//Tecla
	if(PLAYER_TEMP[playerid][pt_LOCK_IPHONE])
	{
		new string[32];
		format(string, sizeof string, "Pulsa ~y~Y~w~ para desbloquear");
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], string);

		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][1]);//wallpapaper
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][3]);//hora cuando está bloqueado
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23]);//Mensaje para desbloquear
		return 1;
	}
	else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_ON)
 	{
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][1]);//wallpapaper
		TextDrawShowForPlayer(playerid, Textdraws[textdraw_iPhone][2]);//hora cuando está desbloqueado
	}
	else if(PLAYER_PHONE[playerid][player_phone_STATE] == PHONE_STATE_OFF)
	{
		new string[28];
		format(string, sizeof string, "Pulsa ~y~Y~w~ para encender");
		PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23], string);
		PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23]);//Mensaje para encender
		return 1;
	}
	return 1;
}

HidePlayeriPhone(playerid)
{
	PLAYER_TEMP[playerid][pt_SHOW_IPHONE] = false;
	PLAYER_TEMP[playerid][pt_LOCK_IPHONE] = false;
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][0]);//iphone
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][1]);//wallpapaper
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][2]);//hora cuando está desbloqueado
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][3]);//hora cuando está bloqueado
	TextDrawHideForPlayer(playerid, Textdraws[textdraw_iPhone][4]);//tecla
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_iPhone][23]);
	return 1;
}

EstaCercaDeSuVehiculo(playerid)
{
	new Float:x, Float:y, Float:z, total_vehicles;
	for(new i = 0, j = GetVehiclePoolSize(); i <= j; i ++)
	{
		if(!PLAYER_VEHICLES[i][player_vehicle_VALID]) continue;
		if(total_vehicles > MAX_SU2_VEHICLES) break;

		if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
		{
			GetVehiclePos(i, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
			{
				return i;
			}
			total_vehicles ++;
		}
	}
	return -1;
}

forward DamageReset(playerid);
public DamageReset(playerid)
{
	PLAYER_TEMP[playerid][pt_DAMAGE_DANIO] = 0;
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][0]);
	PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_DAMAGE][1]);
	KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][18]);
	return 1;
}

forward TimerPlayer();
public TimerPlayer()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!PLAYER_TEMP[i][pt_KICKED] && PLAYER_TEMP[i][pt_USER_LOGGED])
			{
				switch(GetPlayerState(i))
				{
					case 1, 2, 3:
					{
						if((gettime()-PLAYER_TEMP[i][pt_TIME_PAUSE]) > 3)
						{
							new gstring[64];
							format(gstring, sizeof gstring, "[AFK hace {CC46DC}%s{FFFFFF}]", TimeConvert(gettime()-PLAYER_TEMP[i][pt_TIME_PAUSE]));
							SetPlayerChatBubble(i, gstring, -1, 20.0, 1500);
						}
					}
				}
				if(PI[i][pi_PING])
				{
					new string[8];
					new ping = GetPlayerPing(i);
					if(ping >= 0 && ping < 150) format(string, sizeof string, "~w~%d", ping);
					else if(ping >= 150 && ping < 200) format(string, sizeof string, "~g~%d", ping);
					else if(ping >= 200 && ping < 250) format(string, sizeof string, "~b~~h~~h~%d", ping);
					else if(ping >= 250 && ping < 300) format(string, sizeof string, "~y~%d", ping);
					else if(ping >= 300) format(string, sizeof string, "~r~%d", ping);

					PlayerTextDrawSetString(i, PlayerTextdraws[i][ptextdraw_PING], string);
				}

				if(PI[i][pi_ZONE_TEXT])
				{
					if(PI[i][pi_STATE] != ROLEPLAY_STATE_INTERIOR && PI[i][pi_STATE] != ROLEPLAY_STATE_OWN_PROPERTY && PI[i][pi_STATE] != ROLEPLAY_STATE_GUEST_PROPERTY)
					{
						new zone[45], city[45], str[28];
						GetPlayerZones(i, city, zone);

						format(str, sizeof str, "%s", zone);
						PlayerTextDrawSetString(i, PlayerTextdraws[i][ptextdraw_ZONE_TEXT], str);
					}
				}

				if(PI[i][pi_camaraon] && IsPlayerInAnyVehicle(i))
				{
					AttachObjectToVehicle(PLAYER_TEMP[i][pt_PRIMERA_PERSONA], GetPlayerVehicleID(i), 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
					AttachCameraToObject(i, PLAYER_TEMP[i][pt_PRIMERA_PERSONA]);
				}
				else if(PI[i][pi_camaraon] && !IsPlayerInAnyVehicle(i))
				{
					AttachObjectToPlayer(PLAYER_TEMP[i][pt_PRIMERA_PERSONA], i, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
					AttachCameraToObject(i, PLAYER_TEMP[i][pt_PRIMERA_PERSONA]);
				}
			}
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(!IsTrailer(GetPlayerVehicleID(i))) return 1;

				new vehicleid = GetPlayerVehicleID(i);
				new cargaid = GetVehicleTrailer(vehicleid);

				if(!cargaid) return 1;

				if(WORK_VEHICLES[cargaid][work_vehicle_WORK] && WORK_VEHICLES[cargaid][work_vehicle_WORK] == WORK_TRAILERO)
				{
					if(!PLAYER_WORKS[i][WORK_TRAILERO][pwork_SET])
					{
						new Float:pos;
						DetachTrailerFromVehicle(vehicleid);
						GetVehicleZAngle(cargaid, pos);
						SetVehicleZAngle(cargaid, pos+20);
						SendClientMessage(i, -1, "{"#SILVER_COLOR"}Necesitas tener el trabajo de Trailero para conectar el trailer.");
						return 1;
					}
					if(!IsTrailerAttachedToVehicle(vehicleid) && TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADING] && TRAILER_VEHICLE[cargaid][trailer_vehicle_UNLOADING]) return 0;
					if(TRAILER_VEHICLE[cargaid][trailer_vehicle_LOADED])
					{
						if(TRAILER_VEHICLE[cargaid][trailer_vehicle_DRIVER_USER_ID] != PI[i][pi_ID])
						{
							new Float:pos;
							SendNotification(i, "Esta carga no te pertenece.");

							DetachTrailerFromVehicle(vehicleid);
							GetVehicleZAngle(cargaid, pos);
							SetVehicleZAngle(cargaid, pos+20);
							return 1;
						}
						else if(!PLAYER_TEMP[i][pt_WORKING_IN]) CallLocalFunction("StartPlayerJob", "iii", i, WORK_VEHICLES[cargaid][work_vehicle_WORK], cargaid);
						return 1;
					}
					else if(!PLAYER_TEMP[i][pt_WORKING_IN])
					{
						if(GetVehicleModel(cargaid) == 435) TRAILER_VEHICLE[cargaid][trailer_vehicle_POINT] = 0;
						else if(GetVehicleModel(cargaid) == 591)
						{
							if(Trailero_Contents[1][trailero_content_EXP] > PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL])
							{
								SendFormatNotification(i, "Has realizado ~r~%d ~w~trabajos como trailero, necesitas ~r~%d ~w~para este viaje.", PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL], Trailero_Contents[1][trailero_content_EXP]);
								DetachTrailerFromVehicle(vehicleid);
								SetVehicleToRespawnEx(cargaid);
								return 1;
							}
							TRAILER_VEHICLE[cargaid][trailer_vehicle_POINT] = 1;
						}
						else if(GetVehicleModel(cargaid) == 450)
						{
							if(Trailero_Contents[2][trailero_content_EXP] > PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL])
							{
								SendFormatNotification(i, "Has realizado ~r~%d ~w~trabajos como trailero, necesitas ~r~%d ~w~para este viaje.", PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL], Trailero_Contents[2][trailero_content_EXP]);
								DetachTrailerFromVehicle(vehicleid);
								SetVehicleToRespawnEx(cargaid);
								return 1;
							}
							TRAILER_VEHICLE[cargaid][trailer_vehicle_POINT] = 2;
						}
						else if(GetVehicleModel(cargaid) == 584)
						{
							if(Trailero_Contents[3][trailero_content_EXP] > PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL])
							{
								SendFormatNotification(i, "Has realizado ~r~%d ~w~trabajos como trailero, necesitas ~r~%d ~w~para este viaje.", PLAYER_WORKS[i][WORK_TRAILERO][pwork_LEVEL], Trailero_Contents[3][trailero_content_EXP]);
								DetachTrailerFromVehicle(vehicleid);
								SetVehicleToRespawnEx(cargaid);
								return 1;
							}
							TRAILER_VEHICLE[cargaid][trailer_vehicle_POINT] = 3;
						}
						CallLocalFunction("StartPlayerJob", "iii", i, WORK_VEHICLES[cargaid][work_vehicle_WORK], cargaid);

						SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
						Congelar(i);

						GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE] = 0;
						UpdateVehicleParams(vehicleid);

						PlayerTextDrawSetString(i, PlayerTextdraws[i][ptextdraw_TRUCK_LOAD][0], "");
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_TRUCK_LOAD][0]);
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_TRUCK_LOAD][1]);
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_TRUCK_LOAD][2]);
						PlayerTextDrawShow(i, PlayerTextdraws[i][ptextdraw_TRUCK_LOAD][3]);

						PLAYER_TEMP[i][pt_TRUCK_LOADING_VALUE] = 35.0;
						UpdatePlayerLoadingTruckSize(i);
						KillTimer(PLAYER_TEMP[i][pt_TIMERS][6]);
						KillTimer(PLAYER_TEMP[i][pt_TIMERS][7]);
						PLAYER_TEMP[i][pt_TIMERS][7] = SetTimerEx("TrailerLoadUp", 1000, false, "ii", i, cargaid);
						GameTextForPlayer(i,"~r~~<~~g~ CARGANDO TRAILER ~r~~>~", 5000, 3);
						//HidePlayerVelocimetro(i);
						HidePlayerSpeedoMeter(i); //AQUII

						SendClientMessage(i,-1, "{"#SILVER_COLOR"}El trailer se está cargando, espera mientras está listo.");
					}
				}
			}
		}
	}
	return 1;
}

public OnObjectMoved(objectid)
{
	if(objectid==FerrisWheelObjects[10]) SetTimer("RotateFerrisWheel",FERRIS_WHEEL_WAIT_TIME,false);
	return 1;
}

forward RotateFerrisWheel();
public RotateFerrisWheel()
{
	FerrisWheelAngle+=36;
	if(FerrisWheelAngle>=360)FerrisWheelAngle=0;
	if(FerrisWheelAlternate)FerrisWheelAlternate=0;
	else FerrisWheelAlternate=1;
	new Float:FerrisWheelModZPos=0.0;
	if(FerrisWheelAlternate)FerrisWheelModZPos=0.05;
	MoveObject(FerrisWheelObjects[10],389.7734,-2028.4688,22.0+FerrisWheelModZPos,FERRIS_WHEEL_SPEED,0,FerrisWheelAngle,90);
}

forward TimerLucesIntermitentes(vehicleid);
public TimerLucesIntermitentes(vehicleid)
{
	SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], true, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
	TimerLuces2[vehicleid] = SetTimerEx("TimerLucesIntermitentes2", 100, false, "d", vehicleid);
}
forward TimerLucesIntermitentes2(vehicleid);
public TimerLucesIntermitentes2(vehicleid)
{
	SetVehicleParamsEx(vehicleid, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ENGINE], false, GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_ALARM], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_DOORS], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BONNET], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_BOOT], GLOBAL_VEHICLES[vehicleid][gb_vehicle_PARAMS_OBJECTIVE]);
	TimerLuces[vehicleid] = SetTimerEx("TimerLucesIntermitentes", 100, false, "d", vehicleid);
}

forward EnvioMsn();
public EnvioMsn()
{
	SendClientMessageToAll(COLOR_PRINCIPAL, AleaAutoMsn[random(sizeof(AleaAutoMsn))]);
	return 1;
}

forward Cambiandonombre();
public Cambiandonombre()
{
	SendRconCommand(NombreServidor[random(sizeof(NombreServidor))]);
	return 1;
}

getPhoneNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

getBankAccountNumber(dbid)
{
	new number_str[24];
	format(number_str, sizeof number_str, "%d%04d", random(999), dbid);
	return strval(number_str);
}

SetPiDefaultValues(playerid) // Cosas que te dan al iniciar
{
	new tmp_PI[enum_PI];
	PI[playerid] = tmp_PI;

	new date[24];
	getDateTime(date);

	GetPlayerIp(playerid, PI[playerid][pi_IP], 16);
	format(PI[playerid][pi_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_NAME]);
	format(PI[playerid][pi_LAST_CONNECTION], 24, "%s", date);
	format(PI[playerid][pi_REG_DATE], 24, "%s", date);
	PI[playerid][pi_LAST_CONNECTION_TIMESTAMP] = gettime();
	PI[playerid][pi_LEVEL] = 1;
	PI[playerid][pi_REP] = 0;
	PI[playerid][pi_CONNECTED] = 1;
	PI[playerid][pi_PLAYERID] = playerid;
	PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
	PI[playerid][pi_SKIN] = Intro_Skins[0][0];
	PI[playerid][pi_CASH] = 2100;
	PI[playerid][pi_POS_X] = New_User_Pos[0];
	PI[playerid][pi_POS_Y] = New_User_Pos[1];
	PI[playerid][pi_POS_Z] = New_User_Pos[2];
	PI[playerid][pi_ANGLE] = New_User_Pos[3];
	PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
	PI[playerid][pi_FIGHT_STYLE] = 4;
	PI[playerid][pi_HEALTH] = 100.0;
	PI[playerid][pi_HUNGRY] = 40.0;
	PI[playerid][pi_THIRST] = 40.0;
	PI[playerid][pi_MEDICINE] = 10;
	PI[playerid][pi_CONFIG_SOUNDS] = 1;
	PI[playerid][pi_CONFIG_AUDIO] = 1;
	PI[playerid][pi_CONFIG_TIME] = 1;
	PI[playerid][pi_CONFIG_HUD] = 1;
	PI[playerid][pi_CONFIG_ADMIN] = 1;
	PI[playerid][pi_CONFIG_AUTO_LOGIN] = 0;
	PI[playerid][pi_DOUBT_CHANNEL] = 1;
	PI[playerid][pi_DOUBT_CHANNEL_TW] = 1;
	PI[playerid][pi_ZONE_TEXT] = 1;
	PI[playerid][pi_INFO_HEALTH] = 0;
	PI[playerid][pi_DAMAGE] = 0;
	PI[playerid][pi_PING] = 0;
	return 1;
}

getDateTime(string[])
{
	new
		Year, Month, Day,
		Hour, Minute, Second
	;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	format(string, 24, "%04d-%02d-%02d %02d:%02d:%02d", Year, Month, Day, Hour, Minute, Second);
	return 1;
}

public OnPlayerRegister(playerid)
{
	if(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] != -1)
	{
		KillTimer(PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER]);
		PLAYER_TEMP[playerid][pt_LOGIN_KICK_TIMER] = -1;
	}
	PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;

	TogglePlayerSpectatingEx(playerid, false);
	StopAudioStreamForPlayer(playerid);
	ClearPlayerChat(playerid);
	TogglePlayerControllable(playerid, false);
	ShowDialog(playerid, DIALOG_ACENTOS);
	SendClientMessageEx(playerid, COLOR_PRINCIPAL, "{C94444}· {FFFFFF}Bienvenido {81C97D}%s, {FFFFFF}esperemos que disfrutes en {7C7BE3}"SERVER_NAME"{C94444}.", PLAYER_TEMP[playerid][pt_RP_NAME]);
	SendClientMessage(playerid, COLOR_PRINCIPAL, "{C94444}· {FFFFFF}Si necesitas ayuda puedes utilizar el comando {FFD06B}/ayuda {FFFFFF}o puedes usar el canal de dudas con el comando {FFD06B}/duda.");
	return 1;
}
public GetPlayerCache(playerid)
{
	inline OnPlayerDataLoad()
	{
		new rows;
		if(cache_get_row_count(rows))
		{
			if(rows)
			{
				new bool:isnull_crew;
				cache_get_value_name(0, "reg_date", PI[playerid][pi_REG_DATE], 24);
				cache_get_value_name(0, "last_connection", PI[playerid][pi_LAST_CONNECTION], 24);
				cache_get_value_name_int(0, "last_connection_timestamp", PI[playerid][pi_LAST_CONNECTION_TIMESTAMP]);
				cache_get_value_name_int(0, "time_playing", PI[playerid][pi_TIME_PLAYING]);
				cache_get_value_name_int(0, "level", PI[playerid][pi_LEVEL]);
				cache_get_value_name_int(0, "rep", PI[playerid][pi_REP]);
				cache_get_value_name_int(0, "doubt_channel", PI[playerid][pi_DOUBT_CHANNEL]);
				cache_get_value_name_int(0, "doubt_channel_tw", PI[playerid][pi_DOUBT_CHANNEL_TW]);
				cache_get_value_name_int(0, "time_for_rep", PI[playerid][pi_TIME_FOR_REP]);
				cache_get_value_name_int(0, "admin_level", PI[playerid][pi_ADMIN_LEVEL]);
				cache_get_value_name_int(0, "payday_rep", PI[playerid][pi_PAYDAY_REP]);
				cache_get_value_name_int(0, "vip", PI[playerid][pi_VIP]);
				cache_get_value_name(0, "vip_expire_date", PI[playerid][pi_VIP_EXPIRE_DATE], 24);
				cache_get_value_name_int(0, "coins", PI[playerid][pi_COINS]);
				cache_get_value_name_int(0, "acento", PI[playerid][pi_ACENTO]);
				cache_get_value_name_int(0, "skin", PI[playerid][pi_SKIN]);
				cache_get_value_name_int(0, "cash", PI[playerid][pi_CASH]);
				cache_get_value_name_float(0, "pos_x", PI[playerid][pi_POS_X]);
				cache_get_value_name_float(0, "pos_y", PI[playerid][pi_POS_Y]);
				cache_get_value_name_float(0, "pos_z", PI[playerid][pi_POS_Z]);
				cache_get_value_name_float(0, "angle", PI[playerid][pi_ANGLE]);
				cache_get_value_name_int(0, "state", PI[playerid][pi_STATE]);
				cache_get_value_name_int(0, "interior", PI[playerid][pi_INTERIOR]);
				cache_get_value_name_int(0, "local_interior", PI[playerid][pi_LOCAL_INTERIOR]);
				cache_get_value_name_int(0, "fight_style", PI[playerid][pi_FIGHT_STYLE]);
				cache_get_value_name_float(0, "health", PI[playerid][pi_HEALTH]);
				cache_get_value_name_float(0, "armour", PI[playerid][pi_ARMOUR]);
				cache_get_value_name_int(0, "genero", PI[playerid][pi_GENERO]);
				cache_get_value_name_float(0, "hungry", PI[playerid][pi_HUNGRY]);
				cache_get_value_name_float(0, "thirst", PI[playerid][pi_THIRST]);
				cache_get_value_name_int(0, "black_market_level", PI[playerid][pi_BLACK_MARKET_LEVEL]);
				cache_get_value_name_int(0, "wanted_level", PI[playerid][pi_WANTED_LEVEL]);
				cache_get_value_name_int(0, "police_jail_time", PI[playerid][pi_POLICE_JAIL_TIME]);
				cache_get_value_name_int(0, "work_duty", PI[playerid][pi_WORK_DUTY]);
				cache_get_value_name_int(0, "police_jail_id", PI[playerid][pi_POLICE_JAIL_ID]);
				cache_get_value_name_int(0, "drive_license_points", PI[playerid][pi_DRIVE_LICENSE_POINTS]);
				cache_get_value_name_int(0, "bank_account", PI[playerid][pi_BANK_ACCOUNT]);
				cache_get_value_name_int(0, "bank_money", PI[playerid][pi_BANK_MONEY]);
				cache_get_value_name_int(0, "phone_number", PI[playerid][pi_PHONE_NUMBER]);
				cache_get_value_name_int(0, "phone_state", PI[playerid][pi_PHONE_STATE]);
				cache_get_value_name_int(0, "phone_visible_number", PI[playerid][pi_PHONE_VISIBLE_NUMBER]);
				cache_get_value_name_int(0, "mp3", PI[playerid][pi_MP3]);
				cache_get_value_name_int(0, "patines", PI[playerid][pi_Patines]);
				cache_get_value_name_int(0, "phone_resolver", PI[playerid][pi_PHONE_RESOLVER]);
				cache_get_value_name_int(0, "speakers", PI[playerid][pi_SPEAKERS]);
				cache_get_value_name_int(0, "mecanico_pieces", PI[playerid][pi_MECANICO_PIECES]);
				cache_get_value_name_int(0, "fuel_drum", PI[playerid][pi_FUEL_DRUM]);
				cache_get_value_name_int(0, "seed_medicine", PI[playerid][pi_SEED_MEDICINE]);
				cache_get_value_name_int(0, "seed_cannabis", PI[playerid][pi_SEED_CANNABIS]);
				cache_get_value_name_int(0, "seed_crack", PI[playerid][pi_SEED_CRACK]);
				cache_get_value_name_int(0, "medicine", PI[playerid][pi_MEDICINE]);
				cache_get_value_name_int(0, "cannabis", PI[playerid][pi_CANNABIS]);
				cache_get_value_name_int(0, "crack", PI[playerid][pi_CRACK]);
				cache_get_value_name_int(0, "config_sounds", PI[playerid][pi_CONFIG_SOUNDS]);
				cache_get_value_name_int(0, "config_audio", PI[playerid][pi_CONFIG_AUDIO]);
				cache_get_value_name_int(0, "config_time", PI[playerid][pi_CONFIG_TIME]);
				cache_get_value_name_int(0, "config_hud", PI[playerid][pi_CONFIG_HUD]);
				cache_get_value_name_int(0, "config_admin", PI[playerid][pi_CONFIG_ADMIN]);
				cache_get_value_name_int(0, "config_auto_login", PI[playerid][pi_CONFIG_AUTO_LOGIN]);
				cache_get_value_name_int(0, "mute", PI[playerid][pi_MUTE]);
				cache_get_value_name_int(0, "mute_tw", PI[playerid][pi_MUTE_TW]);
				cache_get_value_name_int(0, "placa_pd", PI[playerid][pi_PLACA_PD]);
				cache_get_value_name_int(0, "can_buy_bm", PI[playerid][pi_CAN_BUY_BM]);
				cache_is_value_name_null(0, "crew", isnull_crew);
				if(!isnull_crew) cache_get_value_name_int(0, "crew", PI[playerid][pi_CREW]);
				cache_get_value_name_int(0, "crew_rank", PI[playerid][pi_CREW_RANK]);
				cache_get_value_name_int(0, "mecanico_kits", PI[playerid][pi_MECANICO_KITS]);
				cache_get_value_name_int(0, "medical_kits", PI[playerid][pi_MEDICAL_KITS]);
				cache_get_value_name_int(0, "time_farmacia", PI[playerid][pi_TIME_FARMACIA]);
				cache_get_value_name_int(0, "config_pp", PI[playerid][pi_camaraon]);
				cache_get_value_name_int(0, "config_damage", PI[playerid][pi_DAMAGE]);
				cache_get_value_name_int(0, "config_ping", PI[playerid][pi_PING]);
				cache_get_value_name_int(0, "config_zonetext", PI[playerid][pi_ZONE_TEXT]);
				cache_get_value_name_int(0, "config_health", PI[playerid][pi_INFO_HEALTH]);
				cache_get_value_name_int(0, "cuenta_foro", PI[playerid][pi_CUENTA_FORO]);
				LoginPlayer(playerid);
			}
			else Kick(playerid);
		}
		else Kick(playerid);
	}
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT * FROM player WHERE id = %d;", PI[playerid][pi_ID]);
	mysql_tquery_inline(mysql_db, QUERY_BUFFER, using inline OnPlayerDataLoad);
	return 1;
}

LoginPlayer(playerid)
{
	PLAYER_TEMP[playerid][pt_USER_LOGGED] = true;

	LoadPlayerVehicles(playerid);
	LoadPlayerPhoneBook(playerid);
	LoadPlayerGPSData(playerid);
	LoadPlayerPocketData(playerid);
	LoadPlayerWeaponsData(playerid);
	LoadPlayerWorks(playerid);
	LoadPlayerCrewInfo(playerid);
	LoadPlayerToys(playerid);

	SetPlayerScore(playerid, PI[playerid][pi_LEVEL]);
	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME] = gettime();
	PLAYER_TEMP[playerid][pt_DOUBT_CHANNEL_TIME_TW] = gettime();
	PLAYER_TEMP[playerid][pt_TIME_SECUESTRO] = gettime();
	ResetPlayerWeapons(playerid);
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PI[playerid][pi_CASH]);
	SetPlayerFightingStyle(playerid, PI[playerid][pi_FIGHT_STYLE]);
	SetPlayerHealthEx(playerid, PI[playerid][pi_HEALTH]);
	SetPlayerArmourEx(playerid, PI[playerid][pi_ARMOUR]);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerNormalColor(playerid);
	SetSpawnInfo(playerid, NO_TEAM, PI[playerid][pi_SKIN], PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], 0, 0, 0, 0, 0, 0);
	SetPlayerInterior(playerid, PI[playerid][pi_INTERIOR]);

	PLAYER_TEMP[playerid][pt_BAD_LOGIN_ATTEMP] = 0;
	if(PLAYER_TEMP[playerid][pt_Plataforma]) SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------");
	else SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_PRINCIPAL, "·{FFFFFF}%s de nuevo, {8960AB}%s{FFFFFF}, tu última conexión fue el {00CC00}%s{FFFFFF}.", (PI[playerid][pi_GENERO] ? "Bienvenida" : "Bienvenido"), PLAYER_TEMP[playerid][pt_RP_NAME], PI[playerid][pi_LAST_CONNECTION]);

	new neccessary_rep = PI[playerid][pi_LEVEL] * REP_MULTIPLIER;
	if(PI[playerid][pi_REP] < neccessary_rep)
	{
		if(PI[playerid][pi_TIME_FOR_REP] > TIME_FOR_REP) PI[playerid][pi_TIME_FOR_REP] = TIME_FOR_REP;
		if(PI[playerid][pi_TIME_FOR_REP] <= 900) PI[playerid][pi_TIME_FOR_REP] = 3000;

		SendClientMessageEx(playerid, COLOR_PRINCIPAL, "·{FFFFFF}Eres {25AB13}nivel %d{FFFFFF}, te quedan {25AB13}%s minutos {FFFFFF}para la siguiente reputación.", PI[playerid][pi_LEVEL], TimeConvert(PI[playerid][pi_TIME_FOR_REP] / 1000));
		PLAYER_TEMP[playerid][pt_TIME_PASSED_LAST_REP] = gettime() * 1000;
		PLAYER_TEMP[playerid][pt_TIMERS][1] = SetTimerEx("AddPlayerReputation", PI[playerid][pi_TIME_FOR_REP], false, "i", playerid);
		if(PLAYER_TEMP[playerid][pt_Plataforma]) SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------");
		else SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------------------------------------------");
	}
	else
	{
		SendFormatNotification(playerid, "Escribe ~g~/comprarnivel ~w~para subir al nivel ~g~%d ~w~por ~g~%d dólares~w~.", PI[playerid][pi_LEVEL] + 1, PI[playerid][pi_LEVEL] * 150);
		if(PLAYER_TEMP[playerid][pt_Plataforma]) SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------");
		else SendClientMessageEx(playerid, -1, "---------------------------------------------------------------------------------------------------------------");
	}

	TogglePlayerSpectatingEx(playerid, false);
	TogglePlayerControllableEx(playerid, false);
	StopAudioStreamForPlayer(playerid);
}

UpdatePlayerWorldInfo(playerid)
{
	if(PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_DEAD || PLAYER_TEMP[playerid][pt_GAME_STATE] == GAME_STATE_NORMAL)
	{
		//health armour
		GetPlayerHealth(playerid, PI[playerid][pi_HEALTH]);
		GetPlayerArmour(playerid, PI[playerid][pi_ARMOUR]);
		if(PI[playerid][pi_HEALTH] <= 0.0) PI[playerid][pi_HEALTH] = 1.0;
		if(PI[playerid][pi_HEALTH] > 100.0) PI[playerid][pi_HEALTH] = 100.0;
		if(PI[playerid][pi_ARMOUR] > 100.0) PI[playerid][pi_ARMOUR] = 100.0;

		//world
		switch(PI[playerid][pi_STATE])
		{
			case ROLEPLAY_STATE_INTERIOR:
			{
				new index = GetEnterExitIndexById(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = ENTER_EXIT[index][ee_EXT_X];
					PI[playerid][pi_POS_Y] = ENTER_EXIT[index][ee_EXT_Y];
					PI[playerid][pi_POS_Z] = ENTER_EXIT[index][ee_EXT_Z];
					PI[playerid][pi_ANGLE] = ENTER_EXIT[index][ee_EXT_ANGLE];
					PI[playerid][pi_INTERIOR] = ENTER_EXIT[index][ee_EXT_INTERIOR];
				}
			}//
			case ROLEPLAY_STATE_INTERIOR1:
			{
				new index = GetEntrarSalirIndexById(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = ENTRADAS_SALIDAS[index][ee_EXT_X];
					PI[playerid][pi_POS_Y] = ENTRADAS_SALIDAS[index][ee_EXT_Y];
					PI[playerid][pi_POS_Z] = ENTRADAS_SALIDAS[index][ee_EXT_Z];
					PI[playerid][pi_ANGLE] = ENTRADAS_SALIDAS[index][ee_EXT_ANGLE];
					PI[playerid][pi_INTERIOR] = ENTRADAS_SALIDAS[index][ee_EXT_INTERIOR];
				}
			}//
			case ROLEPLAY_STATE_OWN_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					if(PROPERTY_INFO[index][property_OWNER_ID] == PI[playerid][pi_ID])
					{
						PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X] += (1.5 * floatsin(-PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE], degrees));
						PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y] += (1.5 * floatcos(-PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE], degrees));

						PI[playerid][pi_POS_X] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Y];

						new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
						if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
						PI[playerid][pi_POS_Z] = z_pos;

						PI[playerid][pi_ANGLE] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_INTERIOR];
					}
					else
					{
						PROPERTY_INFO[index][property_EXT_X] += (1.5 * floatsin(-PROPERTY_INFO[index][property_EXT_ANGLE], degrees));
						PROPERTY_INFO[index][property_EXT_Y] += (1.5 * floatcos(-PROPERTY_INFO[index][property_EXT_ANGLE], degrees));

						PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
						PI[playerid][pi_LOCAL_INTERIOR] = 0;
						PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
						PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
						PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
						PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
						PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
					}
				}
			}
			case ROLEPLAY_STATE_GUEST_PROPERTY:
			{
				new index = GetPropertyIndexByID(PI[playerid][pi_LOCAL_INTERIOR]);
				if(index == -1)
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = New_User_Pos[0];
					PI[playerid][pi_POS_Y] = New_User_Pos[1];
					PI[playerid][pi_POS_Z] = New_User_Pos[2];
					PI[playerid][pi_ANGLE] = New_User_Pos[3];
					PI[playerid][pi_INTERIOR] = 0;
				}
				else
				{
					PI[playerid][pi_STATE] = ROLEPLAY_STATE_NORMAL;
					PI[playerid][pi_LOCAL_INTERIOR] = 0;
					PI[playerid][pi_POS_X] = PROPERTY_INFO[index][property_EXT_X];
					PI[playerid][pi_POS_Y] = PROPERTY_INFO[index][property_EXT_Y];
					PI[playerid][pi_POS_Z] = PROPERTY_INFO[index][property_EXT_Z];
					PI[playerid][pi_ANGLE] = PROPERTY_INFO[index][property_EXT_ANGLE];
					PI[playerid][pi_INTERIOR] = PROPERTY_INFO[index][property_EXT_INTERIOR];
				}
			}
			case ROLEPLAY_STATE_JAIL:
			{
				PI[playerid][pi_POS_X] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_X];
				PI[playerid][pi_POS_Y] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_Y];
				PI[playerid][pi_POS_Z] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_Z];
				PI[playerid][pi_ANGLE] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID] ][jail_ANGLE];
				PI[playerid][pi_INTERIOR] = JAIL_POSITIONS[ PI[playerid][pi_POLICE_JAIL_ID]  ][jail_INTERIOR];
			}
			default:
			{
				if(!PLAYER_TEMP[playerid][pt_SPECTANDO])
				{ 
					GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
					GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
					PI[playerid][pi_INTERIOR] = GetPlayerInterior(playerid);
				}
			}
		}
		return 1;
	}
	return 0;
}

SavePlayerData(playerid)
{
	if(PI[playerid][pi_ID])
	{
		new tmp_crew[24], tmp_vip_expire_date[24];

		tmp_crew = "NULL";
		if(PI[playerid][pi_CREW]) format(tmp_crew, sizeof tmp_crew, "%d", PI[playerid][pi_CREW]);

		tmp_vip_expire_date = "'0000-00-00 00:00:00'";
		if(strlen(PI[playerid][pi_VIP_EXPIRE_DATE]) > 3) format(tmp_vip_expire_date, sizeof tmp_vip_expire_date, "'%s'", PI[playerid][pi_VIP_EXPIRE_DATE]);

		mysql_format
		(
			mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER,
			"\
				UPDATE player SET \
					name = '%e',\
					ip = '%e',\
					email = '%e',\
					salt = '%e',\
					pass = '%e',\
					reg_date = '%e',\
					last_connection = '%e',\
					last_connection_timestamp = %d,\
					time_playing = %d,\
					level = %d,\
					rep = %d,\
					connected = %d,\
					playerid = %d,\
					doubt_channel = %d,\
					doubt_channel_tw = %d,\
					time_for_rep = %d,\
					admin_level = %d,\
					payday_rep = %d,\
					vip = %d,\
					vip_expire_date = %s,\
					acento = %d, \
					skin = %d,\
					cash = %d,\
					pos_x = %f,\
					pos_y = %f,\
					pos_z = %f,\
					angle = %f,\
					state = %d,\
					interior = %d,\
					local_interior = %d,\
					fight_style = %d,\
					health = %f,\
					armour = %f,\
					genero = %d,\
					hungry = %f,\
					thirst = %f,\
					black_market_level = %d,\
					wanted_level = %d,\
					police_jail_time = %d,\
					work_duty = %d,\
					police_jail_id = %d,\
					drive_license_points = %d,\
					bank_account = %d,\
					bank_money = %d,\
					phone_number = %d,\
					phone_state = %d,\
					phone_visible_number = %d,\
					mp3 = %d,\
				 	patines = %d,\
					phone_resolver = %d,\
					speakers = %d,\
					mecanico_pieces = %d,\
					fuel_drum = %d,\
					seed_medicine = %d,\
					seed_cannabis = %d,\
					seed_crack = %d,\
					medicine = %d,\
					cannabis = %d,\
					crack = %d,\
					config_sounds = %d,\
					config_audio = %d,\
					config_time = %d,\
					config_hud = %d,\
					config_admin = %d,\
					config_auto_login = %d,\
					mute = %d,\
					mute_tw = %d, \
					placa_pd = %d,\
					can_buy_bm = %d,\
					crew = %s,\
					crew_rank = %d,\
					mecanico_kits = %d,\
					medical_kits = %d, \
					time_farmacia = %d, \
					config_pp = %d, \
					config_damage = %d, \
					config_ping = %d, \
					config_zonetext = %d, \
					config_health = %d, \
					cuenta_foro = %d \
				WHERE id = %d;\
			",
				PI[playerid][pi_NAME], PI[playerid][pi_IP], PI[playerid][pi_EMAIL], PI[playerid][pi_SALT], PI[playerid][pi_PASS], PI[playerid][pi_REG_DATE],
				PI[playerid][pi_LAST_CONNECTION], PI[playerid][pi_LAST_CONNECTION_TIMESTAMP], PI[playerid][pi_TIME_PLAYING], PI[playerid][pi_LEVEL], PI[playerid][pi_REP],
				PI[playerid][pi_CONNECTED], PI[playerid][pi_PLAYERID], PI[playerid][pi_DOUBT_CHANNEL], PI[playerid][pi_DOUBT_CHANNEL_TW], PI[playerid][pi_TIME_FOR_REP],
				PI[playerid][pi_ADMIN_LEVEL], PI[playerid][pi_PAYDAY_REP], PI[playerid][pi_VIP], tmp_vip_expire_date, PI[playerid][pi_ACENTO], PI[playerid][pi_SKIN], PI[playerid][pi_CASH],
				PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], PI[playerid][pi_ANGLE], PI[playerid][pi_STATE], PI[playerid][pi_INTERIOR],
				PI[playerid][pi_LOCAL_INTERIOR], PI[playerid][pi_FIGHT_STYLE], PI[playerid][pi_HEALTH], PI[playerid][pi_ARMOUR], PI[playerid][pi_GENERO], PI[playerid][pi_HUNGRY],
				PI[playerid][pi_THIRST], PI[playerid][pi_BLACK_MARKET_LEVEL], PI[playerid][pi_WANTED_LEVEL], PI[playerid][pi_POLICE_JAIL_TIME], PI[playerid][pi_WORK_DUTY],
				PI[playerid][pi_POLICE_JAIL_ID], PI[playerid][pi_DRIVE_LICENSE_POINTS], PI[playerid][pi_BANK_ACCOUNT], PI[playerid][pi_BANK_MONEY], PI[playerid][pi_PHONE_NUMBER],
				PI[playerid][pi_PHONE_STATE], PI[playerid][pi_PHONE_VISIBLE_NUMBER], PI[playerid][pi_MP3], PI[playerid][pi_Patines],
				PI[playerid][pi_PHONE_RESOLVER], PI[playerid][pi_SPEAKERS], PI[playerid][pi_MECANICO_PIECES], PI[playerid][pi_FUEL_DRUM], PI[playerid][pi_SEED_MEDICINE],
				PI[playerid][pi_SEED_CANNABIS], PI[playerid][pi_SEED_CRACK], PI[playerid][pi_MEDICINE], PI[playerid][pi_CANNABIS], PI[playerid][pi_CRACK],
				PI[playerid][pi_CONFIG_SOUNDS], PI[playerid][pi_CONFIG_AUDIO], PI[playerid][pi_CONFIG_TIME], PI[playerid][pi_CONFIG_HUD], PI[playerid][pi_CONFIG_ADMIN],
				PI[playerid][pi_CONFIG_AUTO_LOGIN], PI[playerid][pi_MUTE], PI[playerid][pi_MUTE_TW], PI[playerid][pi_PLACA_PD], PI[playerid][pi_CAN_BUY_BM], tmp_crew, 
				PI[playerid][pi_CREW_RANK], PI[playerid][pi_MECANICO_KITS], PI[playerid][pi_MEDICAL_KITS], PI[playerid][pi_TIME_FARMACIA], PI[playerid][pi_camaraon],
				PI[playerid][pi_DAMAGE], PI[playerid][pi_PING], PI[playerid][pi_ZONE_TEXT], PI[playerid][pi_INFO_HEALTH], PI[playerid][pi_CUENTA_FORO],
				PI[playerid][pi_ID]
		);
		mysql_tquery(mysql_db, QUERY_BUFFER);
		return 1;
	}
	return 0;
}

CountPlayerVehicles(playerid)
{
	new count;
	if(PI[playerid][pi_ID])
	{
		for(new i = 0; i < MAX_VEHICLES; i ++)
		{
			if(PLAYER_VEHICLES[i][player_vehicle_VALID])
			{
				if(PLAYER_VEHICLES[i][player_vehicle_OWNER_ID] == PI[playerid][pi_ID])
				{
					count ++;
					if(count >= MAX_SU2_VEHICLES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

CountPlayerProperties(playerid)
{
	new count;
	if(PI[playerid][pi_ID])
	{
		for(new i = 0; i < MAX_PROPIEDADES; i ++)
		{
			if(PROPERTY_INFO[i][property_VALID])
			{
				if(PROPERTY_INFO[i][property_SOLD] && PROPERTY_INFO[i][property_OWNER_ID] == PI[playerid][pi_ID])
				{
					count ++;
					if(count >= MAX_SU2_PROPERTIES)
					{
						break;
					}
				}
			}
		}
	}
	return count;
}

SavePlayerWorkLevels(playerid)
{
	if(!PI[playerid][pi_ID]) return 0;

	for(new i = 0; i != sizeof work_info; i ++)
	{
		if(!PLAYER_WORKS[playerid][i][pwork_SET] || !i) continue;
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE pworks SET level = %d WHERE id_player = %d AND id_work = %d;", PLAYER_WORKS[playerid][i][pwork_LEVEL], PI[playerid][pi_ID], i);
		mysql_tquery(mysql_db, QUERY_BUFFER);
	}
	return 1;
}

#define PlayerTask_Interval_Seconds 10
ptask PlayerTask[PlayerTask_Interval_Seconds * 1000](playerid)
{
	PI[playerid][pi_TIME_PLAYING] += PlayerTask_Interval_Seconds;
}

//native gpci(playerid, serial[], len);
CheckPlayerFakeClient(playerid) //experimental
{
	if(IsPlayerNPC(playerid)) return 0;
	new sr[80],  fcharcount;
	gpci(playerid, sr, sizeof(sr));
	for(new i = 0; i < strlen(sr); i++)
	{
		if(sr[i] >= '0' && sr[i] <= '9')  fcharcount++;
	}
	return (fcharcount>= 30 || strlen(sr) <= 30) ? true : false;
}

public OnNearPlayerSelected(playerid, to_player, id)
{
	switch(id)
	{
		case NEAR_PLAYERS_POCKET_GIVE:
		{
			new
				command[128],
				index = GetInvSelectedItem_Index(playerid);

			format(command, sizeof command, "/dar alimento %d %d", to_player, index + 1);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}
		case NEAR_PLAYERS_POCKET_SELL:
		{
			ShowSelectPriceDialog(playerid, NEAR_PLAYERS_POCKET_SELL);
			return Y_HOOKS_BREAK_RETURN_1;
		}

		case NEAR_PLAYERS_WEAPON_GIVE:
		{
			new
				command[128],
				index = GetInvSelectedItem_Index(playerid);

			format(command, sizeof command, "/dar arma %d %d", to_player, index);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}
		case NEAR_PLAYERS_WEAPON_SELL:
		{
			ShowSelectPriceDialog(playerid, NEAR_PLAYERS_WEAPON_SELL);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

public OnPriceSelected(playerid, price, id)
{
	new
		command[128],
		to_player = GetNP_PlayerLastSelectedId(playerid),
		index = GetInvSelectedItem_Index(playerid);

	switch(id)
	{
		case NEAR_PLAYERS_POCKET_SELL:
		{
			format(command, sizeof command, "/vender alimento %d %d %d", to_player, index + 1, price);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}

		case NEAR_PLAYERS_WEAPON_SELL:
		{
			format(command, sizeof command, "/vender arma %d %d %d", to_player, index, price);
			PC_EmulateCommand(playerid, command);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

GetBootTypeName(type)
{
	new name[24];
	switch(type)
	{
		case BOOT_TYPE_WEAPON: name = "Arma";
		case BOOT_TYPE_MEDICINES: name = "Medicamentos";
		case BOOT_TYPE_CANNABIS: name = "Marihuana";
		case BOOT_TYPE_CRACK: name = "Crack";
	}
	return name;
}

GetClosetTypeName(type)
{
	new name[24];
	switch(type)
	{
		case CLOSET_TYPE_WEAPON: name = "Arma";
		case CLOSET_TYPE_MEDICINES: name = "Medicamentos";
		case CLOSET_TYPE_CANNABIS: name = "Marihuana";
		case CLOSET_TYPE_CRACK: name = "Crack";
	}
	return name;
}

GetVehicleRotation(vehicleid, &Float:rx, &Float:ry, &Float:rz)
{
	new Float:qw, Float:qx, Float:qy, Float:qz;
	GetVehicleRotationQuat(vehicleid, qw, qx, qy, qz);
	rx = asin(2 * qy * qz - 2 * qx * qw);
	ry = -atan2(qx * qz + qy * qw, 0.5 - qx * qx - qy * qy);
	rz = -atan2(qx * qy + qz * qw, 0.5 - qx * qx - qz * qz);
}

forward ResetCombat(issuerid);
public ResetCombat(issuerid)
{
	PLAYER_TEMP[issuerid][pt_COMBAT] = false;

	KillTimer(PLAYER_TEMP[issuerid][pt_COMBAT_TIMER]);
	PLAYER_TEMP[issuerid][pt_COMBAT_TIMER] = -1;

	TextDrawHideForPlayer(issuerid, Textdraws[textdraw_COMBAT_MODE]);

	SendNotification(issuerid, "Ya no estás en combate.");
	return 1;
}

stock HexToInt(string[])//DracoBlue
{
   if (string[0] == 0) return 0;
   new i, cur=1, res = 0;
   for (i=strlen(string);i>0;i--)
   {
	 if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
	 cur=cur*16;
   }
   return res;
}

GetCrewTerritories(id)
{
	new
		count;

	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(TERRITORIES[i][territory_CREW_ID] == id) count++;
	}
	return count;
}

/*LoadIntroData()
{
	// INTRO 1
	INTRO_1[0] = CreateDynamicActor(50, 47.1593, -239.3631, 1.5781, 205.1492);
	INTRO_1[1] = CreateDynamicActor(59, 48.4112, -236.3764, 1.5781, 106.4268);
	INTRO_1[2] = CreateDynamicActor(98, 48.0544, -235.0872, 1.5781, 153.4899);
	INTRO_1[3] = CreateVehicle(579, 45.6427, -235.7737, 1.5537, 202.5125, 3, 3, -1);
	SetVehicleParamsEx(INTRO_1[3], 0, 0, 0, 1, 1, 0, 0);

	for(new e = 0; e < 3; e++) SetDynamicActorVirtualWorld(INTRO_1[e], WORLD_INTRO);
	SetVehicleVirtualWorld(INTRO_1[3], WORLD_INTRO);

	ApplyDynamicActorAnimation(INTRO_1[2], "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_1[1], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_1[0], "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 0);

	// INTRO 2
	INTRO_2[0] = CreateVehicle(560, 415.1954, 2511.5398, 16.1897, 157.1949, 0, 0, -1);
	INTRO_2[1] = CreateVehicle(482, 415.9417, 2505.1563, 16.5969, 41.3965, 0, 0, -1);
	INTRO_2[2] = CreateDynamicActor(112, 417.3246, 2510.1504, 16.4844, 110.3539);
	INTRO_2[3] = CreateDynamicActor(111, 417.5173, 2508.6733, 16.4844, 93.1204);
	INTRO_2[4] = CreateDynamicActor(113, 417.3795, 2507.4189, 16.4844, 65.4215);
	INTRO_2[5] = CreateDynamicActor(116, 412.8536, 2508.1931, 16.4844, 275.7721);
	SetVehicleParamsEx(INTRO_2[0], 0, 1, 0, 1, 0, 0, 0);
	SetVehicleParamsEx(INTRO_2[1], 0, 1, 0, 1, 0, 0, 0);

	for(new i = 2; i < 6; i++) SetDynamicActorVirtualWorld(INTRO_2[i], WORLD_INTRO);
	for(new i = 0; i < 2; i++) SetVehicleVirtualWorld(INTRO_2[i], 555);

	ApplyDynamicActorAnimation(INTRO_2[2], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[4], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[5], "PED", "HANDSUP", 4.1, 0, 0, 0, 1, 0);
	ApplyDynamicActorAnimation(INTRO_2[3], "PED", "ARRESTGUN", 4.1, 0, 0, 0, 1, 0);

	// INTRO 3
	INTRO_3[0] = CreateVehicle(531, 314.8449, 1133.0660, 8.8792, 51.2440, 149, 149, -1);
	INTRO_3[1] = CreateVehicle(478, 306.9597, 1138.1361, 8.5805, 358.9598, 0, 0, -1);
	INTRO_3[2] = CreateDynamicActor(161, 313.3412, 1131.9296, 9.0343, 34.2756);
	SetVehicleParamsEx(INTRO_3[0], 0, 1, 0, 1, 0, 0, 0);
	SetVehicleParamsEx(INTRO_3[1], 0, 1, 0, 1, 0, 0, 0);

	for(new i = 0; i < 2; i++) SetVehicleVirtualWorld(INTRO_3[i], 555);
	SetDynamicActorVirtualWorld(INTRO_3[2], 555);

	ApplyDynamicActorAnimation(INTRO_3[2], "BOMBER", "BOMB_PLANT", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

public OnDynamicActorStreamIn(actorid, forplayerid)
{
	for(new i = 0; i < 3; i++)
	{
		if(actorid == INTRO_1[i])
		{
			SetDynamicActorPos(INTRO_1[0], 47.1593, -239.3631, 1.5781);
			SetDynamicActorPos(INTRO_1[1], 48.4112, -236.3764, 1.5781);
			SetDynamicActorPos(INTRO_1[2], 48.0544, -235.0872, 1.5781);

			ClearDynamicActorAnimations(INTRO_1[i]);

			ApplyDynamicActorAnimation(INTRO_1[2], "PED", "IDLE_chat", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_1[1], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_1[0], "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 0);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	for(new i = 2; i < 6; i++)
	{
		if(actorid == INTRO_2[i])
		{
			SetDynamicActorPos(INTRO_2[2], 417.3246, 2510.1504, 16.4844);
			SetDynamicActorPos(INTRO_2[3], 417.5173, 2508.6733, 16.4844);
			SetDynamicActorPos(INTRO_2[4], 417.3795, 2507.4189, 16.4844);
			SetDynamicActorPos(INTRO_2[5], 412.8536, 2508.1931, 16.4844);

			ClearDynamicActorAnimations(INTRO_2[i]);

			ApplyDynamicActorAnimation(INTRO_2[2], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[4], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[5], "PED", "HANDSUP", 4.1, 0, 0, 0, 1, 0);
			ApplyDynamicActorAnimation(INTRO_2[3], "PED", "ARRESTGUN", 4.1, 0, 0, 0, 1, 0);
			return Y_HOOKS_BREAK_RETURN_1;
		}
	}
	if(actorid == INTRO_3[2])
	{
		SetDynamicActorPos(INTRO_3[2], 313.3412, 1131.9296, 9.0343);

		ClearDynamicActorAnimations(INTRO_3[2]);
		ApplyDynamicActorAnimation(INTRO_3[2], "BOMBER", "BOMB_PLANT", 4.1, 0, 0, 0, 1, 0);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}*/

stock CountPlayersJobOnDuty(work)
{
	new count = 0;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PLAYER_TEMP[i][pt_GAME_STATE] == GAME_STATE_NORMAL)
			{
				if(PLAYER_WORKS[i][work][pwork_SET] && PLAYER_TEMP[i][pt_WORKING_IN] == work)
				{
					count ++;
				}
			}
		}
	}
	return count;
}

stock CountPlayersOnConnected()
{
	new count = 0;
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerConnected(i))
		{
			count ++;
		}
	}
	return count;
}

hook OnPlayerKeyPressFinish(playerid)
{
	if(PLAYER_TEMP[playerid][pt_PLANTING])
	{
		PLAYER_TEMP[playerid][pt_WORKING_IN] = WORK_NONE;
		PLAYER_TEMP[playerid][pt_PLANTING] = false;
		PLAYER_TEMP[playerid][pt_LAST_PLANT_TIME] = gettime();

		TogglePlayerControllableEx(playerid, true);
		ClearAnimations(playerid);

		//objeto planta: 2244
		new index = GetAvaiblePlantIndex();
		if(index == -1)
		{
			switch(seed_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][seed_info_PLANT_TYPE])
			{
				case PLANT_TYPE_MEDICINE: PI[playerid][pi_SEED_MEDICINE] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CANNABIS: PI[playerid][pi_SEED_CANNABIS] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
				case PLANT_TYPE_CRACK: PI[playerid][pi_SEED_CRACK] += plant_info[ PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED] ][plant_info_SEEDS];
			}

			SendNotification(playerid, "No queda espacio para más plantas, te hemos devuelto las semillas. Prueba más tarde.");
			return 1;
		}

		GetPlayerPos(playerid, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z]);
		GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
		PI[playerid][pi_POS_X] += (1.0 * floatsin(-PI[playerid][pi_ANGLE], degrees));
		PI[playerid][pi_POS_Y] += (1.0 * floatcos(-PI[playerid][pi_ANGLE], degrees));
		PI[playerid][pi_POS_Z] -= 0.75;

		PLANTS[index][plant_VALID] = true;
		PLANTS[index][plant_GROWING] = true;
		PLANTS[index][plant_INVISIBLE] = true;
		PLANTS[index][plant_GROWING_PROGRESS] = frandom(10.0, 8.0, 2);
		PLANTS[index][plant_TYPE] = PLAYER_TEMP[playerid][pt_PLANTING_PLANT_SELECTED];
		PLANTS[index][plant_PLANTED_BY_ACCOUNT_ID] = PI[playerid][pi_ID];
		PLANTS[index][plant_IMMUNITY] = -1;

		format(PLANTS[index][plant_PLANTED_BY_NAME], 24, "%s", PLAYER_TEMP[playerid][pt_RP_NAME]);
		PLANTS[index][plant_OBJECT_ID] = CreateDynamicObject(2244, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z], 0.0, 0.0, PI[playerid][pi_ANGLE], 0, 0);
		SetDynamicObjectMaterial(PLANTS[index][plant_OBJECT_ID], 2, 2244, "plants_tabletop", "CJ_PLANT", 0x00FFFFFF);

		new info[3];
		info[0] = OBJECT_TYPE_PLANT;
		info[1] = index;
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, PLANTS[index][plant_OBJECT_ID], E_STREAMER_EXTRA_ID, info);

		new label_str[256];
		if(seed_info[ PLANTS[index][plant_TYPE] ][seed_info_TYPE] == TYPE_LEGAL) format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		else format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}Planta (%s)\n{CCCCCC}Agricultor: %s\n\n{"#PRIMARY_COLOR"}(%.1f%%)", plant_info[ PLANTS[index][plant_TYPE] ][plant_info_NAME], PLANTS[index][plant_PLANTED_BY_NAME], PLANTS[index][plant_GROWING_PROGRESS]);
		PLANTS[index][plant_LABEL_ID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, PI[playerid][pi_POS_X], PI[playerid][pi_POS_Y], PI[playerid][pi_POS_Z] + 0.25, 10.0, .testlos = false, .interiorid = 0, .worldid = 0);

		KillTimer(PLANTS[index][plant_TIMER]);
		PLANTS[index][plant_TIMER] = SetTimerEx("GrowPlantUp", 5000, false, "d", index);

		PLAYER_WORKS[playerid][WORK_FARMER][pwork_LEVEL] ++;
		AddPlayerJobPoints(playerid, WORK_FARMER);
		SendNotification(playerid, "Ahora espera a que la planta crezca, si pasan más de ~r~5 minutos~w~ después de que la planta haya crecido se destruirá.");
		Streamer_Update(playerid);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	else if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		new tree = PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE];
		GetPlayerFacingAngle(playerid, PI[playerid][pi_ANGLE]);
		SetDynamicObjectRot(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_RX], LUMBER_TREES[ tree ][lumber_tree_RY], PI[playerid][pi_ANGLE]);
		MoveDynamicObject(LUMBER_TREES[ tree ][lumber_tree_OBJECT_ID], LUMBER_TREES[ tree ][lumber_tree_X], LUMBER_TREES[ tree ][lumber_tree_Y], LUMBER_TREES[ tree ][lumber_tree_Z] + 0.01, 0.0065, -85.0, 0.0, PI[playerid][pi_ANGLE]);
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 341, 1, -0.172999, -0.165, -0.053999, 0.0, -7.599999, -9.6);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("ContinueTreeAnimation", 1400, false, "iif", playerid, tree, PI[playerid][pi_ANGLE]);

		ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		TogglePlayerControllableEx(playerid, true);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

hook OnPlayerKeyPress(playerid, Float:percentage)
{
	if(PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE] != -1)
	{
		new tree = PLAYER_TEMP[playerid][pt_PLAYER_LUMBERJACK_TREE];
		SetPlayerArmedWeapon(playerid, 9);

		new label_str[256];
		format(label_str, sizeof label_str, "{f46530}Árbol (%d)\n\n{FFFFFF}Talando... {"#SILVER_COLOR"}(%.1f%%)", tree, percentage);
		UpdateDynamic3DTextLabelText(LUMBER_TREES[ tree ][lumber_tree_LABEL], -1, label_str);

		KillTimer(PLAYER_TEMP[playerid][pt_TIMERS][9]);
		PLAYER_TEMP[playerid][pt_TIMERS][9] = SetTimerEx("LumberjackUp", 2000, false, "ii", playerid, tree);
		return Y_HOOKS_BREAK_RETURN_1;
	}
	return Y_HOOKS_CONTINUE_RETURN_1;
}

/*
ANTI AIMBOT no funciona bn, se atraviesan los players
const PLAYER_SYNC = 207;
IPacket:PLAYER_SYNC(playerid, BitStream:bs)
{
	new onFootData[PR_OnFootSync];

	BS_IgnoreBits(bs, 8);
	BS_ReadOnFootSync(bs, onFootData);

	onFootData[PR_specialAction] = SPECIAL_ACTION_ENTER_VEHICLE;

	BS_SetWriteOffset(bs, 8);
	BS_WriteOnFootSync(bs, onFootData);
	return 1;
}
*/

stock GetPlayerCameraRotation(playerid,&Float:rx,&Float:rz)
{
	new Float:mx,Float:my,Float:mz;
	GetPlayerCameraFrontVector(playerid,mx,my,mz);
	rx = CompressRotation(-(acos(mz)-90.0));
	rz = CompressRotation((atan2(my,mx)-90.0));
}

stock Float:CompressRotation(Float:rotation)
{
	return (rotation - floatround(rotation/360.0,floatround_floor)*360.0);
}

CountCrewPlayers(id_crew)
{
	mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "SELECT COUNT(id) FROM player WHERE crew = %d;", id_crew);
	new count, Cache:result = mysql_query(mysql_db, QUERY_BUFFER);
	cache_get_value_int(0, 0, count);
	cache_delete(result);
	return count;
}

GetRandomPropertyIndex()
{
	new index = -1;
	while(index == -1)
	{
		new tmpIndex = random(MAX_PROPIEDADES);
		if(PROPERTY_INFO[tmpIndex][property_VALID]) index = tmpIndex;
	}
	return index;
}

const RPC_VehicleDestroy = 136;
IRPC:RPC_VehicleDestroy(playerid, BitStream:bs)
{
	if(ac_Info[CHEAT_DESTROY_VEHICLE][ac_Enabled])
	{
		new vehicleid;
		BS_ReadUint16(bs, vehicleid);

		if(vehicleid <= 0 || vehicleid >= MAX_VEHICLES)
		{
			return 0;
		}

		if(PI[playerid][pi_LEVEL] < 3)
		{
			if( (vehicleid == GetPlayerVehicleID(playerid) && GLOBAL_VEHICLES[vehicleid][gb_vehicle_DRIVER] == playerid) || (PLAYER_VEHICLES[vehicleid][player_vehicle_VALID] && PLAYER_VEHICLES[vehicleid][player_vehicle_OWNER_ID] == PI[playerid][pi_ID]) )
			{
				return 1;
			}
			return 0;
		}

		if(!IsVehicleStreamedIn(vehicleid, playerid))
		{
			return 0;
		}

		new interval = GetTickDiff(GetTickCount(), PLAYER_TEMP[playerid][pt_LAST_VEHICLE_DESTROY]);
		if(interval < 500)
		{
			new current_gettime = gettime();
			if(current_gettime > PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_IMMUNITY])
			{
				if(!ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				else
				{
					if(current_gettime - PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] > ac_Info[CHEAT_DESTROY_VEHICLE][ac_Interval]) PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] = 0;
					else PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] ++;

					PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_LAST_DETECTION] = current_gettime;
					if(PLAYER_AC_INFO[playerid][CHEAT_DESTROY_VEHICLE][p_ac_info_DETECTIONS] >= ac_Info[CHEAT_DESTROY_VEHICLE][ac_Detections]) OnPlayerCheatDetected(playerid, CHEAT_DESTROY_VEHICLE);
				}
			}
			return 0;
		}
		PLAYER_TEMP[playerid][pt_LAST_VEHICLE_DESTROY] = GetTickCount();
	}
	return 1;
}

SetPropertyDefaultFurniture(index, bool:toggle)
{
	if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] != !toggle)
	{
		PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] = !toggle;
		mysql_format(mysql_db, QUERY_BUFFER, sizeof QUERY_BUFFER, "UPDATE properties SET dis_default_interior = %d WHERE id = %d;", PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR], PROPERTY_INFO[index][property_ID]);
		mysql_tquery(mysql_db, QUERY_BUFFER);

		new Float:z_pos = PROPERTY_INTERIORS[ PROPERTY_INFO[index][property_ID_INTERIOR] ][property_INT_Z];
		if(PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR]) z_pos += PROPERTY_EMPTY_INTERIOR_Z_OFFSET;
		Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, PROPERTY_INFO[index][property_INT_LABEL_ID], E_STREAMER_Z, z_pos + 0.25);
		Streamer_SetFloatData(STREAMER_TYPE_PICKUP, PROPERTY_INFO[index][property_INT_PICKUP_ID], E_STREAMER_Z, z_pos);

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(IsPlayerConnected(i) && (PI[i][pi_STATE] == ROLEPLAY_STATE_OWN_PROPERTY || PI[i][pi_STATE] == ROLEPLAY_STATE_GUEST_PROPERTY) && PI[i][pi_LOCAL_INTERIOR] == PROPERTY_INFO[index][property_ID])
			{
				new Float:pos[3], Float:angle;
				GetPlayerPos(i, pos[0], pos[1], pos[2]);
				GetPlayerFacingAngle(i, angle);

				SetPlayerPosEx(i, pos[0], pos[1], pos[2] + (PROPERTY_INFO[index][property_DIS_DEFAULT_INTERIOR] ? PROPERTY_EMPTY_INTERIOR_Z_OFFSET : -PROPERTY_EMPTY_INTERIOR_Z_OFFSET), angle, GetPlayerInterior(i), GetPlayerVirtualWorld(i), 1);
			}
		}

		CallLocalFunction("OnDefaultPFurChanged", "i", index);
	}
}

GetVehicleComponentIndexFromId(vehicleid, id)
{
	for(new i = 0; i != MAX_VEHICLE_COMPONENTS; i ++)
	{
		if(GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] && GLOBAL_VEHICLES[vehicleid][gb_vehicle_COMPONENTS][i] == id)
		{
			return i;
		}
	}
	return -1;
}

GetTerritoryIndexById(id)
{
	for(new i = 0; i != MAX_TERRITORIES; i ++)
	{
		if(TERRITORIES[i][territory_VALID] && TERRITORIES[i][territory_ID] == id) return i;
	}
	return -1;
}

TirarArma(playerid, weaponid)
{
	if(weaponid > 0)
	{
		new slot = WEAPON_INFO[weaponid][weapon_info_SLOT], ammo;
		GetPlayerWeaponData(playerid, slot, weaponid, ammo);
		if(weaponid > 0 && ammo > 0 && WEAPON_INFO[weaponid][weapon_info_DROP] && PLAYER_WEAPONS[playerid][slot][player_weapon_VALID] && PLAYER_WEAPONS[playerid][slot][player_weapon_ID] == weaponid)
		{
			new weaponInfo[E_DroppedWeapons];
			weaponInfo[dw_WEAPONID] = weaponid;
			weaponInfo[dw_AMMO] = ammo;
			weaponInfo[dw_WORLD] = GetPlayerVirtualWorld(playerid);
			weaponInfo[dw_INTERIOR] = GetPlayerInterior(playerid);

			GetPlayerPos(playerid, weaponInfo[dw_X], weaponInfo[dw_Y], weaponInfo[dw_Z]);

			weaponInfo[dw_OBJECTID] = CreateDynamicObject(WEAPON_INFO[weaponid][weapon_info_MODEL], weaponInfo[dw_X], weaponInfo[dw_Y], weaponInfo[dw_Z] - 1.0, 90.0, 0.0, float(random(360)), weaponInfo[dw_WORLD], weaponInfo[dw_INTERIOR]);


			new label_str[256];
			format(label_str, sizeof label_str, "{"#PRIMARY_COLOR"}%s\n{FFFFFF}Presiona {"#PRIMARY_COLOR"}[ H ] {FFFFFF}para recoger el objeto", WEAPON_INFO[weaponid][weapon_info_NAME]);
			weaponInfo[dw_LABELID] = CreateDynamic3DTextLabel(label_str, 0xFFFFFFFF, weaponInfo[dw_X], weaponInfo[dw_Y], weaponInfo[dw_Z] - 0.7, 5.0, .testlos = true, .interiorid = weaponInfo[dw_INTERIOR], .worldid = weaponInfo[dw_WORLD]);

			list_add_arr(DroppedWeapons, weaponInfo);
		}
	}
	return 1;
}
CMD:vrga(playerid, params[])
{
	SetPlayerPos(playerid, 6808.6948, 5335.9800 ,14.9625);
	return 1;
}

/* Posiciones predefinidas de cámaras (puedes definir más)
new Float:camaraPos[3] = {1545.6776, -1672.2843, 14.0461};       // Posición de la cámara
new Float:camaraLookAt[3] = {1539.5502, -1671.1682, 13.5469};    */// Hacia dónde mira la cámara

CMD:camm(playerid, params[])
{
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");

    // Coordenadas del lugar donde debe estar el jugador para usar el comando
    if (!IsPlayerInRangeOfPoint(playerid, 1.4, 256.9269, 63.6477, 1003.6406))
        return SendNotification(playerid, "Debes estar en la sala de monitores para usar las cámaras.");

    new camID;
    if (sscanf(params, "d", camID)) return SendNotification(playerid, "~w~Uso: ~r~/camm [id]");

    switch(camID)
    {
        case 1:
        {
            SetPlayerVirtualWorld(playerid, 0); // Asegura que esté en el mundo correcto
            SetPlayerInterior(playerid, 0);     // Exterior
            SetPlayerPos(playerid, 1545.6776, -1672.2843, 14.0461); // misma que la posición de la cámara
            SetPlayerCameraPos(playerid, 1545.6776,-1672.2843,14.0461);
            SetPlayerCameraLookAt(playerid, 1539.5502,-1671.1682,13.5469);
            TogglePlayerControllable(playerid, false);
            SendClientMessage(playerid, -1, "CAMARA 1: {41991E}=====BZZZZ=====");
        }
        case 2:
        {
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
            SetPlayerPos(playerid, 1545.6776, -1672.2843, 14.0461); // misma que la posición de la cámara
            SetPlayerCameraPos(playerid, 2000.0, 2000.0, 80.0);
            SetPlayerCameraLookAt(playerid, 2005.0, 2005.0, 80.0);
            TogglePlayerControllable(playerid, false);
            SendClientMessage(playerid, -1, "CAMARA 2: {41991E}=====BZZZZ=====");
        }
        default:
        {
            return SendNotification(playerid, "~r~Esa cámara no existe~w~.");
        }
    }

    SendNotification(playerid, "~w~Estás viendo una cámara de seguridad. Usa ~r~/offcam ~w~para volver.");
    return 1;
}

CMD:offcam(playerid, params[])
{
    SetPlayerPos(playerid, 256.9269, 63.6477, 1003.6406); // coordenadas de la sala de monitores
	SetPlayerInterior(playerid, 10);                     // tu interior original
	SetPlayerVirtualWorld(playerid, 0);                  // o el que usabas
	if(!PLAYER_WORKS[playerid][WORK_POLICE][pwork_SET]) return SendNotification(playerid, "No eres policía.");
	if(PLAYER_TEMP[playerid][pt_WORKING_IN] != WORK_POLICE) return SendNotification(playerid, "No estás de servicio como policía.");
	TogglePlayerControllable(playerid, true);      // Devuelve el control al jugador
	SetCameraBehindPlayer(playerid);               // Vuelve a la cámara normal
    SendNotification(playerid, "~r~Has salido de la cámara~w~.");
    return 1;
}

// Punto donde hay una TV en el mundo (ej: plaza)
new const Float:TV_PUNTO_ACCESO[3] = {1545.6776, -1672.2843, 14.0461}; // Cambia la ubicación según tu mapa

enum TVData
{
    Float:TVX,
    Float:TVY,
    Float:TVZ,
    Float:LookX,
    Float:LookY,
    Float:LookZ
};

new const TVs[][TVData] = {
    { 1468.0, -1740.0, 15.0, 1473.0, -1740.0, 15.0 }, // Canal 1
    { 1830.0, -1330.0, 15.0, 1835.0, -1330.0, 15.0 }, // Canal 2
    { 2500.0, -1670.0, 15.0, 2505.0, -1670.0, 15.0 }  // Canal 3
};

CMD:tv(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 1.8, TV_PUNTO_ACCESO[0], TV_PUNTO_ACCESO[1], TV_PUNTO_ACCESO[2]))
        return SendNotification(playerid, "Debes estar frente al televisor para sintonizar.");

    new tvID;
    if (sscanf(params, "d", tvID)) return SendNotification(playerid, "Uso: ~r~/tv [CANAL]~w~");

    if (tvID < 1 || tvID > sizeof(TVs))
        return SendNotification(playerid, "Ese canal no existe.");

    tvID -= 1;

    SetPlayerVirtualWorld(playerid, 999);
    SetPlayerPos(playerid, TVs[tvID][TVX], TVs[tvID][TVY], TVs[tvID][TVZ] - 1.0);
    TogglePlayerControllable(playerid, false);

    SetPlayerCameraPos(playerid, TVs[tvID][TVX], TVs[tvID][TVY], TVs[tvID][TVZ]);
    SetPlayerCameraLookAt(playerid, TVs[tvID][LookX], TVs[tvID][LookY], TVs[tvID][LookZ]);

    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM]);
    PlayerPlaySound(playerid, 1133, TVs[tvID][TVX], TVs[tvID][TVY], TVs[tvID][TVZ]);

    SendNotification(playerid, "~w~Estás viendo la televisión. Usa ~r~/offtv ~w~para salir.");
    return 1;
}

CMD:offtv(playerid, params[])
{
    TogglePlayerControllable(playerid, true);
    SetCameraBehindPlayer(playerid);
    SetPlayerPos(playerid, TV_PUNTO_ACCESO[0], TV_PUNTO_ACCESO[1], TV_PUNTO_ACCESO[2]);
    SetPlayerVirtualWorld(playerid, 0);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][ptextdraw_TV_SYSTEM]);

    SendNotification(playerid, "Has dejado de ver la TV.");
    return 1;
}

new bool:TransportandoCuerpo[MAX_PLAYERS];
new Float:CuerpoPos[MAX_PLAYERS][3];
new TransportaA[MAX_PLAYERS] = {-1};
new TimerCuerpo[MAX_PLAYERS] = {-1};

CMD:cargarpj(playerid, params[])
{
    if (TransportandoCuerpo[playerid]) return SendNotification(playerid, "Ya estas cargando a alguien.");

    new target = -1;
    new Float:px, Float:py, Float:pz;
    GetPlayerPos(playerid, px, py, pz);

    for (new i = 0; i < MAX_PLAYERS; i++) {
        if (IsPlayerConnected(i) && i != playerid) {
            new Float:health;
            GetPlayerHealth(i, health);

            if (health > 0.0 && health < 50.0) {
                new Float:tx, Float:ty, Float:tz;
                GetPlayerPos(i, tx, ty, tz);

                if (GetDistanceBetweenPoints3D(px, py, pz, tx, ty, tz) <= DISTANCIA_RECOGIDA) {
                    target = i;
                    break;
                }
            }
        }
    }

    if (target == -1) return SendNotification(playerid, "No tienes a nadie cerca para cargar.");

    GetPlayerPos(target, CuerpoPos[playerid][0], CuerpoPos[playerid][1], CuerpoPos[playerid][2]);
    TransportandoCuerpo[playerid] = true;

	// NUEVO
	TransportaA[playerid] = target;
	TimerCuerpo[playerid] = SetTimerEx("ActualizarCuerpo", 100, true, "ii", playerid, target);

	// Animación al herido
	ApplyAnimation(target, "CRACK", "crckidle2", 4.1, 1, 1, 1, 1, 0);
	
 	// Mensaje de acción
    new pname[MAX_PLAYER_NAME], tname[MAX_PLAYER_NAME], str[128];
    GetPlayerName(playerid, pname, sizeof(pname));
    GetPlayerName(target, tname, sizeof(tname));
    format(str, sizeof(str), "levanta a %s.", pname, tname);
    Auto_SendPlayerAction(playerid, str);

	SendNotification(playerid, "~w~Has recogido un cuerpo. Usa ~r~/dejacuerpo ~w~para dejarlo.");

	// YA NO necesitas animación para ti
	// ApplyAnimation(playerid, "PED", "WALK_CSAW", 2.0, 1, 1, 1, 1, 0);

    return 1;
}

CMD:soltarpj(playerid, params[])
{
    if (!TransportandoCuerpo[playerid]) return SendNotification(playerid, "No estás cargando ningún cuerpo.");

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    if (x != CuerpoPos[playerid][0] || y != CuerpoPos[playerid][1] || z != CuerpoPos[playerid][2]) {
        CuerpoPos[playerid][0] = x;
        CuerpoPos[playerid][1] = y;
        CuerpoPos[playerid][2] = z;
        SendNotification(playerid, "Has dejado el cuerpo en tu posición actual.");
    } else {
        SendNotification(playerid, "Has dejado el cuerpo en la posición original.");
    }
    
    // Acción en chat
    new pname[MAX_PLAYER_NAME], tname[MAX_PLAYER_NAME], str[128];
    GetPlayerName(playerid, pname, sizeof(pname));
    GetPlayerName(TransportaA[playerid], tname, sizeof(tname));
    format(str, sizeof(str), "suelta a %s.", pname, tname);
    Auto_SendPlayerAction(playerid, str);

    // NUEVO
    if (TimerCuerpo[playerid] != -1) {
        KillTimer(TimerCuerpo[playerid]);
        TimerCuerpo[playerid] = -1;
    }

    ClearAnimations(TransportaA[playerid]);
    
    TransportaA[playerid] = -1;
    TransportandoCuerpo[playerid] = false;

    ClearAnimations(playerid);

    return 1;
}

forward ActualizarCuerpo(cargadorid, heridoid);
public ActualizarCuerpo(cargadorid, heridoid)
{
    if (!IsPlayerConnected(cargadorid) || !IsPlayerConnected(heridoid)) return 0;
    if (!TransportandoCuerpo[cargadorid]) return 0;

    new Float:x, Float:y, Float:z;
    GetPlayerPos(cargadorid, x, y, z);

    SetPlayerPos(heridoid, x, y, z + 0.5);
    return 1;
}
//=======================================================================
//======================= BETA SERVICIOS SEXUALES =======================
//=======================================================================

/*
// ======================= COMANDO /condon =======================
CMD:condon(playerid, params[])
{
    HasCondom[playerid] = true;
    SendClientMessage(playerid, 0x00FF00FF, "¡Has comprado un condón! Úsalo para protegerte.");
    return 1;
}

CMD:servicio(playerid, params[])
{
    new targetid;
    if (sscanf(params, "u", targetid)) return SendClientMessage(playerid, 0xFF0000FF, "Uso: /servicio [ID jugador]");

    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, 0xFF0000FF, "Jugador no conectado.");

    if (InService[playerid] || InService[targetid])
        return SendClientMessage(playerid, 0xFF0000FF, "Alguien ya está en servicio.");

    // Marcamos como en servicio
    InService[playerid] = true;
    InService[targetid] = true;

    // Animaciones simuladas
    ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0);
    ApplyAnimation(targetid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 1, 0);

    // Pago automático (opcional)
    GivePlayerMoney(targetid, 500); // El jugador objetivo recibe dinero
    GivePlayerMoney(playerid, -500);

    // Probabilidad de contagio
    new rand = random(100);
    if (HasCondom[playerid] || HasCondom[targetid])
    {
        if (rand < 5) // 5% con condón
        {
            Infected[playerid] = true;
            SendClientMessage(playerid, 0xFF0000FF, "Te has contagiado con una ETS (a pesar de usar condón).");
        }
    }
    else
    {
        if (rand < 25) // 25% sin condón
        {
            Infected[playerid] = true;
            SendClientMessage(playerid, 0xFF0000FF, "¡Te has contagiado con una ETS!");
        }
    }

    // Quitar condón si se usó
    HasCondom[playerid] = false;
    HasCondom[targetid] = false;

    // Reset servicio después de 10 segundos
    SetTimerEx("ResetServicio", 10000, false, "dd", playerid, targetid);

    return 1;
}

// ======================= FUNCION RESET SERVICIO =======================
forward ResetServicio(playerid, targetid);
public ResetServicio(playerid, targetid)
{
    ClearAnimations(playerid);
    ClearAnimations(targetid);
    InService[playerid] = false;
    InService[targetid] = false;
    return 1;
}

// ======================= COMANDO /curar =======================
CMD:curarse(playerid, params[])
{
    if (!Infected[playerid])
        return SendClientMessage(playerid, 0x00FF00FF, "No tienes ninguna enfermedad.");

    Infected[playerid] = false;
    SendClientMessage(playerid, 0x00FF00FF, "Has sido curado por un médico. ¡Cuídate la próxima vez!");
    return 1;
}
//=====================================================================================================*/

CMD:cuerda(playerid, params[])
{
    if (!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, 0xFF0000FF, "¡No estás en un helicóptero!");

    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleModel(vehicleid);

    if (!(modelid == 487 || modelid == 497 || modelid == 563 || modelid == 469))
        return SendClientMessage(playerid, 0xFF0000FF, "¡Este vehículo no es un helicóptero!");

    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);

    SetPlayerPos(playerid, x, y, z - 2.0);
    RemovePlayerFromVehicle(playerid);
    TogglePlayerControllable(playerid, false);

    ApplyAnimation(playerid, "ped", "abseil", 4.1, 1, 0, 0, 1, 0);

    Deslizando[playerid] = true;

    SendClientMessage(playerid, 0x00FF00FF, "¡Comienzas a deslizarte con la cuerda!");
    return 1;
}

CMD:contratar(playerid, params[])
{
    if(g_PlayerRango[playerid] != 1) return SendClientMessage(playerid, -1, "No eres el jefe.");

    new targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, -1, "Usa: /contratar [id]");

    g_PlayerEmpresa[targetid] = EmpresaID;
    g_PlayerRango[targetid] = 2;

    new query[128];
    format(query, sizeof(query), "INSERT INTO empresa_empleados (player_id, empresa_id, rango) VALUES (%d, %d, 2) ON DUPLICATE KEY UPDATE empresa_id = %d, rango = 2", g_PlayerSQLID[targetid], EmpresaID, EmpresaID);
    mysql_tquery(MySQL, query);

    SendClientMessage(targetid, -1, "¡Has sido contratado en la empresa!");
    SendClientMessage(playerid, -1, "Has contratado al jugador.");
    return 1;
}

CMD:desppj(playerid, params[])
{
    if(g_PlayerRango[playerid] != 1) return SendClientMessage(playerid, -1, "No eres el jefe.");

    new targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, -1, "Usa: /despedir [id]");

    g_PlayerEmpresa[targetid] = 0;
    g_PlayerRango[targetid] = 0;

    new query[128];
    format(query, sizeof(query), "DELETE FROM empresa_empleados WHERE player_id = %d", g_PlayerSQLID[targetid]);
    mysql_tquery(MySQL, query);

    SendClientMessage(targetid, -1, "Has sido despedido de la empresa.");
    SendClientMessage(playerid, -1, "Has despedido al jugador.");
    return 1;
}

CMD:recogermaterial(playerid, params[])
{
    if(g_PlayerEmpresa[playerid] == 0) return SendClientMessage(playerid, -1, "No perteneces a ninguna empresa.");

    EmpresaMateriales += 1;
    GuardarEmpresa();
    SendClientMessage(playerid, -1, "Has recogido materiales. ¡Ve a fabricar!");
    return 1;
}

CMD:fabricar(playerid, params[])
{
    if(g_PlayerEmpresa[playerid] == 0) return SendClientMessage(playerid, -1, "No perteneces a ninguna empresa.");

    if(EmpresaMateriales <= 0) return SendClientMessage(playerid, -1, "No hay suficientes materiales.");

    EmpresaMateriales -= 1;
    EmpresaProductos += 1;

    GuardarEmpresa();
    SendClientMessage(playerid, -1, "Has fabricado un producto electrónico.");
    return 1;
}


/* Módulos */
#include "src/world_time.pwn"
#include "src/body_weapons.pwn"
#include "src/Velocimetro.pwn"
#include "src/taximetro.pwn"
#include "src/nears_players_dialog.pwn"
#include "src/robbery.pwn"
#include "src/hotdogs.pwn"
#include "src/air_velocimetro.pwn"
#include "src/notifications.pwn"
#include "src/air_veh_fuel.pwn"
#include "src/attachobjecttoobjectex.pwn"
#include "src/info_vars.pwn"
#include "src/jobs_best_employees.pwn"
#include "src/furniture_shop.pwn"
#include "src/property_objects.pwn"
#include "src/key_press.pwn"
#include "src/inventario.pwn"
#include "src/injured.pwn"
#include "src/works_tutorials.pwn"
#include "src/work_warehouse.pwn"
#include "src/work_deliveryman.pwn"
#include "src/drop_weapons.pwn"
#include "src/visible_items.pwn"
#include "src/boat_repair_points.pwn"
#include "src/ac_anticbug.pwn"
#include "src/ac_afkpos.pwn"
#include "src/shield_weapon.pwn"
#include "src/taser_gun_weapon.pwn"
#include "src/police_pdoor_kick.pwn"
#include "src/graffiti.pwn"
#include "src/send_ad.pwn"
#include "src/wasted.pwn"
#include "src/music.pwn"
#include "src/vehicle_objects.pwn"
